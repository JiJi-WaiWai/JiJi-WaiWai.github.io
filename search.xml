<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><span id="more"></span>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Scrapy框架</title>
    <url>/2021/09/07/Scrapy%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>写一个爬虫，需要做很多事情。比如：发送网络请求、数据解析、数据存储、反反爬虫机制（更换IP代理、设置请求头等）、异步请求等。这些工作如果每次都要写的话，比较浪费时间。因此Scrapy把一些基础东西封装好了，提高爬取效率和开发效率。</p>
<span id="more"></span>



<p>Scrapy官方文档：<a href="http://doc.scrapy.org/en/latest">http://doc.scrapy.org/en/latest</a></p>
<p>Scrapy中文文档：<a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html">http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html</a></p>
<p><strong>安装</strong>:</p>
<p>pip install scrapy</p>
<p>可能会出现的问题：</p>
<p>1,在windos系统下，提示错误ModuleNotFoundError:No module nmed ‘win32api’，那么先使用命令安装：pip install pypiwin32</p>
<p>2,如果安装时提示twisted安装有问题，那么先到这个网站下载twisted的whl文件：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/%EF%BC%8C%E6%A0%B9%E6%8D%AE%E8%87%AA%E5%B7%B1%E7%9A%84python%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E3%80%82%E4%B8%8B%E8%BD%BD%E5%AE%8C%E5%90%8E%EF%BC%8C%E5%86%8D%E4%BD%BF%E7%94%A8pip">https://www.lfd.uci.edu/~gohlke/pythonlibs/，根据自己的python版本下载。下载完后，再使用pip</a> install xxx.whl安装刚刚下载的文件。</p>
<h1 id="Scrapy框架架构介绍："><a href="#Scrapy框架架构介绍：" class="headerlink" title="Scrapy框架架构介绍："></a>Scrapy框架架构介绍：</h1><ol>
<li>Scrapy Engine（引擎）：Scrapy框架的核心部分。负责在Spider和ItemPipeline、Downloader、Scheduler中间通信、传递数据等。</li>
<li>Spider（爬虫）：发送需要爬取的链接给引擎，最后引擎把其他模块请求回来的数据再发送给爬虫，爬虫就去解析想要的数据。这个部分是我们开发者自己写的，因为要爬取哪些链接，页面中的哪些数据是需要的，都是由程序员自己决定。</li>
<li>Scheduler（调度器）：负责接收引擎发送过来的请求，并按照一定的方式进行排列和整理，负责调度请求的顺序等。</li>
<li>Downloader（下载器）：负责接收引擎传过来的下载请求，然后去网络上下载对应的数据再交还给引擎。</li>
<li>Item Pipeline（管道）：负责将Spider（爬虫）传递过来的数据进行保存。具体保存在哪里，应该看开发者自己的需求。</li>
<li>Downloader Middlewares（下载中间件）：可以扩展下载器和引擎之间通信功能的中间件。</li>
<li>Spider Middlewares（Spider中间件）：可以扩展引擎和爬虫之间通信功能的中间件。</li>
</ol>
<p><strong>工作流程：</strong></p>
<p><a href="https://imgtu.com/i/hIxYRI"><img src="https://z3.ax1x.com/2021/09/07/hIxYRI.png" alt="hIxYRI.png"></a></p>
<h1 id="创建项目："><a href="#创建项目：" class="headerlink" title="创建项目："></a>创建项目：</h1><p>用cmd创建项目，先进入到项目存放的目录。</p>
<p>1，创建项目：<br>scrapy startproject [项目名称]</p>
<p>2，进入项目，然后创建爬虫：<br>scrapy genspider [爬虫名称] [爬虫的作用域名]</p>
<p><strong>目录结构介绍</strong>：</p>
<p>items.py：用来存放爬虫爬取下来的数据的模型</p>
<p>middlewares.py：用来存放各种中间件的文件</p>
<p>pipelines.py：用来将items的模型存储到本地磁盘中</p>
<p>settings.py：本爬虫的一些配置信息（比如请求头、多久发送一次请求、ip代理池等）</p>
<p>scrapy.cfg：项目的配置文件</p>
<p>spiders包：以后所有的爬虫，对是存放到这个里面</p>
<h1 id="实战-古诗文网爬虫实战："><a href="#实战-古诗文网爬虫实战：" class="headerlink" title="实战-古诗文网爬虫实战："></a>实战-古诗文网爬虫实战：</h1><p>先在settings.py文件中配置：</p>
<ul>
<li><p>将ROBOTSTXT_OBEY改为False，表示不遵守机器人协议</p>
</li>
<li><p>在DEFAULT_REQUEST_HEADERS里添加请求头信息</p>
</li>
<li><p>ITEM_PIPELINES设置pipelines.py的优先级</p>
</li>
</ul>
<p>在cmd中输入命令：scrapy crawl [爬虫名称]，运行指定爬虫。每次都cmd手动输入会很麻烦，所以在项目中新建一个py文件，内容如下。运行该文件就相当于在cmd中输入了相关命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行该文件，相当于运行爬虫</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line">cmds = [<span class="string">&quot;scrapy&quot;</span>, <span class="string">&quot;crawl&quot;</span>, <span class="string">&quot;gsww_spider&quot;</span>]</span><br><span class="line">cmdline.execute(cmds)</span><br></pre></td></tr></table></figure>

<p>编写代码时，每次print打印时，会有大量其他不相关内容，因此分辨不清，所以自己定义了一个myprint方法，用myprint打印内容方便观察，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<h2 id="各文件代码如下："><a href="#各文件代码如下：" class="headerlink" title="各文件代码如下："></a>各文件代码如下：</h2><p>爬虫文件代码(gsww_spider)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> GswwItem  <span class="comment">#导入item模型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GswwSpiderSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;gsww_spider&#x27;</span>  <span class="comment">#爬虫名称</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;gushiwen.cn&#x27;</span>]   <span class="comment">#爬虫的作用域名</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.gushiwen.cn/default_1.aspx&#x27;</span>]   <span class="comment">#爬虫爬取的初始url</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span>   <span class="comment">#主要内容在这里面编写</span></span><br><span class="line">        bList = response.xpath(<span class="string">&quot;//div[@class=&#x27;left&#x27;]/div[@class=&#x27;sons&#x27;]/div[@class=&#x27;cont&#x27;]//b&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> bList:</span><br><span class="line">            title = b.xpath(<span class="string">&quot;./text()&quot;</span>).get()   <span class="comment">#标题</span></span><br><span class="line">            cont = b.xpath(<span class="string">&quot;..&quot;</span>).xpath(<span class="string">&quot;..&quot;</span>).xpath(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">            source = cont.xpath(<span class="string">&quot;./p[@class=&#x27;source&#x27;]/a/text()&quot;</span>).getall()</span><br><span class="line">            author = source[<span class="number">0</span>]   <span class="comment">#作者</span></span><br><span class="line">            dynasty = source[<span class="number">1</span>]  <span class="comment">#朝代</span></span><br><span class="line">            content = cont.xpath(<span class="string">&quot;./div[@class=&#x27;contson&#x27;]//text()&quot;</span>).getall()</span><br><span class="line">            content = <span class="string">&quot;&quot;</span>.join(content).strip()   <span class="comment">#内容</span></span><br><span class="line">            item = GswwItem(title=title, author=author, dynasty=dynasty, content=content)</span><br><span class="line">            <span class="keyword">yield</span> item    <span class="comment">#每次yield item，将item传入pipelines.py文件并调用,表示存储数据</span></span><br><span class="line">            </span><br><span class="line">        url = response.xpath(<span class="string">&quot;//a[@id=&#x27;amore&#x27;]/@href&quot;</span>).get()</span><br><span class="line">        <span class="comment">#response.urljoin(url)  域名+指定的url</span></span><br><span class="line">        <span class="keyword">if</span> url:</span><br><span class="line">            request = scrapy.Request(url)</span><br><span class="line">            <span class="keyword">yield</span> request   <span class="comment">#每次yield request，会重新调用所在的parse方法，表示发送请求</span></span><br></pre></td></tr></table></figure>

<p>items.py文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://docs.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GswwItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    dynasty = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br></pre></td></tr></table></figure>

<p>pipelines.py文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># useful for handling different item types with a single interface</span></span><br><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GswwPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span>   <span class="comment">#爬虫开始时调用，用于打开文件</span></span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&quot;古诗文.csv&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        self.writer = csv.writer(self.fp)</span><br><span class="line">        self.writer.writerow([<span class="string">&quot;title&quot;</span>, <span class="string">&quot;author&quot;</span>, <span class="string">&quot;dynasty&quot;</span>, <span class="string">&quot;content&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span>  <span class="comment">#存储数据操作放在该方法中</span></span><br><span class="line">        item_dict = <span class="built_in">dict</span>(item)</span><br><span class="line">        title = item_dict[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">        author = item_dict[<span class="string">&quot;author&quot;</span>]</span><br><span class="line">        dynasty = item_dict[<span class="string">&quot;dynasty&quot;</span>]</span><br><span class="line">        content = item_dict[<span class="string">&quot;content&quot;</span>]</span><br><span class="line">        self.writer.writerow([title, author, dynasty, content])</span><br><span class="line">        <span class="keyword">return</span> item   <span class="comment">#必须要</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span>   <span class="comment">#爬虫结束时调用，用于关闭文件</span></span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong><br> .xpath()，返回的都是SelectorList对象<br>SelectorList.getall()，直接获取里面指定的值，是个列表<br>SelectorList.get()，直接获取里面指定的第一个的值</p>
<h1 id="CrawlSpider爬虫"><a href="#CrawlSpider爬虫" class="headerlink" title="CrawlSpider爬虫"></a>CrawlSpider爬虫</h1><p>之前使用的spider，请求完url后，想要继续请求url需要自己手动yield request。创建方法：scrapy genspider [爬虫名称] [爬虫的作用域名]。</p>
<p>CrawlSpider继承spider，但是有新的功能。可以自己定义url规则，当scrapy碰到满足规则的url时，自动去访问该url，而不需要手动yield request。创建方法：scrapy genspider -t crawl  [爬虫名称] [爬虫的作用域名]。</p>
<h2 id="定义url规则"><a href="#定义url规则" class="headerlink" title="定义url规则"></a>定义url规则</h2><p>在rules中写规则。</p>
<h3 id="Rule规则类："><a href="#Rule规则类：" class="headerlink" title="Rule规则类："></a>Rule规则类：</h3><p>Rule(link_extractor, callback=None, follow=None, process_links=None)</p>
<p>主要参数讲解：</p>
<p>1，link_extractor： 一个LinkExtractor对象，用于定义爬取规则。</p>
<p>2，callback：满足规则的url，需要执行哪个回调函数。</p>
<p>3，follow：在访问的url中，如果还有符合规则的url，需不需要跟进（即继续访问）</p>
<p>4，process_links：从link_extractor中获取到链接后会传递给这个函数，用来过滤不需要访问的链接。</p>
<h3 id="LinkExtractors链接提取器："><a href="#LinkExtractors链接提取器：" class="headerlink" title="LinkExtractors链接提取器："></a>LinkExtractors链接提取器：</h3><p>主要参数讲解：</p>
<p>allow：允许的url，所有满足该正则表达式的url都会被提取。</p>
<p>deny：禁止的url，所有满足该正则表达式的url都不会被提取。</p>
<p>allow_domains：允许的域名，只有在该域名下的url才会被提取。</p>
<p>deny_domains：禁止的域名，在该域名下的url都不会被提取。</p>
<p>restrict_xpaths：严格的xpath。和allow共同过滤链接。指定某个xpath规定的范围内的url。</p>
<h2 id="实战-猎云网爬虫："><a href="#实战-猎云网爬虫：" class="headerlink" title="实战-猎云网爬虫："></a>实战-猎云网爬虫：</h2><p>要求：使用CrawlSpider爬虫爬取，然后异步保存到mysql数据库</p>
<p>网站：<a href="https://www.lieyunwang.com/">https://www.lieyunwang.com/</a></p>
<p>步骤：</p>
<p>创建项目，创建CrawlSpider，在settings.py文件中更改配置信息</p>
<ul>
<li>将ROBOTSTXT_OBEY改为False，表示不遵守机器人协议</li>
<li>在DEFAULT_REQUEST_HEADERS里添加请求头信息</li>
<li>ITEM_PIPELINES设置pipelines.py的优先级</li>
</ul>
<p>爬虫文件(gsww_spider)代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> LywItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;lyw_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;lieyunwang.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.lieyunwang.com/&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">	<span class="comment">#定义的规则</span></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;latest/p\d+\.html&#x27;</span>), follow=<span class="literal">True</span>),</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;archives/\d+&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">False</span>),</span><br><span class="line">        <span class="comment"># Rule(LinkExtractor(allow=r&#x27;latest/p1\.html&#x27;), follow=True),</span></span><br><span class="line">        <span class="comment"># Rule(LinkExtractor(allow=r&#x27;archives/477777&#x27;), callback=&#x27;parse_item&#x27;, follow=False),</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        title = response.xpath(<span class="string">&quot;//h1[@class=&#x27;lyw-article-title-inner&#x27;]/text()&quot;</span>).getall()</span><br><span class="line">        title = <span class="string">&#x27;&#x27;</span>.join(title).strip()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            date = response.xpath(<span class="string">&quot;//div[@id=&#x27;main-text-id&#x27;]/p[1]//text()&quot;</span>).getall()[<span class="number">2</span>]</span><br><span class="line">            date = re.search(<span class="string">&#x27;】(.+)报道&#x27;</span>, date).group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            date = <span class="string">&quot;NULL&quot;</span></span><br><span class="line">        content = response.xpath(<span class="string">&quot;//div[@id=&#x27;main-text-id&#x27;]//text()&quot;</span>).getall()</span><br><span class="line">        content = <span class="string">&#x27;&#x27;</span>.join(content).strip()</span><br><span class="line">        origin = response.url</span><br><span class="line"></span><br><span class="line">        item = LywItem(title=title, date=date, content=content, origin=origin)</span><br><span class="line">        <span class="keyword">return</span> item   <span class="comment">#这里可以不使用yield item.</span></span><br></pre></td></tr></table></figure>

<p>item.py 文件代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    date = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br><span class="line">    origin = scrapy.Field()</span><br></pre></td></tr></table></figure>

<p>1，正常保存到mysql数据库，没有使用异步</p>
<p>pipelines.py文件代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#正常不使用异步保存到mysql数据库</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.con = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;root&quot;</span>, database=<span class="string">&quot;de&quot;</span>, charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">        self.cursor = self.con.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        insert into lyw_info (title, the_date, content, origin) value (%s, %s, %s, %s)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        args = (item[<span class="string">&quot;title&quot;</span>], item[<span class="string">&quot;date&quot;</span>], item[<span class="string">&quot;content&quot;</span>], item[<span class="string">&quot;origin&quot;</span>])</span><br><span class="line">        self.cursor.execute(sql, args)</span><br><span class="line">        self.con.commit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.con.close()</span><br></pre></td></tr></table></figure>

<p>2，使用异步，保存到mysql数据库</p>
<p><strong>异步操作数据库的方法</strong>：</p>
<ul>
<li>使用<code>twisted.enterprise.adbapi</code>来创建连接池ConnectionPool。</li>
<li>连接池使用<code>runInteraction</code>函数来运行执行sql语句的函数。</li>
<li>执行sql语句的函数中，第一个非self参数是cursor对象，使用该对象的execute执行sql语句。</li>
</ul>
<p><strong>实际步骤</strong>：</p>
<p>先在settings.py文件中配置数据库信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MYSQL_CONFIG = &#123;</span><br><span class="line">    <span class="string">&#x27;DRIVER&#x27;</span>: <span class="string">&#x27;pymysql&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DATABASE&#x27;</span>: <span class="string">&#x27;de&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CHARSET&#x27;</span>: <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后pipelines.py文件代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.enterprise <span class="keyword">import</span> adbapi</span><br><span class="line"></span><br><span class="line"><span class="comment">##异步保存到mysql数据库</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, mysql_config</span>):</span></span><br><span class="line">        <span class="comment"># 1,创建连接池，配置好数据库。</span></span><br><span class="line">        self.dbPoll = adbapi.ConnectionPool(</span><br><span class="line">            mysql_config[<span class="string">&quot;DRIVER&quot;</span>],</span><br><span class="line">            host=mysql_config[<span class="string">&#x27;HOST&#x27;</span>],</span><br><span class="line">            port=mysql_config[<span class="string">&#x27;PORT&#x27;</span>],</span><br><span class="line">            user=mysql_config[<span class="string">&quot;USER&quot;</span>],</span><br><span class="line">            password=mysql_config[<span class="string">&quot;PASSWORD&quot;</span>],</span><br><span class="line">            database=mysql_config[<span class="string">&#x27;DATABASE&#x27;</span>],</span><br><span class="line">            charset=mysql_config[<span class="string">&#x27;CHARSET&#x27;</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="comment">#只要重写了该from_crawler类方法，创建对象的时候，会自动掉用该方法获取pipeline对象。</span></span><br><span class="line">    <span class="comment">#这里用来获取保存在settings.py中的数据库配置信息,mysql_config。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls,crawler</span>):</span></span><br><span class="line">        mysql_config = crawler.settings[<span class="string">&quot;MYSQL_CONFIG&quot;</span>]</span><br><span class="line">        <span class="keyword">return</span> cls(mysql_config)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="comment">#2，使用`runInteraction`函数来运行执行sql语句的函数，还可以传递参数给执行sql语句的函数，比如item</span></span><br><span class="line">        self.dbPoll.runInteraction(self.inset_item, item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inset_item</span>(<span class="params">self,cursor,item</span>):</span></span><br><span class="line">        <span class="comment">#3，该函数为执行sql语句的函数。第一个非self参数是cursor对象，item参数是`runInteraction`函数传递过来的。</span></span><br><span class="line">        sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        insert into lyw_info (title, the_date, content, origin) value (%s,%s,%s,%s)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        args = (item[<span class="string">&#x27;title&#x27;</span>], item[<span class="string">&#x27;date&#x27;</span>], item[<span class="string">&#x27;content&#x27;</span>], item[<span class="string">&#x27;origin&#x27;</span>])</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        <span class="comment">#关闭连接池</span></span><br><span class="line">        self.dbPoll.close()</span><br></pre></td></tr></table></figure>



<p>出现的问题点：scrapy运行正常，pipeline管道经过测试是没有运行的。判断已经主要是并没有创建设置的IMAGES_STORE<br>提前指出解决的办法，主要是没有依赖处理图片的第三库pillow</p>
<p>pip install -i <a href="https://pypi.doubanio.com/simple/">https://pypi.doubanio.com/simple/</a> –trusted-host pypi.doubanio.com pillow</p>
<h1 id="scrapy下载图片"><a href="#scrapy下载图片" class="headerlink" title="scrapy下载图片"></a>scrapy下载图片</h1><p><strong>流程：</strong></p>
<p>1，解析图片的url</p>
<p>2，定义item。item中必须要有image_urls和images两个字段。image_urls中存放图片的url。</p>
<p>3，在settings.py中，使用scrapy.pipelines.images.ImagesPipeline来作为数据保存的pipeline。</p>
<p>4，在settings.py中，设置IMAGE_STORE来定义图片下载的路径。</p>
<p>此时，只操作以上步骤的话。指定的IMAGE_STORE路径中会自动生成full文件夹，所有图片保存在里面。</p>
<p>5，如果想要有更复杂的图片保存路径的需求。先在settings.py中，关掉第2步的‘scrapy.pipelines.images.ImagesPipeline’，打开‘zcool.pipelines.ZcoolPipeline’。然后在pipelines.py中重写ImagePipiline类的file_path方法。该方法用来返回每个图片的保存路径。</p>
<p>6，但是file_path方法中没有item对象。如果想要item对象的话，我们还需要重写ImagePipline类的get_media_requests方法,来把item绑定到request上。</p>
<h2 id="实战-zcool网站下载图片"><a href="#实战-zcool网站下载图片" class="headerlink" title="实战-zcool网站下载图片"></a>实战-zcool网站下载图片</h2><p>网站：<a href="https://www.zcool.com.cn/">https://www.zcool.com.cn/</a></p>
<p>把相同作品的图片下载到用一个文件夹，文件夹名就为作品名称</p>
<p><strong>实际步骤如下：</strong>（对照上面的流程）</p>
<p>创建scrapy项目，创建crawlSpider，在settings.py中更改配置，如不遵守机器人协议，请求头</p>
<p>流程一，zcool_spider.py文件代码：(访问网站，解析图片url)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> ZcoolItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZcoolSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;zcool_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;zcool.com.cn&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.zcool.com.cn/home?p=1#tab_anchor&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;home\?p=\d+#tab_anchor&#x27;</span>), follow=<span class="literal">True</span>),</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;work/.+=\.html&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">40</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        title = response.xpath(<span class="string">&quot;//div[@class=&#x27;details-contitle-box&#x27;]/h2/text()&quot;</span>).getall()</span><br><span class="line">        title = <span class="string">&#x27;&#x27;</span>.join(title).strip()</span><br><span class="line">        image_urls = response.xpath(<span class="string">&quot;//div[@class=&#x27;reveal-work-wrap js-sdata-box text-center&#x27;]//img/@src&quot;</span>).getall()</span><br><span class="line"></span><br><span class="line">        item = ZcoolItem(title=title, image_urls=image_urls)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<p>流程二，item.py文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZcoolItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment">#image_urls 和 images必须要有。</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    image_urls = scrapy.Field()</span><br><span class="line">    images = scrapy.Field()</span><br></pre></td></tr></table></figure>

<p>流程三四，配置settings.py文件：<br>1，设置ITEM_PIPELINES，如果图片放在一起就开启scrapy.pipelines.images.ImagesPipeline；如果有其他存放路径需求，就开启zcool.pipelines.ZcoolPipeline，并接着下一步在pipelines.py文件中重写方法</p>
<p>2，添加IMAGES_STORE，是图片的保存目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   &#x27;zcool.pipelines.ZcoolPipeline&#x27;: 300,</span><br><span class="line">   #  &#x27;scrapy.pipelines.images.ImagesPipeline&#x27;: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IMAGES_STORE = os.path.join(os.path.dirname(os.path.dirname(__file__)),&#x27;images&#x27;)</span><br></pre></td></tr></table></figure>

<p>流程五六，在pipelines.py文件中，重写ImagePipiline类的file_path方法和get_media_requests方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"><span class="keyword">from</span> scrapy.pipelines.images <span class="keyword">import</span> ImagesPipeline</span><br><span class="line"><span class="keyword">from</span> zcool <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZcoolPipeline</span>(<span class="params">ImagesPipeline</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span>(<span class="params">self, item, info</span>):</span></span><br><span class="line">        <span class="comment">#重写该方法的目的是，把item绑定在request上面，然后下面的file_path方法可以访问到item</span></span><br><span class="line">        media_requests = <span class="built_in">super</span>(ZcoolPipeline, self).get_media_requests(item, info)</span><br><span class="line">        <span class="keyword">for</span> media_request <span class="keyword">in</span> media_requests:</span><br><span class="line">            media_request.item = item</span><br><span class="line">        <span class="keyword">return</span> media_requests</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_path</span>(<span class="params">self, request, response=<span class="literal">None</span>, info=<span class="literal">None</span></span>):</span></span><br><span class="line">        orige_path = <span class="built_in">super</span>(ZcoolPipeline, self).file_path(request, response, info)</span><br><span class="line"></span><br><span class="line">        title = request.item[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">        title = re.sub(<span class="string">r&#x27;[/\\:\*\?&quot;&lt;&gt;\|]&#x27;</span>,<span class="string">&quot;_&quot;</span>,title)</span><br><span class="line">        image_path = os.path.join(settings.IMAGES_STORE,title)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(image_path):</span><br><span class="line">            os.mkdir(image_path)</span><br><span class="line">        image_name = orige_path.replace(<span class="string">&quot;full/&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">		<span class="comment">#返回值就是每个图片的保存路径</span></span><br><span class="line">        <span class="keyword">return</span> os.path.join(image_path, image_name)</span><br></pre></td></tr></table></figure>

<p>注意：创建文件夹时，名称不可用包含九种特殊符号。<br>我们的处理方式：<code>title = re.sub(r&#39;[/\\:\*\?&quot;&lt;&gt;\|]&#39;,&quot;_&quot;,title)</code></p>
<h1 id="下载器中间件："><a href="#下载器中间件：" class="headerlink" title="下载器中间件："></a>下载器中间件：</h1><p>Downloader Middlewares（下载中间件）是：引擎和下载器通信的中间件。在这个中间件里，可以设置ip代理、更换请求头等。主要有两个方法：</p>
<p>process_request(self, request, spider)：发送请求前调用</p>
<p>process_response(self, request, response, spider)：数据下载到引擎前调用</p>
<p><a href="https://imgtu.com/i/5At6je"><img src="https://z3.ax1x.com/2021/10/10/5At6je.png" alt="5At6je.png"></a></p>
<h2 id="process-request-self-request-spider"><a href="#process-request-self-request-spider" class="headerlink" title="process_request(self, request, spider)"></a>process_request(self, request, spider)</h2><p>下载器发送请求前调用，这里可以设置IP代理、请求头等</p>
<p>返回值：</p>
<p>1，None：scrapy继续处理request，直到下载器被调用。</p>
<p>2，Request对象：不再使用之前的request对象，而是使用新的request对象。</p>
<p>3，Response对象：scrapy不再调用process_request方法，直接返回response，调用已激活的中间件的process_response方法。</p>
<p>4，如果方法抛出异常，会调用process_exception方法。</p>
<h2 id="process-response-self-request-response-spider"><a href="#process-response-self-request-response-spider" class="headerlink" title="process_response(self, request, response, spider)"></a>process_response(self, request, response, spider)</h2><p>下载器下载的数据到引擎中间会执行的方法。</p>
<p>返回值：</p>
<p>1，Response对象：会将这个新的response对象返回给其他中间件，直到引擎。</p>
<p>2，Request对象：下载器被切断，返回的request会重新被下载器调度下载。</p>
<p>3，如果抛出异常，会调用requst的errback方法。</p>
<h2 id="随机更换请求头User-Agent"><a href="#随机更换请求头User-Agent" class="headerlink" title="随机更换请求头User-Agent"></a>随机更换请求头User-Agent</h2><p>介绍fake_useragent包：</p>
<p><strong>fake_useragent</strong>模块用来伪造User-Agent的。下载：<code>pip install fake_useragent</code></p>
<p>用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line">ua = UserAgent()</span><br><span class="line">ua.ie       //ie浏览器的user-agent</span><br><span class="line">ua.chrome	//谷歌浏览器的user-agent</span><br><span class="line">ua.firefox  //火狐浏览器的user-agent</span><br><span class="line">ur.random   //任意浏览器的user-agent</span><br></pre></td></tr></table></figure>

<p>如果使用时报错：fake_useragent.errors.FakeUserAgentError: Maximum amount of retries reached。解决方法：</p>
<p>1，找到python》Lib》site-packages》fake_useragent》settings.py</p>
<p>2，打开后，把16行附近的’CACHE_SERVER’属性中的’https‘改成’http‘</p>
<p>3，然后运行程序，依旧会报错，但是出现了一个结果。然后再次运行程序，运行正常。</p>
<p><strong>更换请求头User-Agent步骤：</strong></p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UseragentSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;userAgent&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;httpbin.org&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://httpbin.org/user-agent&#x27;</span>]   <span class="comment">#该网址直接返回请求的user-agent</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(self.start_urls[<span class="number">0</span>], dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>middlewares.py文件代码：(重点)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAgentDownloadmiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        ua = UserAgent()</span><br><span class="line">        request.headers[<span class="string">&quot;User-Agent&quot;</span>] = ua.random</span><br></pre></td></tr></table></figure>

<p>开启这个中间件，在settings.py中设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">&#x27;downloadmiddleware.middlewares.UserAgentDownloadmiddleware&#x27;</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置IP代理："><a href="#设置IP代理：" class="headerlink" title="设置IP代理："></a>设置IP代理：</h2><p>芝麻代理：<a href="http://www.zhimaruanjian.com/">http://www.zhimaruanjian.com</a></p>
<p>流程：</p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpproxySpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;ipProxy&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;httpbin.org&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://httpbin.org/ip&#x27;</span>]  //该网址直接返回请求的ip</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(self.start_urls[<span class="number">0</span>], dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>middlewares.py文件代码：（重点）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpProxyDownloadmiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    proxies = [   //购买的代理</span><br><span class="line">        &#123;<span class="string">&quot;ip&quot;</span>:<span class="string">&quot;223.242.9.160&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="number">4245</span>,<span class="string">&quot;expire_time&quot;</span>:<span class="string">&quot;2021-10-10 13:40:46&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;ip&quot;</span>:<span class="string">&quot;124.94.187.11&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="number">4224</span>,<span class="string">&quot;expire_time&quot;</span>:<span class="string">&quot;2021-10-10 13:40:46&quot;</span>&#125;,</span><br><span class="line">               ]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        proxy = random.choice(self.proxies)   //随机选择一个代理</span><br><span class="line">        <span class="comment"># 格式  http://223.242.9.160:4245</span></span><br><span class="line">        proxy_url = <span class="string">&quot;http://&quot;</span> + proxy[<span class="string">&quot;ip&quot;</span>] + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(proxy[<span class="string">&quot;port&quot;</span>])</span><br><span class="line">        request.meta[<span class="string">&quot;proxy&quot;</span>] = proxy_url</span><br></pre></td></tr></table></figure>

<p>开启这个中间件，在settings.py中设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">&#x27;downloadmiddleware.middlewares.IpProxyDownloadmiddleware&#x27;</span>: <span class="number">200</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开放代理池：上面这种购买的代理ip属于开放代理池，就是一下买多个代理ip，这些ip随便使用，时间比较短。</p>
<p>独享代理：只买一个代理，这个代理ip时间会比较长，而且还有密码。</p>
<p>独享代理的使用例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpProxyDownloadmiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        proxy = <span class="string">&#x27;121.99.4.124:16816&#x27;</span>  //代理ip</span><br><span class="line">        pwd = <span class="string">&quot;156486:fjkdf4s&quot;</span>		  //密码</span><br><span class="line">        request.meta[<span class="string">&quot;proxy&quot;</span>] = proxy</span><br><span class="line">        <span class="comment">#密码要base64加密</span></span><br><span class="line">        pwd_b64 = base64.b64encode(pwd.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="comment">#代理授权</span></span><br><span class="line">        request.headers[<span class="string">&#x27;Proxy-Authorization&#x27;</span>] = <span class="string">&#x27;Basic &#x27;</span> + paw_b64.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="实战-更换代理爬取猎聘网："><a href="#实战-更换代理爬取猎聘网：" class="headerlink" title="实战-更换代理爬取猎聘网："></a>实战-更换代理爬取猎聘网：</h1><p>网址：<a href="https://www.liepin.com/">https://www.liepin.com/</a></p>
<p>要求：搜索python，把有关python的职位信息爬取下来，爬取时需要自动更换代理。</p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> LiepinItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiepinSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;liepin_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;liepin.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.liepin.com/zhaopin/?headId=5299daf02f40ea2f23991628fa127774&amp;ckId=5299daf02f40ea2f23991628fa127774&amp;key=python&amp;currentPage=0&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;job/\d+\.shtml.*&#x27;</span>, restrict_xpaths=[<span class="string">&quot;//div[@class=&#x27;left-list-box&#x27;]/ul/li//div[@class=&#x27;job-detail-box&#x27;]/a[1]&quot;</span>]),callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">40</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        title = response.xpath(<span class="string">&quot;//span[@class=&#x27;name ellipsis-1&#x27;]/text()&quot;</span>).get()</span><br><span class="line">        company_1 = response.xpath(<span class="string">&quot;//div[@class=&#x27;title-box&#x27;]/span[1]//text()&quot;</span>).getall()</span><br><span class="line">        company_1 = <span class="string">&quot;&quot;</span>.join(company_1).strip()</span><br><span class="line">        company_2 = response.xpath(<span class="string">&quot;//div[@class=&#x27;title-box&#x27;]/span[2]//text()&quot;</span>).getall()</span><br><span class="line">        company_2 = <span class="string">&quot;&quot;</span>.join(company_2).strip()</span><br><span class="line">        company = company_1 + company_2</span><br><span class="line">        city = response.css(<span class="string">&quot;.job-properties&gt;span:nth-child(1)::text&quot;</span>).get()</span><br><span class="line">        experience = response.css(<span class="string">&quot;.job-properties&gt;span:nth-child(3)::text&quot;</span>).get()</span><br><span class="line">        edu = response.css(<span class="string">&quot;.job-properties&gt;span:nth-child(5)::text&quot;</span>).get()</span><br><span class="line">        salary = response.css(<span class="string">&quot;.salary::text&quot;</span>).get()</span><br><span class="line">        desc_list = response.css(<span class="string">&quot;.paragraph&gt;dd::text&quot;</span>).getall()</span><br><span class="line">        desc = <span class="string">&quot;&quot;</span>.join(desc_list).strip()</span><br><span class="line"></span><br><span class="line">        item = LiepinItem(title=title, company=company, city=city, experience=experience, edu=edu, salary=salary, desc=desc)</span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">        current_page = response.request.headers[<span class="string">&quot;Referer&quot;</span>].decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        page_num = <span class="built_in">int</span>( re.search(<span class="string">&quot;.*currentPage=(\d+)&quot;</span>,current_page).group(<span class="number">1</span>) )</span><br><span class="line">        next_page = <span class="string">&quot;https://www.liepin.com/zhaopin/?headId=5299daf02f40ea2f23991628fa127774&amp;ckId=5299daf02f40ea2f23991628fa127774&amp;key=python&amp;currentPage=&quot;</span> + <span class="built_in">str</span>( page_num+<span class="number">1</span> )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=next_page)</span><br></pre></td></tr></table></figure>

<p>items.py文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiepinItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    company = scrapy.Field()</span><br><span class="line">    city = scrapy.Field()</span><br><span class="line">    experience = scrapy.Field()</span><br><span class="line">    edu = scrapy.Field()</span><br><span class="line">    salary = scrapy.Field()</span><br><span class="line">    desc = scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>pipelines.py文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiepinPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&quot;zhaopin.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        self.fp.write( json.dumps(<span class="built_in">dict</span>(item), ensure_ascii=<span class="literal">False</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure>

<p>middlewares.py文件代码：（重点，这里设置代理）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json, requests</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Proxy</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyDownloadMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.current_proxy = <span class="literal">None</span></span><br><span class="line">        self.update_proxy()</span><br><span class="line">        self.lock = threading.Lock</span><br><span class="line">        <span class="comment">#创建一个线程，每60秒自动更换ip，或者ip被黑名单更换ip</span></span><br><span class="line">        th1 = threading.Thread(target=self.update_proxy_in_threading)</span><br><span class="line">        th1.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        request.meta[<span class="string">&quot;proxy&quot;</span>] = self.current_proxy.proxy_url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response, spider</span>):</span></span><br><span class="line">        <span class="keyword">if</span> response.status != <span class="number">200</span>:   <span class="comment">#状态码不等于200就当作ip被黑名单了</span></span><br><span class="line">            self.lock.acquire()</span><br><span class="line">            self.current_proxy.is_blacked = <span class="literal">True</span></span><br><span class="line">            self.lock.release()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;IP代理被禁用了&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">            <span class="keyword">return</span> request</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_proxy</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#获取IP代理，自己去买</span></span><br><span class="line">        resp = requests.get(<span class="string">&quot;购买的直连ip网址&quot;</span>)</span><br><span class="line">        proxy_dict = json.loads(resp.text)</span><br><span class="line">        proxy = Proxy(proxy_dict)    <span class="comment">#自己定义的Proxy模型类，下面有</span></span><br><span class="line">        self.current_proxy = proxy</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;更换了一次IP代理&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_proxy_in_threading</span>(<span class="params">self</span>):</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> count&gt;=<span class="number">6</span> <span class="keyword">or</span> self.current_proxy.is_blacked:</span><br><span class="line">                self.update_proxy()</span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>Proxy模型类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span>():</span></span><br><span class="line">    <span class="comment"># proxy的模型，方便管理</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, proxy_dict</span>):</span></span><br><span class="line">        data = proxy_dict[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>]</span><br><span class="line">        self.proxy_url = <span class="string">&quot;https://&quot;</span> + data[<span class="string">&quot;ip&quot;</span>] + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(data[<span class="string">&quot;port&quot;</span>])</span><br><span class="line">        self.is_blacked = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>最后在settings.py中将该下载器中间件启用。</p>
<h1 id="scrapy集成selenium爬取网页"><a href="#scrapy集成selenium爬取网页" class="headerlink" title="scrapy集成selenium爬取网页"></a>scrapy集成selenium爬取网页</h1><p>在scrapy爬取网址时，有时因为需要加载ajax或者需要点击某个按钮后，需要的数据才能完整展示出来，可以在scrapy中写selenium解决这个问题。</p>
<p><strong>流程：</strong>下载器中间件的process_request(self, request, spider)方法，发送请求时调用，即发送请求前截拦，然后执行该方法。所以在该方法内，用selenium发送请求，处理，再封装成response对象返回。</p>
<p>1，截拦原始请求。<br>2，用selenium请求。<br>3，将selenium请求的数据封装成response对象并返回。</p>
<p><em><strong>案例：</strong></em></p>
<p>爬取简书网站：<a href="http://jianshu.com/%EF%BC%8C%E7%AE%80%E4%B9%A6%E5%8F%91%E8%A1%A8%E7%9A%84%E6%96%87%E7%AB%A0%E4%B8%8B%E9%9D%A2%E6%9C%89%E6%98%BE%E7%A4%BA%E8%A2%AB%E6%9F%90%E6%9F%90%E4%B8%93%E9%A2%98%E6%94%B6%E5%85%A5%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%B8%93%E9%A2%98%E5%A4%9A%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%8F%AA%E4%BC%9A%E6%98%BE%E7%A4%BA%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%8C%E9%9C%80%E8%A6%81%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E2%80%9C%E5%B1%95%E5%BC%80%E6%9B%B4%E5%A4%9A%E2%80%9D%E6%89%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%85%A8%E9%83%A8%E3%80%82">http://jianshu.com/，简书发表的文章下面有显示被某某专题收入，如果专题多的话，只会显示一部分，需要点击按钮“展开更多”才能显示全部。</a></p>
<p>爬取简书，然后用selenium执行点击“展开更多”按钮后，把数据返回。</p>
<p><strong>代码如下：</strong></p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JianshuSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;jianshu_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;jianshu.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://jianshu.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;p/[0-9a-z]&#123;12&#125;&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>),</span><br><span class="line">        <span class="comment"># Rule(LinkExtractor(allow=r&#x27;p/dbc69681575f&#x27;), callback=&#x27;parse_item&#x27;, follow=True),</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">40</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        zhuantis = response.xpath(<span class="string">&quot;//div[@class=&#x27;_21bLU4 _3kbg6I&#x27;]/div[1]/div[1]/section[position()=3]/div[1]//text()&quot;</span>).getall()</span><br><span class="line">        self.myprint(zhuantis)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>middlewares.py文件：（<strong>重点</strong>）（记得在settings.py中开启）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> scrapy.http.response.html <span class="keyword">import</span> HtmlResponse   <span class="comment">#封装response对象用的。</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JianshuDownloaderMiddleware</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver_path = <span class="string">&quot;D:/webDriver/chromedriver_win32_95.exe&quot;</span></span><br><span class="line">        self.driver = webdriver.Chrome(executable_path=self.driver_path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="comment">#1,只要写了该方法就相当于截拦了原始请求</span></span><br><span class="line">        <span class="comment">#2，用selenium请求，并处理，点击“展开更多”按钮</span></span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">r&quot;.*?\.com/p/[0-9a-z]&#123;12&#125;&quot;</span>, request.url):</span><br><span class="line">            self.driver.get(request.url)</span><br><span class="line"></span><br><span class="line">            btn_path = <span class="string">&quot;//div[@class=&#x27;_21bLU4 _3kbg6I&#x27;]/div[1]/div[1]/section[position()=3]/div[1]/div[1]&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                WebDriverWait(self.driver, <span class="number">10</span>).until(</span><br><span class="line">                    EC.element_to_be_clickable((By.XPATH, btn_path))</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                response = HtmlResponse(request.url, body=self.driver.page_source, request=request, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    btn = self.driver.find_element_by_xpath(btn_path)</span><br><span class="line">                    self.driver.execute_script(<span class="string">&quot;arguments[0].click()&quot;</span>, btn)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="comment">#3，最后把selenium访问的网页数据，封装成response对象并返回</span></span><br><span class="line">            response = HtmlResponse(request.url, body=self.driver.page_source, request=request, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> response    <span class="comment">#这个返回的response给爬虫文件中的response对象。</span></span><br></pre></td></tr></table></figure>










































]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>python</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>动态网页爬虫</title>
    <url>/2021/09/07/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p>动态网页：是网站在不重新加载的情况下，通过ajax技术动态更新网站中的局部数据。直接查看网页源代码是找不到数据的。</p>
<span id="more"></span>

<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>1，直接分析ajax调用的接口。然后通过代码请求这个接口。（上面的“爬虫实战1-多线程爬取王者荣耀壁纸”就是这种方案解决的）</p>
<p>2，使用Selenium+chromedriver模拟浏览器行为获取数据。</p>
<table>
<thead>
<tr>
<th align="center">方式</th>
<th align="center">优点</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">分析接口</td>
<td align="center">直接可以请求到数据。不需要做一些解析工作。代码量少，性能高</td>
<td align="center">分析接口比较复杂，特别是一些通过js混淆的接口，要有一定的js功底。容易别发现是爬虫。</td>
</tr>
<tr>
<td align="center">selenium</td>
<td align="center">直接模拟浏览器的行为。浏览器能请求到的，使用selenium也能请求到。爬虫更稳定</td>
<td align="center">代码量多。性能低。</td>
</tr>
</tbody></table>
<h2 id="selenium和chromedriver介绍："><a href="#selenium和chromedriver介绍：" class="headerlink" title="selenium和chromedriver介绍："></a>selenium和chromedriver介绍：</h2><p><strong>Selenium</strong>：相当于是一个机器人。可以模拟人类在浏览器上的一些行为，自动处理浏览器上的一些行为，比如点击，填充数据，删除cookie等。<br>Selenium官方网址(python版本)：<a href="https://selenium-python.readthedocs.io/">https://selenium-python.readthedocs.io</a></p>
<p>安装Selenium：Selenium有许多语言的版本，有java、ruby、python等。我们下载python版本就可以了。pip install selenium</p>
<p><strong>chromedriver</strong>：是一个驱动Chrome浏览器的驱动程序，使用它才可以驱动Chrome浏览器。当然针对不同的浏览器有不同的driver。下面是不同的浏览器对应driver。</p>
<ul>
<li>Chrome：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">https://sites.google.com/a/chromium.org/chromedriver/downloads</a></li>
<li>Firefox：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></li>
<li>Edge：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></li>
<li>Safari：<a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/">https://webkit.org/blog/6900/webdriver-support-in-safari-10/</a></li>
</ul>
<p><em>注</em>：下载版本和对应浏览器版本一致。保存在纯英文没有权限的路径下。</p>
<p>如果启动selenium报错如下：</p>
<p><code>selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 92</code>,</p>
<p>就是浏览器和浏览器驱动版本不一样导致的。</p>
<h2 id="selenium和chromedriver使用："><a href="#selenium和chromedriver使用：" class="headerlink" title="selenium和chromedriver使用："></a>selenium和chromedriver使用：</h2><h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#下载好的chromedriver的路径</span></span><br><span class="line">driver_path = <span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"><span class="comment">#直接用driver访问网站</span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#获取源代码</span></span><br><span class="line"><span class="built_in">print</span>(driver.page_source)  </span><br></pre></td></tr></table></figure>

<h3 id="关闭页面和浏览器："><a href="#关闭页面和浏览器：" class="headerlink" title="关闭页面和浏览器："></a>关闭页面和浏览器：</h3><ul>
<li><p>driver.close()：关闭当前页面</p>
</li>
<li><p>driver.quit()：关闭浏览器</p>
</li>
</ul>
<h3 id="定位元素："><a href="#定位元素：" class="headerlink" title="定位元素："></a>定位元素：</h3><ul>
<li>find_element_by_id(“”)：根据id查找元素</li>
<li>find_element_by_class_name(“”)：根据class名查找元素</li>
<li>find_element_by_name(“”)：根据name属性查找元素</li>
<li>find_element_by_tag_name(“”)：根据标签名查找元素</li>
<li>find_element_by_xpath(“”)：根据xpath语法查找元素</li>
<li>find_element_by_css_selector(“”)：根据css选择器查找元素</li>
</ul>
<p><strong>注</strong>：这些find_element查找元素是查找第一个满足条件的元素；如果加上s，即find_element<strong>s</strong>是获取所有满足条件的元素。</p>
<p>以上元素定位的方法外，还有另一种元素定位的写法，如下：</p>
<p>需要导入By：<code>from selenium.webdriver.common.by import By</code></p>
<ul>
<li>find_element(By.ID, “id”)</li>
<li>find_element(By.CLASS_NAME, “class_name”)</li>
<li>find_element(By.NAME, “name”)</li>
<li>find_element(By.TAG_NAME, “tag_name”)</li>
<li>find_element(By.XPATH, “xpath语法”)</li>
<li>find_element(By.CSS_SELECTOR, “css语法”)</li>
</ul>
<p><strong>注</strong>：用法和上面一样，也有element<strong>s</strong>的用法。注意大写。</p>
<h3 id="表单元素操作："><a href="#表单元素操作：" class="headerlink" title="表单元素操作："></a>表单元素操作：</h3><p>先到找该元素，再进行操作</p>
<p>1，输入文本操作，用于输入框</p>
<p>element.send_keys(“text”)：在该元素输入文本内容</p>
<p>element.clear()：清除文本内容</p>
<p>2，点击操作，用于复选框，按钮等</p>
<p>element.click()：单机该元素</p>
<p>3，选择下拉列表操作，用于select，option</p>
<ul>
<li>需要导入Select：<code>from selenium.webdriver.support.ui import Select</code></li>
<li>找到select元素后，用导入的Select包装一下：<br><code>select = Select(driver.find_element_by_xpath(&quot;//select[@name=&#39;name&#39;]&quot;))</code></li>
<li>在select标签中选择option：<br>select.select_by_index(“index”)：通过索引值选择<br>select.select_by_value(“value”)：通过value属性值选择<br>select.select_by_visible_text(“text”)：通过可视文本选择，即显示在上面的文字内容</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#表单元素操作：访问百度，在搜索框中输入‘python’，然后单击‘百度一下’按钮</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#找到搜索框</span></span><br><span class="line">inputTag = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br><span class="line"><span class="comment">#搜索框输入内容</span></span><br><span class="line">inputTag.send_keys(<span class="string">&quot;python&quot;</span>)  </span><br><span class="line"><span class="comment">#找到百度一下按钮</span></span><br><span class="line">btn = driver.find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br><span class="line"><span class="comment">#单机操作</span></span><br><span class="line">btn.click()  </span><br></pre></td></tr></table></figure>

<h3 id="行为链："><a href="#行为链：" class="headerlink" title="行为链："></a>行为链：</h3><p>更像人类的操作</p>
<p>有时候在页面中的操作可能要有很多步，那么可以使用行为链。</p>
<p>有些网站可能会在浏览器端做一些验证行为是否符合人类的行为来做反爬虫。这时候我们就可以使用行为链来模拟人的操作。行为链有更多的复杂操作，比如双击，右击。在自动化测试中非常有用。</p>
<p>使用：</p>
<ul>
<li><p>导入<code>from selenium.webdriver.common.action_chains import ActionChains</code></p>
</li>
<li><p>创建行为链<code>actions = ActionChains(driver)</code></p>
</li>
<li><p>相关操作</p>
<ul>
<li>actions.move_to_element(element)：鼠标移动到某个元素上</li>
<li>actions.send_keys_to_element(element, “text”)：在某个元素上输入文本</li>
<li>actions.click(element)：单击某元素</li>
<li>actions.context_click(element)：右击某元素</li>
<li>actions.double_click(element)：双击某元素</li>
<li>actions.click_and_hold(element)：单击但不松开，拖曳</li>
</ul>
</li>
<li><p>actions.perform()：执行行为链</p>
</li>
</ul>
<p><strong>注</strong>：创建了行为链，定义完后要提交执行，要再次使用行为链时，再重新创建一个行为链。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"><span class="comment">#访问知乎</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.zhihu.com/signin?next=%2F&#x27;</span>)</span><br><span class="line"><span class="comment">#创建行为链</span></span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line"><span class="comment">#操作：选择用户密码登入</span></span><br><span class="line">login = driver.find_elements_by_class_name(<span class="string">&quot;SignFlow-tab&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">actions.move_to_element(login)</span><br><span class="line">actions.click(login)</span><br><span class="line"><span class="comment">#执行该行为链</span></span><br><span class="line">actions.perform()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#再次创建新的行为链</span></span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line"><span class="comment">#操作：填写用户名</span></span><br><span class="line">username = driver.find_element_by_name(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">actions.move_to_element(username)</span><br><span class="line">actions.send_keys_to_element(username,<span class="string">&quot;17370466454&quot;</span>)</span><br><span class="line"><span class="comment">#操作：填写密码</span></span><br><span class="line">password = driver.find_element_by_name(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">actions.move_to_element(password)</span><br><span class="line">actions.send_keys_to_element(password,<span class="string">&quot;123456789&quot;</span>)</span><br><span class="line"><span class="comment">#操作：点击提交</span></span><br><span class="line">submit = driver.find_element_by_xpath(<span class="string">&quot;//button[@type=&#x27;submit&#x27;]&quot;</span>)</span><br><span class="line">actions.move_to_element(submit)</span><br><span class="line">actions.click(submit)</span><br><span class="line"><span class="comment">#执行该行为链</span></span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure>

<h3 id="cookie："><a href="#cookie：" class="headerlink" title="cookie："></a>cookie：</h3><ul>
<li>driver.get_cookies()：获取所有cookie</li>
<li>driver.get_cookie(“name”)：获取指定name的cookie</li>
<li>driver.delete_all_cookies()：删除所有cookie</li>
<li>driver.delete_cookie(“BA_HECTOR”)：删除指定name的cookie</li>
<li>driver.add_cookie({“name”:”abc”, “value”:”123456”})：添加cookie</li>
</ul>
<h3 id="隐式等待和显式等待："><a href="#隐式等待和显式等待：" class="headerlink" title="隐式等待和显式等待："></a>隐式等待和显式等待：</h3><p>现在的网页越来越多使用ajax技术，程序不能确定何时某个元素完全加载出来了。如果元素还没加载出来，但代码直接使用该元素，就会报错NullPointer。<br>为解决这问题，Selenium提供两种等待方式：隐式等待，显式等待。</p>
<h4 id="隐式等待："><a href="#隐式等待：" class="headerlink" title="隐式等待："></a>隐式等待：</h4><p>等待指定的秒数<br>driver.implicitly_wait()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#隐式等待</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#等待10秒</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;fjkd&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="显式等待："><a href="#显式等待：" class="headerlink" title="显式等待："></a>显式等待：</h4><p>等待，直到给定的条件成立后就不再等待，也可以指定一个最大等待时间，超过这个时间后就抛出异常。可配合try:，except:，else:，finally:。</p>
<p>需要导入：</p>
<ul>
<li><code>from selenium.webdriver.support.ui import WebDriverWait</code>  ：显式等待类</li>
<li><code>from selenium.webdriver.support import expected_conditions</code>  ：期望条件类</li>
<li><code>from selenium.webdriver.common.by import By</code>：在期望条件中查找元素，用By</li>
</ul>
<p>语法：</p>
<ul>
<li><code>WebDriverWait(driver, “最大等待时间” ).until( “期望的条件” )</code></li>
</ul>
<p>例子：访问12306铁路，等待，直到车站中选择了北京后，再查询。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait  <span class="comment">#显式等待类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC  <span class="comment">#期望的条件类,as取别名</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By   <span class="comment">#By用来查找元素的</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"><span class="comment">#访问12306铁路</span></span><br><span class="line">driver.get(<span class="string">&quot;https://kyfw.12306.cn/otn/czxx/init&quot;</span>)</span><br><span class="line"><span class="comment">#条件是本文被显示在某个元素的value属性上</span></span><br><span class="line">WebDriverWait(driver,<span class="number">1000</span>).until(</span><br><span class="line">    EC.text_to_be_present_in_element_value((By.NAME,<span class="string">&quot;train_station_name&quot;</span>),<span class="string">&quot;北京&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">btn = driver.find_element_by_id(<span class="string">&quot;_a_search_btn&quot;</span>)</span><br><span class="line">btn.click()</span><br></pre></td></tr></table></figure>

<p>显式等待预期的条件：</p>
<ul>
<li>title_is 判断title是否出现</li>
<li>title_contains 判断title页面标题是否包含某些字符</li>
<li><strong>presence_of_element_located 判断某个元素是否被加载到了dom树里，但是并不代表这个元素可见</strong></li>
<li><strong>url_contains 判断当前url是否包含某个url</strong></li>
<li>url_matches 判断当前url是否符合某种格式</li>
<li>url_to_be 判断当前url是否出现</li>
<li>url_changes 判断当前url是否已经发生了变化</li>
<li>visibility_of_element_located 判断某个元素是否被添加到了dom树里，且宽高都大于0</li>
<li>visibility_of 判断看某个元素是否可见</li>
<li>presence_of_all_elements_located 判断至少有一个元素存在于dom树中，返回所有定位到的元素</li>
<li>visibility_of_any_elements_located 判断至少有一个元素在页面中可见</li>
<li>visibility_of_all_elements_located 判断是否所有元素都在页面中可见</li>
<li>text_to_be_present_in_element 判断指定的元素中是否包含了预期的字符串</li>
<li><strong>text_to_be_present_in_element_value 判断指定的元素属性值中是否包含了预期的字符串</strong></li>
<li>frame_to_be_available_and_switch_to_it 判断iframe是否可以switch进去</li>
<li>invisibility_of_element_located 判断某个元素是否在dom中不可见</li>
<li><strong>element_to_be_clickable 判断某个元素是否可见并且是enable的，也就是说是是否可以点击</strong></li>
<li>staleness_of 等待某个元素从dom中删除</li>
<li>element_to_be_selected 判断某个元素是否被选中了，一般用于下拉列表中</li>
<li>element_located_to_be_selected 与上面的意思一样，只不过上面实例化的时候传入的是元素对象，这个传入的是定位</li>
<li>element_selection_state_to_be 判断某个元素的选中状态是否符合预期</li>
<li>element_located_selection_state_to_be 与上面一样，只不过传值不同而已</li>
<li>number_of_windows_to_be 判断当前窗口数是否等于预期</li>
<li>new_window_is_opened 判断是否有窗口增加</li>
<li>alert_is_present 判断页面是否有弹窗</li>
</ul>
<h3 id="切换窗口："><a href="#切换窗口：" class="headerlink" title="切换窗口："></a>切换窗口：</h3><p>1，<code>driver.switch_to_window()</code>：切换到指定窗口</p>
<p>2，<code>driver.window_handles</code>：返回窗口的列表</p>
<p>配合使用<code>driver.switch_to_window( driver.window_handles[0] )</code>，表示切换到第一个窗口</p>
<p>3，<code>driver.execute_script(&quot;window.open(&#39;https://douban.com&#39;)&quot;)</code>：execute_script表示执行js代码，这里用js代码打开新的窗口，execute_script（”这里写js代码，还可以写arguments[0]，arguments[1]，表示引用外面的参数”，参数1，参数2）。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#执行js代码,用js代码打开新的窗口</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;window.open(&#x27;https://douban.com&#x27;)&quot;</span>)</span><br><span class="line"><span class="comment">#切换窗口</span></span><br><span class="line">driver.switch_to_window(driver.window_handles[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#打印网页源代码</span></span><br><span class="line"><span class="built_in">print</span>(driver.page_source)</span><br></pre></td></tr></table></figure>

<h3 id="设置代理IP："><a href="#设置代理IP：" class="headerlink" title="设置代理IP："></a>设置代理IP：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment">#1，创建options</span></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment">#2，options添加代理IP</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--proxy-server=http://219.128.76.3:8080&quot;</span>)</span><br><span class="line"><span class="comment">#3，创建驱动时，把options添加进去</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>,chrome_options=options)</span><br><span class="line"><span class="comment">#该网站返回自己的ip地址</span></span><br><span class="line">driver.get(<span class="string">&quot;http://httpbin.org/ip&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>element.get_property(“属性名”)：获取元素的html官方属性。</p>
<p>element.get_attribute(“属性名”)：获取元素的属性，包括官方和自定义属性。</p>
<p>driver.save_screenshot(“path”)：保存当前页面截图，一般png类型。</p>
<h2 id="Selenium实战-12306自动抢票"><a href="#Selenium实战-12306自动抢票" class="headerlink" title="Selenium实战-12306自动抢票"></a>Selenium实战-12306自动抢票</h2><p>该程序可以自动实现抢票，虽然有点鸡肋，重在学习selenium。</p>
<p>假如9点开始抢票。提前物色好车次和席别，添加乘客信息，定好开抢时间。在9点之前打开该程序并运行，由于9点没到，会一直处于等待阶段。直到9点一到，立刻抢票。</p>
<p>简单定时器制作方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入time</span></span><br><span class="line"><span class="keyword">import</span> time   </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#获取时间戳，时间戳就是1970年一直到现在的时间秒数，所以分分秒秒时间戳都在变化</span></span><br><span class="line">    timestamp = time.time()</span><br><span class="line">    <span class="comment">#把时间戳变为本地时间</span></span><br><span class="line">    localtime = time.localtime(timestamp)</span><br><span class="line">    <span class="comment">#将本地时间格式化成我们想要的文本格式</span></span><br><span class="line">    localtime = time.strftime(<span class="string">&quot;%H:%M:%S&quot;</span>,localtime)</span><br><span class="line">    <span class="comment">#判断如果本地时间到了指定时间(文本格式要一致)就停止循环，继续往下执行代码</span></span><br><span class="line">    <span class="keyword">if</span> localtime == <span class="string">&quot;12:45:00&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;时间到了！！&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>代码实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrainSpider</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    该类用于12306铁路自动抢票功能，创建实例对象后直接调用run()方法。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    login_url = <span class="string">&quot;https://kyfw.12306.cn/otn/resources/login.html&quot;</span></span><br><span class="line">    search_url = <span class="string">&quot;https://kyfw.12306.cn/otn/leftTicket/init?linktypeid=dc&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,from_station,to_station,date,trains,passengers,snap_up</span>):</span></span><br><span class="line">        self.from_station = from_station</span><br><span class="line">        self.to_station = to_station</span><br><span class="line">        self.date = date</span><br><span class="line">        self.trains = trains</span><br><span class="line">        self.stations = &#123;&#125;  <span class="comment">#存放各个城市对应的代号词</span></span><br><span class="line">        self.get_stations_code()</span><br><span class="line">        self.driver = driver</span><br><span class="line">        self.train = <span class="literal">None</span>  <span class="comment">#存放确定好的的车次</span></span><br><span class="line">        self.seat = <span class="literal">None</span>   <span class="comment">#存放确定好的的席位</span></span><br><span class="line">        self.passengers = passengers</span><br><span class="line">        self.snap_up = snap_up</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_stations_code</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取每个城市对应的代号词&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;stations.csv&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            reader = csv.reader(fp)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> reader:</span><br><span class="line">                self.stations[i[<span class="number">0</span>]] = i[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(self.login_url)</span><br><span class="line">        <span class="comment">#等待用户手动登入</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.url_contains(<span class="string">&quot;https://kyfw.12306.cn/otn/view/index.html&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#等待“新冠疫情”的提示框弹出</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.CLASS_NAME, <span class="string">&quot;modal&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#单击确认</span></span><br><span class="line">        btn = self.driver.find_element(By.CLASS_NAME, <span class="string">&quot;modal-close&quot;</span>)</span><br><span class="line">        btn.click()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登入成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_ticket</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#相当于单击了“车票”导航栏中的“单程”命令</span></span><br><span class="line">        self.driver.get(self.search_url)</span><br><span class="line">        <span class="comment"># 等待“新冠疫情防控”的提示框弹出</span></span><br><span class="line">        WebDriverWait(self.driver, <span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.ID,<span class="string">&quot;content_defaultwarningAlert_id&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#单击确认</span></span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;qd_closeDefaultWarningWindowDialog_id&quot;</span>).click()</span><br><span class="line">        <span class="comment">#输入起始站，终点站，时间</span></span><br><span class="line">        input_from_station = self.driver.find_element_by_id(<span class="string">&quot;fromStation&quot;</span>)</span><br><span class="line">        from_station_code = self.stations[self.from_station]</span><br><span class="line">        self.driver.execute_script(<span class="string">&quot;arguments[0].value=&#x27;%s&#x27;&quot;</span>%from_station_code,input_from_station)</span><br><span class="line">        input_to_station = self.driver.find_element_by_id(<span class="string">&quot;toStation&quot;</span>)</span><br><span class="line">        to_station_code = self.stations[self.to_station]</span><br><span class="line">        self.driver.execute_script(<span class="string">&quot;arguments[0].value=&#x27;%s&#x27;&quot;</span>%to_station_code, input_to_station)</span><br><span class="line">        input_date = self.driver.find_element_by_id(<span class="string">&quot;train_date&quot;</span>)</span><br><span class="line">        self.driver.execute_script(<span class="string">&quot;arguments[0].value=&#x27;%s&#x27;&quot;</span>%self.date, input_date)</span><br><span class="line">        <span class="comment">#到达指定时间才继续执行代码，用于抢票</span></span><br><span class="line">        <span class="keyword">if</span> self.snap_up == <span class="string">&quot;无&quot;</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                timestamp = time.time()</span><br><span class="line">                localtime = time.localtime(timestamp)</span><br><span class="line">                localtime = time.strftime(<span class="string">&quot;%H:%M:%S&quot;</span>, localtime)</span><br><span class="line">                <span class="keyword">if</span> localtime == self.snap_up:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#点击查询</span></span><br><span class="line">        btn_submit = self.driver.find_element_by_id(<span class="string">&quot;query_ticket&quot;</span>)</span><br><span class="line">        btn_submit.click()</span><br><span class="line">        <span class="comment">#等待查询结果加载出来</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.XPATH,<span class="string">&quot;//tbody[@id=&#x27;queryLeftTable&#x27;]/tr&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#获取车次信息，解析车次</span></span><br><span class="line">        trs = self.driver.find_elements_by_xpath(<span class="string">&quot;//tbody[@id=&#x27;queryLeftTable&#x27;]/tr[not(@datatran)]&quot;</span>)</span><br><span class="line">        have_seat = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">            train_info = tr.text.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot; &quot;</span>).split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">            train = train_info[<span class="number">0</span>]</span><br><span class="line">            <span class="comment">#判断是不是我们想要的车次</span></span><br><span class="line">            <span class="keyword">if</span> train <span class="keyword">in</span> self.trains:</span><br><span class="line">                seats = self.trains[train]</span><br><span class="line">                <span class="keyword">for</span> seat <span class="keyword">in</span> seats:</span><br><span class="line">                    <span class="comment">#判断是什么座位，并判断该座位有无票</span></span><br><span class="line">                    <span class="comment">#一等座:M,二等座:O,硬座:1，硬卧:3，软卧:4,高级软卧:6,商务座:9</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;M&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">11</span>]</span><br><span class="line">                        <span class="comment">#票情况可以为：文本类型的数字，有，候补，无，--，*</span></span><br><span class="line">                        <span class="comment">#ticket等于‘有’或者等于文本类型的数字都代表有票，这里强行把ticket转换成int类型，</span></span><br><span class="line">                        <span class="comment">#可以转换表示ticket是文本类型的数字，转不了表示ticket是’有‘，或者其他无票的可能，那就pass</span></span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;O&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">10</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">4</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">6</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">8</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;6&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">9</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;9&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">12</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> have_seat:</span><br><span class="line">                    <span class="comment"># have_seat为真表示找到了票，然后单击‘预定’按钮</span></span><br><span class="line">                    self.train = train</span><br><span class="line">                    btn = tr.find_element_by_class_name(<span class="string">&quot;btn72&quot;</span>)</span><br><span class="line">                    btn.click()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">submit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#选择乘客</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.XPATH,<span class="string">&quot;//ul[@id=&#x27;normal_passenger_id&#x27;]/li/label&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        passengers = self.driver.find_elements_by_xpath(<span class="string">&quot;//ul[@id=&#x27;normal_passenger_id&#x27;]/li/label&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> passenger <span class="keyword">in</span> passengers:</span><br><span class="line">            <span class="keyword">if</span> passenger.text <span class="keyword">in</span> self.passengers:</span><br><span class="line">                passenger.click()</span><br><span class="line">        <span class="comment">#选择席别</span></span><br><span class="line">        selectsEle = self.driver.find_elements_by_xpath(<span class="string">&quot;//tbody[@id=&#x27;ticketInfo_id&#x27;]/tr[not(@class=&#x27;tips&#x27;)]/td[3]/select&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> selectEle <span class="keyword">in</span> selectsEle:</span><br><span class="line">            select = Select( selectEle )</span><br><span class="line">            select.select_by_value(self.seat)</span><br><span class="line">        <span class="comment">#提交订单</span></span><br><span class="line">        btn = self.driver.find_element_by_id(<span class="string">&quot;submitOrder_id&quot;</span>)</span><br><span class="line">        btn.click()</span><br><span class="line">        <span class="comment">#确认提交订单信息</span></span><br><span class="line">        WebDriverWait(self.driver, <span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.XPATH, <span class="string">&quot;//tbody[@id=&#x27;check_ticketInfo_id&#x27;]/tr/td&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.ID,<span class="string">&#x27;qr_submit_id&#x27;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                btn = self.driver.find_element_by_id(<span class="string">&quot;qr_submit_id&quot;</span>)</span><br><span class="line">                btn.click()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                passengers = <span class="string">&quot;、&quot;</span>.join(self.passengers)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;已为【%s】乘客购得【%s】车次【%s】席别票&quot;</span> % (passengers, self.train, self.seat))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#1，登入</span></span><br><span class="line">        self.login()</span><br><span class="line">        <span class="comment">#2，查询票</span></span><br><span class="line">        self.search_ticket()</span><br><span class="line">        <span class="comment">#3，提交订单</span></span><br><span class="line">        self.submit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment">#使用说明</span></span><br><span class="line">    <span class="comment">#创建类时按顺序输入参数：出发点，目的地，发车日期(&quot;****-**-**&quot;),车次座位(字典格式)，乘客(列表格式)，抢票时间(“**:**:**”)</span></span><br><span class="line">    <span class="comment">#车次座位格式：&#123;&quot;G403&quot;:[&quot;1&quot;],&quot;G505&quot;:[&quot;M&quot;,&quot;O&quot;]&#125;</span></span><br><span class="line">    <span class="comment"># 一等座:M,二等座:O,硬座:1，硬卧:3，软卧:4,高级软卧:6,商务座:9</span></span><br><span class="line">    <span class="comment">#抢票时间精确到时分秒，若填写“无”，表示当前时间直接抢票</span></span><br><span class="line">    </span><br><span class="line">    trainSpider = TrainSpider(<span class="string">&quot;万安县&quot;</span>,<span class="string">&quot;南昌&quot;</span>,<span class="string">&quot;2021-09-01&quot;</span>,&#123;<span class="string">&quot;G5022&quot;</span>:[<span class="string">&quot;O&quot;</span>]&#125;,[<span class="string">&quot;李昭德&quot;</span>,<span class="string">&quot;李昭辉&quot;</span>],<span class="string">&quot;13:11:00&quot;</span>)</span><br><span class="line">    trainSpider.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h2 id="反爬虫攻防实战"><a href="#反爬虫攻防实战" class="headerlink" title="反爬虫攻防实战"></a>反爬虫攻防实战</h2><p>上一章爬取动态网页是使用selenium。这一章用另一种方法，分析后端接口，破解js，直接访问后端接口。<br>这种方法需要有一定的js功底。</p>
<h3 id="有道翻译"><a href="#有道翻译" class="headerlink" title="有道翻译"></a>有道翻译</h3><p>通过请求有道翻译后端接口，实现翻译功能</p>
<p>网址：<a href="https://fanyi.youdao.com/">https://fanyi.youdao.com/</a></p>
<p><strong>分析及代码实现</strong>：</p>
<p>进入网站使用有道翻译发现，输入文本”world”后会自动翻译成”世界”，结论：输入文本后网页自动发送ajax请求。<br>通过抓包工具，找到相关包，包名‘translate_o?sm…..’。获取请求的url=”<a href="https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;%EF%BC%8C%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%EF%BC%9Apost%EF%BC%8C%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF%EF%BC%8C%E4%BB%A5%E5%8F%8A%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E3%80%82%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90%E5%A6%82%E4%B8%8B%EF%BC%9A">https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;，请求方式：post，请求头信息，以及请求参数。请求参数分析如下：</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">i: world          			<span class="comment">//要翻译的文本，不管</span></span><br><span class="line"><span class="attr">from</span>: AUTO		            <span class="comment">//原文本的语言，AUTO表示自动识别，不管</span></span><br><span class="line"><span class="attr">to</span>: AUTO		 		    <span class="comment">//需要翻译成的语言，AUTO表示自动识别，不管</span></span><br><span class="line"><span class="attr">smartresult</span>: dict    		<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">client</span>: fanyideskweb    	<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">salt</span>: <span class="number">16293414783192</span>    				  <span class="comment">//应该是通过某种算法或加密得到    </span></span><br><span class="line"><span class="attr">sign</span>: 530e6e5252905a4774e78e524a42fd0b    <span class="comment">//应该是通过某种算法或加密得到 </span></span><br><span class="line"><span class="attr">lts</span>: <span class="number">1629341478319</span>       				  <span class="comment">//应该是通过某种算法或加密得到 </span></span><br><span class="line"><span class="attr">bv</span>: eda468fc64295ecf2810ab8a672c2db1      <span class="comment">//应该是通过某种算法或加密得到 </span></span><br><span class="line"><span class="attr">doctype</span>: json    			<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">version</span>: <span class="number">2.1</span>     			<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">keyfrom</span>: fanyi.web    		<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">action</span>: FY_BY_REALTlME      <span class="comment">//应该是固定的，不管</span></span><br></pre></td></tr></table></figure>

<p>通过观察，很明显有些请求参数是固定的，可以不需要修改，不用管<br>但是还有些参数是应该是通过某种算法或加密得到的，而且每次请求都不一样，所以需要自己根据其后端接口的规则来模仿实现。</p>
<p>ajax请求是js文件写的，所以找到发送该ajax请求的js文件。找法：右击查看网页源代码，在网页源代码中找调用的js文件。可以打开js文件看看里面有没有相关的请求参数，如果基本都有，那就应该是该js文件。该js文件一般没有格式化，可以用js美化工具经行美化，方便阅读。</p>
<p>拿到js文件后，分析需要的请求参数在里面是怎么实现的，以有道翻译为例。<br>下面4个是我们需要自己实现的请求参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">salt: <span class="number">16293414783192</span></span><br><span class="line"><span class="attr">sign</span>: 530e6e5252905a4774e78e524a42fd0b</span><br><span class="line"><span class="attr">lts</span>: <span class="number">1629341478319</span></span><br><span class="line"><span class="attr">bv</span>: eda468fc64295ecf2810ab8a672c2db1</span><br></pre></td></tr></table></figure>

<p>然后在js文件中找这些参数实现的原理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">i: n,   <span class="comment">//n表示当前要翻译的单词</span></span><br><span class="line"><span class="attr">from</span>: C,</span><br><span class="line"><span class="attr">to</span>: S,</span><br><span class="line"><span class="attr">smartresult</span>: <span class="string">&quot;dict&quot;</span>,</span><br><span class="line"><span class="attr">client</span>: E,   </span><br><span class="line"><span class="attr">salt</span>: r.salt,    	<span class="comment">//找到这4个参数的实现原理，要找到r</span></span><br><span class="line"><span class="attr">sign</span>: r.sign,    	<span class="comment">//</span></span><br><span class="line"><span class="attr">lts</span>: r.ts,		 	<span class="comment">//</span></span><br><span class="line"><span class="attr">bv</span>: r.bv,		 	<span class="comment">//</span></span><br><span class="line"><span class="attr">doctype</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line"><span class="attr">version</span>: <span class="string">&quot;2.1&quot;</span>,</span><br><span class="line"><span class="attr">keyfrom</span>: <span class="string">&quot;fanyi.web&quot;</span>,</span><br><span class="line"><span class="attr">action</span>: e || <span class="string">&quot;FY_BY_DEFAULT&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//找到了这个</span></span><br><span class="line">r = v.generateSaltSign(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//按照逻辑一路往上找，最后找到该函数</span></span><br><span class="line"><span class="comment">//函数返回的这4个参数就是我们需要的参数，参数的实现原理也在其中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;   <span class="comment">//e就是表示上面的n</span></span><br><span class="line">			<span class="keyword">var</span> t = n.md5(navigator.appVersion),    <span class="comment">//md5加密navigator.appVersion，‘navigator.appVersion’返回浏览器版本，可以在浏览器工作台打印看看，是固定的</span></span><br><span class="line">				r = <span class="string">&quot;&quot;</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime(),   <span class="comment">//获取时间戳，然后改为文本类型</span></span><br><span class="line">				i = r + <span class="built_in">parseInt</span>(<span class="number">10</span> * <span class="built_in">Math</span>.random(), <span class="number">10</span>);  <span class="comment">//r加上随机数1到10</span></span><br><span class="line">			<span class="keyword">return</span> &#123;   </span><br><span class="line">				<span class="attr">ts</span>: r,</span><br><span class="line">				<span class="attr">bv</span>: t,</span><br><span class="line">				<span class="attr">salt</span>: i,</span><br><span class="line">				<span class="attr">sign</span>: n.md5(<span class="string">&quot;fanyideskweb&quot;</span> + e + i + <span class="string">&quot;Y2FYu%TNSbMCxc3t2u^XT&quot;</span>)  <span class="comment">//md5加密</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br></pre></td></tr></table></figure>

<p>找到了参数的实现原理后，用python代码把这些参数重新实现一遍，然后就可以发送请求：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">input</span>(<span class="string">&quot;请输入&quot;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;SESSION_FROM_COOKIE=www.baidu.com; OUTFOX_SEARCH_USER_ID=-1154821063@117.162.66.74; JSESSIONID=aaaogRJYT3CYncQm3pCTx; OUTFOX_SEARCH_USER_ID_NCOO=1780673000.2103813; ___rl__test__cookies=1629341478311&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://fanyi.youdao.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timestamp = <span class="built_in">str</span>(time.time()*<span class="number">1000</span>)  <span class="comment">#时间戳，默认秒，转换成毫秒，转换文本型</span></span><br><span class="line">salt = timestamp + <span class="built_in">str</span>(random.randint(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">text = <span class="string">&quot;fanyideskweb&quot;</span> + n + salt + <span class="string">&quot;Y2FYu%TNSbMCxc3t2u^XT&quot;</span></span><br><span class="line">sign = hashlib.md5(text.encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()   <span class="comment">#md5加密后获取值</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;i&quot;</span>: n,</span><br><span class="line">    <span class="string">&quot;from&quot;</span>: <span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;to&quot;</span>: <span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;smartresult&quot;</span>: <span class="string">&quot;dict&quot;</span>,</span><br><span class="line">    <span class="string">&quot;client&quot;</span>: <span class="string">&quot;fanyideskweb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;salt&quot;</span>: salt,             <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;sign&quot;</span>: sign,             <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;lts&quot;</span>: timestamp,         <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;bv&quot;</span>: <span class="string">&quot;eda468fc64295ecf2810ab8a672c2db1&quot;</span>,    <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;doctype&quot;</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;2.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;keyfrom&quot;</span>: <span class="string">&quot;fanyi.web&quot;</span>,</span><br><span class="line">    <span class="string">&quot;action&quot;</span>: <span class="string">&quot;FY_BY_REALTlME&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.post(url, headers=headers, data=data)</span><br><span class="line">text = resp.text</span><br><span class="line">text = json.loads(text)</span><br><span class="line">fanyi = text.get(<span class="string">&quot;translateResult&quot;</span>)[<span class="number">0</span>][<span class="number">0</span>].get(<span class="string">&quot;tgt&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fanyi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="comment"># 请输入hello world</span></span><br><span class="line"><span class="comment"># 你好世界</span></span><br></pre></td></tr></table></figure>

<h3 id="自动识别验证码"><a href="#自动识别验证码" class="headerlink" title="自动识别验证码"></a>自动识别验证码</h3><p>自动识别验证码，这里使用的是打码平台。</p>
<p>以菲菲打码平台为例，网址：<a href="http://www.fateadm.com/">http://www.fateadm.com/</a></p>
<p>1，注册登入，付款买积分（不贵，用于学习足够）<br>2，“开发文档”—–&gt;”例子参考“—–&gt;”demo下载“—–&gt;”python3“—–&gt;“下载解压得到py文件，可以直接使用”<br>3，该py文件中，定义了API接口调用类“FateadmApi”。如果不会使用，下面还定义了测试函数“TestFunc”。复制测试函数，粘贴到新的py文件，稍作修改，自己定义相关接口。如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fateadm_api <span class="keyword">import</span> FateadmApi   <span class="comment">#导入API接口调用类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestFunc</span>(<span class="params">img_path,pred_type</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    验证码图片识别</span></span><br><span class="line"><span class="string">    :param img_path: 验证码图片路径</span></span><br><span class="line"><span class="string">    :param pred_type: 验证码图片类型，下面就类型说明</span></span><br><span class="line"><span class="string">    :return: 对应的验证码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pd_id           = <span class="string">&quot;***不方便展示***&quot;</span>     <span class="comment">#用户中心页可以查询到pd信息</span></span><br><span class="line">    pd_key          = <span class="string">&quot;***不方便展示***&quot;</span></span><br><span class="line">    app_id          = <span class="string">&quot;***不方便展示***&quot;</span>     <span class="comment">#开发者分成用的账号，在开发者中心可以查询到</span></span><br><span class="line">    app_key         = <span class="string">&quot;***不方便展示***&quot;</span></span><br><span class="line">    <span class="comment">#识别类型，</span></span><br><span class="line">    <span class="comment">#具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服</span></span><br><span class="line">    pred_type       = pred_type</span><br><span class="line">    api             = FateadmApi(app_id, app_key, pd_id, pd_key)</span><br><span class="line">    <span class="comment"># 查询余额</span></span><br><span class="line">    balance 		= api.QueryBalcExtend()   <span class="comment"># 直接返余额</span></span><br><span class="line">    <span class="comment"># api.QueryBalc()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过文件形式识别：</span></span><br><span class="line">    file_name       = img_path</span><br><span class="line">    <span class="comment"># 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6</span></span><br><span class="line">    <span class="comment"># result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果</span></span><br><span class="line">    rsp             = api.PredictFromFile(pred_type, file_name)  <span class="comment"># 直接返回详细识别结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rsp.pred_rsp.value   <span class="comment">#返回识别结果</span></span><br></pre></td></tr></table></figure>

<p>pd_id、pd_key、app_id、app_key要填写自己的，在用户中可以找到。参数：pred_type是验证码类型，在“开发文档”—–&gt;”类型说明”。img_path是验证码的图片路径。</p>
<p>使用例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fateadm_api_my <span class="keyword">import</span> TestFunc   <span class="comment">#导入自己定义的接口函数</span></span><br><span class="line"></span><br><span class="line">result = TestFunc(<span class="string">&quot;image.png&quot;</span>,<span class="string">&quot;30900&quot;</span>)  <span class="comment">#调用函数，参数：验证码图片路径、验证码类型</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<p>访问要填写验证码的网站时，需要保存该验证码的图片，然后导入并调用我们定义的接口函数，传入参数：验证码图片路径、验证码类型，返回验证码识别结果。识别结果有一定的几率识别错误。</p>
<p>如果某个打码平台用不了了，属于正常现象，不必惊奇。</p>
<h3 id="字体反爬"><a href="#字体反爬" class="headerlink" title="字体反爬"></a>字体反爬</h3><p>网页开发者自己创造一种字体，因为在字体中每个文字都有其代号，那么以后再网页中不会直接显示这个文字的最终效果，而是显示他的代号。因此即使获取到了网页中的文字内容，也只是获取到文字的代号，而不是文字本身。从而达到反爬目的。</p>
<p>因为创造字体费时费力，数量多也影响网页加载。一般情况下为了反爬，仅会针对0-9以及少数汉字单独创造，其他还是使用用户系统中自带的字体。</p>
<p>这里以爬取这个网址：<a href="https://su.58.com/qztech/%E4%B8%BA%E4%BE%8B%E5%AD%90%E3%80%82">https://su.58.com/qztech/为例子。</a></p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>在网页源代码中我们可以找到@font-face属性，@font-face属性中一般有两种情况：<br>1，字体被编码成base64方式，直接获取@font-face中base64后面的内容。<br>2，字体文件放到服务器上，在@font-face中可以找到其url，直接下载。</p>
<p><strong>分析字体</strong>：</p>
<p>分析字体时，需要将字体转换成xml文件和ttf文件。<br>xml文件：可查看里的cmap和glyf内容。cmap中储存code（就是文字的代号，网页源代码显示的代号）和name的映射关系。glyf中储存name和对应的字体绘制规则。<br>ttf文件：在xml中可以得到字体绘制规则，类似坐标的形式，但是不知道字体长什么样子。有一款软件FontCreator，可以打开ttf文件，能看到最终字体的呈现效果。（软件下载地址：<a href="https://www.high-logic.com/FontCreatorSetup-x64.exe">https://www.high-logic.com/FontCreatorSetup-x64.exe</a></p>
<p>分析字体其目的是为了得到真实的字体和其字体对应的字体绘制规则</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"><span class="comment"># font_face是被经过base64解码后的字符串，其本身就是一个字体文件</span></span><br><span class="line">font_face = <span class="string">&#x27;d09GRgABAAAAACEUAAsAAAAAK....8klH9vrSy9aNNlv0CLWhrggA=&#x27;</span>  <span class="comment">#@font-face中复制的，内容太多，省略。</span></span><br><span class="line"><span class="comment">#将font_face用base64解密，放到Bytes管道中，然后创建TTFont对象。</span></span><br><span class="line">baseFont = TTFont(io.BytesIO(base64.b64decode(font_face)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># onlineFont.saveXML(&quot;58.xml&quot;)  #将字体保存成xml文件</span></span><br><span class="line"><span class="comment"># onlineFont.save(&quot;58.ttf&quot;)     #将字体保存成ttf文件</span></span><br><span class="line"></span><br><span class="line">baseGlyf = baseFont[<span class="string">&quot;glyf&quot;</span>]   <span class="comment">#获取glyg内容：name和其对应的字体绘制规则</span></span><br><span class="line"><span class="comment">#通过分析字体，得到真实字体和其对应的字体绘制规则。</span></span><br><span class="line">baseFontMap = &#123;</span><br><span class="line">    <span class="string">&quot;0&quot;</span>:baseGlyf[<span class="string">&quot;uniE3D3&quot;</span>],</span><br><span class="line">    <span class="string">&quot;1&quot;</span>:baseGlyf[<span class="string">&quot;uniF4C8&quot;</span>],</span><br><span class="line">    <span class="string">&quot;2&quot;</span>:baseGlyf[<span class="string">&quot;uniEB1C&quot;</span>],</span><br><span class="line">    <span class="string">&quot;3&quot;</span>:baseGlyf[<span class="string">&quot;uniF843&quot;</span>],</span><br><span class="line">    <span class="string">&quot;4&quot;</span>:baseGlyf[<span class="string">&quot;uniEA7C&quot;</span>],</span><br><span class="line">    <span class="string">&quot;5&quot;</span>:baseGlyf[<span class="string">&quot;uniE90E&quot;</span>],</span><br><span class="line">    <span class="string">&quot;6&quot;</span>:baseGlyf[<span class="string">&quot;uniE881&quot;</span>],</span><br><span class="line">    <span class="string">&quot;7&quot;</span>:baseGlyf[<span class="string">&quot;uniE671&quot;</span>],</span><br><span class="line">    <span class="string">&quot;8&quot;</span>:baseGlyf[<span class="string">&quot;uniEEB6&quot;</span>],</span><br><span class="line">    <span class="string">&quot;9&quot;</span>:baseGlyf[<span class="string">&quot;uniE295&quot;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>font-face的字体内容每次访问都不一样，所以上面的代码只是为了得到“baseFontMap”：真实字体和其对应的字体绘制规则的映射</p>
<p>代码实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comp</span>(<span class="params">shape_1, shape_2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    传入两个字体的绘制规则，判断这两个字体绘制的各个坐标的差异是否小于某某范围，一般40以内。匹配不到可扩大范围，出现乱匹配可缩小范围。</span></span><br><span class="line"><span class="string">    :param shape_1: 字体绘制规则1</span></span><br><span class="line"><span class="string">    :param shape_2: 字体绘制规则2</span></span><br><span class="line"><span class="string">    :return: True:各个坐标差异小于指定范围； False:各个坐标差异大于指定范围</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取字体绘制规则的坐标详情</span></span><br><span class="line">    shape_1 = shape_1.coordinates</span><br><span class="line">    shape_2 = shape_2.coordinates</span><br><span class="line">    <span class="comment"># 判断两个字体绘制规则的坐标个数是否一样</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(shape_1) == <span class="built_in">len</span>(shape_2):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(shape_1)):</span><br><span class="line">            <span class="comment"># 判断两个字体绘制规则相应的坐标，差异的范围是否在指定范围内。</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(shape_1[i][<span class="number">0</span>]-shape_2[i][<span class="number">0</span>])&gt;<span class="number">70</span> <span class="keyword">or</span> <span class="built_in">abs</span>(shape_1[i][<span class="number">1</span>]-shape_2[i][<span class="number">1</span>])&gt;<span class="number">70</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    font_face = <span class="string">&#x27;d09GRgABAAAAAC...aNNlv0CLWhrggA=&#x27;</span>   <span class="comment">##@font-face中复制的，内容太多，省略。</span></span><br><span class="line">    baseFont = TTFont(io.BytesIO(base64.b64decode(font_face)))</span><br><span class="line">    baseGlyf = baseFont[<span class="string">&quot;glyf&quot;</span>]</span><br><span class="line">    <span class="comment"># 得到真实字体和其对应的字体绘制规则的映射</span></span><br><span class="line">    baseFontMap = &#123;</span><br><span class="line">        <span class="string">&quot;0&quot;</span>:baseGlyf[<span class="string">&quot;uniE3D3&quot;</span>],</span><br><span class="line">        <span class="string">&quot;1&quot;</span>:baseGlyf[<span class="string">&quot;uniF4C8&quot;</span>],</span><br><span class="line">        <span class="string">&quot;2&quot;</span>:baseGlyf[<span class="string">&quot;uniEB1C&quot;</span>],</span><br><span class="line">        <span class="string">&quot;3&quot;</span>:baseGlyf[<span class="string">&quot;uniF843&quot;</span>],</span><br><span class="line">        <span class="string">&quot;4&quot;</span>:baseGlyf[<span class="string">&quot;uniEA7C&quot;</span>],</span><br><span class="line">        <span class="string">&quot;5&quot;</span>:baseGlyf[<span class="string">&quot;uniE90E&quot;</span>],</span><br><span class="line">        <span class="string">&quot;6&quot;</span>:baseGlyf[<span class="string">&quot;uniE881&quot;</span>],</span><br><span class="line">        <span class="string">&quot;7&quot;</span>:baseGlyf[<span class="string">&quot;uniE671&quot;</span>],</span><br><span class="line">        <span class="string">&quot;8&quot;</span>:baseGlyf[<span class="string">&quot;uniEEB6&quot;</span>],</span><br><span class="line">        <span class="string">&quot;9&quot;</span>:baseGlyf[<span class="string">&quot;uniE295&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 去爬取网页</span></span><br><span class="line">    url = <span class="string">&quot;https://su.58.com/qztech/&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;f=n; commoer=101...&#x27;</span>,   <span class="comment">#直接复制的cookie，内容太多，省略。</span></span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://passport.58.com/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resp = requests.get(url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    <span class="comment"># 获取font_face内容</span></span><br><span class="line">    font_face = re.search(<span class="string">&quot;@font-face.+?base64,(.+?)\)&quot;</span>,text,re.DOTALL).group(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 创建TTFont对象</span></span><br><span class="line">    currentFont = TTFont(io.BytesIO(base64.b64decode(font_face)))</span><br><span class="line">    <span class="comment">#获取cmap内容，即code和name的映射</span></span><br><span class="line">    currentCmap = currentFont.getBestCmap()</span><br><span class="line">    <span class="comment">#获取glyf内容，即name和字体绘制规则的映射</span></span><br><span class="line">    currentGlyf = currentFont[<span class="string">&quot;glyf&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> code,name <span class="keyword">in</span> currentCmap.items():</span><br><span class="line">        <span class="comment"># 当前网页的字体绘制规则</span></span><br><span class="line">        currentShape = currentGlyf[name]</span><br><span class="line">        <span class="keyword">for</span> font,shape <span class="keyword">in</span> baseFontMap.items():</span><br><span class="line">            <span class="comment">#1，如果字体绘制规则不变，可以这样写，直接相等。则说明code对应其font</span></span><br><span class="line">            <span class="comment">#if shape == currentShape:</span></span><br><span class="line">            <span class="comment">#2，如果字体绘制规则每次访问时都会略微改变，判断对应的坐标改变在某某范围以内，则视为同一字体。则说明code对应其font</span></span><br><span class="line">            <span class="keyword">if</span> comp(shape, currentShape):</span><br><span class="line">                <span class="comment">#把code转换成网页源代码上显示的格式，把code（十进制）转十六进制，然后把开头的“0”改为“&amp;#”，然后末尾加“;”</span></span><br><span class="line">                code = <span class="built_in">str</span>(<span class="built_in">hex</span>(code)).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&quot;&amp;#&quot;</span>,<span class="number">1</span>) + <span class="string">&quot;;&quot;</span></span><br><span class="line">                text = re.sub(code,font,text)</span><br><span class="line">    <span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫基础</title>
    <url>/2021/07/24/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>python网络爬虫</p>
<p>这是一篇文章关于python网络爬虫的个人笔记，</p>
<p>包括请求网站，解析数据，保存数据，多线程爬虫</p>
<span id="more"></span>

<h1 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h1><h2 id="urllib库-—内置"><a href="#urllib库-—内置" class="headerlink" title="urllib库  —内置"></a>urllib库  —内置</h2><h3 id="urlopen函数"><a href="#urlopen函数" class="headerlink" title="urlopen函数"></a>urlopen函数</h3><p>创建一个表示远程url的类文件对象，然后像本地文件一样操作这类文件对象来获取远程数据。在urllib.request模块中</p>
<p>url: 请求的url<br>data: 请求的data，如果设置了该参数，为post请求<br>返回值: 返回值是一个http.client.HTTPResponse对象，<br>该对象是一个类文件句柄对象。有read(size),readline,readlines,getcode等方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">resp = request.urlopen(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.read())</span><br><span class="line"><span class="built_in">print</span>(resp.getcode())</span><br></pre></td></tr></table></figure>

<h3 id="urlretrieve函数"><a href="#urlretrieve函数" class="headerlink" title="urlretrieve函数"></a>urlretrieve函数</h3><p>将网页上的某个文件保存到本地,在urllib.request模块中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">request.urlretrieve(url, file_name)</span><br></pre></td></tr></table></figure>

<h3 id="urlencode函数：编码"><a href="#urlencode函数：编码" class="headerlink" title="urlencode函数：编码"></a>urlencode函数：编码</h3><p>urlencode可以把字典数据转化成url<em><strong>编码</strong></em>的数据，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">18</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>( parse.urlencode(data) )</span><br><span class="line"></span><br><span class="line"><span class="comment">#name=%E7%8C%AA%E5%85%AB%E6%88%92&amp;age=18&amp;gender=%E7%94%B7       打印结果</span></span><br></pre></td></tr></table></figure>

<p><em>注</em>：urlencode对字典编码；quote对字符串编码。</p>
<h3 id="parse-qs函数：解码"><a href="#parse-qs函数：解码" class="headerlink" title="parse_qs函数：解码"></a>parse_qs函数：解码</h3><p>可以将经过编码后的url参数进行<em><strong>解码</strong></em>，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;name=%E7%8C%AA%E5%85%AB%E6%88%92&amp;age=18&amp;gender=%E7%94%B7&quot;</span></span><br><span class="line"><span class="built_in">print</span>( parse.parse_qs(data) )</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;&#x27;name&#x27;: [&#x27;猪八戒&#x27;], &#x27;age&#x27;: [&#x27;18&#x27;], &#x27;gender&#x27;: [&#x27;男&#x27;]&#125;           打印结果</span></span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：parse_qs解码成字典；unquote解码成字符串。</p>
<h3 id="urlparse和urlsplit函数：解析url"><a href="#urlparse和urlsplit函数：解析url" class="headerlink" title="urlparse和urlsplit函数：解析url"></a>urlparse和urlsplit函数：解析url</h3><p>对url各个组成部分进行分割，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com/index.html;user?id=S#comment&quot;</span></span><br><span class="line">result = parse.urlparse(url)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment">#打印结果:</span></span><br><span class="line"><span class="comment">#ParseResult(scheme=&#x27;http&#x27;, netloc=&#x27;www.baidu.com&#x27;, path=&#x27;/index.html&#x27;, params=&#x27;user&#x27;, query=&#x27;id=S&#x27;, fragment=&#x27;comment&#x27;)</span></span><br><span class="line">result2 = parse.urlsplit(url)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line"><span class="comment">#打印结果:</span></span><br><span class="line"><span class="comment">#SplitResult(scheme=&#x27;http&#x27;, netloc=&#x27;www.baidu.com&#x27;, path=&#x27;/index.html;user&#x27;, query=&#x27;id=S&#x27;, fragment=&#x27;comment&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(result.scheme)      <span class="comment">#http</span></span><br><span class="line"><span class="built_in">print</span>(result.netloc)      <span class="comment">#www.baidu.com</span></span><br></pre></td></tr></table></figure>

<p><em>注</em>：urlparse函数和urlsplit函数用法基本一样，唯一的区别是urlparse有params属性，而urlsplit没有。</p>
<h3 id="request-Request类：网络请求，可添加请求头，请求参数"><a href="#request-Request类：网络请求，可添加请求头，请求参数" class="headerlink" title="request.Request类：网络请求，可添加请求头，请求参数"></a>request.Request类：网络请求，可添加请求头，请求参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like    Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)   <span class="comment">#重点，添加请求头信息，User-Agent</span></span><br><span class="line">resp = request.urlopen(rq)</span><br><span class="line"><span class="built_in">print</span>(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="ProxyHandler处理器（代理设置）：封ip问题"><a href="#ProxyHandler处理器（代理设置）：封ip问题" class="headerlink" title="ProxyHandler处理器（代理设置）：封ip问题"></a>ProxyHandler处理器（代理设置）：封ip问题</h3><p>代理原理：在请求网站之前，先请求代理服务器，然后让代理服务器去请求目标网站，代理服务器拿到目标网站数据后，再转发给我们的代码。</p>
<p><a href="http://httpbin.org/">http://httpbin.org</a>  —这个网站方便查看http请求的一些参数</p>
<p>常用的代理有：</p>
<ul>
<li>快代理：<a href="https://www.kuaidaili.com/">https://www.kuaidaili.com/</a></li>
<li>代理云</li>
</ul>
<p>在代码中使用代理：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/ip&quot;</span></span><br><span class="line"><span class="comment">#创建handler</span></span><br><span class="line">handler = request.ProxyHandler(&#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;58.56.149.198:53281&quot;</span>&#125;)</span><br><span class="line"><span class="comment">#创建opener</span></span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"><span class="comment">#使用opener发送请求</span></span><br><span class="line">resp = opener.<span class="built_in">open</span>(url)</span><br><span class="line"><span class="built_in">print</span>( resp.read() )</span><br></pre></td></tr></table></figure>

<h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies:"></a>cookies:</h3><p>某些网站为了辨别用户身份，进行session跟踪而存储在用户本地终端上的数据</p>
<h4 id="模拟cookies访问网站方法一："><a href="#模拟cookies访问网站方法一：" class="headerlink" title="模拟cookies访问网站方法一："></a>模拟cookies访问网站方法一：</h4><p>用浏览器访问网站后，手动抓包，将cookie信息复制，放到代码的请求头上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.zhihu.com/&quot;</span></span><br><span class="line">headers = &#123;  </span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like    Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span>,</span><br><span class="line"><span class="string">&quot;cookie&quot;</span>: <span class="string">&#x27;_zap=5b69d7ff-9b3f-468b-b891-103b2029d8a3;..#复制的cookie内容太多，省略不写</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">rq = request.Request(url, headers=headers)</span></span><br><span class="line"><span class="string">resp = request.urlopen(rq)</span></span><br><span class="line"><span class="string">print(resp.read().decode(&quot;utf-8&quot;))</span></span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法二："><a href="#模拟cookies访问网站方法二：" class="headerlink" title="模拟cookies访问网站方法二："></a>模拟cookies访问网站方法二：</h4><p>http.cookiejar模块，主要有CookieJar，FileCookieJar，MozillaCookieJar，LWPCookieJar四个类</p>
<p>CookieJar：将cookie保存在内存中</p>
<p>FileCookieJar，MozillaCookieJar，LWPCookieJar：将cookie保存在文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> CookieJar</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="comment">#1，登入</span></span><br><span class="line">cookiejar = CookieJar()</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)  <span class="comment">#创建handler</span></span><br><span class="line">opener = request.build_opener(handler)            <span class="comment">#创建opener</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#opener发送请求前，准备登入的url,请求头,请求参数(需要编码)</span></span><br><span class="line">post_url = <span class="string">&quot;https://i.meishi.cc/login_t.php?username=17370466454&amp;login_type=1&amp;password=575389&quot;</span></span><br><span class="line">post_headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">post_data = parse.urlencode(&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;17370466454&quot;</span>,</span><br><span class="line">    <span class="string">&quot;login_type&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;575389&quot;</span></span><br><span class="line">&#125;)    </span><br><span class="line"><span class="comment">#request.Request()里的data只能接收字节，所以data=post_data.encode(&quot;utf-8&quot;)</span></span><br><span class="line">post_rq = request.Request(url=post_url, headers=post_headers, data=post_data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="comment">#opener访问网站后，网站的cookie暂时保存在内存opener中</span></span><br><span class="line">opener.<span class="built_in">open</span>(post_rq)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2，访问，opener已经带有cookie访问网站</span></span><br><span class="line">url = <span class="string">&quot;https://meishij.net/&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)</span><br><span class="line">resp = opener.<span class="built_in">open</span>(rq)</span><br><span class="line"><span class="built_in">print</span>(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="cookies的保存"><a href="#cookies的保存" class="headerlink" title="cookies的保存"></a>cookies的保存</h4><p>以MozillaCookieJar类为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookies = MozillaCookieJar(<span class="string">&quot;cookies.txt&quot;</span>)  <span class="comment">#保存cookies的文件</span></span><br><span class="line">handler = request.HTTPCookieProcessor(cookies)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)</span><br><span class="line">opener.<span class="built_in">open</span>(rq)</span><br><span class="line">cookies.save()   <span class="comment">#保存cookies</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#cookies.save( ignore_discard=False, ignore_expires=False )  默认</span></span><br><span class="line"><span class="comment">#ignore_discard=True       即使cookies即将被丢失也要保存起来</span></span><br><span class="line"><span class="comment">#ignore_expires=True	   如果cookies已经过期也将它保存，并且文件已存在时将覆盖</span></span><br></pre></td></tr></table></figure>



<h2 id="requests库-—第三方库"><a href="#requests库-—第三方库" class="headerlink" title="requests库  —第三方库"></a>requests库  —第三方库</h2><p>让HTTP服务人类</p>
<h3 id="安装和文档地址"><a href="#安装和文档地址" class="headerlink" title="安装和文档地址:"></a>安装和文档地址:</h3><ul>
<li><p>pip安装：pip install requests</p>
</li>
<li><p>中文文档：<a href="https://docs.python-requests.org/zh_CN/latest/index.html">https://docs.python-requests.org/zh_CN/latest/index.html</a></p>
</li>
<li><p>github地址：<a href="https://github.com/requests/requests">https://github.com/requests/requests</a></p>
</li>
</ul>
<h3 id="发送get请求："><a href="#发送get请求：" class="headerlink" title="发送get请求："></a>发送get请求：</h3><p>response = requests.get(url, headers=headers, params=params)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;wd&quot;</span>:<span class="string">&quot;中国&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url, headers=headers, params=params)  <span class="comment">#发送get请求</span></span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line"><span class="built_in">print</span>(response.content.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(response.json())  <span class="comment">#如果响应的是json格式字符串，直接将JSON转换成python数据，相当于json.loads(json)</span></span><br></pre></td></tr></table></figure>

<h3 id="发送post请求："><a href="#发送post请求：" class="headerlink" title="发送post请求："></a>发送post请求：</h3><p>方法与上面的<em><strong>发送get请求</strong></em>用法差不多：</p>
<p>response = requests.post(url, headers=headers, data=data)</p>
<h3 id="response-content和response-text区别："><a href="#response-content和response-text区别：" class="headerlink" title="response.content和response.text区别："></a>response.content和response.text区别：</h3><p>1，response.content：直接从网站上抓取数据，没有经过解码，所以是bytes类型，其实硬盘和网络上传输的字符串类型都是bytes类型。</p>
<p>2，response.text：是str数据类型，把response.content经行自动解码的结果，自动解码可能会出现乱码的情况，所以需要自己手动解码：response.content.decode(“utf-8”)。</p>
<h3 id="使用代理："><a href="#使用代理：" class="headerlink" title="使用代理："></a>使用代理：</h3><p>resp = requests.get(url, proxies=代理信息)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;116.196.88.86:3128&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/ip&quot;</span></span><br><span class="line">resp = requests.get(url, proxies=proxy)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<h3 id="处理cookie"><a href="#处理cookie" class="headerlink" title="处理cookie:"></a>处理cookie:</h3><h4 id="查看cookies"><a href="#查看cookies" class="headerlink" title="查看cookies"></a>查看cookies</h4><p>响应中如果包含cookie，可以通过cookies属性查看cookie：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(resp.cookies)</span><br><span class="line"><span class="built_in">print</span>(resp.cookies.get_dict())   <span class="comment">#字典型的coookie</span></span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法一：-1"><a href="#模拟cookies访问网站方法一：-1" class="headerlink" title="模拟cookies访问网站方法一："></a>模拟cookies访问网站方法一：</h4><p>用浏览器访问网站后，手动抓包，将cookie信息复制，放到代码的请求头上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.zhihu.com/&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span>,</span><br><span class="line"><span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;_zap=5b69d7ff-9b3f-468b-b891-103b2029d8&#x27;</span>   <span class="comment">#复制的cookie内容太多，省略</span></span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法二：使用session，共享cookie"><a href="#模拟cookies访问网站方法二：使用session，共享cookie" class="headerlink" title="模拟cookies访问网站方法二：使用session，共享cookie"></a>模拟cookies访问网站方法二：使用session，共享cookie</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#登入,准备好需要登入的网站，参数，请求头</span></span><br><span class="line">post_url = <span class="string">&quot;&quot;</span>      <span class="comment">#登入的网站</span></span><br><span class="line">post_data = &#123;&#125;     <span class="comment">#登入的参数，账号密码</span></span><br><span class="line">post_headers = &#123;&#125;  <span class="comment">#登入需要的请求头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1，创建session</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="comment">#2，用session发送请求，然后session会自动保存cookie信息</span></span><br><span class="line">session.post(url=post_url, data=post_data, headers=post_headers)</span><br><span class="line"><span class="comment">#3，session中已带有cookie信息，继续用session访问网站，实现cookie共享</span></span><br><span class="line">url = <span class="string">&quot;https://m.meishij.net/&quot;</span></span><br><span class="line">resp = session.get(url)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在session中添加代理IP</span></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;116.196.88.86:3128&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">session.proxies = proxy</span><br></pre></td></tr></table></figure>

<h3 id="处理不信任的ssl证书："><a href="#处理不信任的ssl证书：" class="headerlink" title="处理不信任的ssl证书："></a>处理不信任的ssl证书：</h3><p>对于哪些被信任的SSL证书的网站，如<a href="https://www.baidu.com/%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%E3%80%82">https://www.baidu.com/，直接访问可以正常返回响应。</a></p>
<p>而不被信任的SSL证书的网站无法正常返回响应。requests请求时需要把verify=False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://inv-veri.chinatax.gov.cn/&quot;</span></span><br><span class="line">resp = requests.get(url, verify=<span class="literal">False</span>)   <span class="comment">#verify=False</span></span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>



<h1 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h1><p>数据解析，即数据提取，爬取的所有信息中将需要的信息提取出来。</p>
<h2 id="XPath语法和lxml模块"><a href="#XPath语法和lxml模块" class="headerlink" title="XPath语法和lxml模块"></a>XPath语法和lxml模块</h2><h3 id="什么是XPath"><a href="#什么是XPath" class="headerlink" title="什么是XPath"></a>什么是XPath</h3><p>xpath（XML Path Language）是一门在xml和html文档中查找信息的语言，可用来在XML和HTML文档中对元素和属性经行遍历</p>
<h3 id="XPath开发工具"><a href="#XPath开发工具" class="headerlink" title="XPath开发工具"></a>XPath开发工具</h3><p>Chrome插件XPath Helper</p>
<p>Firefox插件Try XPath</p>
<h3 id="XPath节点"><a href="#XPath节点" class="headerlink" title="XPath节点"></a>XPath节点</h3><p>在XPath中，有七类类型的节点：元素，属性，文本，命名空间，处理指令，注释，文档(根)节点。XML文档是被作为节点树来对待的。树的根被称为文档节点或者根节点。</p>
<h3 id="XPath基本语法："><a href="#XPath基本语法：" class="headerlink" title="XPath基本语法："></a>XPath基本语法：</h3><h4 id="路径表达式："><a href="#路径表达式：" class="headerlink" title="路径表达式："></a>路径表达式：</h4><table>
<thead>
<tr>
<th align="left">表达式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">nodename</td>
<td align="left">选取此节点的所有子节点。</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">从根节点选取（取子节点）。</td>
</tr>
<tr>
<td align="left">//</td>
<td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置（取子孙节点）。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">选取当前节点。</td>
</tr>
<tr>
<td align="left">..</td>
<td align="left">选取当前节点的父节点。</td>
</tr>
<tr>
<td align="left">@</td>
<td align="left">选取属性。</td>
</tr>
</tbody></table>
<h4 id="谓语："><a href="#谓语：" class="headerlink" title="谓语："></a>谓语：</h4><table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">/bookstore/book[1]</td>
<td align="left">选取属于 bookstore 子元素的第一个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[last()]</td>
<td align="left">选取属于 bookstore 子元素的最后一个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[last()-1]</td>
<td align="left">选取属于 bookstore 子元素的倒数第二个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[position()&lt;3]</td>
<td align="left">选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td>
</tr>
<tr>
<td align="left">//title[@lang]</td>
<td align="left">选取所有拥有名为 lang 的属性的 title 元素。</td>
</tr>
<tr>
<td align="left">//title[@lang=’eng’]</td>
<td align="left">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>
</tr>
<tr>
<td align="left">/bookstore/book[price&gt;35.00]</td>
<td align="left">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
<tr>
<td align="left">/bookstore/book[price&gt;35.00]//title</td>
<td align="left">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
</tbody></table>
<h4 id="通配符："><a href="#通配符：" class="headerlink" title="通配符："></a>通配符：</h4><table>
<thead>
<tr>
<th align="left">通配符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配任何元素节点。</td>
</tr>
<tr>
<td align="left">@*</td>
<td align="left">匹配任何属性节点。</td>
</tr>
<tr>
<td align="left">node()</td>
<td align="left">匹配任何类型的节点。</td>
</tr>
</tbody></table>
<h4 id="选取若干路径："><a href="#选取若干路径：" class="headerlink" title="选取若干路径："></a>选取若干路径：</h4><table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">//book/title | //book/price</td>
<td align="left">选取 book 元素的所有 title 和 price 元素。</td>
</tr>
<tr>
<td align="left">//title | //price</td>
<td align="left">选取文档中的所有 title 和 price 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book/title | //price</td>
<td align="left">选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td>
</tr>
</tbody></table>
<h3 id="lxml库："><a href="#lxml库：" class="headerlink" title="lxml库："></a>lxml库：</h3><p>安装：pip install lxml</p>
<p>lxml python 官方文档：<a href="https://lxml.de/index.html">https://lxml.de/index.html</a></p>
<p>基本使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#随便定义的html文本举例</span></span><br><span class="line">text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">	&lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">	&lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">	&lt;script type=&quot;text/javascript&quot; src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">	&lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">		&lt;input type=&quot;text&quot;&gt;</span></span><br><span class="line"><span class="string">		&lt;p&gt;&lt;a href=&#x27;www.baidu.com&#x27;&gt;hello&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">	&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment">#将字符串解析为html文档树</span></span><br><span class="line">html= etree.HTML(text)</span><br><span class="line"><span class="built_in">print</span>(html)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将html列化为字符串,即获取元素的源代码</span></span><br><span class="line">result = etree.tostring(html).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#element.get(&quot;属性&quot;)  获取元素的某个属性的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从文件中读取html代码</span></span><br><span class="line">html = etree.parse(<span class="string">&quot;hello.html&quot;</span>)</span><br><span class="line">result = etree.tostring(html).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h3 id="在lxml中使用xpath语法："><a href="#在lxml中使用xpath语法：" class="headerlink" title="在lxml中使用xpath语法："></a>在lxml中使用xpath语法：</h3><p>文件路径：hello.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link0.html&quot;</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link1.html&quot;</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-inactive&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link2.html&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link3.html&quot;</span>&gt;</span>forth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link4.html&quot;</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>练习语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在lxml中使用xpath</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">html = etree.parse(<span class="string">&quot;hello.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1,获取所有li标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(etree.tostring(i))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#2，获取所有li标签下的class属性值</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/@class&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3,获取li标签下href为&quot;link0.html&quot;的a标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/a[@href=&#x27;link0.html&#x27;]&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4,获取li标签下所有span标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li//span&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5,获取li标签下的a标签的所有class属性</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/a//@class&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6,获取最后一个li的a的href属性对应的值</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()]/a/@href&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7,获取倒数第二个li元素的内容</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()-1]/a&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result[<span class="number">0</span>].text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8,获取倒是第二个li元素的内容的第二种方式</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()-1]/a/text()&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="xpath实战-爬取笑话网站："><a href="#xpath实战-爬取笑话网站：" class="headerlink" title="xpath实战-爬取笑话网站："></a>xpath实战-爬取笑话网站：</h3><p>网站：<a href="https://xiaohua.zol.com.cn/new/">https://xiaohua.zol.com.cn/new/</a></p>
<p>详情：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;https://xiaohua.zol.com.cn/&quot;</span>   </span><br><span class="line">joke = []     <span class="comment">#存放joke的容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解析每一页笑话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    detail_url_list = html.xpath(<span class="string">&quot;//ul[@class=&#x27;article-list&#x27;]/li[@class=&#x27;article-summary&#x27;]//a[@class=&#x27;all-read&#x27;]/@href&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_url_list:</span><br><span class="line">        detail_url = url+detail_url</span><br><span class="line">        parse_detail(detail_url)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#解析详情页笑话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>(<span class="params">detail_url</span>):</span></span><br><span class="line">    resp = requests.get(detail_url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    joke_title = html.xpath(<span class="string">&quot;//h1[@class=&#x27;article-title&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    joke_content = <span class="string">&#x27;&#x27;</span>.join(html.xpath(<span class="string">&quot;//div[@class=&#x27;article-text&#x27;]//text()&quot;</span>)).strip()</span><br><span class="line">    joke.append(&#123;</span><br><span class="line">        <span class="string">&quot;joke_title&quot;</span>: joke_title,</span><br><span class="line">        <span class="string">&quot;joke_content&quot;</span>: joke_content</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;joke_title&#125;</span>笑话下载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#主流程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):      <span class="comment">##1，2，3页笑话</span></span><br><span class="line">        page_url = <span class="string">f&quot;https://xiaohua.zol.com.cn/new/<span class="subst">&#123;i&#125;</span>.html&quot;</span>    </span><br><span class="line">        parse_page(page_url)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;joke.json&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="comment">#json.dump函数，将内存的数据保存到文件中</span></span><br><span class="line">        <span class="comment">#如果ensure_ascii没有设置为False，那么保存到json文件中文会存储为Unicode字符串</span></span><br><span class="line">        json.dump(joke, fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;所有笑话加载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p><em><strong>注</strong></em>：测试时，for循环中应添加break终止循环。代码运行时，添加time.sleep(2)，避免数据抓取过于频繁。</p>
<h2 id="BeautifulSoup4库"><a href="#BeautifulSoup4库" class="headerlink" title="BeautifulSoup4库"></a>BeautifulSoup4库</h2><p>和lxml一样，BeautifulSoup也是一个HTML/XML的解析器，主要功能也是解析和提取HTML/XML数据。</p>
<h3 id="安装和文档"><a href="#安装和文档" class="headerlink" title="安装和文档:"></a>安装和文档:</h3><p>安装：</p>
<p>pip install bs4</p>
<p>中文文档：</p>
<p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p>
<h3 id="几大解析工具对比："><a href="#几大解析工具对比：" class="headerlink" title="几大解析工具对比："></a>几大解析工具对比：</h3><table>
<thead>
<tr>
<th>解析工具</th>
<th>解析速度</th>
<th>解析难度</th>
</tr>
</thead>
<tbody><tr>
<td>BeautifulSoup</td>
<td>最慢</td>
<td>最简单</td>
</tr>
<tr>
<td>lxml</td>
<td>快</td>
<td>简单</td>
</tr>
<tr>
<td>正则</td>
<td>最快</td>
<td>最难</td>
</tr>
</tbody></table>
<h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">	&lt;a href=&quot;link.html&quot;&gt;hello word!!&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#第二个参数选择解析器，这里使用的是lxml解析器，已下载过。</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(soup)  	<span class="comment">#输html文档树</span></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())  <span class="comment">#输出格式有自动缩进</span></span><br><span class="line"><span class="built_in">print</span>(soup.a)   <span class="comment">#获取a标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.name)   <span class="comment">#获取a标签的标签名，就是a</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.attrs)  <span class="comment">#获取a标签的所有属性，返回字典</span></span><br><span class="line"><span class="built_in">print</span>(soup.a[<span class="string">&quot;href&quot;</span>]) <span class="comment">#a的href属性值</span></span><br></pre></td></tr></table></figure>

<h3 id="常见的四种对象："><a href="#常见的四种对象：" class="headerlink" title="常见的四种对象："></a>常见的四种对象：</h3><p>1，Tag：BeautifulSoup种所有标签都是Tag类型</p>
<p>2，NavigableString：标签的文本内容，继承python中的str，用法也是和str一样的</p>
<p>3，BeautifulSoup：继承Tag，用来生成BeautifulSoup树的，用法和Tag差不多</p>
<p>3，Comment：继承NavigableString，是注解内容</p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;hello word!!&lt;/p&gt;</span></span><br><span class="line"><span class="string">	&lt;!-- &lt;a href=&quot;link1&quot;&gt;hello word&lt;/a&gt; --&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.p)     <span class="comment">#Tag类型</span></span><br><span class="line"><span class="built_in">print</span>(soup.p.string)  <span class="comment">#NavigableString类型</span></span><br><span class="line"><span class="built_in">print</span>(soup)		  <span class="comment">#BeautifulSoup类型</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.string)  <span class="comment">#Comment类型</span></span><br></pre></td></tr></table></figure>

<h3 id="contents和children："><a href="#contents和children：" class="headerlink" title="contents和children："></a>contents和children：</h3><p><em>用法</em>：</p>
<p>Tag对象.contents     </p>
<p>Tag对象.children</p>
<p><em>返回</em>：</p>
<p>返回某个标签下的直接子元素，其中也包括字符串。</p>
<p><em>区别</em>：</p>
<p>contents返回的是list列表</p>
<p>children返回的是一个迭代器</p>
<h3 id="string和strings，stripped-strings属性和get-text-方法："><a href="#string和strings，stripped-strings属性和get-text-方法：" class="headerlink" title="string和strings，stripped_strings属性和get_text()方法："></a>string和strings，stripped_strings属性和get_text()方法：</h3><p><em>string</em>:获取某个标签下的文本内容，返回的是字符串。如果有多行，就无法获取。</p>
<p><em>strings</em>:获取某个标签下的文本内容，可以是多行，返回的是生成器。</p>
<p><em>stripped_strings</em>:用法和strings差不多可以是多行，放回生成器，区别是该属性会去除空白字符，如空格换行符。</p>
<p><em>get_text()</em>:获取某个标签下的文本内容，可以是多行，返回字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"></span><br><span class="line">string = soup.li.string</span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line">strings = soup.ul.strings</span><br><span class="line"><span class="built_in">print</span>(strings)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strings:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">stripped_strings = soup.ul.stripped_strings</span><br><span class="line"><span class="built_in">print</span>(stripped_strings)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> stripped_strings:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h3 id="find-和find-all-方法"><a href="#find-和find-all-方法" class="headerlink" title="find()和find_all()方法:"></a>find()和find_all()方法:</h3><p>搜索文档树使用的方法。</p>
<p>find方法是找到第一个满足条件的标签返回，返回一个元素。</p>
<p>find_all方法是把所有满足条件的标签都返回，返回的是一个list列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-0&quot; id=&#x27;hello&#x27;&gt;&lt;a href=&quot;link0.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;forth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取第一个li标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.li)</span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&quot;li&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有的li标签</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&quot;li&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取第二个li标签</span></span><br><span class="line">li = soup.find_all(<span class="string">&quot;li&quot;</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="comment">#获取class等于item-inactive的li标签，注：由于属性class有重名，用class_</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>, class_=<span class="string">&#x27;item-inactive&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"><span class="comment">#获取所有a标签href值</span></span><br><span class="line">a_list = soup.find_all(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> a_list:</span><br><span class="line">    <span class="built_in">print</span>(a[<span class="string">&quot;href&quot;</span>])</span><br><span class="line"><span class="comment">#获取所有li标签的文本内容</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    <span class="built_in">print</span>(li.string)</span><br><span class="line"><span class="comment">#只获取前两个li标签，limit限制个数</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>, limit=<span class="number">2</span>) </span><br></pre></td></tr></table></figure>

<h3 id="select-方法："><a href="#select-方法：" class="headerlink" title="select()方法："></a>select()方法：</h3><p>有时候使用css选择器的方式更加方便，需要使用css选择器时，用select方法。返回list列表。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#通过标签名查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line"><span class="comment">#通过class查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;.item-inactive&#x27;</span>))</span><br><span class="line"><span class="comment">#通过id查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;#hello&#x27;</span>))</span><br><span class="line"><span class="comment">#组合查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li a&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li &gt; a&#x27;</span>))</span><br><span class="line"><span class="comment">#通过属性查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a[href=&quot;link0.html&quot;]&#x27;</span>))</span><br><span class="line"><span class="comment">#获取内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a&#x27;</span>)[<span class="number">0</span>].get_text())</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战1-豆瓣Top250爬取："><a href="#爬虫实战1-豆瓣Top250爬取：" class="headerlink" title="爬虫实战1-豆瓣Top250爬取："></a>爬虫实战1-豆瓣Top250爬取：</h3><p>网站：<a href="https://movie.douban.com/top250">https://movie.douban.com/top250</a></p>
<p>爬取：爬取top250的电影的信息，这里只爬取了电影名，演员，上映时间，评分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#访问页，获取每一页里的所有详情页url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_urls</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    html = resp.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    li_list = soup.find(<span class="string">&quot;ol&quot;</span>, class_=<span class="string">&quot;grid_view&quot;</span>).find_all(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">    detail_urls = []</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        detail_url = li.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&quot;href&quot;</span>]</span><br><span class="line">        detail_urls.append(detail_url)</span><br><span class="line">    <span class="keyword">return</span> detail_urls</span><br><span class="line"><span class="comment">#解析详情页：访问详情页，解析电影信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>(<span class="params">detail_url, fp</span>):</span></span><br><span class="line">    resp = requests.get(detail_url, headers=headers)</span><br><span class="line">    html = resp.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(soup.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span>=<span class="string">&quot;wrapper&quot;</span>).find(<span class="string">&quot;h1&quot;</span>).stripped_strings))</span><br><span class="line">    actor_exist = soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;actor&quot;</span>)</span><br><span class="line">    actor = <span class="string">&quot;暂无数据&quot;</span></span><br><span class="line">    <span class="comment">#由于有的电影没有演员信息，所有这里if判断</span></span><br><span class="line">    <span class="keyword">if</span> actor_exist:</span><br><span class="line">        actor = <span class="string">&#x27; &#x27;</span>.join(<span class="built_in">list</span>(soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;actor&quot;</span>).find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;attrs&quot;</span>).stripped_strings))</span><br><span class="line">    date = soup.find(<span class="string">&quot;div&quot;</span>, <span class="built_in">id</span>=<span class="string">&quot;info&quot;</span>).find_all(<span class="string">&quot;span&quot;</span>, <span class="built_in">property</span>=<span class="string">&quot;v:initialReleaseDate&quot;</span>)[<span class="number">0</span>].string</span><br><span class="line">    score = soup.find(<span class="string">&quot;strong&quot;</span>, class_=<span class="string">&quot;ll rating_num&quot;</span>).string</span><br><span class="line">    num = soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;top250-no&quot;</span>).string</span><br><span class="line">    fp.write(<span class="string">&quot;电影名：&#123;&#125;，演员：&#123;&#125;，上映时间：&#123;&#125;，评分：&#123;&#125;\n\n&quot;</span>.<span class="built_in">format</span>(name, actor, date, score))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num&#125;</span>-<span class="subst">&#123;name&#125;</span>,电影信息加载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    base_url = <span class="string">&quot;https://movie.douban.com/top250?start=&#123;&#125;&amp;filter=&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;movieTop250.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">250</span>,<span class="number">25</span>):</span><br><span class="line">            page_url = base_url.<span class="built_in">format</span>(i)</span><br><span class="line">            detail_urls = get_detail_urls(page_url)</span><br><span class="line">            <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">                parse_detail(detail_url, fp)</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;top250部电影信息加载完毕！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战2-快代理ip爬取："><a href="#爬虫实战2-快代理ip爬取：" class="headerlink" title="爬虫实战2-快代理ip爬取："></a>爬虫实战2-快代理ip爬取：</h3><p>网站：<a href="https://www.kuaidaili.com/free/">https://www.kuaidaili.com/free/</a></p>
<p>爬取：IP信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpSpider</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;准备10页的url&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.page_urls = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">            page_url = <span class="string">&quot;https://www.kuaidaili.com/free/inha/&#123;&#125;/&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">            self.page_urls.append(page_url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page_infos</span>(<span class="params">self,page_url</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;解析每一页的代理ip信息，并返回&#x27;&#x27;&#x27;</span></span><br><span class="line">        resp = requests.get(page_url, headers=headers)</span><br><span class="line">        html = resp.text</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        trs = soup.find(<span class="string">&quot;table&quot;</span>, class_=<span class="string">&quot;table table-bordered table-striped&quot;</span>).find(<span class="string">&quot;tbody&quot;</span>).find_all(<span class="string">&quot;tr&quot;</span>)</span><br><span class="line">        infos = []</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">            info = <span class="built_in">list</span>(tr.stripped_strings)</span><br><span class="line">            infos.append(info)</span><br><span class="line">        <span class="keyword">return</span> infos</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;主程序&#x27;&#x27;&#x27;</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ipSpider.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;IP&quot;</span>,<span class="string">&quot;PORT&quot;</span>,<span class="string">&quot;匿名度&quot;</span>,<span class="string">&quot;类型&quot;</span>,<span class="string">&quot;位置&quot;</span>,<span class="string">&quot;响应速度&quot;</span>,<span class="string">&quot;最后验证时间&quot;</span>))</span><br><span class="line">            <span class="keyword">for</span> page_url <span class="keyword">in</span> self.page_urls:</span><br><span class="line">                infos = self.parse_page_infos(page_url)</span><br><span class="line">                <span class="keyword">for</span> info <span class="keyword">in</span> infos:</span><br><span class="line">                    fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(info[<span class="number">0</span>],info[<span class="number">1</span>],info[<span class="number">2</span>],info[<span class="number">3</span>],info[<span class="number">4</span>],info[<span class="number">5</span>],info[<span class="number">6</span>]))</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;count&#125;</span>页解析完成！&quot;</span>)</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ipSpider = IpSpider()</span><br><span class="line">    ipSpider.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h2 id="正则表达式和re模块"><a href="#正则表达式和re模块" class="headerlink" title="正则表达式和re模块"></a>正则表达式和re模块</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;abc&quot;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;a&#x27;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h3 id="使用规则："><a href="#使用规则：" class="headerlink" title="使用规则："></a>使用规则：</h3><h4 id="匹配单个字符："><a href="#匹配单个字符：" class="headerlink" title="匹配单个字符："></a>匹配单个字符：</h4><ul>
<li><p>点(.)：匹配任意字符(除了\n)</p>
</li>
<li><p>\d：匹配任意数字</p>
</li>
<li><p>\D：匹配任意非数字</p>
</li>
<li><p>\s：匹配任意空白字符(\n,\t,\r)</p>
</li>
<li><p>\S：非空白字符</p>
</li>
<li><p>\w：匹配大小写英文字母，数字以及下划线</p>
</li>
<li><p>\W：匹配和\w正好相反</p>
</li>
<li><p>[]：组合方式，只要满足中括号中的每一项都算匹配成功</p>
</li>
</ul>
<p>#例如：</p>
<p>[1b]：表示1和b都能匹配到，</p>
<p>[a-zA-Z]：表示大小写英文字母都能匹配到</p>
<p>[0-9]：表示0到9数字都能匹配到，[ ^0-9 ]：^取反</p>
<h4 id="匹配多个字符："><a href="#匹配多个字符：" class="headerlink" title="匹配多个字符："></a>匹配多个字符：</h4><ul>
<li><p>*：匹配任意个</p>
</li>
<li><p>+：匹配1个或多个</p>
</li>
<li><p>？：匹配0个或1个</p>
</li>
<li><p>{m}：匹配m个</p>
</li>
<li><p>{m,n}：匹配m-n之间个</p>
</li>
<li><p>|：匹配多个字符或表达式，或连接</p>
</li>
</ul>
<p>练习：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#手机验证：号码1开头，第二位34578，后面9位任意数字</span></span><br><span class="line">text = <span class="string">&quot;17370466454&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;1[34578]\d&#123;9&#125;&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱验证：邮箱名由数字、大小写英文、下划线组成，后接@，后接域名</span></span><br><span class="line">text = <span class="string">&quot;1753645532@qq.com&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;\w+@[a-z0-9]+\.[a-z]+&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证url：前面是http或https或ftp，后接冒号，后接//，后接任意非空白字符</span></span><br><span class="line">text = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;(http|https|ftp)://\S+&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#省份证验证：前面17位任意数字，后接数字或大小写x</span></span><br><span class="line">text = <span class="string">&quot;36242820000815323x&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;\d&#123;17&#125;[\dxX]&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>

<h4 id="开始，结束，贪婪和非贪婪："><a href="#开始，结束，贪婪和非贪婪：" class="headerlink" title="开始，结束，贪婪和非贪婪："></a>开始，结束，贪婪和非贪婪：</h4><ul>
<li><p>^：以…开头</p>
</li>
<li><p>&amp;：以…结尾</p>
</li>
<li><p>贪婪和非贪婪：正常时为贪婪模式，尽可能匹配多的字符；匹配多个字符时，加上?为非贪婪模式，尽可能少的匹配字符。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text = <span class="string">&quot;123456&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;\d+?&quot;</span>,text)   <span class="comment">#匹配多个字符时，加上?为非贪婪模式</span></span><br><span class="line"><span class="built_in">print</span>(result.group())   <span class="comment">#结果：1</span></span><br></pre></td></tr></table></figure>

<p>案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例一：获取html标签</span></span><br><span class="line">text = <span class="string">&quot;&lt;h1&gt;这是标题&lt;/h1&gt;&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;&lt;.+&gt;&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())   <span class="comment">#贪婪模式结果：&lt;h1&gt;这是标题&lt;/h1&gt;</span></span><br><span class="line">result2 = re.match(<span class="string">&quot;&lt;.+?&gt;&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result2.group())  <span class="comment">#非贪婪模式结果：&lt;h1&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例二：验证一个字符是不是1-100之间</span></span><br><span class="line">text = <span class="string">&quot;100&quot;</span></span><br><span class="line">result = re.search(<span class="string">&quot;^0$|^[1-9]\d?$|^100$&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>

<h4 id="转义字符和原生字符："><a href="#转义字符和原生字符：" class="headerlink" title="转义字符和原生字符："></a>转义字符和原生字符：</h4><p>python中的转义字符，如在\n前加上一个,即\\n；在字符串前面加上r，变成原生字符。例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#\n有特殊意义的字符，转义后将变得无意义</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;aaaa\\naa&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;aaa\naa&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>正则中的转义字符：也是在特殊意义字符前加\</p>
<p>但是在python中解析正则，会先把字符串给python层面解析，再给正则解析。</p>
<p>所以对于\a,\b,\c,\d…这些带有反斜杠的特殊意义字符前加上\，却不能被成功解析。应该还需要在字符串前面加上r，如r”\c”，或者应该四个,如”\\\\d”。建议用加r的方法，所以以后在python中使用正则匹配时应习惯性在字符串前加r</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;\c&quot;</span></span><br><span class="line">result = re.match(<span class="string">r&quot;\\c&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line">result2 = re.match(<span class="string">&quot;\\\\c&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result2.group())</span><br><span class="line"><span class="comment">#输出结果：\c</span></span><br></pre></td></tr></table></figure>

<h4 id="分组："><a href="#分组：" class="headerlink" title="分组："></a>分组：</h4><p>分组,把重要的信息用()进行分组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;as1dyyf2&quot;</span>  <span class="comment">#获取数字</span></span><br><span class="line">result = re.match(<span class="string">&quot;[a-z]+(\d)[a-z]+(\d)&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.groups())  <span class="comment">#结果：(&#x27;1&#x27;, &#x27;2&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#group()/group(0)：匹配整个分组</span></span><br><span class="line"><span class="comment">#group(1)：匹配第一个分组</span></span><br><span class="line"><span class="comment">#group(2)：匹配第二个分组</span></span><br><span class="line"><span class="comment">#groups()：匹配所有分组</span></span><br></pre></td></tr></table></figure>

<h3 id="re模块常用函数："><a href="#re模块常用函数：" class="headerlink" title="re模块常用函数："></a>re模块常用函数：</h3><p>match()，search()，findall()，sub()，split()，compile() 和 re.VERBOSE，re.DOTALL</p>
<ul>
<li>match：匹配第一个满足条件的，从文本<strong>开始处</strong>进行匹配</li>
<li>search：匹配第一个满足条件的</li>
<li>findall：匹配<strong>所有</strong>满足条件的，返回list列表</li>
<li>sub：<strong>替换</strong>所有满足条件的字符串，相比于默认的<code>text.replace</code>可以有多个条件</li>
<li>split：按条件<strong>分割</strong>字符,返回list列表，相比于默认的<code>text.split</code>可以有多个条件</li>
<li>compile：<strong>编译</strong>正则表达式，如果在for循环中应该先编译再进行循环，提高效率</li>
<li>re.VERBOSE：在函数参数中加上表示可以添加注释<br>re.DOTALL：在函数参数中加上表示点(.)可以代替所以字符<br>re.l：不区分大小写</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#findall:匹配所有满足条件的，返回list列表</span></span><br><span class="line">text = <span class="string">&quot;apple price is $99, orange price is $17&quot;</span></span><br><span class="line">result = re.findall(<span class="string">r&quot;\$\d+&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result)   <span class="comment">#结果：[&#x27;$99&#x27;, &#x27;$17&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sub，替换字符串</span></span><br><span class="line">text = <span class="string">&quot;hello world,ni hao ya&quot;</span></span><br><span class="line">result = re.sub(<span class="string">r&quot;[ ,]&quot;</span>,<span class="string">&quot;,&quot;</span>,text)  <span class="comment">#空格或逗号替换</span></span><br><span class="line"><span class="built_in">print</span>(result)   <span class="comment">#结果：hello,world,ni,hao,ya</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#split,分割字符,返回list列表</span></span><br><span class="line">text = <span class="string">&quot;hello,world ni,hao ya&quot;</span></span><br><span class="line">result = re.split(<span class="string">r&quot; |,&quot;</span>,text)  <span class="comment">#空格或逗号分割</span></span><br><span class="line"><span class="built_in">print</span>(result)   <span class="comment">#结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;ni&#x27;, &#x27;hao&#x27;, &#x27;ya&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#compile：编译正则表达式，如果在for循环中应该先编译再进行循环，提高效率</span></span><br><span class="line">text = <span class="string">&quot;apple price is 36.12&quot;</span></span><br><span class="line">r = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+\.?\d*&#x27;</span>)</span><br><span class="line">result = re.search(r,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战1-赶集网租房信息爬取："><a href="#爬虫实战1-赶集网租房信息爬取：" class="headerlink" title="爬虫实战1-赶集网租房信息爬取："></a>爬虫实战1-赶集网租房信息爬取：</h3><p>网站：<a href="https://cs.58.com/chuzu/">https://cs.58.com/chuzu/</a></p>
<p>爬取：前十页房子标题，户型，面积，价格信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">cookie = <span class="string">&quot;&quot;&quot;f=n; commontopbar_new_city_info=414%7C%E9%95%..........&quot;&quot;&quot;</span> <span class="comment">#cookie复制的，字符太多，省略</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cookie&quot;</span>:cookie</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    infos = re.findall(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    house-cell.+?des.+?&lt;h2&gt;.+?&gt;\s*(.+?)\s*?&lt;/a&gt;    #标题</span></span><br><span class="line"><span class="string">    .+?&lt;p.+?&gt;(.+?)\s+.*?(\d+.+?)\s+         #户型，面积</span></span><br><span class="line"><span class="string">    .+?money.+?&lt;b.+?&gt;(\d+?)&lt;/b&gt;      #价格</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>,text,re.VERBOSE|re.DOTALL)    <span class="comment">#re.VERBOSE和re.DOTALL的用法体现</span></span><br><span class="line">    <span class="keyword">return</span> infos</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    base_url = <span class="string">&quot;https://cs.58.com/chuzu/pn&#123;&#125;/?PGTID=0d3090a7-0019-e874-075b-c49785753d71&amp;ClickID=2&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;houseInfo.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;标题&quot;</span>,<span class="string">&quot;户型&quot;</span>,<span class="string">&quot;面积&quot;</span>,<span class="string">&quot;价格&quot;</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">            page_url = base_url.<span class="built_in">format</span>(i)</span><br><span class="line">            infos = parse_page(page_url)</span><br><span class="line">            <span class="keyword">for</span> info <span class="keyword">in</span> infos:</span><br><span class="line">                fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(info[<span class="number">0</span>],info[<span class="number">1</span>],info[<span class="number">2</span>],info[<span class="number">3</span>]))</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;i&#125;</span>页加载完成！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战2-糗事百科爬取："><a href="#爬虫实战2-糗事百科爬取：" class="headerlink" title="爬虫实战2-糗事百科爬取："></a>爬虫实战2-糗事百科爬取：</h3><p>网站：<a href="https://www.qiushibaike.com/text/">https://www.qiushibaike.com/text/</a></p>
<p>爬取：前十页糗事作者和内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Get_qiuShiBaiKe</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取前十页url&quot;&quot;&quot;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.page_urls = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">            page_url = <span class="string">&quot;https://www.qiushibaike.com/text/page/&#123;&#125;/&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">            self.page_urls.append(page_url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">self,page_url</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;解析每一页&quot;&quot;&quot;</span></span><br><span class="line">        resp = requests.get(page_url, headers=self.headers)</span><br><span class="line">        text = resp.text</span><br><span class="line">        jokes = re.findall(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;div.+?article.+?&lt;h2&gt;\s+(.+?)\s+&lt;/h2&gt;   #作者</span></span><br><span class="line"><span class="string">        .+?content.+?&lt;span&gt;\s+(.+?)\s+&lt;/span&gt;   #内容，但是内容中还包含&lt;br/&gt;标签</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>, text, re.VERBOSE|re.DOTALL)</span><br><span class="line">        new_jokes = []</span><br><span class="line">        <span class="keyword">for</span> joke <span class="keyword">in</span> jokes:</span><br><span class="line">            content = re.sub(<span class="string">&quot;&lt;br/&gt;&quot;</span>, <span class="string">&quot; &quot;</span>,joke[<span class="number">1</span>])</span><br><span class="line">            new_jokes.append([</span><br><span class="line">                joke[<span class="number">0</span>],content</span><br><span class="line">            ])</span><br><span class="line">        <span class="keyword">return</span> new_jokes</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;主流程&quot;&quot;&quot;</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;qiushibaike.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;content&quot;</span>))</span><br><span class="line">            <span class="keyword">for</span> page_url <span class="keyword">in</span> self.page_urls:</span><br><span class="line">                jokes = self.parse_page(page_url)</span><br><span class="line">                <span class="keyword">for</span> joke <span class="keyword">in</span> jokes:</span><br><span class="line">                   fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(joke[<span class="number">0</span>],joke[<span class="number">1</span>]))</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;count&#125;</span>页加载完成！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    get_qiuShiBaiKe = Get_qiuShiBaiKe()</span><br><span class="line">    get_qiuShiBaiKe.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>1，如果想让 . 代表所有的字符，则需要在函数后面加re.DOTALL参数，否则 . 不会代表\n，也就是换行除外。</p>
<p>2，获取数据时，大多数要用非贪婪模式。</p>
<p>3，如果正则写得不对，会获取不到结果，程序会假死。</p>
<p>4，如果正则写得有问题，不要钻牛角尖，更换一个思路。</p>
<h1 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h1><h2 id="JSON文件格式处理。"><a href="#JSON文件格式处理。" class="headerlink" title="JSON文件格式处理。"></a>JSON文件格式处理。</h2><h3 id="JSON："><a href="#JSON：" class="headerlink" title="JSON："></a>JSON：</h3><p>是一种轻量级的数据交换格式，有效的提高网络传输效率</p>
<p>JSON支持数据格式：</p>
<ul>
<li>对象（python的字典）：使用花括号</li>
<li>数组（python的列表）：使用方括号</li>
<li>字符串类型：字符串必须要用双引号，不能用单引号</li>
<li>整形，浮点型，布尔类型还有null类型</li>
<li>多个数据之间用逗号(,)分开</li>
</ul>
<p><strong>注</strong>：json本质上就是一个字符串</p>
<h3 id="python数据转换成json数据（dumps和dump）："><a href="#python数据转换成json数据（dumps和dump）：" class="headerlink" title="python数据转换成json数据（dumps和dump）："></a>python数据转换成json数据（dumps和dump）：</h3><p>dumps：将python数据转换成json数据</p>
<p>dump：将python数据转换成json数据，接收fp文件指针参数，并且保存到文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;王五&quot;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">17</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">15</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#dumps</span></span><br><span class="line">json_students = json.dumps(students, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">type</span>(json_students) )   <span class="comment">#&lt;class &#x27;str&#x27;&gt; 类型数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#dump</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.json&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json.dump(students, fp, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：这两个方法都有 ensure_ascii 参数，默认为True，那么只存储ASCII码格式，不存储中文。要存储中文将其设为False。</p>
<h3 id="json数据转换成python数据（loads和load）："><a href="#json数据转换成python数据（loads和load）：" class="headerlink" title="json数据转换成python数据（loads和load）："></a>json数据转换成python数据（loads和load）：</h3><p>loads：将json数据转换成python数据</p>
<p>load：将json数据转换成python数据，并且是从文件中获取JSON数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_students = <span class="string">&#x27;[&#123;&quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 19&#125;, &#123;&quot;name&quot;: &quot;王五&quot;, &quot;age&quot;: 17&#125;, &#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 15&#125;]&#x27;</span>   <span class="comment">#json类型字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#loads</span></span><br><span class="line">students = json.loads(json_students)</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">type</span>(students) )  <span class="comment">#&lt;class &#x27;list&#x27;&gt; 类型数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#load</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.json&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    studetns = json.load(fp)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(studetns))  <span class="comment">#&lt;class &#x27;list&#x27;&gt; 类型数据</span></span><br></pre></td></tr></table></figure>



<h2 id="CSV文件格式处理。"><a href="#CSV文件格式处理。" class="headerlink" title="CSV文件格式处理。"></a>CSV文件格式处理。</h2><p>csv文件有点类似excel表格一样。所以一般第一行为字段名</p>
<h3 id="读取CSV文件的两种方法："><a href="#读取CSV文件的两种方法：" class="headerlink" title="读取CSV文件的两种方法："></a>读取CSV文件的两种方法：</h3><p>1，以列表形式读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ipSpider.csv&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.reader(fp)  <span class="comment">#返回一个迭代器reader</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(x[<span class="number">4</span>])</span><br></pre></td></tr></table></figure>

<p>2，以字典形式读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ipSpider.csv&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.DictReader(fp)   <span class="comment">#返回一个迭代器reader</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(x[<span class="string">&quot;位置&quot;</span>])</span><br></pre></td></tr></table></figure>

<h3 id="写入CSV文件的两种方法："><a href="#写入CSV文件的两种方法：" class="headerlink" title="写入CSV文件的两种方法："></a>写入CSV文件的两种方法：</h3><p>1，以列表形式读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">headers = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>]</span><br><span class="line">students = [</span><br><span class="line">    (<span class="string">&quot;李四&quot;</span>,<span class="number">18</span>),</span><br><span class="line">    (<span class="string">&quot;王五&quot;</span>,<span class="number">16</span>),</span><br><span class="line">    (<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.csv&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    writer = csv.writer(fp)</span><br><span class="line">    writer.writerow(headers)    <span class="comment">#写一行</span></span><br><span class="line">    writer.writerows(students)  <span class="comment">#写多行</span></span><br></pre></td></tr></table></figure>

<p>2，以字典形式读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">headers = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>]</span><br><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;李四&#x27;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;张良&#x27;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">15</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;李逵&#x27;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.csv&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    writer = csv.DictWriter(fp, headers)</span><br><span class="line">    writer.writeheader()     <span class="comment">#上一行传入了字段名，这里还需要写入字段名</span></span><br><span class="line">    writer.writerows(students)</span><br></pre></td></tr></table></figure>



<h2 id="Excel文件处理。"><a href="#Excel文件处理。" class="headerlink" title="Excel文件处理。"></a>Excel文件处理。</h2><p>安装xlrd和xlwt两个库（读取和写入）</p>
<ul>
<li>pip install xlrd</li>
<li>pip indtall xlwt</li>
</ul>
<h3 id="读取Excel（xlrd）："><a href="#读取Excel（xlrd）：" class="headerlink" title="读取Excel（xlrd）："></a>读取Excel（xlrd）：</h3><p>1,打开Excel文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line">workbook = xlrd.open_workbook(<span class="string">&quot;test.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>2,工作簿对sheet表的操作:</p>
<ul>
<li><p>workbook.sheet_names()：获取所有sheet表名</p>
</li>
<li><p>workbook.sheet_by_index(0)：通过索引，获取sheet表对象(下标从0开始)</p>
</li>
<li><p>workbook.sheet_by_name(“Sheet1”)：通过名字，获取sheet表对象</p>
</li>
<li><p>workbook.sheets()：获取所有sheet表对象</p>
</li>
</ul>
<p>3，sheet工作表对cell单元格的操作：</p>
<ul>
<li>sheet.nrows：总行数</li>
<li>sheet.ncols：总列数</li>
<li>sheet.cell(row,col) ：获取单元格对象</li>
<li>sheet.cell_value(row,col) ：获取单元格对象的值</li>
<li>sheet.row_slice(row,start_col,end_col) ：获取指定行里的某几列单元格对象</li>
<li>sheet.row_values(row,start_col,end_col) ：获取指定行里的某几列单元格对象的值</li>
<li>sheet.col_slice(col,start_row,end_row) ：获取指定列里的某几行单元格对象</li>
<li>sheet.col_values(col,start_row,end_row) ：获取指定列里的某几行单元格对象的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line">workbook = xlrd.open_workbook(<span class="string">&quot;test.xlsx&quot;</span>)  <span class="comment">#获取工作簿</span></span><br><span class="line">sheet = workbook.sheet_by_index(<span class="number">0</span>)   <span class="comment">#获取sheet表</span></span><br><span class="line"><span class="built_in">print</span>(sheet.name)     <span class="comment">#打印sheet表名</span></span><br><span class="line">cells = sheet.row_slice(<span class="number">1</span>,<span class="number">1</span>,sheet.ncols)   <span class="comment">#指定行获取某几列单元格</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> cells:</span><br><span class="line">    <span class="built_in">print</span>(cell.value)   <span class="comment">#打印单元格的值</span></span><br></pre></td></tr></table></figure>

<h3 id="写入Excel（xlwt）："><a href="#写入Excel（xlwt）：" class="headerlink" title="写入Excel（xlwt）："></a>写入Excel（xlwt）：</h3><p>1,建立工作簿：workbook = xlwt.Workbook()</p>
<p>2,添加工资表：sheet = workbook.add_sheet(“表1”)</p>
<p>3,写入数据：sheet.write(row,col,value)</p>
<p>4,保存路径：workbook.save(“test.xlsx”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">workbook = xlwt.Workbook()</span><br><span class="line">sheet = workbook.add_sheet(<span class="string">&quot;表1&quot;</span>)</span><br><span class="line"></span><br><span class="line">headers = [<span class="string">&quot;姓名&quot;</span>,<span class="string">&quot;英文&quot;</span>,<span class="string">&quot;数学&quot;</span>,<span class="string">&quot;语文&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(headers):</span><br><span class="line">    sheet.write(<span class="number">0</span>,index,value)</span><br><span class="line">    </span><br><span class="line">names = [<span class="string">&quot;阿信&quot;</span>,<span class="string">&quot;阿达&quot;</span>,<span class="string">&quot;二哥&quot;</span>,<span class="string">&quot;阿飞&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):</span><br><span class="line">    sheet.write(index+<span class="number">1</span>,<span class="number">0</span>,value)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">        sheet.write(row,col,random.randint(<span class="number">1</span>,<span class="number">100</span>))</span><br><span class="line">        </span><br><span class="line">workbook.save(<span class="string">&quot;test2.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h3><p><code>cell.ctype()</code>：查看数据类型</p>
<p><strong>注</strong>：返回结果为数字</p>
<ul>
<li><p>xlrd.XL_CELL_TEXT    文本类型(1)</p>
</li>
<li><p>xlrd.XL_CELL_NUMBER  数值类型(2)</p>
</li>
<li><p>xlrd.XL_CELL_DATE    日期时间类型(3)</p>
</li>
<li><p>xlrd.XL_CELL_BOOLEAN 布尔类型(4)</p>
</li>
<li><p>xlrd.XL_CELL_EMPTY   空白数据类型(0)</p>
</li>
</ul>
<h3 id="编辑Excel："><a href="#编辑Excel：" class="headerlink" title="编辑Excel："></a>编辑Excel：</h3><p>1，先读取原来的Excel文件（xlrd）</p>
<p>2，然后在读取的sheet表中对cell修改，使用 <code>put_cell(row, col, 数据类型, value, None)</code> 方法实现</p>
<p>3，再重新创建新的Excel文件写入数据（xlwt）</p>
<p>案例：Excel文件中有该数据，要求：添加总分和平均分</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>英语</th>
<th>数学</th>
<th>语文</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>55</td>
<td>68</td>
<td>99</td>
</tr>
<tr>
<td>李四</td>
<td>59</td>
<td>89</td>
<td>100</td>
</tr>
<tr>
<td>王五</td>
<td>56</td>
<td>87</td>
<td>77</td>
</tr>
<tr>
<td>赵四</td>
<td>69</td>
<td>45</td>
<td>89</td>
</tr>
<tr>
<td>小二</td>
<td>99</td>
<td>66</td>
<td>75</td>
</tr>
</tbody></table>
<p>结果：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>英语</th>
<th>数学</th>
<th>语文</th>
<th>总分</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>55</td>
<td>68</td>
<td>99</td>
<td>222</td>
</tr>
<tr>
<td>李四</td>
<td>59</td>
<td>89</td>
<td>100</td>
<td>248</td>
</tr>
<tr>
<td>王五</td>
<td>56</td>
<td>87</td>
<td>77</td>
<td>220</td>
</tr>
<tr>
<td>赵四</td>
<td>69</td>
<td>45</td>
<td>89</td>
<td>203</td>
</tr>
<tr>
<td>小二</td>
<td>99</td>
<td>66</td>
<td>75</td>
<td>240</td>
</tr>
<tr>
<td>平均分</td>
<td>67.6</td>
<td>71</td>
<td>88</td>
<td>226.6</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="comment">#1,读取和修改到内存中</span></span><br><span class="line">rwb = xlrd.open_workbook(<span class="string">&quot;test.xlsx&quot;</span>)</span><br><span class="line">rsheet = rwb.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">rows = rsheet.nrows</span><br><span class="line">cols = rsheet.ncols</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加总分字段</span></span><br><span class="line">rsheet.put_cell(<span class="number">0</span>,cols,xlrd.XL_CELL_TEXT,<span class="string">&quot;总分&quot;</span>,<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#添加每个同学的总分</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,rows):</span><br><span class="line">    grades = rsheet.row_values(row,<span class="number">1</span>,cols)</span><br><span class="line">    total = <span class="built_in">sum</span>(grades)</span><br><span class="line">    rsheet.put_cell(row,cols,xlrd.XL_CELL_NUMBER,total,<span class="literal">None</span>)</span><br><span class="line">rows = rsheet.nrows</span><br><span class="line">cols = rsheet.ncols</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加平均分字段</span></span><br><span class="line">rsheet.put_cell(rows,<span class="number">0</span>,xlrd.XL_CELL_TEXT,<span class="string">&quot;平均分&quot;</span>,<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#添加每个同学的平均分</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,cols):</span><br><span class="line">    grades = rsheet.col_values(col,<span class="number">1</span>,rows)</span><br><span class="line">    avg = <span class="built_in">sum</span>(grades)/<span class="built_in">len</span>(grades)</span><br><span class="line">    rsheet.put_cell(rows,col,xlrd.XL_CELL_NUMBER,avg,<span class="literal">None</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#2,写入</span></span><br><span class="line">wwb = xlwt.Workbook()</span><br><span class="line">wsheet = wwb.add_sheet(<span class="string">&quot;成绩表&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,rsheet.nrows):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,rsheet.ncols):</span><br><span class="line">        wsheet.write(row,col,rsheet.cell_value(row,col))</span><br><span class="line">wwb.save(<span class="string">&quot;test2.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="MySQL数据库处理。"><a href="#MySQL数据库处理。" class="headerlink" title="MySQL数据库处理。"></a>MySQL数据库处理。</h2><p>安装相关模块：</p>
<p>pip install pymysql</p>
<p>1，连接数据库(主机号，端口号，用户，密码，数据库，编码)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;root&quot;</span>, database=<span class="string">&quot;de&quot;</span>,charset=<span class="string">&quot;utf8&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>2，创建游标</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"><span class="comment">#创建字典类型游标</span></span><br><span class="line">cursor = db.cursor(cursor=pymysql.cursors.DictCursor)</span><br></pre></td></tr></table></figure>

<p>3，用游标执行sql语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用游标执行各种命令</span></span><br><span class="line">cursor.execute(<span class="string">&quot;insert into users  values (&#x27;1&#x27;,&#x27;王二麻子&#x27;,&#x27;男&#x27;)&quot;</span>)</span><br><span class="line">sql = <span class="string">&quot;update users set userName=&#x27;二麻子&#x27; where id=&#x27;1&#x27;&quot;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="comment">#可以添加%s为占位符</span></span><br><span class="line">sql = <span class="string">&quot;select * from users where id=%s&quot;</span></span><br><span class="line">cursor.execute(sql,(<span class="number">1</span>)) </span><br></pre></td></tr></table></figure>

<p>4，查询操作和修改操作<br>如果是查询操作，获取数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor.fetchone()    <span class="comment">#获取一条数据</span></span><br><span class="line">cursor.fetchmany(<span class="number">3</span>)  <span class="comment">#获取多条数据 </span></span><br><span class="line">cursor.fetchall()    <span class="comment">#获取所有数据</span></span><br></pre></td></tr></table></figure>

<p>如果是‘增删改’这些修改操作，需要提交</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db.commit()</span><br></pre></td></tr></table></figure>

<p>5，关闭资源</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor.close()  <span class="comment">#关闭游标</span></span><br><span class="line">db.close()	    <span class="comment">#关闭数据库连接</span></span><br></pre></td></tr></table></figure>



<h1 id="多线程爬虫"><a href="#多线程爬虫" class="headerlink" title="多线程爬虫"></a>多线程爬虫</h1><h2 id="理解多线程："><a href="#理解多线程：" class="headerlink" title="理解多线程："></a>理解多线程：</h2><p>默认情况下，一个程序只有一个进程和一个线程，代码是依次线性执行的。而多线程则可以并发执行，一次性多个人一起做多件事，自然比单线程更快。</p>
<p>单线程执行方式：</p>
<p>操作1—–&gt;操作2—–&gt;操作3—–&gt;程序结束</p>
<p>多线程执行方式：</p>
<p>操作1—–&gt;程序结束<br>操作2—–&gt;程序结束<br>操作3—–&gt;程序结束</p>
<h2 id="threading的使用："><a href="#threading的使用：" class="headerlink" title="threading的使用："></a>threading的使用：</h2><h3 id="基本使用：-1"><a href="#基本使用：-1" class="headerlink" title="基本使用："></a>基本使用：</h3><p>正常单线程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#单线程</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coding</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>在写代码&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawing</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>在画画&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_thread</span>():</span></span><br><span class="line">    coding()</span><br><span class="line">    drawing()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    single_thread()</span><br></pre></td></tr></table></figure>

<p>使用threading创建多线程：</p>
<p>创建线程：<code>threading.Thread(target=函数,name=&quot;可无&quot;)</code></p>
<p>执行线程：<code>th1.start()</code></p>
<p><code>threading.current_thread()</code>：在某个线程中执行，获取当前线程对象</p>
<p><code>threading.enumerate()</code>：获取所有正在执行的线程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多线程</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coding</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        thread = threading.current_thread()  <span class="comment">#获取当前线程</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;thread.name&#125;</span>在敲代码&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawing</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>在画画&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span>():</span></span><br><span class="line">    th1 = threading.Thread(target=coding,name=<span class="string">&quot;小明&quot;</span>)</span><br><span class="line">    ht2 = threading.Thread(target=drawing)</span><br><span class="line"></span><br><span class="line">    th1.start()</span><br><span class="line">    ht2.start()</span><br><span class="line">    <span class="built_in">print</span>(threading.<span class="built_in">enumerate</span>())  <span class="comment">#打印所有当前执行的线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    multi_thread()</span><br></pre></td></tr></table></figure>

<h3 id="继承自threading-Thread类："><a href="#继承自threading-Thread类：" class="headerlink" title="继承自threading.Thread类："></a>继承自threading.Thread类：</h3><p>1，我们自己写的类必须继承<code>threading.Thread</code>类</p>
<p>2，程序代码需要放在run方法中执行</p>
<p>3，以后创建线程时，直接使用我们自己创建的类来创建线程</p>
<p>4，使用类的方式创建线程，可以用更加方便的管理我们的代码，面向对象的方式进行编程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#继承自threading.Thread类</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coding_thread</span>(<span class="params">threading.Thread</span>):</span>  <span class="comment">#创建类，继承threading.Thread</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span>    <span class="comment">#主程序写在run实例方法下</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            thread = threading.current_thread()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;thread.name&#125;</span>在敲代码&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing_thread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>在画画&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    th1 = Coding_thread(name=<span class="string">&quot;小明&quot;</span>)  <span class="comment">#可以用刚刚创建的类来创建线程</span></span><br><span class="line">    th2 = Drawing_thread()</span><br><span class="line"></span><br><span class="line">    th1.start()</span><br><span class="line">    th2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="多线程共享全局变量的问题："><a href="#多线程共享全局变量的问题：" class="headerlink" title="多线程共享全局变量的问题："></a>多线程共享全局变量的问题：</h2><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>多个线程在同一个进程中运行的。因此进程中的全局变量是所有线程都共享的，即所有线程都可以操作同一个全局变量。而线程执行顺序是无序的，有可能造成数据错误。</p>
<p>举例：</p>
<p>全局变量value=1，线程1执行给value加1，线程2也执行给value加1，按道理最终value=3。但是因为线程执行是无序的，所以执行时，线程1和线程2同时把value=1取出，然后加上1，最终value=2，造成数据错误。</p>
<p>代码举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_value</span>():</span></span><br><span class="line">    <span class="keyword">global</span> value</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):  <span class="comment">#循环10000000次，相当于给value加10000000</span></span><br><span class="line">        value += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;value的值是<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>): <span class="comment">#创建两个线程，value讲道理应该一个为10000000，另一个为20000000</span></span><br><span class="line">        th = threading.Thread(target=add_value)</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#value的值是1019353</span></span><br><span class="line"><span class="comment">#value的值是1493383</span></span><br><span class="line"><span class="comment">#因为两个线程同时对一个全局变量操作，所以产生问题</span></span><br></pre></td></tr></table></figure>

<h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><p>threading提供了一个Lock类，这个类可以在某个线程访问全局变量时上锁，其他线程此时就进不来，直到该线程处理完后，就解锁，其他线程才能进来处理。</p>
<p><code>threading.Lock()</code>：创建锁</p>
<p><code>gLock.acquire()</code>：上锁</p>
<p><code>gLock.release()</code>：解锁</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解决：当某线程操作全局变量时，应该上锁，操作完了就解锁，让给其他线程继续操作</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">value = <span class="number">0</span></span><br><span class="line">gLock = threading.Lock() <span class="comment">#创建锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_value</span>():</span></span><br><span class="line">    <span class="keyword">global</span> value</span><br><span class="line">    gLock.acquire()  <span class="comment">#上锁</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        value += <span class="number">1</span></span><br><span class="line">    gLock.release()  <span class="comment">#解锁</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;value的值是<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        th = threading.Thread(target=add_value)</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>使用锁原则：</p>
<p>1，尽量把少的和不耗时的代码放到锁中执行</p>
<p>2，代码执行完后要记得解锁，不然程序会阻塞</p>
<p>3，如果只是读取全局变量而不改变全局变量，不需要上锁</p>
<h2 id="生产者和消费者模式："><a href="#生产者和消费者模式：" class="headerlink" title="生产者和消费者模式："></a>生产者和消费者模式：</h2><p>生产者和消费者模式是多线程开发中经常见到的一种模式。生产者线程专门用来生产一些数据，然后存放到一个中间的变量中，即中间容器。消费者再从这个中间变量中取出数据经行消费。</p>
<p>这种模式让代码达到高内聚低耦合的目标，程序分工明确，线程方便管理。</p>
<p>生产者  ———&gt;  中间容器  ———&gt;  消费者</p>
<p>生产者和消费者因为要使用中间变量，这个中间变量经常是全局变量，因此需要使用锁来保证数据的完整性。</p>
<h3 id="Lock版生产者和消费者模式："><a href="#Lock版生产者和消费者模式：" class="headerlink" title="Lock版生产者和消费者模式："></a>Lock版生产者和消费者模式：</h3><p>以下是使用threading.Lock锁实现的一个生产者和消费者模式的例子：</p>
<p><strong>注</strong>：为了与下面的Condition版本相比，所以下面例子代码写成这样，没有符合上锁原则：尽量把少的和不耗时的代码放到锁中执行</p>
<p>生产者一直往中间变量gMoney中加钱，而消费者一直从中间变量gMoney中减钱。因此加钱和减钱时都需要上锁。生产者加钱10次就不再执行了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Lock版生产者和消费者模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">0</span>  <span class="comment">#中间变量</span></span><br><span class="line">gLock = threading.Lock()</span><br><span class="line">gTimes = <span class="number">0</span>  <span class="comment">#保存生产者加钱的次数</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                gLock.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            money = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">            gMoney += money   <span class="comment">#加钱</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s赚了%d钱，余额有%d&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            gLock.release()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            money = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">            <span class="keyword">if</span> money&lt;=gMoney:</span><br><span class="line">                gMoney -= money  <span class="comment">#减钱</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s消费了%d钱，剩余%d钱&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;%s想消费%d钱，但是钱不够只有%d钱，并且生产者不再赚钱钱了&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">                    gLock.release()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s想消费%d钱，但是钱不够只有%d钱&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            gLock.release()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th = Producer(name=<span class="string">&quot;%d号生产者&quot;</span>%(x))</span><br><span class="line">        th.start()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th = Consumer(name=<span class="string">&quot;%d号消费者&quot;</span>%(x))</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="Condition版生产者和消费者模式："><a href="#Condition版生产者和消费者模式：" class="headerlink" title="Condition版生产者和消费者模式："></a>Condition版生产者和消费者模式：</h3><p>Lock版本可以正常运行，但存在一个不足。在消费者中，上锁后假如发现gMoney不够，就什么也不做，然后再解锁。上锁解锁是耗费CPU资源的行为。</p>
<p>而threading.Condition，和threading.Lock一样也可以上锁解锁。但是它上锁时，可以在没有数据的时候（gMoney不够）处于阻塞等待状态wait，一旦有了数据，可以使用notify等函数通知处于等待状态的线程，继续执行。这样可以不用做一些无用的上锁和解锁操作。</p>
<p><code>threading.Condition()</code>：创建锁</p>
<p><code>acquire()</code>：上锁</p>
<p><code>release()</code>：解锁</p>
<p><code>wait()</code>：将当前线程处于阻塞等待状态，暂时释放锁。可以被其他线程使用notify()和notify_all()函数唤醒。被唤醒后会继续等待上锁，然后继续执行代码。</p>
<p><code>notify()</code>：通知某个等待状态的线程，默认通知第1个等待的线程</p>
<p><code>notify_all()</code>：通知所有等待状态的线程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Condition版生产者和消费者模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">0</span></span><br><span class="line">gCondition = threading.Condition()</span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                gCondition.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            money = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">            gMoney += money</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s赚了%d钱，余额有%d&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            gCondition.notify_all()   <span class="comment">#每次加钱后，通知所有阻塞等待状态的线程可以唤醒。</span></span><br><span class="line">            gCondition.release()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            money = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">            <span class="keyword">while</span> money&gt;gMoney:</span><br><span class="line">                <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;%s想消费%d钱，但是钱不够剩余%d钱，并且生产者不再赚钱钱了&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">                    gCondition.release()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s想消费%d钱，但是钱不够剩余%d钱&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">                <span class="comment">#钱不够，进入阻塞等待状态，等待被唤醒,唤醒后继续判断钱够不够</span></span><br><span class="line">                gCondition.wait()  </span><br><span class="line">            gMoney -= money</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s消费了%d钱，剩余%d钱&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            gCondition.release()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th = Producer(name=<span class="string">&quot;%d号生产者&quot;</span>%(x))</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th = Consumer(name=<span class="string">&quot;%d号消费者&quot;</span>%(x))</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="Queue线程安全的队列"><a href="#Queue线程安全的队列" class="headerlink" title="Queue线程安全的队列"></a>Queue线程安全的队列</h2><p>先进先出，像装羽毛球的圆筒。多线程访问Queue不需要加锁。</p>
<p><code>from queue import Queue</code>：导入</p>
<p><code>Queue(maxsize)</code>：初始化Queue</p>
<p>1，<code>qsize()</code>：返回队列大小</p>
<p>2，<code>empty()</code>：判断队列是否为空</p>
<p>3，<code>full()</code>：判断队列是否为满</p>
<p>4，<code>get()</code>：取一个数据</p>
<p>5，<code>put()</code>：放一个数据</p>
<p>get()和put()：当get()取数据，Queue队列却是空的时，进入阻塞状态，直到有数据被填入；当put()放数据，Queue队列却是满的时，也进入阻塞状态，直到有数据被取出。<br>它们都有block和timeout参数：block=False时，表示进入阻塞时立即报错；timeout=数字，表示阻塞超过该秒后报错。所以这里可以配合try–except抓取报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#queue队列是线程安全的，可以不用锁</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_value</span>(<span class="params">queue</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        queue.put(random.randint(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span>(<span class="params">queue</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        value = queue.get()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;获取的值是<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    q = Queue(<span class="number">1</span>)</span><br><span class="line">    th1 = threading.Thread(target=add_value, args=[q])   <span class="comment">#args=[]用来传参数</span></span><br><span class="line">    th2 = threading.Thread(target=get_value, args=[q])</span><br><span class="line"></span><br><span class="line">    th1.start()</span><br><span class="line">    th2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="爬虫实战1-多线程爬取王者荣耀壁纸："><a href="#爬虫实战1-多线程爬取王者荣耀壁纸：" class="headerlink" title="爬虫实战1-多线程爬取王者荣耀壁纸："></a>爬虫实战1-多线程爬取王者荣耀壁纸：</h2><p>网站：<a href="https://pvp.qq.com/web201605/wallpaper.shtml">https://pvp.qq.com/web201605/wallpaper.shtml</a></p>
<p>要求：以每张图片名创建文件夹，文件夹中下载该图片的8种尺寸类型图片。</p>
<p>图片数据不在该网站中，数据应该是通过ajax请求后响应过来的，通过抓包发现真实数据在名为“workList_inc.cgi?activit……..”的包里，在请求头中找到url接口，”<a href="https://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi?activityId=2735&amp;sVerifyCode=ABCD&amp;sDataType=JSON&amp;iListNum=20&amp;totalpage=0&amp;page=0&amp;iOrder=0&amp;iSortNumClose=1&amp;jsoncallback=jQuery17108003164251331345_1628482515726&amp;iAMSActivityId=51991&amp;_everyRead=true&amp;iTypeId=2&amp;iFlowId=267733&amp;iActId=2735&amp;iModuleId=2735&amp;_=1628482515913&quot;%EF%BC%8C%E8%BF%99%E4%B8%AAurl%E4%B8%AD%E6%9C%89%E5%9B%BE%E7%89%87%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BF%A1%E6%81%AF%E3%80%82">https://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi?activityId=2735&amp;sVerifyCode=ABCD&amp;sDataType=JSON&amp;iListNum=20&amp;totalpage=0&amp;page=0&amp;iOrder=0&amp;iSortNumClose=1&amp;jsoncallback=jQuery17108003164251331345_1628482515726&amp;iAMSActivityId=51991&amp;_everyRead=true&amp;iTypeId=2&amp;iFlowId=267733&amp;iActId=2735&amp;iModuleId=2735&amp;_=1628482515913&quot;，这个url中有图片数据的信息。</a><br><strong>注</strong>：响应的数据是JSON格式；数据内容也经过编码。<strong>提示</strong>：loads，unquote</p>
<h3 id="正常单线程爬取："><a href="#正常单线程爬取：" class="headerlink" title="正常单线程爬取："></a>正常单线程爬取：</h3><p>这里用单线程只爬取第一页的内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#单线程获取第一页王者荣耀图片</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse,request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">https://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi?activityId=2735&amp;sVerifyCode=ABCD&amp;sDataType=JSON&amp;iListNum=20&amp;totalpage=0&amp;page=0&amp;iOrder=0&amp;iSortNumClose=1&amp;jsoncallback=jQuery17106986742030628452_1628233940837&amp;iAMSActivityId=51991&amp;_everyRead=true&amp;iTypeId=2&amp;iFlowId=267733&amp;iActId=2735&amp;iModuleId=2735&amp;_=1628233941161</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3775.400 QQBrowser/10.6.4209.400&quot;</span>,</span><br><span class="line"><span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://pvp.qq.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;访问相关页，返回list，包含每个图片的相关信息&quot;&quot;&quot;</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    result = resp.text</span><br><span class="line">    data = re.search(<span class="string">&quot;\(.+?List.*?:(.+)&#125;\)&quot;</span>, result).group(<span class="number">1</span>)</span><br><span class="line">    data = parse.unquote(data)</span><br><span class="line">    data = json.loads(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_image_urls</span>(<span class="params">image</span>):</span></span><br><span class="line">    image_urls = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        image_url = image[<span class="string">f&quot;sProdImgNo_<span class="subst">&#123;i&#125;</span>&quot;</span>].replace(<span class="string">&quot;200&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        image_urls.append(image_url)</span><br><span class="line">    <span class="keyword">return</span> image_urls</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    os.mkdir(<span class="string">&quot;image_WZ&quot;</span>)</span><br><span class="line">    data = parse_page(url)</span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> data:</span><br><span class="line">        name = image[<span class="string">&quot;sProdName&quot;</span>]</span><br><span class="line">        <span class="comment">#名字中含有”\/:*?&quot;&lt;&gt;|“,不符合文件夹命名规范，将其都替换成空格</span></span><br><span class="line">        name = re.sub(<span class="string">r&#x27;[\\/:\*\?&quot;&lt;&gt;\|]&#x27;</span>,<span class="string">&quot; &quot;</span>,name)</span><br><span class="line">        path_name = os.path.join(<span class="string">&quot;image_WZ&quot;</span>, name)</span><br><span class="line">        <span class="comment">#官网的图片有重复的，这里判断文件夹是否存在</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(path_name):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        os.mkdir(path_name)</span><br><span class="line">        image_urls = get_image_urls(image)</span><br><span class="line">        <span class="keyword">for</span> index,image_url <span class="keyword">in</span> <span class="built_in">enumerate</span>(image_urls):</span><br><span class="line">            image_name = <span class="string">&quot;sProdImgNo_&#123;&#125;.jpg&quot;</span>.<span class="built_in">format</span>(index+<span class="number">1</span>)</span><br><span class="line">            image_path = os.path.join(path_name,image_name)</span><br><span class="line">            request.urlretrieve(image_url,image_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>下载完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="多线程爬取："><a href="#多线程爬取：" class="headerlink" title="多线程爬取："></a>多线程爬取：</h3><p>使用多线程爬取所有26页，生产者和消费者模式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多线程</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse,request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">https://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi?activityId=2735&amp;sVerifyCode=ABCD&amp;sDataType=JSON&amp;iListNum=20&amp;totalpage=0&amp;page=&#123;&#125;&amp;iOrder=0&amp;iSortNumClose=1&amp;jsoncallback=jQuery17106986742030628452_1628233940837&amp;iAMSActivityId=51991&amp;_everyRead=true&amp;iTypeId=2&amp;iFlowId=267733&amp;iActId=2735&amp;iModuleId=2735&amp;_=1628233941161</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3775.400 QQBrowser/10.6.4209.400&quot;</span>,</span><br><span class="line"><span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://pvp.qq.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url_queue = Queue(<span class="number">26</span>)   <span class="comment">#存放page_url的队列</span></span><br><span class="line">image_queue = Queue(<span class="number">1000</span>)  <span class="comment">#存放图片的队列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生产者负责访问page_url，并解析图片信息，将图片url和下载路径保存到image_queue中&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,url_queue,image_queue,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Producer, self).__init__(*args,**kwargs)  <span class="comment">#重写__init__后，需要调用父类的构造方法</span></span><br><span class="line">        self.url_queue = url_queue</span><br><span class="line">        self.image_queue = image_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.url_queue.empty():</span><br><span class="line">            resp = requests.get(self.url_queue.get(), headers=headers)</span><br><span class="line">            result = resp.text</span><br><span class="line">            data = re.search(<span class="string">&quot;\(.+?List.*?:(.+)&#125;\)&quot;</span>, result, re.DOTALL).group(<span class="number">1</span>)</span><br><span class="line">            data = parse.unquote(data)</span><br><span class="line">            data = json.loads(data)</span><br><span class="line">            <span class="keyword">for</span> image <span class="keyword">in</span> data:</span><br><span class="line">                dir_name = image.get(<span class="string">&quot;sProdName&quot;</span>)</span><br><span class="line">                dir_name = re.sub(<span class="string">&#x27;[\\\/:*?&quot;&lt;&gt;|]&#x27;</span>,<span class="string">&quot; &quot;</span>,dir_name)</span><br><span class="line">                dir_path = os.path.join(<span class="string">&quot;image_WZ2&quot;</span>,dir_name)</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(dir_path):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                os.mkdir(dir_path)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">                    image_url = image.get(<span class="string">f&quot;sProdImgNo_<span class="subst">&#123;i&#125;</span>&quot;</span>).replace(<span class="string">&quot;200&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">                    image_name = <span class="string">f&quot;sProdImgNo_<span class="subst">&#123;i&#125;</span>.jpg&quot;</span></span><br><span class="line">                    image_path = os.path.join(dir_path,image_name)</span><br><span class="line">                    self.image_queue.put(&#123;<span class="string">&quot;image_url&quot;</span>:image_url,<span class="string">&quot;image_path&quot;</span>:image_path&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;消费者负责将image_queue中的图片信息取出，将图片url下载到对应路径中&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, image_queue, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Consumer, self).__init__(*args,**kwargs)</span><br><span class="line">        self.image_queue = image_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:<span class="comment">#阻塞超过10秒出现异常，跳出循环，</span></span><br><span class="line">                image = self.image_queue.get(timeout=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            image_url = image.get(<span class="string">&quot;image_url&quot;</span>)</span><br><span class="line">            image_path = image.get(<span class="string">&quot;image_path&quot;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                request.urlretrieve(image_url,image_path)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;下载完成！&quot;</span>.<span class="built_in">format</span>(image_path))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;下载失败!&quot;</span>.<span class="built_in">format</span>(image_path))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    os.mkdir(<span class="string">&quot;image_WZ2&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        page_url = base_url.<span class="built_in">format</span>(i)</span><br><span class="line">        url_queue.put(page_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        th1 = Producer(url_queue, image_queue, name=<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>号生产者&quot;</span>)</span><br><span class="line">        th1.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th2 = Consumer(image_queue,name=<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>号消费者&quot;</span>)</span><br><span class="line">        th2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="爬虫实战2：多线程爬取糗事百科："><a href="#爬虫实战2：多线程爬取糗事百科：" class="headerlink" title="爬虫实战2：多线程爬取糗事百科："></a>爬虫实战2：多线程爬取糗事百科：</h2><p>网站：<a href="https://www.qiushibaike.com/text/">https://www.qiushibaike.com/text/</a></p>
<p>要求：使用多线程爬取所有13页，把笑话链接和内容保存在csv文件种</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多线程爬取糗事百科，保存再csv文件中</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生产者负责访问page_url,解析详细页，把每一页的所以的笑话内容和连接保存到joke_queue&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,url_queue,joke_queue,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args,**kwargs)</span><br><span class="line">        self.url_queue = url_queue</span><br><span class="line">        self.joke_queue = joke_queue</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3775.400 QQBrowser/10.6.4209.400&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.qiushibaike.com/text/page/13/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.url_queue.empty():</span><br><span class="line">            page_url = self.url_queue.get()</span><br><span class="line">            resp = requests.get(page_url, headers=self.headers)</span><br><span class="line">            text = resp.text</span><br><span class="line">            jokes = re.findall(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            typs_hot.+?&lt;/div&gt;.+?href=&quot;(.+?)&quot;     #笑话连接</span></span><br><span class="line"><span class="string">            .+?contentHerf.+?&lt;span&gt;\s*(.+?)\s*&lt;/span&gt;  #笑话内容</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>,text,re.VERBOSE|re.DOTALL)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> joke <span class="keyword">in</span> jokes:</span><br><span class="line">                link = joke[<span class="number">0</span>]</span><br><span class="line">                link = <span class="string">&quot;https://www.qiushibaike.com&quot;</span>+link</span><br><span class="line">                content = joke[<span class="number">1</span>]</span><br><span class="line">                content = re.sub(<span class="string">&quot;&lt;br/&gt;&quot;</span>,<span class="string">&quot;  &quot;</span>,content)</span><br><span class="line">                self.joke_queue.put(&#123;<span class="string">&quot;content&quot;</span>:content,<span class="string">&quot;link&quot;</span>:link&#125;)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;页访问完成！&quot;</span>.<span class="built_in">format</span>(page_url.split(<span class="string">&quot;/&quot;</span>)[<span class="number">5</span>]))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;消费者负责从joke_queue中获取笑话内容和链接，保存到csv文件中，保存时需要上锁和解锁&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,writer,fp, gLock,joke_queue, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args,**kwargs)</span><br><span class="line">        self.writer = writer</span><br><span class="line">        self.joke_queue = joke_queue</span><br><span class="line">        self.gLock = gLock</span><br><span class="line">        self.fp = fp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                joke = self.joke_queue.get(timeout=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.fp.close()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            link = joke.get(<span class="string">&quot;link&quot;</span>)</span><br><span class="line">            content = joke.get(<span class="string">&quot;content&quot;</span>)</span><br><span class="line">            self.gLock.acquire()</span><br><span class="line">            self.writer.writerow((content,link))   <span class="comment">#保存到csv文件操作也要上锁，相当于全局变量</span></span><br><span class="line">            self.gLock.release()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;保存一条成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    base_url = <span class="string">&quot;https://www.qiushibaike.com/text/page/&#123;&#125;/&quot;</span></span><br><span class="line">    url_queue = Queue(<span class="number">13</span>)</span><br><span class="line">    joke_queue = Queue(<span class="number">1000</span>)</span><br><span class="line">    gLock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">14</span>):</span><br><span class="line">        page_url = base_url.<span class="built_in">format</span>(i)</span><br><span class="line">        url_queue.put(page_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th1 = Producer(url_queue, joke_queue, name=<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>号生产者&quot;</span>)</span><br><span class="line">        th1.start()</span><br><span class="line"></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&quot;joke_mulit_thread.csv&quot;</span>, <span class="string">&quot;a&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    writer = csv.writer(fp)</span><br><span class="line">    writer.writerow([<span class="string">&quot;内容&quot;</span>,<span class="string">&quot;链接&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th2 = Consumer(writer,fp , gLock, joke_queue, name=<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>号消费者&quot;</span>)</span><br><span class="line">        th2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="多线程的GIL锁："><a href="#多线程的GIL锁：" class="headerlink" title="多线程的GIL锁："></a>多线程的GIL锁：</h2><p>Python自带的解释器是CPython。CPython解释器的多线程实际上是一个假的多线程。同一时刻只有一个线程在执行，为保证这个，在CPython解释器中有一个东西叫做GIL（Global Intepreter Lock），叫做全局解释器锁。这个解释器锁是有必要的，因为CPython解释器的内存管理不是线程安全的。</p>
<p>虽然是一个假的多线程，但是在处理一些IO操作（比如文件读写和网络请求）还是可以在很大程度上提高效率的。所以在IO操作上建议使用多线程提高效率；在一些CPU计算操作上不建议使用多线程，而建议使用多进程。</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析与挖掘(数据分析三剑客)</title>
    <url>/2021/11/25/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%89%E5%89%91%E5%AE%A2/</url>
    <content><![CDATA[<p>介绍了python中用于数据分析的三个模块，numpy，Pandas，Matplotlib。</p>
<span id="more"></span>

<h1 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h1><p>本次学习我们使用的是Anaconda数据科学平台</p>
<p>Anaconda是Python的一个发行版，里面内置了很多常用的库，例如Pandas、NumPy，Matplotlib，这些都不用自己再安装（pip）了。</p>
<p>下载一个Anaconda就自带了Python和常用的工具，Python本身也不需要再单独下载了。</p>
<p><em><strong>注：</strong></em>如果自己已经安装了python，并且需要再安装Anaconda的话，就把之前安装的python的环境变量删除掉。安装时记得勾选添加环境变量。</p>
<p><strong>jupyter notebook</strong>  </p>
<p>它是一个交互式记事本（Anaconda自带），里面可以写Python代码，还可以插入文字和图片（markdown模式）。</p>
<p>使用方法：</p>
<p>在cmd中打开需要目录后，输入jupyter notebook即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#jupyter notebook 快捷键</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行：Ctrl + Enter 或 Shift + Enter</span></span><br><span class="line"><span class="comment">#注释：Ctrl + /</span></span><br><span class="line"><span class="comment">#帮助：Shift + Tab(按一到四次)</span></span><br></pre></td></tr></table></figure>

<p>在jupyter notebook中安装包：<code>! pip install 库名 -i https://pypi.douban.com/simple</code></p>
<h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><h2 id="数组array"><a href="#数组array" class="headerlink" title="数组array"></a>数组array</h2><p><strong>运算快，效率高</strong></p>
<p>列表list在进行数学运算时，列表不能直接参与运算，需要借助for循环、列表表达式等。而numpy提供的数组可以直接参与运算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment"># list + 5    会报错</span></span><br><span class="line">array1 = np.array(<span class="built_in">list</span>)</span><br><span class="line">array1 + <span class="number">5</span>     </span><br><span class="line"><span class="comment">#结果：array([6, 7, 8, 9])</span></span><br></pre></td></tr></table></figure>

<p>列表的索引方法可以在数组中使用，而且数组还有间断索引和逻辑索引。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([<span class="number">11</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">18</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#数组和列表一样可以索引，切片索引</span></span><br><span class="line">array[-<span class="number">1</span>]     </span><br><span class="line">array[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment">#间隔索引</span></span><br><span class="line">array[[<span class="number">0</span>,<span class="number">2</span>]]    <span class="comment">#结果：array([11, 15])</span></span><br><span class="line"><span class="comment">#逻辑索引，即布尔索引</span></span><br><span class="line">array&lt;<span class="number">10</span>        <span class="comment">#结果：array([False,  True, False,  True, False,  True])</span></span><br><span class="line">array[array&lt;<span class="number">10</span>]   <span class="comment">#结果：array([8, 6, 1])</span></span><br></pre></td></tr></table></figure>

<p><strong>二维数组</strong>，索引时采用  [行下标,列下标]  即  [rows,cols] ，下标都是从0开始。使用 ：符号表示任意。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array2 = np.array([</span><br><span class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">        [<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>],</span><br><span class="line">        [<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>]</span><br><span class="line">    ])</span><br><span class="line">array2[<span class="number">1</span>,<span class="number">1</span>]        <span class="comment">#结果：6</span></span><br><span class="line">array2[<span class="number">1</span>,:]        <span class="comment">#结果：array([2, 6, 9, 1])</span></span><br><span class="line">array2[:,<span class="number">2</span>]        <span class="comment">#结果：array([3, 9, 7])</span></span><br></pre></td></tr></table></figure>

<h2 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h2><p><strong>数学运算符</strong></p>
<ul>
<li><p>+：数组对应元素的和</p>
</li>
<li><p>-：数组对应元素的差</p>
</li>
<li><p>*：数组对应元素的乘积</p>
</li>
<li><p>/：数组对应元素的商</p>
</li>
<li><p>%：数组对应元素商的余数</p>
</li>
<li><p>//：数组对应元素的整除数</p>
</li>
<li><p>**：数组对应元素的幂指数</p>
</li>
</ul>
<p><strong>比较运算符</strong></p>
<ul>
<li>&gt; 或 np.greater(arr1,arr2)：判断arr1的元素是否大于arr2的元素</li>
<li>&gt;= 或 np.greater_equal(arr1,arr2)：判断arr1的元素是否大于等于arr2的元素</li>
<li>&lt; 或 np.less(arr1,arr2)：判断arr1的元素是否小于arr2的元素</li>
<li>&lt;= 或 np.less_equal(arr1,arr2)：判断arr1的元素是否小于等于arr2的元素</li>
<li>== 或 np.equal(arr1,arr2)：判断arr1的元素是否等于arr2的元素</li>
<li>!= 或 np.not_equal(arr1,arr2)：判断arr1的元素是否不等于arr2的元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>])</span><br><span class="line">arr2 = np.array([<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">9</span>])</span><br><span class="line">arr1+arr2           <span class="comment">#结果：array([ 3,  9,  6, 15])</span></span><br><span class="line">arr1&lt;arr2           <span class="comment">#结果：array([ True, False, False,  True])</span></span><br><span class="line">np.less(arr1,arr2)  <span class="comment">#结果：array([ True, False, False,  True])</span></span><br></pre></td></tr></table></figure>

<p><strong>常用的数学函数</strong></p>
<ul>
<li>np.round(arr)：对各元素四舍五入</li>
<li>np.sqrt(arr)：计算各元素的算术平方根</li>
<li>np.square(arr)：计算各元素的平方值</li>
<li>np.exp(arr)：计算以e为底的指数</li>
<li>np.power(arr, a)：计算各元素的指数</li>
<li>np.log2(arr)：计算以2为底各元素的对数</li>
<li>np.log10(arr)：计算以10为底各元素的对数</li>
<li>np.log(arr)：计算以e为底各元素的对数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>])</span><br><span class="line">np.square(arr1)</span><br><span class="line"><span class="comment">#结果：array([ 1, 25,  9, 36], dtype=int32)</span></span><br><span class="line">np.sqrt(arr1)</span><br><span class="line"><span class="comment">#结果：array([1.        , 2.23606798, 1.73205081, 2.44948974])</span></span><br></pre></td></tr></table></figure>

<p><strong>常用的统计函数</strong></p>
<ul>
<li>np.min(arr,axis)：按照轴的方向计算最小值</li>
<li>np.max(arr,axis)：按照轴的方向计算最大值</li>
<li>np.mean(arr,axis)：按照轴的方向计算平均值</li>
<li>np.median(arr,axis)：按照轴的方向计算中位数</li>
<li>np.sum(arr,axis)：按照轴的方向计算求和</li>
<li>np.std(arr,axis)：按照轴的方向计算标准差</li>
<li>np.var(arr,axis)：按照轴的方向计算方差</li>
</ul>
<p><em>注意</em>：axis=0 时，计算数组各列的统计值，形象记忆变成胖子；axis=1时，计算数组各行的统计值，形象记忆变成瘦子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</span><br><span class="line">    [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">#对每行计算求和,三种写法</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(np.<span class="built_in">sum</span>(arr[i,:]))</span><br><span class="line">np.<span class="built_in">sum</span>(arr, axis=<span class="number">1</span>)</span><br><span class="line">arr.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对每列计算求和，三种写法</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(np.<span class="built_in">sum</span>(arr[:,i]))</span><br><span class="line">np.<span class="built_in">sum</span>(arr, axis=<span class="number">0</span>)</span><br><span class="line">arr.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="random随机数"><a href="#random随机数" class="headerlink" title="random随机数"></a>random随机数</h2><p>import numpy as np</p>
<ul>
<li>np.random.randint()：随机整数</li>
<li>np.random.uniform()：随机均匀分布</li>
<li>np.random.normal()：随机正态分布</li>
</ul>
<p><strong>案例</strong>：有100钱去理想状态下赌博，赢了加1钱，输了扣1钱。模拟赌1000次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">money = <span class="number">100</span></span><br><span class="line">P = [<span class="number">100</span>]  <span class="comment">#用于记录每次的钱</span></span><br><span class="line">R = np.random.uniform(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> R:</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">0.5</span>:</span><br><span class="line">        money -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">0.5</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        money += <span class="number">1</span></span><br><span class="line">    P.append(money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1001</span>), P)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><a href="https://imgtu.com/i/oM0B9I"><img src="https://z3.ax1x.com/2021/11/29/oM0B9I.png" alt="oM0B9I.png" border="0" /></a></p>
<h1 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h1><h2 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h2><p><strong>文本文件</strong></p>
<p>pandas.read_csv(filepath_or_buffer, sep=”,”)<br><em>参数</em>：</p>
<ul>
<li>filepath_or_buffer：指定txt或csv文件所在的路径</li>
<li>sep：指定原数据集中各字段之间的分隔符，默认为逗号” , “。</li>
<li>header：是否将原数据集中第一行作为表头，默认是，赋值None不是</li>
<li>names：如果原数据集中没有表头，该参数添加表头</li>
<li>usecols：指定需要读取原数据集中的那些字段</li>
<li>skiprows：数据读取时，指定需要跳过原数据集开头的行数（空白行不计入）</li>
<li>skipfooter：数据读取时，指定需要跳过原数据集末尾的行数</li>
<li>converters：将字段的类型转换（以字典的形式）</li>
<li>encoding：指定字符编码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&quot;D:\tempFile(2)&quot;</span></span><br><span class="line">pn.read_csv(path+<span class="string">&quot;/test_1.txt&quot;</span>, sep=<span class="string">&quot; &quot;</span>, skiprows=<span class="number">1</span>, skipfooter=<span class="number">1</span>, </span><br><span class="line">            header=<span class="literal">None</span>, names=[<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>], </span><br><span class="line">            usecols=[<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>], converters=&#123;<span class="string">&quot;id&quot;</span>:<span class="built_in">str</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>excel表</strong></p>
<p>pandas.read_excel(io, sheetname=0)</p>
<p><em>参数</em>：</p>
<ul>
<li>io：工作蒲的路径</li>
<li>sheetname：哪张表，默认第一张</li>
<li>header，skiprows，skip_footer等等参数同上。</li>
</ul>
<p><strong>sql</strong></p>
<p>pandas.read_sql(“sql语句”, con=连接)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"><span class="comment">#利用pymysql创建连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;root&quot;</span>, </span><br><span class="line">                      database=<span class="string">&quot;studentv2db&quot;</span>, port=<span class="number">3306</span>, charset=<span class="string">&quot;utf8&quot;</span>, )</span><br><span class="line"></span><br><span class="line">df = pn.read_sql(<span class="string">&quot;select * from student&quot;</span>, con=con)</span><br><span class="line"><span class="comment">#关闭资源</span></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure>

<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><strong>数据的概览</strong>（df表示数据集）</p>
<ul>
<li>df.head()：浏览前5条数据</li>
<li>df.shape：查看数据量，几行几列</li>
<li>df.size：查看数据量，行*列</li>
<li>df.columns：查看所有字段</li>
<li>df.dtypes：查看字段类型，在pandas中，非数值型就是object类型</li>
<li>df.describe()：数据描述，默认对数值型字段经行数学统计。df.describe(include=”object”)对非数值型字段数学统计。</li>
</ul>
<p><strong>数据筛选</strong></p>
<ul>
<li>df.字段名：选取某一字段</li>
<li>df[“字段名”]：选取某一字段，可以多个字段，平时推荐该方法</li>
<li>df.loc[行条件，列名称]：选取某子表，用冒号” : “ 表示任意行或列。如<code>df.loc[ df[&quot;Gender&quot;]==&quot;男&quot;, [&quot;Name&quot;, &quot;Gender&quot;] ]</code>，表示选取“Gender”条件为男的”Name“和”Gender“字段。</li>
</ul>
<p><strong>补充</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#简单构造数据集df</span></span><br><span class="line">df = pn.DataFrame(&#123;<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;bob&quot;</span>,<span class="string">&quot;jake&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">18</span>,<span class="number">20</span>]&#125;)</span><br><span class="line"><span class="comment">#对df数据集重新定义字段顺序</span></span><br><span class="line">df = pn.DataFrame(df, columns=[<span class="string">&quot;age&quot;</span>, <span class="string">&quot;name&quot;</span>])</span><br><span class="line"><span class="comment">#对df数据集的字段重命名</span></span><br><span class="line">df = df.rename(columns=&#123;<span class="string">&quot;age&quot;</span>:<span class="string">&quot;年龄&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;姓名&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><p><strong>数据类型的修改</strong></p>
<ul>
<li><p>pandas.to_datetime(columns,format=)：转换成时间类型</p>
</li>
<li><p>columns.astype()：转换从其他类型</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将df的&quot;Birthday&quot;字段转换成时间类型</span></span><br><span class="line">df[<span class="string">&quot;Birthday&quot;</span>] = pn.to_datetime(df[<span class="string">&quot;Birthday&quot;</span>], <span class="built_in">format</span>=<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"><span class="comment">#将df的&quot;SNo&quot;字段转换成str类型</span></span><br><span class="line">df[<span class="string">&quot;SNo&quot;</span>] = df[<span class="string">&quot;SNo&quot;</span>].astype(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>

<p><strong>数据冗余</strong></p>
<ul>
<li>df.duplicated()：查看数据冗余（所有字段都一致），subset参数指定某一字段</li>
<li>df.drop_duplicates()：删除冗余的记录，inplace参数为True表示同步原数据集df</li>
</ul>
<p><strong>异常值识别和处理</strong></p>
<p>无</p>
<p><strong>缺省值</strong></p>
<ul>
<li>df.isnull()：查看缺省值</li>
<li>df.dropna()：删除缺省值</li>
<li>df.fillna()：填充缺省值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看,可借助any()和sum()</span></span><br><span class="line">df.isnull()</span><br><span class="line">df.isnull().<span class="built_in">any</span>(axis=<span class="number">0</span>)</span><br><span class="line">df.isnull().<span class="built_in">sum</span>(axis=<span class="number">0</span>)                 <span class="comment">#计算每个字段的缺省值数量</span></span><br><span class="line">df.isnull().<span class="built_in">sum</span>(axis=<span class="number">0</span>) / df.shape[<span class="number">0</span>]   <span class="comment">#计算每个字段的缺省值率</span></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">df.dropna(axis=<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#填充</span></span><br><span class="line">df.fillna(value=<span class="number">0</span>, inplace=<span class="literal">True</span>)      <span class="comment">#所有缺省值填充0</span></span><br><span class="line">df.fillna(value=&#123;<span class="string">&quot;Birthday&quot;</span>:df[<span class="string">&quot;Birthday&quot;</span>].mode()[<span class="number">0</span>],<span class="string">&quot;Image&quot;</span>:<span class="string">&quot;无&quot;</span>&#125;)   <span class="comment">#不同字段填充不同数据</span></span><br><span class="line"><span class="comment">#补充要点</span></span><br><span class="line">df[<span class="string">&quot;Birthday&quot;</span>].mode()  <span class="comment">#某字段众数</span></span><br><span class="line">df[<span class="string">&quot;SNo&quot;</span>].median()     <span class="comment">#某字段中位数</span></span><br></pre></td></tr></table></figure>

<h2 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h2><p><strong>透视表功能</strong></p>
<p>pandas.pivot_table(data, index=None, columns=None, values=None, aggfunc=”mean”)</p>
<p><em>参数</em>：</p>
<ul>
<li>data：原数据集</li>
<li>index：需要拉入”行标签“的字段列表</li>
<li>columns：需要拉入”列标签“的字段列表</li>
<li>values：需要计算的字段</li>
<li>aggfunc：指定统计函数，也可以指定numpy模块中的其他统计函数</li>
<li>fill_value：指定一个标量，用于填充缺失值</li>
<li>margins：bool类型参数，是否显示行或列的总计数，默认为False</li>
<li>droopan：bool类型参数，是否删除整列为缺失的字段，默认为True</li>
<li>margins_name：指定行或列的总计名称，默认为All</li>
</ul>
<p>数据集如下：表3-1</p>
<table>
<thead>
<tr>
<th>id</th>
<th>姓名</th>
<th>性别</th>
<th>部门</th>
<th>年龄</th>
<th>薪水</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>李</td>
<td>男</td>
<td>开发部</td>
<td>23</td>
<td>12000</td>
</tr>
<tr>
<td>2</td>
<td>王</td>
<td>女</td>
<td>UI部</td>
<td>33</td>
<td>8000</td>
</tr>
<tr>
<td>3</td>
<td>刘</td>
<td>女</td>
<td>开发部</td>
<td>34</td>
<td>15000</td>
</tr>
<tr>
<td>4</td>
<td>赵</td>
<td>女</td>
<td>UI部</td>
<td>45</td>
<td>9000</td>
</tr>
<tr>
<td>5</td>
<td>江</td>
<td>男</td>
<td>测试部</td>
<td>26</td>
<td>23000</td>
</tr>
<tr>
<td>6</td>
<td>陈</td>
<td>女</td>
<td>测试部</td>
<td>28</td>
<td>18000</td>
</tr>
<tr>
<td>7</td>
<td>阮</td>
<td>女</td>
<td>开发部</td>
<td>29</td>
<td>15000</td>
</tr>
<tr>
<td>8</td>
<td>莫</td>
<td>男</td>
<td>UI部</td>
<td>27</td>
<td>10000</td>
</tr>
<tr>
<td>9</td>
<td>金</td>
<td>男</td>
<td>开发部</td>
<td>18</td>
<td>8000</td>
</tr>
<tr>
<td>10</td>
<td>曹</td>
<td>男</td>
<td>开发部</td>
<td>36</td>
<td>10000</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"><span class="comment">#df数据集如上表3-1</span></span><br><span class="line">df = pn.read_excel(<span class="string">r&quot;D:\tempFile(2)\test_2.xlsx&quot;</span>)</span><br><span class="line"><span class="comment">#男女性别薪水的平均值</span></span><br><span class="line">pn.pivot_table(df, index=<span class="string">&quot;性别&quot;</span>, values=<span class="string">&quot;薪水&quot;</span>, aggfunc=<span class="string">&quot;mean&quot;</span>)</span><br><span class="line"><span class="comment">#不同部门，男女性别薪水平均值</span></span><br><span class="line">pn.pivot_table(df, index=<span class="string">&quot;部门&quot;</span>, columns=<span class="string">&quot;性别&quot;</span>, values=<span class="string">&quot;薪水&quot;</span>, aggfunc=<span class="string">&quot;mean&quot;</span>)</span><br><span class="line"><span class="comment"># 不同部门，男女性别数量</span></span><br><span class="line">pn.pivot_table(df, index=<span class="string">&quot;部门&quot;</span>, columns=<span class="string">&quot;性别&quot;</span>, aggfunc=<span class="string">&quot;size&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>分组汇总</strong></p>
<ul>
<li>df.groupby(by=”字段”)：在汇总前，设定需要分组的字段</li>
<li>grouped.aggregate()：基于上面的groupby方法分组后的结果，做进一步的统计汇总。需以字典的形式传参，选择统计的字段和对应的统计方法。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#df数据集如上表3-1</span></span><br><span class="line">df = pn.read_excel(<span class="string">r&quot;D:\tempFile(2)\test_2.xlsx&quot;</span>)</span><br><span class="line"><span class="comment">#对部门，性别进行分组</span></span><br><span class="line">grouped = df.groupby(by = [<span class="string">&quot;部门&quot;</span>, <span class="string">&quot;性别&quot;</span>])</span><br><span class="line"><span class="comment">#对分组后的结果做统计计算：年龄的最小值，薪水平均值</span></span><br><span class="line">result = grouped.aggregate(&#123;<span class="string">&quot;年龄&quot;</span>:np.<span class="built_in">min</span>, <span class="string">&quot;薪水&quot;</span>:np.mean&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>合并表</strong></p>
<p>pandas.concat(objs)</p>
<p><em>参数</em></p>
<ul>
<li>objs：指定需要合并的对象</li>
<li>axis：合并的轴，默认为0，合并行；为1，合并列。</li>
<li>join：合并的方式，默认为outer，表示合并所有数据；为inner，表示合并公共部分数据</li>
<li>join_axes：合并数据后，指定保留的数据轴</li>
<li>ignore_index：bool类型参数，是否忽略原数据集的索引，默认False。如果为True，则重新生成新索引。</li>
<li>keys：为合并后的数据添加新的索引，用于区分各个数据源于哪张表。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"></span><br><span class="line">df1 = pn.DataFrame(&#123;<span class="string">&quot;id&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;Jake&quot;</span>,<span class="string">&quot;Alice&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">18</span>,<span class="number">16</span>,<span class="number">10</span>]&#125;)</span><br><span class="line">df2 = pn.DataFrame(&#123;<span class="string">&quot;id&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;Jeff&quot;</span>,<span class="string">&quot;Jamse&quot;</span>,<span class="string">&quot;Alice&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">11</span>,<span class="number">25</span>,<span class="number">10</span>]&#125;)</span><br><span class="line">pn.concat([df1,df2],keys=[<span class="string">&quot;表1&quot;</span>,<span class="string">&quot;表2&quot;</span>])</span><br></pre></td></tr></table></figure>

<p><strong>连接表</strong></p>
<p>pandas.merge(left, right, how=”inner”, on=None)</p>
<p><em>参数</em></p>
<ul>
<li>left：连接的左表（主表）</li>
<li>right：连接的右表（辅表）</li>
<li>how：连接方式，默认inner内连接。left左连接，right右链接，outer外连接</li>
<li>on：指定连接的两张表共同的字段。如果没有共同的字段，则使用下面两个参数</li>
<li>left_on：指定左表需要连接的共同字段</li>
<li>rigth_on：指定右表需要连接的共同字段</li>
<li>left_index：bool类型参数，是否将左表的行索引作为连接的共同字段，默认False</li>
<li>right_index：bool类型参数，是否将右表的行索引作为连接的共同字段，默认False</li>
<li>sort：bool类型参数，是否对连接后的数据按照共同字段排序，默认False</li>
<li>suffixes：如果数据连接中存在相同的字段名，则使用前缀经行区分。传列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line">df1 = pn.DataFrame(&#123;<span class="string">&quot;id&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;Jake&quot;</span>,<span class="string">&quot;Alice&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">18</span>,<span class="number">16</span>,<span class="number">10</span>]&#125;)</span><br><span class="line">df2 = pn.DataFrame(&#123;<span class="string">&quot;ID&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;score&quot;</span>:[<span class="number">99</span>,<span class="number">83</span>,<span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line">pn.merge(df1,df2,left_on=<span class="string">&quot;id&quot;</span>,right_on=<span class="string">&quot;ID&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1>]]></content>
      <categories>
        <category>数据分析与挖掘</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE</title>
    <url>/2021/12/11/JavaSE/</url>
    <content><![CDATA[<p>JaveSE</p>
<p>这是一篇关于javaSE基础的笔记</p>
<p>其中包括java面向对象，java核心类库，java型特性和项目</p>
<span id="more"></span>

<h1 id="Java面向对象编程"><a href="#Java面向对象编程" class="headerlink" title="Java面向对象编程"></a>Java面向对象编程</h1><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>定义类：class 类名{ 类体 }。<br><code>class Person&#123;&#125;</code></p>
<p>创建对象：new 类名();<br><code>Person p = new Person();</code></p>
<p>成员变量的定义：数据类型 变量名 = 初始值;<br><code>int age;</code></p>
<p>成员方法的定义：返回值类型 方法名（参数）{ 方法体 }<br><code>void setAge(int age)&#123; &#125;</code></p>
<p>成员方法的可变长参数，即该参数长度是0~~n个，最多定义一个，而且放在最后一个参数。使用时，相当于一维数组。<br>可变长参数定义<code>void xiaoName(String... args)&#123; &#125;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;, 今年&quot;</span> + age + <span class="string">&quot;岁！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">xiaoName</span><span class="params">(String... args)</span><span class="comment">/*可变参数*/</span> </span>&#123; </span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;args.length; i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;个参数是：&quot;</span> + args[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建Person类型引用指向Person类型对象</span></span><br><span class="line">		Person p = <span class="keyword">new</span> Person();</span><br><span class="line">		p.setName(<span class="string">&quot;李&quot;</span>);</span><br><span class="line">		p.age = <span class="number">18</span>;</span><br><span class="line">		p.show();</span><br><span class="line">		p.xiaoName(<span class="string">&quot;德&quot;</span>, <span class="string">&quot;昭的&quot;</span>, <span class="string">&quot;得得&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>1）基本数据类型：byte、short、char、int、long、float、double、boolean 八个。</p>
<p>这些基本数据类型定义变量时，内存中的栈区会申请一个存储单元用来存储数据。</p>
<p>如 int a = 10;  内存中的栈区申请一个名为a的存储单元，大小为4个字节，里面存放着数据10。</p>
<p>2）引用数据类型：数组、类、接口、枚举、标注</p>
<p>用引用数据类型（数组、类、接口、枚举、标注）定义的变量叫做引用型变量，简称<strong>引用</strong>。如<code>Person p</code></p>
<p>引用数据类型在定义时，如<code>Person p = new Person();</code> ，内存中的栈区申请一个名为p的存储单元，用来存放地址。而new Person()这部分存放在内存中的堆区，有数据。假设new Person()在堆区中的地址是0x10，而p中存放的就是这个地址0x10。</p>
<p>如图，变量a为int类型，在栈区中存放的是数据10。引用型变量（引用）p为Person类型（类），在栈区中存放的是一个地址（0x10），该地址指向堆区中的new Person()，而new Person()中才有数据。</p>
<p>基本数据类型变量中存放的是数据，而引用数据类型变量中存放的是地址。</p>
<p><a href="https://imgtu.com/i/oTqXEq"><img src="https://s4.ax1x.com/2021/12/11/oTqXEq.png" alt="oTqXEq.png" border="0" /></a></p>
<p><strong>注意</strong>：</p>
<p>基本数据类型的变量，作为方法的参数传递时，形参不会影响到实参，因为这两个变量存放的是各自的数据，虽然数据一样。</p>
<p>引用数据类型的变量，作为方法的参数传递时，形参可能会影响到实参，因为这两个变量存放的是同一个地址。</p>
<h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>其实创建对象是<code>new Person();</code>,此时内存堆区会申请一块空间存放对象，但是由于没有引用型变量（引用）指向该对象的地址，就会被当作垃圾回收。所以创建对象时使用<code>Person p = new Person();</code>,含义是“创建Person类型引用p指向Person类型对象”。引用型变量p存放着对象的地址，因此不会被回收。</p>
<h2 id="方法和封装"><a href="#方法和封装" class="headerlink" title="方法和封装"></a>方法和封装</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>使用new关键字创建对象时，会自动调用构造方法。一般用于对象的初始化工作</p>
<p>定义：</p>
<ul>
<li><p>不用写返回值类型</p>
</li>
<li><p>构造方法名和类名一致</p>
</li>
</ul>
<p>当用户没有定义构造方法时，系统会默认定义一个无参无内容的构造方法，如Person类，<code>Person()&#123;&#125;</code></p>
<h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p>重载：方法名可以相同，但是参数个数，或类型，或顺序不一样。</p>
<p>例如：一般我们定义构造方法时，会定义一个有参的构造方法，同时再定义一个无参的构造方法，这就属于重载。</p>
<p>意义：调用用一个方法名，参数不一样可以实现不同的功能。例如println()方法，调用该方法我们传参可以是多种数据类型，但是依然可以打印出来，是因为官方写好了许多个println()同名不同参数方法。</p>
<h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>在类中使用this关键字表示，创建的该对象本身。</p>
<p>用法：</p>
<ul>
<li>this.成员变量、this.成员方法：当成员变量和局部变量重名时，系统会就近原则。变量前加上this.前缀，就表明是成员变量。（成员方法相同）</li>
<li>this还可以当作返回值，表示该对象本身。返回值类型就是该类名的类型。</li>
<li><code>this();</code>用在构造方法的第一行，可以调用本类的其他构造方法</li>
</ul>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归：定义 方法时，该方法会调用该方法自己</p>
<p>例如：计算费氏数列：1，1，2，3，5，8，13，21，第一项和第二项是1，之后的每一项的前两项和。下面分别使用递归和递推(循环)实现。传入第n项，返回第n项的数值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FengShi</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">diGui</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">//用递归的方法计算</span></span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">1</span> || n ==<span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> diGui(n-<span class="number">1</span>) + diGui(n-<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">diTui</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">//用递推的方法计算</span></span><br><span class="line">		<span class="keyword">int</span> ia = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> ib = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> ic;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;=n; i++) &#123;</span><br><span class="line">			ic = ia + ib;</span><br><span class="line">			ia = ib;</span><br><span class="line">			ib = ic;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ib;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显，使用递归代码简单明了，而递推复杂。但是递归代码的执行速度慢许多。</p>
<p><strong>递归注意事项</strong></p>
<ul>
<li>使用递归必须有递归规律以及退出条件</li>
<li>使用递归是把问题变得简单化而不是复杂化</li>
<li>若递归影响到程序的执行性能，则不推荐。建议使用递推取代之。</li>
</ul>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>通常情况下测试类给成员变量赋值一些合法但不合理的数值，程序不会报错，但是与现实不符。例如age赋值负数等。</p>
<p>为避免这一现象，需要对成员变量进行密封包装处理，保证成员变量的合理性，该机制就叫封装。</p>
<p>步骤：</p>
<ul>
<li><p>私有化成员变量，用private关键字修饰。如<code>private int age;</code></p>
</li>
<li><p>提供公有的set和get成员方法来访问成员变量，在方法中对合理值进行判断</p>
</li>
<li><p>构造方法中也调用set方法进行合理值判断</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1,私有化成员变量。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3,构造方法也调用成员方法来初始化成员变量。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">		setAge(age);</span><br><span class="line">		setName(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//2,提供我们写成员方法来访问成员变量，成员方法会判断参数是否正确。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (age &lt; <span class="number">0</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;age不能小于0岁。&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.age = age;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//定义show()来打印对象的特征</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;，今年&quot;</span> + age + <span class="string">&quot;岁！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>案例</strong></em>：使用上面定义的类完成。提示用户输入人数，然后输入学生信息：姓名，年龄，最后打印出来。</p>
<p>提示：Student[] arr = new Student[num];</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入学生人数：&quot;</span>);</span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">		<span class="comment">//根据输入的人数，创建Student引用类型的一维数组</span></span><br><span class="line">		Student[] arr = <span class="keyword">new</span> Student[num];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;请输入name和age：&quot;</span>);</span><br><span class="line">			arr[i] = <span class="keyword">new</span> Student(sc.next(), sc.nextInt());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++) &#123;</span><br><span class="line">			arr[i].show();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Student[] arr = new Student[num];</code>，表示创建一个一维数组，数组类型是自己定义的Student引用类型。数组中的每个元素都是Student引用类型变量，里面存放的只是地址，指向后面创建的对象。如下图：</p>
<p><a href="https://imgtu.com/i/oq9Xb6"><img src="https://s4.ax1x.com/2021/12/12/oq9Xb6.png" alt="oq9Xb6.png" border="0" /></a></p>
<h2 id="static关键字和继承"><a href="#static关键字和继承" class="headerlink" title="static关键字和继承"></a>static关键字和继承</h2><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><p>在类中正常定义的成员方法或变量隶属于<strong>对象层级</strong>，即创建对象时才拥有。且每个对象独有一份，互不影响，需要通过 <code>引用.成员</code> 的方式调用。</p>
<p>在定义成员时，加上static关键字修饰，就变成了静态成员，由原来的<strong>对象层级</strong>上升为<strong>类层级</strong>。即加载该类时就出现了，跟创不创建对象没有关系。类拥有一份，且被所有实例对象共享该同一份。不仅可通过 <code>引用.成员</code> 调用，还可以 <code>类名.成员</code> 调用。推荐 <code>类名.成员</code> 调用。</p>
<p><strong>static修饰成员变量</strong></p>
<p>例如：<code>public static String country;</code></p>
<p>变量由对象层级上升为类层级，叫做静态变量或者类变量。类和对象共享同一份该变量，所以一个改变该对象值，大家都跟着改变。不仅可通过 <code>引用.变量</code> 调用，还可以 <code>类名.变量</code> 调用。</p>
<p><strong>staitc修饰成员方法</strong></p>
<p>例如：<code>public static void show(参数) &#123;方法体&#125;</code></p>
<p>方法由对象层级上升为类层级，叫做静态方法或者类方法。不仅可通过 <code>引用.方法</code> 调用，还可以 <code>类名.方法</code> 调用。</p>
<p>由于方法是static修饰，属于类层级，所以在加载类时就已经被加载了，跟创建不创建对象无关。<br>而非静态的成员属于对象层级，必须要在创建对象后才出现。<br>所以在静态方法中只能访问静态成员，不可以访问非静态的成员，也不可以出现this之类跟对象有关的关键字（因为对象可能还没被创建）。</p>
<p>非静态方法即能访问非静态成员又可以访问静态成员。</p>
<p><strong>注意</strong>：</p>
<p>在开发中只有隶属于类层级并被所有对象共享的内容才可以使用static关键字修饰。（不能滥用static关键字）</p>
<h3 id="构造块和静态代码块"><a href="#构造块和静态代码块" class="headerlink" title="构造块和静态代码块"></a>构造块和静态代码块</h3><p>构造块：在类中直接大括号{}括起来的代码叫构造快，在每次创建对象时，构造方法之前执行。</p>
<p>静态代码块：在构造快前面加上static关键字。当类被加载时立马执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="comment">//静态代码块</span></span><br><span class="line">    <span class="comment">//需要在执行代码块之前随着类的加载做一些准备工作，比如，加载数据库的驱动包等。</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是静态代码块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//构造块。</span></span><br><span class="line">    <span class="comment">//需要在执行构造方法体之前做一些准备工作，比如，对成员变量经行统一初始化操作。</span></span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是构造块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是构造方法&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：当该类被加载时，就会立马调用一次”静态代码块“。此后，每次创建一个对象都会调用”构造块“，接着再调用”构造方法“。</p>
<h3 id="单例设计模型（Singleton类）"><a href="#单例设计模型（Singleton类）" class="headerlink" title="单例设计模型（Singleton类）"></a>单例设计模型（Singleton类）</h3><p>编程实现Singleton类，并且该类只能创建一个对象。</p>
<p>如下：</p>
<p>饿汉式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">	<span class="comment">//饿汉式，创建了引用 s 立马创建对象并指向，推荐</span></span><br><span class="line">    <span class="comment">//2,声明本类类型的引用指向本类类型的对象，配合private，static。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton s = <span class="keyword">new</span> Singleton();</span><br><span class="line">	<span class="comment">//1,私有化构造方法(private)，使得外面不能直接通过&quot;new 类名();&quot;的方式创建对象</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//3,提供公有的get方法将类中定义的对象返回出去，配合public，static。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>懒汉式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">	<span class="comment">//懒汉式，创建了引用 s 并没有初始化,而是在后面方法里初始化。</span></span><br><span class="line">    <span class="comment">//2,声明本类类型的引用指向暂时为null，配合private，static。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton s;</span><br><span class="line">    <span class="comment">//1,私有化构造方法(private)，使得外面不能直接通过&quot;new 类名();&quot;的方式创建对象</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	<span class="comment">//3,提供公有的get方法将类中定义的对象返回出去，配合public，static。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">			s = <span class="keyword">new</span> Singleton();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，可以外面只可以通过提供的共有的静态方法getSingleton()，即 <code>类名.静态方法（）</code> 的方法得到该类创建的对象。并且无论调用多少次方法，得到的都是同一个对象。</p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Singleton s1 = Singleton.getSingleton();</span><br><span class="line">        Singleton s2 = Singleton.getSingleton();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;s1 = &quot;</span> + s1);   <span class="comment">/*s1 = org.de.test_3.Singleton@312b1dae*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s2 = &quot;</span> + s2);   <span class="comment">/*s2 = org.de.test_3.Singleton@312b1dae*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<p>当Singleton类被加载时，静态变量<code>private static Singleton s = new Singleton();</code>就被加载，栈区创建引用s指向堆区创建的对象。执行静态方法<code>getSingleton()</code>，返回引用s。即返回堆区对象的地址。而无论调用多少次<code>getSingleton()</code>方法，返回的都是同一个地址，即同一个对象。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>例如定义教师类、定义工人类、学生类等等，这些类都有些共同的特征，比如它们都有人的特征。每个类都重新定义有关人的特征的话，重复代码严重。所以可以定义一个人类，而这些类都继承人类。</p>
<p>使用extends关键字表示继承关系，例如：<code>public class Teach extends People&#123;&#125;</code><br>Teach类继承People类。其中<br>Person类叫做父类，超类，基类<br>Teach类叫做子类，派生类，孩子类<br>Teach类继承People类后，就可以继承People类的成员方法和变量。</p>
<p>意义：使用继承提高了代码的复用性，可维护性及扩展性，是多态的前提条件</p>
<p>继承的特点：</p>
<ul>
<li>子类不能继承父类的构造方法和私有方法，但私有成员变量可以被继承，只是不能直接访问</li>
<li>无论调用何种方法创建子类对象是都会调用父类的无参构造方法，来初始化从父类继承的成员变量，相当于在子类的构造方法的第一行增加代码super()的效果。</li>
<li>使用继承必须满足逻辑关系：子类 is a 父类，例如老师 是 一个 人。也就是继承不能滥用。</li>
<li>java语言只支持单继承。一个子类只能有一个父类，但一个父类可以有多个子类。</li>
</ul>
<h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>从父类中继承下来的方法不满足子类的需求时，就需要在子类中重写一个新的和父类一样名字的方法，来覆盖从父类中继承下来的版本。该方式叫做方法的重写( Override )。</p>
<p>重写方法时，可以在方法上一行写<code>@Override</code>，有助于帮助我们检查该方法是不是重写。</p>
<p>重写原则：</p>
<ul>
<li>方法名相同、参数列表相同、返回值类型相同，从java5开始允许返回子类类型</li>
<li>方法的访问权限不能变小，可以相同或变大。</li>
<li>方法不能抛出更大的异常（异常机制）。</li>
</ul>
<p><strong>代码演示：</strong></p>
<p>封装了一个Animal类，有age、name私有变量，show()打印特征的成员方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>  age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        setAge(age);</span><br><span class="line">        setName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是动物，我叫&quot;</span> + getName() + <span class="string">&quot;，今年&quot;</span> + getAge() + <span class="string">&quot;岁！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>封装了一个Dog类，该类继承了Animal类。该类有tooth私有变量，还重写了父类的show()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tooth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> age, String name, <span class="keyword">int</span> tooth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(age, name);</span><br><span class="line">        setTooth(tooth);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTooth</span><span class="params">(<span class="keyword">int</span> tooth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tooth = tooth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTooth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tooth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;我是狗狗有&quot;</span> + getTooth() +<span class="string">&quot;颗牙齿&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>封装了一个Cat类，该类继承了Animal类。该类有color私有变量，还重写了父类的show()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(<span class="keyword">int</span> age, String name, String color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(age, name);</span><br><span class="line">        setColor(color);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;我是猫，我的颜色是&quot;</span> + getColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="构造块和静态代码块的考点"><a href="#构造块和静态代码块的考点" class="headerlink" title="构造块和静态代码块的考点"></a>构造块和静态代码块的考点</h3><p>假设：父类有构造方法，构造块，静态代码块。子类继承了父类，子类中也有构造方法，构造块，静态代码块。<br>问：  执行流程。</p>
<p>刚开始父类比子类先加载出来，所以先执行父类的静态代码块，再执行子类的静态代码块（一次）。<br>（由于创建子类对象一定会调用父类的构造方法怎么一说）<br>所以然后每次创建一个子类的对象时，都会先执行父类的构造块—–&gt;父类的构造方法——&gt;再执行子类的构造块—–&gt;子类的构造方法</p>
<h3 id="常用的访问控制符"><a href="#常用的访问控制符" class="headerlink" title="常用的访问控制符"></a>常用的访问控制符</h3><table>
<thead>
<tr>
<th>修饰符</th>
<th>本类</th>
<th>同一个包中的类</th>
<th>子类</th>
<th>其他类</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>可以访问</td>
<td>可以访问</td>
<td>可以访问</td>
<td>可以访问</td>
</tr>
<tr>
<td>protected</td>
<td>可以访问</td>
<td>可以访问</td>
<td>可以访问</td>
<td>不能访问</td>
</tr>
<tr>
<td>默认，即不写</td>
<td>可以访问</td>
<td>可以访问</td>
<td>不能访问</td>
<td>不能访问</td>
</tr>
<tr>
<td>private</td>
<td>可以访问</td>
<td>不能访问</td>
<td>不能访问</td>
<td>不能访问</td>
</tr>
</tbody></table>
<p>注意：</p>
<ul>
<li>public修饰的成员可以在任意位置使用</li>
<li>private修饰的成员只能在本类内部使用</li>
<li>通常情况下，没有特殊要求，成员方法用public修饰，成员变量用private修饰。</li>
</ul>
<h3 id="package包"><a href="#package包" class="headerlink" title="package包"></a>package包</h3><p>定义类需要指定类名，仅仅将类名作为类的唯一标识，会出现命名冲突的问题。<br>java用包（package）的概念解决该问题</p>
<ul>
<li><p>定义类的时，还需要指定一个包，例如：<br>package 包名;<br>package 包名1.包名2.包名3…..包名n;</p>
</li>
<li><p>为实现项目管理、解决命名冲突以及权限控制的效果</p>
</li>
</ul>
<p>定义包规范：<br>例如：org.apache.commons.lang.StringUtil<br>其中StringUtil是类名，而org.apache.commons.lang是多层包名，含义：<br>org.apache表示公司或组织的信息，<br>commons表示项目的名称信息，<br>lang表示模块的名称信息。</p>
<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>final表示最终的、不可改变的。可以修饰类，成员方法和成员变量。</p>
<ul>
<li>final关键字修饰类，表示该类不能被继承。<br>主要用于防止滥用继承，如：java.lang.String类等。</li>
<li>final关键字修饰成员方法，表示该方法不能被重写，但可以被继承。<br>主要用于防止不经意间造成重写，如java.text.Dateformat类中的format方法等。</li>
<li>final关键字修饰成员变量，表示该变量必须初始化且不能被改变了。<br>初始化的三种方式：定义时直接加等于号“=”初始化，在构造方法中初始化，在构造块中初始化。<br>主要用于防止不经意间造成改写，如java.lang.Thread类中的MAX_PRIORITY等。</li>
</ul>
<p><strong>常量</strong>：</p>
<p>用final关键字修饰的成员变量一般叫做常量。<br>但是通常不会单独使用final关键字修饰，会配合public static final关键字一起修饰来表达常量的含义。<br>常量的命名规范：所有字母要大写，不同单词之间用下划线连接。</p>
<h2 id="多态和特殊类-抽象类-接口"><a href="#多态和特殊类-抽象类-接口" class="headerlink" title="多态和特殊类(抽象类,接口)"></a>多态和特殊类(抽象类,接口)</h2><p>多态是指同一种事物表现出来的多种形态</p>
<p>饮料：可乐、雪碧、红牛、旺仔·····<br>宠物：猫、狗、鱼······<br>人：学生、老师、工人、警察······</p>
<p>多态语法格式：<br><code>父类类型 引用变量名 = new 子类类型();</code><br>声明父类类型的引用指向子类类型对象。</p>
<p>如：创建了Animal类。再创建Dog类，其中Dog类继承Animal类。再创建Cat类，其中Cat类继承Animal类。<br>多态：<code>Animal a1 = new Dog();</code>  或 <code>Animal a2 = new Cat();</code></p>
<p>其实，父类引用指向子类对象的形式就叫做多态。</p>
<h3 id="多态特点"><a href="#多态特点" class="headerlink" title="多态特点"></a>多态特点</h3><ul>
<li>当父类类型的引用指向子类类型的对象时(多态)，父类类型的引用可以直接调用父类独有的方法</li>
<li>当父类类型的引用指向子类类型的对象时(多态)，父类类型的引用不能直接调用子类独有的方法。（强制类型转换成子类就可以解决）</li>
<li>对与父类和子类都有的非静态方法来说(重写)，编译阶段调用父类版本，运行阶段调用子类重写的版本。</li>
<li>对于父类和子类都有的静态方法来说，编译和运行阶段都调用父类版本。（因为静态成员跟创建不创建对象无关，所以和子类无关）</li>
</ul>
<h3 id="引用数据类型的转换"><a href="#引用数据类型的转换" class="headerlink" title="引用数据类型的转换"></a>引用数据类型的转换</h3><p>父类类型可以理解为较大的类型，子类类型可以理解为较小的类型。<br>引用数据类型的转换方式有：自动类型转换、强制类型转换<br>转换方法跟基本数据类型相似。</p>
<ul>
<li>自动类型转换：指小类型转换成大类型，即子类转父类，也叫向上转型。比如多态的语法格式：Animal a = new Dog();</li>
<li>强制类型转换：指大类型转换成小类型，即父类转子类，也叫向下转换。比如：将上面的Animal a转换一下成Dog类型，Dog d = (Dog) a;</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>引用数据类型的转换必须发生再父子类之间，否则编译报错</li>
<li>若强制转换的目标不是该引用真正指向的数据类型时，编译通过，但是运行异常。ClassCastException类型转换异常。案例如下：</li>
</ul>
<p>例如，有Animal类作为父类，有Dog类和Cat类都继承Animal类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line"> <span class="comment">//该代码在运行报错，ClassCastException类型转换异常</span></span><br><span class="line">Cat c = (Cat)a;   </span><br><span class="line">Dog d = (Dog)a;  <span class="comment">//没问题</span></span><br></pre></td></tr></table></figure>

<p>如上，a虽然是Animal类型，但是真正意义上却是Dog类型。所以即使通过强制转换也不能转换成Cat类型。</p>
<p>为了避免上述错误发生，应该在强制转之前进行判断，借助instanceof，格式：<br>if(引用变量 instanceof 数据类型){ 为真时执行 }</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;可以放心强制转换&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;不可以转换哦&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多态的意义"><a href="#多态的意义" class="headerlink" title="多态的意义"></a>多态的意义</h3><p>例如，有Animal类作为父类，有Dog类和Cat类都继承Animal类。<br>要求：1，自定义方法实现，将参数指定的Dog对象的特征打印出来。<br>            2，自定义方法实现，将参数指定的Cat对象的特征打印出来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.de.test_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">	<span class="comment">//要求1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Dog d)</span></span>&#123;</span><br><span class="line">        d.show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//要求2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Cat c)</span> </span>&#123;</span><br><span class="line">        c.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//测试，调用</span></span><br><span class="line">        Test2.test(<span class="keyword">new</span> Dog(<span class="number">18</span>, <span class="string">&quot;WangCai&quot;</span>, <span class="number">27</span>));</span><br><span class="line">        Test2.test(<span class="keyword">new</span> Cat(<span class="number">10</span>, <span class="string">&quot;Baozi&quot;</span>, <span class="string">&quot;orange&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，Animal类中只有两个子类Dog和Cat。假如有n个子类，这类要求也是n个。代码冗余严重。<br>借助多态，可以完美解决该问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.de.test_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">	<span class="comment">//形参是父类类型的引用。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Animal a)</span> </span>&#123; </span><br><span class="line">        a.show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">        Test2.test(<span class="keyword">new</span> Animal());</span><br><span class="line">        <span class="comment">//实参是子类类型的对象。</span></span><br><span class="line">        Test2.test(<span class="keyword">new</span> Dog(<span class="number">18</span>, <span class="string">&quot;WangCai&quot;</span>, <span class="number">27</span>));</span><br><span class="line">        Test2.test(<span class="keyword">new</span> Cat(<span class="number">10</span>, <span class="string">&quot;Baozi&quot;</span>, <span class="string">&quot;orange&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多态的使用场合之一：通过传参的方法，实现多态。形参是父类类型的引用，实参是子类类型的对象。</p>
<p><strong>多态使用场合：</strong></p>
<ul>
<li>通过方法的参数传递形成多态；<br>形参是父类类型引用，实参是子类类型对象。</li>
<li>在方法体中直接使用多态的语法格式；<br>父类类型 引用变量名 = new 子类类型();</li>
<li>通过方法的返回值类型形成多态<br>定义方法的返回值类型是父类类型，但是return后面真实返回的是子类对象。</li>
</ul>
<h3 id="抽象方法和抽象类"><a href="#抽象方法和抽象类" class="headerlink" title="抽象方法和抽象类"></a>抽象方法和抽象类</h3><p>抽象方法：在定义方法时，加上abstract关键字。抽象方法没有方法体。如：<br><code> public abstract void show(参数);</code></p>
<p>抽象类：在定义时，加上abstract关键字。如：<br><code>public abstract class 类名&#123; 类体 &#125;</code></p>
<ul>
<li>抽象方法一定要定义在抽象类中。</li>
<li>抽象类中可以有或着没有，成员变量，成员方法，构造方法，抽象方法等。</li>
<li>抽象类不可以实例化对象（万一实例化了对象，而对象又调用了没有方法体的抽象方法怎么办！！）。</li>
</ul>
<p><strong>意义</strong></p>
<ul>
<li>抽象类的实际意义不在于创建对象，而在与被继承。</li>
<li>并且继承了抽象类的子类，必须重写抽象类的所有抽象方法，否者也定义成抽象类。<br>也就是说，抽象类对子类具有强制性和规范性，因此叫做模板设计模式。</li>
</ul>
<p><strong>注意</strong>：</p>
<p>虽然只要是满足abstract关键字修饰的类是抽象类，但是真正意义上的抽象类还应该有抽象方法。</p>
<p><strong>案例</strong>：银行有 定期账户 和 活期账户 ，都继承自 账户类。</p>
<p>定义 账户类Account，该类定义成抽象类，获取利息的方法也定义成抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.de.test_5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        setMoney(money);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取利息的抽象方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getLiXing</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义定期账户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.de.test_5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DingQiAccount</span> <span class="keyword">extends</span> <span class="title">Account</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DingQiAccount</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLiXing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMoney() * <span class="number">0.03</span> * <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义活期账户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.de.test_5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuoQiAccount</span> <span class="keyword">extends</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HuoQiAccount</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLiXing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMoney() * <span class="number">0.01</span> * <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.de.test_5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//多态场景之一</span></span><br><span class="line">        Account a = <span class="keyword">new</span> <span class="comment">/*DingQi*/</span>HuoQiAccount(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;利息是&quot;</span> + a.getLiXing() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>考点</strong></p>
<p>abstract关键字不能和private、static、final关键字一起使用。原因：</p>
<ul>
<li>abstract 和 private： private是私有的，子类访问不到，就更不用说重写了。而abstract就是需要重写，互相矛盾。</li>
<li>abstract 和 static：用static修饰的方法隶属于类层级，可以用“类名.方法”来调用，而此时抽象方法没有方法体，错误。</li>
<li>abstract 和 final：final修饰的方法表示不能被重写，而abstract就是需要重写，互相矛盾。</li>
</ul>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口就是一种比抽象类还抽象的类。体现接口中在只有常量和抽象方法。</p>
<p>定义时接口时，把class关键字改成interface。如<code>public interface 接口名&#123; 接口体 &#125;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接口只有常量和抽象方法（型特性除外）,注释中的关键字可以省略。</span></span><br><span class="line">    <span class="comment">/*public static final*/</span> <span class="keyword">int</span> i = <span class="number">1</span>;  <span class="comment">//常量</span></span><br><span class="line">    <span class="comment">/*public abstract*/</span> <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;    <span class="comment">//抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//8版本之后的新特性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;&#125;    <span class="comment">//非抽象方法，子类自由选择重写不重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show3</span><span class="params">()</span></span>&#123;&#125;     <span class="comment">//静态方法，子类不能重写</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//9版本的新特性</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show4</span><span class="params">()</span></span>&#123;&#125;           <span class="comment">//私有方法，子类不能重写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上，接口只有常量和抽象方法。但是Java8版本之后的新特性可以有非抽象方法，静态方法；Java9版本的新特性可以有私有方法。</p>
<p><strong>意义</strong></p>
<p>接口出现可以弥补Java中类不能多继承的不足。</p>
<p>例如：黄金即属于金属，又属于货币。如果用类描述关系的话，很难描述。而接口可以。<br>定义金属接口，定义货币接口，再定义黄金类。黄金类继承金属接口又继承货币接口。<br><em>注意</em>：类继承接口，叫做类实现接口，不用extends关键字，而用implements关键字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//金属接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Metal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">shine</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//货币接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Money</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//黄金类Gold，实现(继承)了金属接口Metal和货币接口Money。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gold</span> <span class="keyword">implements</span> <span class="title">Metal</span>, <span class="title">Money</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>      <span class="comment">//重写金属接口Metal的抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shine</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄金闪闪发光&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>      <span class="comment">//重写货币接口Money的抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;买买买&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>接口和类的关系</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>关键字</th>
<th>关系</th>
</tr>
</thead>
<tbody><tr>
<td>类和类之间</td>
<td>用extends关键字表示继承</td>
<td>单继承</td>
</tr>
<tr>
<td>类和接口之间</td>
<td>用implements关键字表示实现</td>
<td>多实现</td>
</tr>
<tr>
<td>接口和接口之间</td>
<td>用extends关键字表示继承</td>
<td>多继承</td>
</tr>
</tbody></table>
<p><em>注意</em>：</p>
<ul>
<li>类可以实现(继承)接口，而接口不能继承类。</li>
<li>子接口a继承了父接口b，某个类实现子接口a的话，该类必须重写接口a和接口b的所有抽象方法，否则将该类变成抽象类。</li>
</ul>
<p>想要即继承父类又实现接口的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 <span class="keyword">extends</span> 父类 <span class="keyword">implements</span> 接口1, 接口2, 接口3 </span>&#123; 类体 &#125;</span><br></pre></td></tr></table></figure>

<h2 id="特殊类"><a href="#特殊类" class="headerlink" title="特殊类"></a>特殊类</h2><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p><em>概念</em><br>当一个类的定义出现在另外一个类的类体中时，那么这个类叫做内部类（Inner），而这个内部类所在的类叫做外部类（Outer）。</p>
<p>类中的内容可以有：成员变量、成员方法、构造方法、静态方法、构造块、静态代码块、内部类。<br>由此可见内部类和其他成员是平级关系。</p>
<p><em>作用：</em><br>当一个类的存在价值仅仅是为某一个类单独服务时，那么就可以将这个类定义为服务类中的内部类，这样可以隐藏该类的现实细节并且可以方便的访问外部类的私有成员。</p>
<p><em>内部类的分类</em></p>
<ul>
<li>普通（成员）内部类：直接将一个类定义在另一个类的类体中</li>
<li>静态内部类：使用static关键字修饰的内部类，隶属于类层级</li>
<li>局部内部类：直接将一个类定义在方法体的内部</li>
<li>匿名内部类：就是指没有名字的内部类（重要）</li>
</ul>
<h4 id="普通内部类"><a href="#普通内部类" class="headerlink" title="普通内部类"></a>普通内部类</h4><p>又叫成员内部类，直接将一个类定义在另一个类的类体中，写法和普通的类一样。<br>内部类可以直接访问外部类的成员。出现同名成员，可以用<code>外部类名.this.成员</code>访问外部类的成员。<br>测试中想要创建内部类，必须先创建外部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//定义普通内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Innter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;形参a = &quot;</span> + a);</span><br><span class="line">            System.out.println(<span class="string">&quot;普通内部类的成员变量a = &quot;</span> + <span class="keyword">this</span>.a);</span><br><span class="line">            System.out.println(<span class="string">&quot;外部类的成员变量a = &quot;</span> + Outer1.<span class="keyword">this</span>.a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">	<span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Outer1 o = <span class="keyword">new</span> Outer1();</span><br><span class="line">        Outer1.Innter i = o.<span class="function">new <span class="title">Innter</span><span class="params">()</span></span>;</span><br><span class="line">        i.show(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>使用static关键字修饰的内部类，隶属于类层级<br>由于静态内部类隶属于类层级，可以用类名.的方式直接调用。<br>并且静态内部类里面不可以访问外部类的非静态成员。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//该静态内部类里面不能访问外部类的非静态成员。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnter</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> b = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;形参a = &quot;</span> + a);</span><br><span class="line">            System.out.println(<span class="string">&quot;静态内部类的成员变量b = &quot;</span> + <span class="keyword">this</span>.b);</span><br><span class="line">            System.out.println(<span class="string">&quot;静态内部类的静态变量a = &quot;</span> + StaticInnter.a);</span><br><span class="line">            System.out.println(<span class="string">&quot;外部类的静态变量a = &quot;</span> + Outer2.a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">	<span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Outer2.StaticInnter si = <span class="keyword">new</span> Outer2.StaticInnter();</span><br><span class="line">        si.show(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><p>直接将一个类定义在方法体的内部。<br>只能在该方法体中使用。<br>和局部变量一样，定义局部内部类时不用加public等关键字修饰。<br>局部内部类中访问外部方法体的变量时，应该把该变量当作常量一样使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ia = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ib = <span class="number">2</span>;   <span class="comment">//对于局部内部类来说，该外部方法体的变量ib相当于常量。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//在方法体中定义局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AreaInner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> ic = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ia = &quot;</span> + ia);</span><br><span class="line">                System.out.println(<span class="string">&quot;ib = &quot;</span> + ib);<span class="comment">//外部方法体的变量ib相当于常量。</span></span><br><span class="line">                System.out.println(<span class="string">&quot;ic = &quot;</span> + ic);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只能在所在的方法体中调用。</span></span><br><span class="line">        AreaInner ai = <span class="keyword">new</span> AreaInner();</span><br><span class="line">        ai.show2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">	<span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Outer3 o = <span class="keyword">new</span> Outer3();</span><br><span class="line">        o.show1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p><strong>回调模式的概念</strong></p>
<p>回调模式：指如果一个方法的形参是接口类型，则调用该方法时，实参就要是该接口类型的实现类创建的对象。而该方法在运行时会调用到参数对象中所重写的方法。</p>
<p>例如：定义一个接口MyInterface。接口中有抽象方法show();<br>定义一个方法如下，符合回调模式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//形参是接口类型引用。注意：而接口有不能创建对象，只能利用多态。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">huiDiao</span><span class="params">(MyInterface i)</span></span>&#123;</span><br><span class="line">    i.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用该方法，实参是接口的某个实现类(子类)创建的对象。所以我们又需要为接口MyInterface定义一个实现类(子类)Sub。实现类Sub要重写接口的抽象方法。<br>然后可以如下调用方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1,实参是接口的某个实现类(子类)创建的对象</span></span><br><span class="line">huiDiao( <span class="keyword">new</span> Sub() );</span><br></pre></td></tr></table></figure>

<p>假如该方法只要调用一次就没有用了，所以实现类Sub只会用到一次就没用了。相当于是临时定义出来的类，为了方便，我们可以使用匿名内部类。</p>
<p><strong>匿名内部类</strong></p>
<p>接口/父类 引用名 = new 接口/父类（）{ 匿名内部类的方法体(注意要重写方法) };</p>
<p>根据上面的代码，调用huiDiao()方法传实参时，我们可以不用定义临时的实现类Sub了。<br>采用匿名内部类，为接口MyInterface 临时创建一个没有名字实现类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2,实参是利用匿名内部类创建的对象</span></span><br><span class="line">MyInterface i = <span class="keyword">new</span> MyInterface()&#123; <span class="comment">//类体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;临时创建出来的匿名内部类重写接口的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;   <span class="comment">//注意最后的分号;</span></span><br><span class="line">huiDiao(i);</span><br></pre></td></tr></table></figure>

<p>从java8开始提出型特性lamda表达式可以简化上述代码，<br>格式为：(参数列表) -&gt; {方法体}，后面会讲。</p>
<p><strong>开发经验</strong></p>
<p>当  接口/父类  类型的引用作为方法的形参时，实参的传递方式有两种：</p>
<ul>
<li>自定义类来  实现接口/继承父类，并重写方法。然后创建该类的对象作为实参传递。</li>
<li>使用上述匿名内部类的语法格式，得到  接口/类  类型的引用即可。</li>
</ul>
<h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p>定义季节类，对象只有：春夏秋冬<br>定义性别类，对象只有：男女</p>
<p>例如：定义一个枚举类，枚举类只能创建指定的几个对象。</p>
<h4 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h4><p>编程实现方向枚举类，该类只能创建对象：向上，向下，向左，向右。（定义方法跟之前的单例设计模型类似）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Direction</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String direc;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *2，声明本类类型的引用指向本类类型的对象，配合public static final关键字</span></span><br><span class="line"><span class="comment">     *   使得外部只能得到这4个引用（类名.引用名），而且不能修改。外部不能创建别的对象了。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Direction UP = <span class="keyword">new</span> Direction(<span class="string">&quot;向上&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Direction DOWN = <span class="keyword">new</span> Direction(<span class="string">&quot;向下&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Direction LEFT = <span class="keyword">new</span> Direction(<span class="string">&quot;向左&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Direction RIGHT = <span class="keyword">new</span> Direction(<span class="string">&quot;向右&quot;</span>);</span><br><span class="line">    <span class="comment">//1,私有化构造方法，使得外部不能通过new的方法创建对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Direction</span><span class="params">(String derec)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.direc = derec;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方向是&quot;</span> + <span class="keyword">this</span>.direc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>外部只能得到这4个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Direction d1 = Direction.UP;</span><br><span class="line">Direction d2 = Direction.DOWN;</span><br><span class="line">Direction d3 = Direction.LEFT;</span><br><span class="line">Direction d4 = Direction.RIGHT;</span><br></pre></td></tr></table></figure>

<h4 id="用enum定义枚举类"><a href="#用enum定义枚举类" class="headerlink" title="用enum定义枚举类"></a>用enum定义枚举类</h4><p>使用上述public static final配合表示有点繁琐，Java5以后有了新的引用数据类型：<em>枚举类型</em>，用enum关键字。<br>定义枚举类时，将class替换成enum表示枚举类类型。</p>
<p>Java5后建议如下这样定义枚举类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Direction2</span></span>&#123;</span><br><span class="line">    <span class="comment">//public static final Direction UP = new Direction(&quot;向上&quot;);</span></span><br><span class="line">    <span class="comment">//在枚举类中简写成： UP(&quot;向上&quot;);   且放在第一行。</span></span><br><span class="line">    UP(<span class="string">&quot;向上&quot;</span>), DOWN(<span class="string">&quot;向下&quot;</span>), LEFT(<span class="string">&quot;向左&quot;</span>), RIGHT(<span class="string">&quot;向右&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String deric;</span><br><span class="line">    <span class="comment">//1,私有化构造方法，使得外部不能通过new的方法创建对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Direction2</span><span class="params">(String deric)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deric = deric;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.deric);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Direction2 d1 = Direction2.UP;</span><br><span class="line">Direction2 d2 = Direction2.DOWN;</span><br><span class="line">Direction2 d3 = Direction2.LEFT;</span><br><span class="line">Direction2 d4 = Direction2.RIGHT;</span><br></pre></td></tr></table></figure>

<p>在switch结构中支持采用enum关键字定义的枚举类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(Direction2 d)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(d)&#123;</span><br><span class="line">            <span class="keyword">case</span> UP: System.out.println(<span class="string">&quot;贪吃蛇向上走&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DOWN: System.out.println(<span class="string">&quot;贪吃蛇向下走&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LEFT: System.out.println(<span class="string">&quot;贪吃蛇向左走&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RIGHT: System.out.println(<span class="string">&quot;贪吃蛇向右走&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Test2.test2(Direction2.UP);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Enum类的方法"><a href="#Enum类的方法" class="headerlink" title="Enum类的方法"></a>Enum类的方法</h4><p>用enum关键字定义的枚举类天生继承自java.lang.Enum类，所以也继承父类的方法。<br><em>注意</em>：由于继承Enum父类。枚举类不能再继承其他类了，但是可以实现接口。</p>
<p>继承的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>static T[] values()</td>
<td>返回当前枚举类中所有对象</td>
</tr>
<tr>
<td>String toString()</td>
<td>返回当前枚举类对象名称</td>
</tr>
<tr>
<td>int ordinal()</td>
<td>获取枚举类对象在枚举中的索引位置</td>
</tr>
<tr>
<td>static T valueOf(String str)</td>
<td>将参数指定的字符串转换为当前枚举类的对象</td>
</tr>
<tr>
<td>ing compareTo(E o)</td>
<td>比较当前枚举类对象和参数枚举类对象的顺序</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Direction2[] arr = Direction2.values();   <span class="comment">//values()</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前对象的名称是：&quot;</span> + arr[i].toString());   <span class="comment">//toString()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前对象的索引值是：&quot;</span> + arr[i].ordinal());  <span class="comment">//ordinal()</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意细节，print打印“引用”或者是“引用.toString()”的结果是一样的。</span></span><br><span class="line">    Direction2 d = Direction2.valueOf(<span class="string">&quot;LEFT&quot;</span>);     <span class="comment">//valueOf()</span></span><br><span class="line">    System.out.println(d);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//compareTo()是将当前对象索引值减去参数对象索引值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> ia = d.compareTo(arr[i]);                      <span class="comment">//compareTo()</span></span><br><span class="line">        System.out.println(d.toString() + <span class="string">&quot;和&quot;</span> + arr[i].toString() + <span class="string">&quot;比的结果是&quot;</span> + ia);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="枚举类重写接口方法"><a href="#枚举类重写接口方法" class="headerlink" title="枚举类重写接口方法"></a>枚举类重写接口方法</h4><p>上面说过，由于继承Enum父类。枚举类不能再继承其他类了，但是可以实现接口。</p>
<p>枚举类实现了某个接口，就需要重写接口的方法。重写方法有两种方式：</p>
<ul>
<li>所有枚举类对象共享同一个重写方法。</li>
<li>每个枚举类对象各自重写方法，利用匿名内部类的方式。</li>
</ul>
<p>假设定义一个接口MyInterface，有抽象方法show()。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Direction3</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    UP(<span class="string">&quot;向上&quot;</span>), DOWN(<span class="string">&quot;向下&quot;</span>), LEFT(<span class="string">&quot;向左&quot;</span>), RIGHT(<span class="string">&quot;向右&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String direc;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Direction3</span><span class="params">(String direc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.direc = direc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1,所有枚举类对象共享同一个重写方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Direction3</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2,每个枚举类对象各自重写方法，利用匿名内部类的方式。</span></span><br><span class="line">    <span class="comment">//匿名内部类：接口/父类 引用名 = new 接口/父类()&#123;类体&#125;;</span></span><br><span class="line">    <span class="comment">//public static finla Directioin3 UP = new Direction3(&quot;向上&quot;) &#123;类体中重写方法&#125;;</span></span><br><span class="line">    <span class="comment">//简化为：UP(&quot;向上&quot;)&#123;类体中重写方法&#125;, DOWN(&quot;向下&quot;)&#123;类体中重写方法&#125;, ......</span></span><br><span class="line">    UP(<span class="string">&quot;向上&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, DOWN(<span class="string">&quot;向下&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, LEFT(<span class="string">&quot;向左&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, RIGHT(<span class="string">&quot;向右&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String direc;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Direction3</span><span class="params">(String direc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.direc = direc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>注解(Annotation)又叫标注。是Java5开始增加的一种引用数据类型。是一种特殊的接口。</p>
<p>本质上就是给代码贴标签，特殊标记。通过这些标记可以在编译、类加载、以及运行时执行指定的处理。</p>
<h4 id="定义和使用"><a href="#定义和使用" class="headerlink" title="定义和使用"></a>定义和使用</h4><p><strong>定义</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">访问修饰符 <span class="meta">@interface</span> 注解名称&#123;</span><br><span class="line">	注解成员;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注解成员只有成员变量。注解的成员变量声明语法：<br><code>public 数据类型 变量名();</code>     或者<br><code>public 数据类型 变量名() default 默认值;</code></p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="comment">//只能有成员变量。public 数据类型 变量名() /*default 默认值*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value2</span><span class="params">()</span> <span class="keyword">default</span> 10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果一个注解没有任何成员，叫做标记注解/标识注解。</p>
<p><strong>使用</strong></p>
<p>在需要注解的代码上写上：@ 注解名(传参)</p>
<p>例如：注解标注Person类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(value=1, value2=2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>注解是标注在代码上面。<br>但是有些注解可以标注在注解上———叫做元注解。</p>
<p>元注解主要有：@retention、@Documented、@Target、@Inherited、@Repeatable</p>
<p><strong>@retention</strong></p>
<p>@retention应用(贴)在一个注解上，用于说明该注解的生命周期，取值如下：</p>
<ul>
<li><p>RetentionPolicy.SOURCE：注解只在源码阶段保留，在编译器进行编译时</p>
<p>它将被丢弃忽视。java文件前有效</p>
</li>
<li><p>RetentionPolicy.CLASS：注解只被保留到编译进行的时候，它并不会被加</p>
<p>载到 JVM 中，默认方式。class文件前有效</p>
</li>
<li><p>RetentionPolicy.RUNTIME：注解可以保留到程序运行的时候，它会被加载</p>
<p>进入到 JVM 中，所以在程序运行时可以获取到它们。</p>
</li>
</ul>
<p>java文件——–(javac.exe编译器编译阶段)——-&gt;class文件——(java.exe解释器解释运行阶段)———-&gt;结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定所修饰的注解MyAnnotation的生命周期在class文件前有效(默认)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.CLASS)</span>    </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;  <span class="comment">//自定义注解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Documented</strong></p>
<p>使用Javadoc工具可以从程序源代码中抽取类、方法、成员等形成一个和源代码配套的API帮助文档。默认不包括注解内容。</p>
<p>例如写了如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(value=1, value2=2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//文档注释</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * age是描述年龄的成员变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * name是描述姓名的成员变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i:随便传的形参</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>:返回参数int i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里使用过IDEA演示，点击“Tools”—&gt;“Generate JavaDoc”，打开对话框，填写好相关信息后点击ok。然后会自动生成跟我们写的代码配套的API帮助文档。<br>文档注释/**    */会变成代码的功能说明。</p>
<p>生成的API帮助文档，里面默认不包括注解内容。<br>想要在API帮助文档包括注解内容的话，需要在定义注解时，贴上元注解@Documented。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所修饰的注解MyAnnotation可以被添加到API帮助文档中</span></span><br><span class="line"><span class="meta">@Documented</span>                     </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Target</strong></p>
<p>@Target用于指定被修饰的注解只能贴在哪些元素上。</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>ElementType.ANNOTATION_TYPE</td>
<td>可以给一个注解进行注解</td>
</tr>
<tr>
<td>ElementType.CONSTRUCTOR</td>
<td>可以给构造方法进行注解</td>
</tr>
<tr>
<td>ElementType.FIELD</td>
<td>可以给属性进行注解</td>
</tr>
<tr>
<td>ElementType.LOCAL_VARIABLE</td>
<td>可以给局部变量进行注解</td>
</tr>
<tr>
<td>ElementType.METHOD</td>
<td>可以给方法进行注解</td>
</tr>
<tr>
<td>ElementType.PACKAGE</td>
<td>可以给一个包进行注解</td>
</tr>
<tr>
<td>ElementType.PARAMETER</td>
<td>可以给一个方法内的参数进行注解</td>
</tr>
<tr>
<td>ElementType.TYPE</td>
<td>可以给类型进行注解，比如类、接口、枚举</td>
</tr>
</tbody></table>
<p>从Java8开始对元注解@Target的参数类型ElementType枚举值增加了两个：</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>ElementType.TYPE_PARAMETER</td>
<td>该注解能写在类型变量的声明语句中，如：泛型。</td>
</tr>
<tr>
<td>中ElementType.TYPE_USE</td>
<td>该注解能写在使用类型的任何语句中</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所修饰的注解MyAnnotation只可以贴在属性或类型上。</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Inherited</strong></p>
<p>默认子类继承父类时，不会把父类的注解也继承。</p>
<p>@Inherited所应用的注解可以被继承。</p>
<p>并不是说注解本身可以继承，而是说如果一个父类被该元注解(@Inherited)标记过的注解进行标记时，如果子类没有被任何注解应用时，则子类就继承父类的注解。</p>
<p><strong>@Repeatable</strong></p>
<p>表示自然可重复的含义</p>
<p>正常定义的注解不能对同一代码反复标注。</p>
<p>如果某一注解想要对同一代码反复标注，Java8以前的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ManType &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ManTypes &#123;</span><br><span class="line">    <span class="keyword">public</span> ManType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java8以前是这样处理多个注解</span></span><br><span class="line"><span class="meta">@ManTypes(value=&#123;@ManType(value=&quot;超人&quot;), @ManType(value=&quot;父亲&quot;)&#125;)</span>   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java8以后借助元注解@Repeatable可以这样写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repeatable(value=ManTypes.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ManType &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ManTypes &#123;</span><br><span class="line">    <span class="keyword">public</span> ManType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java8以后借助元注解@Repeatable可以这样写</span></span><br><span class="line"><span class="meta">@ManType(value=&quot;超人&quot;)</span>    </span><br><span class="line"><span class="meta">@ManType(value=&quot;父亲&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是无论哪种写法，ManType注解想要反复使用的话，都需要定义ManTypes注解，里面的成员是ManType注解类型的数组。</p>
<h4 id="常见的预制注解"><a href="#常见的预制注解" class="headerlink" title="常见的预制注解"></a>常见的预制注解</h4><p>预制注解就是Java语言自身提供的注解，具体如下：</p>
<table>
<thead>
<tr>
<th>预制注解</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>@author</td>
<td>标明开发该类模块的作者，多个作者之间使用,分割</td>
</tr>
<tr>
<td>@version</td>
<td>标明该类模块的版本</td>
</tr>
<tr>
<td>@see</td>
<td>参考转向，也就是相关主题</td>
</tr>
<tr>
<td>@since</td>
<td>从哪个版本开始增加的</td>
</tr>
<tr>
<td>@param</td>
<td>对方法中某参数的说明，如果没有参数就不能写</td>
</tr>
<tr>
<td>@return</td>
<td>对方法返回值的说明，如果方法的返回值类型是void就不能写</td>
</tr>
<tr>
<td>@exception</td>
<td>对方法可能抛出的异常进行说明</td>
</tr>
<tr>
<td>@Override</td>
<td>限定重写父类方法, 该注解只能用于方法</td>
</tr>
<tr>
<td>@Deprecated</td>
<td>用于表示所修饰的元素(类, 方法等)已过时</td>
</tr>
<tr>
<td>@SuppressWarnings</td>
<td>抑制编译器警告</td>
</tr>
</tbody></table>
<h1 id="Java核心类库-上"><a href="#Java核心类库-上" class="headerlink" title="Java核心类库(上)"></a>Java核心类库(上)</h1><h2 id="常用类的概述和使用"><a href="#常用类的概述和使用" class="headerlink" title="常用类的概述和使用"></a>常用类的概述和使用</h2><p>这里开始学习官方提供的类和接口，需要借助API工具。</p>
<h3 id="常用的包"><a href="#常用的包" class="headerlink" title="常用的包"></a>常用的包</h3><ul>
<li><p>java.lang包 - 该包是Java语言的核心包，并且该包中的所有内容由Java虚拟机自动导入。<br>如：System类、String类、… </p>
</li>
<li><p>java.util包 - 该包是Java语言的工具包，里面提供了大量工具类以及集合类等。<br>如：Scanner类、Random类、List集合、…</p>
</li>
<li><p>java.io包 - 该包是Java语言中的输入输出包，里面提供了大量读写文件相关的类等。<br>如：FileInputStream类、FileOutputStream类、…</p>
</li>
<li><p>java.net包 - 该包是Java语言中的网络包，里面提供了大量网络编程相关的类等。<br>如：ServerSocket类、Socket类、…</p>
</li>
<li><p>java.sql 包 - 该包是Java语言中的数据包，里面提供了大量操作数据库的类和接口等。<br>如：DriverManager类、Connection接口、…</p>
</li>
<li><p>… …</p>
</li>
</ul>
<p>Java程序员在编程时可以使用大量类库，因此Java编程时需要记的很多，对编程能力本身要求不是</p>
<p>特别的高。</p>
<h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><ul>
<li><p>java.lang.Object类是Java语言中类层次结构的根类，也就是说任何一个类都是该类的直接或者间<br>接子类。</p>
</li>
<li><p>如果定义一个Java类时没有使用extends关键字声明其父类，则其父类默认为 java.lang.Object 类。</p>
</li>
<li><p>Object类定义了“对象”的基本行为, 被子类默认继承。</p>
</li>
</ul>
<p><strong>Object类的常用方法如下：</strong>（被所有子类继承）</p>
<h4 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h4><p>boolean equals(Object obj)：</p>
<p>用于判断调用对象是否与参数对象相等。默认是判断地址是否相等，和==运算符一样。<br>若希望比较两个对象的内容，则需要重写该方法。<br>若该方法被重写后，则应该重写hashCode方法来保证结果的一致性。</p>
<p><em>例如</em>，定义了student类，假如两个对象的id一样，则equals()就为true。重写如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">    <span class="comment">//参数obj为空，或者参数和当前对象this不是同一类，直接返回false。</span></span><br><span class="line">    <span class="keyword">if</span>( obj == <span class="keyword">null</span> || obj.getClass()!= <span class="keyword">this</span>.getClass() ) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//参数obj和当前对象this地址相同直接返回true。</span></span><br><span class="line">    <span class="keyword">if</span>(obj == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//如果id相同，直接返回true。</span></span><br><span class="line">    ObjectTest that = (ObjectTest)obj;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.getId() == that.getId() )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//id不同返回false。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是String name这种引用数据类型的话，条件如下(因为String类中重写了equals方法)</span></span><br><span class="line"><span class="comment">//if( this.getName().equals(that.getName()) )</span></span><br></pre></td></tr></table></figure>

<h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h4><p>int hashCode()：</p>
<p>用于获取调用对象的哈希码值(内存地址的编号)。<br>若两个对象调用equals方法相等，则各自调用该方法的结果必须相同。<br>若两个调用对象equals方法不相等，则各自调用该方法的结果应该不相同。<br>为了使得该方法与equals方法保持一致，重写了equals方法，就需要重写该方法。</p>
<p><em>例如</em>，上面重写了equals()方法，是基于对象的id比较是否相等，那么hashCode()方法也要重写来与id有关联。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">31</span> * <span class="number">12</span> + <span class="keyword">this</span>.getId();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是String name这种引用数据类型的话，返回值如下(因为String类中重写了hashCode方法)</span></span><br><span class="line"><span class="comment">//return 31 * 12 + this.getName().hashCode();</span></span><br></pre></td></tr></table></figure>

<h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p>String toString()：</p>
<p>该方法默认返回的字符串为：包名.类名@哈希码值的十六进制。<br>为了返回更有意义的数据，需要重写该方法。<br>使用print或println打印引用或字符串拼接引用都会自动调用该方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;id=&quot;</span> + <span class="keyword">this</span>.id + <span class="string">&quot;,name=&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="getClass"><a href="#getClass" class="headerlink" title="getClass()"></a>getClass()</h4><p>Class&lt;?&gt; getClass() ：</p>
<p>用于返回调用对象执行时的Class实例，反射机制使用</p>
<h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>通常情况下基本数据类型的变量不是对象，为了满足万物皆对象的理念就需要对基本数据类型的变量进行打包封装处理变成对象，而负责将这些变量声明为成员变量进行对象化处理的相关类，叫做包装类。</p>
<table>
<thead>
<tr>
<th><strong>包装类</strong></th>
<th><strong>对应的基本类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td>java.lang.Byte</td>
<td>byte</td>
</tr>
<tr>
<td>java.lang.Short</td>
<td>short</td>
</tr>
<tr>
<td>java.lang.Integer</td>
<td>int</td>
</tr>
<tr>
<td>java.lang.Long</td>
<td>long</td>
</tr>
<tr>
<td>java.lang.Float</td>
<td>float</td>
</tr>
<tr>
<td>java.lang.Double</td>
<td>double</td>
</tr>
<tr>
<td>java.lang.Boolean</td>
<td>boolean</td>
</tr>
<tr>
<td>java.lang.Character</td>
<td>char</td>
</tr>
</tbody></table>
<p>其中Byte、Short、Integer、Long、Float、Double包装类都继承自java.lang.Number抽象类。</p>
<h4 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h4><p>java.lang.Integer类内部包装了一个int类型的变量作为成员变量，主要用于实现对int类型的包装并<br>提供int类型到String类之间的转换等方法。</p>
<p><strong>常用常量</strong></p>
<table>
<thead>
<tr>
<th><strong>常量类型和名称</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>public static final int MAX_VALUE</td>
<td>表示int类型可以描述的最大值，即2^31-1</td>
</tr>
<tr>
<td>public static final int MIN_VALUE</td>
<td>表示int类型可以描述的最小值，即-2^31</td>
</tr>
<tr>
<td>public static final int SIZE</td>
<td>表示int类型采用二进制补码形式的位数</td>
</tr>
<tr>
<td>public static final int BYTES</td>
<td>表示int类型所占的字节个数</td>
</tr>
<tr>
<td>public static final Class TYPE</td>
<td>表示int类型的Class实例</td>
</tr>
</tbody></table>
<p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Integer(int value)</td>
<td>根据参数指定的整数来构造对象（已过时）</td>
</tr>
<tr>
<td>Integer(String s)</td>
<td>根据参数指定的字符串来构造对象 （已过时）</td>
</tr>
<tr>
<td>static Integer valueOf(int i)</td>
<td>根据参数指定整数值得到Integer类型对象</td>
</tr>
<tr>
<td>int intValue()</td>
<td>获取调用对象中的整数值并返回</td>
</tr>
<tr>
<td>String toString()</td>
<td>返回描述调用对象数值的字符串形式</td>
</tr>
<tr>
<td>static int parseInt(String s)</td>
<td>将字符串类型转换为int类型并返回</td>
</tr>
<tr>
<td>static String toString(int i)</td>
<td>获取参数指定整数的十进制字符串形式</td>
</tr>
<tr>
<td>static String toBinaryString(int i)</td>
<td>获取参数指定整数的二进制字符串形式</td>
</tr>
<tr>
<td>static String toHexString(int i)</td>
<td>获取参数指定整数的十六进制字符串形式</td>
</tr>
<tr>
<td>static String toOctalString(int i)</td>
<td>获取参数指定整数</td>
</tr>
</tbody></table>
<p><strong>装箱和拆箱</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用构造方法创建对象，已过时（不建议使用）</span></span><br><span class="line">Integer it1 = <span class="keyword">new</span> Integer(<span class="number">5</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Integer对象，相当于将int类型转换Integer类型，装箱</span></span><br><span class="line">Integer it2 = Integer.valueOf(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于将Integer类型转换int类型，拆箱</span></span><br><span class="line"><span class="keyword">int</span> ia = it2.intValue();</span><br></pre></td></tr></table></figure>

<p><strong>自动装箱和拆箱</strong>(java5之后的新特性)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java5后，自动装箱拆箱</span></span><br><span class="line">Integer it1 = <span class="number">9</span>;  </span><br><span class="line"><span class="keyword">int</span> ia = it1;</span><br></pre></td></tr></table></figure>

<p><strong>自动装箱池</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer it1 = <span class="number">128</span>;</span><br><span class="line">Integer it2 = <span class="number">128</span>;</span><br><span class="line">System.out.println(it5 == it6);  <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>如上，明显it1和it2的地址不相同，所以结果是false，但是如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer it3 = <span class="number">127</span>;</span><br><span class="line">Integer it4 = <span class="number">127</span>;</span><br><span class="line">System.out.println(it3 == it4);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>结果却是true。因为：</p>
<p>在Integer类的内部提供了自动装箱池技术，将-128到127之间的整数已经装箱完毕，当程序中使用<br>该范围之间的整数时，无需装箱直接取用自动装箱池中的对象即可，从而提高效率。</p>
<p><strong>其他方法演示</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;返回十进制&quot;</span> + Integer.toString(<span class="number">200</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;返回二进制&quot;</span> + Integer.toBinaryString(<span class="number">200</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;返回八进制&quot;</span> + Integer.toOctalString(<span class="number">200</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;返回十六进制&quot;</span>+Integer.toHexString(<span class="number">200</span>));</span><br><span class="line"><span class="comment">//常量</span></span><br><span class="line">System.out.println(<span class="string">&quot;Integer类型表示的最大值&quot;</span> + Integer.MAX_VALUE);  <span class="comment">//2147483647</span></span><br></pre></td></tr></table></figure>

<h4 id="Bouble"><a href="#Bouble" class="headerlink" title="Bouble"></a>Bouble</h4><p>用法和Interger差不多，例如，装箱拆箱和自动装箱拆箱等…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//boolean isNaN()：判断调用对象的数值是否为非数字</span></span><br><span class="line">Double D1 = Double.valueOf(<span class="string">&quot;3.14&quot;</span>);</span><br><span class="line">System.out.println( D1.isNaN() );   <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">Double D2 = Double.valueOf(<span class="number">0</span>/<span class="number">0.0</span>);</span><br><span class="line">System.out.println( D2.isNaN() );   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><p>用法和Interger差不多，例如，装箱拆箱和自动装箱拆箱等…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串转换Boolean类型，只有字符串是true(不区分大小写)时，结果才是true，其他都为false。</span></span><br><span class="line">Boolean B = Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">System.out.println(B.toString());  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="Character"><a href="#Character" class="headerlink" title="Character"></a>Character</h4><p>用法和Interger差不多，例如，装箱拆箱和自动装箱拆箱等…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;是否大写：&quot;</span> + Character.isUpperCase(<span class="string">&#x27;A&#x27;</span>));    <span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否小写：&quot;</span> + Character.isLowerCase(<span class="string">&#x27;A&#x27;</span>));    <span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否数字：&quot;</span> + Character.isDigit(<span class="string">&#x27;2&#x27;</span>));        <span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">&quot;转换成大写：&quot;</span> + Character.toUpperCase(<span class="string">&#x27;a&#x27;</span>));  <span class="comment">//A</span></span><br><span class="line">System.out.println(<span class="string">&quot;转换成小写：&quot;</span> + Character.toLowerCase(<span class="string">&#x27;A&#x27;</span>));  <span class="comment">//a</span></span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ul>
<li>基本数据类型转换为对应包装类的方式</li>
</ul>
<p>调用包装类的构造方法或静态方法valueOf即可</p>
<ul>
<li>获取包装类对象中基本数据类型变量数值的方式</li>
</ul>
<p>调用包装类中的xxxValue方法即可</p>
<ul>
<li>字符串转换为基本数据类型的方式</li>
</ul>
<p>调用包装类中的parseXxx方法即可</p>
<h3 id="数学处理类"><a href="#数学处理类" class="headerlink" title="数学处理类"></a>数学处理类</h3><h4 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h4><p>java.lang.Math类主要用于提供执行数学运算的方法，如：对数，平方根。</p>
<p>常用方法</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static int max(int a, int b)</td>
<td>返回两个参数中的最大值</td>
</tr>
<tr>
<td>static int min(int a, int b)</td>
<td>返回两个参数中的最小值</td>
</tr>
<tr>
<td>static double pow(double a, double b)</td>
<td>返回第一个参数的幂</td>
</tr>
<tr>
<td>static int abs(int a)</td>
<td>返回参数指定数值的绝对值</td>
</tr>
<tr>
<td>static long round(double a)</td>
<td>返回参数四舍五入的结果</td>
</tr>
<tr>
<td>static double sqrt(double a)</td>
<td>返回参数的平方根</td>
</tr>
<tr>
<td>static double random()</td>
<td>返回0.0到1.0的随机数</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;最大数：&quot;</span> + Math.max(<span class="number">5</span>,<span class="number">8</span>));    <span class="comment">//8</span></span><br><span class="line">System.out.println(<span class="string">&quot;最小数&quot;</span> + Math.min(<span class="number">5</span>,<span class="number">8</span>));      <span class="comment">//5</span></span><br><span class="line">System.out.println(<span class="string">&quot;求幂&quot;</span> + Math.pow(<span class="number">2</span>,<span class="number">3</span>));        <span class="comment">//8.0</span></span><br><span class="line">System.out.println(<span class="string">&quot;绝对值&quot;</span> + Math.abs(-<span class="number">1</span>));       <span class="comment">//1</span></span><br><span class="line">System.out.println(<span class="string">&quot;四舍五路:&quot;</span> + Math.round(<span class="number">2</span>/<span class="number">0.3</span>));<span class="comment">//7</span></span><br><span class="line">System.out.println(<span class="string">&quot;平方跟:&quot;</span> + Math.sqrt(<span class="number">25</span>));      <span class="comment">//5.0</span></span><br><span class="line">System.out.println(<span class="string">&quot;0到1.0的随机数:&quot;</span> + Math.random());<span class="comment">//随机数</span></span><br></pre></td></tr></table></figure>

<h4 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h4><p>由于flfloat类型和double类型在运算时可能会有误差，若希望实现精确运算则借助<br>java.math.BigDecimal类型加以描述。</p>
<p>常用方法：</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>BigDecimal(String val)</td>
<td>根据参数指定的字符串来构造对象</td>
</tr>
<tr>
<td>BigDecimal add(BigDecimal augend)</td>
<td>用于实现加法运算</td>
</tr>
<tr>
<td>BigDecimal subtract(BigDecimal subtrahend)</td>
<td>用于实现减法运算</td>
</tr>
<tr>
<td>BigDecimal multiply(BigDecimal multiplicand)</td>
<td>用于实现乘法运算</td>
</tr>
<tr>
<td>BigDecimal divide(BigDecimal divisor)</td>
<td>用于实现除法运算</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal bd1 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;5.2&quot;</span>);</span><br><span class="line">BigDecimal bd2 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1.3&quot;</span>);</span><br><span class="line"><span class="comment">//正常浮点类型运算会由失误，虽然误差很小。</span></span><br><span class="line">System.out.println(<span class="number">5.2</span>*<span class="number">1.3</span>);    <span class="comment">//6.760000000000001</span></span><br><span class="line">System.out.println(<span class="string">&quot;加法运算：&quot;</span> + bd1.add(bd2));       <span class="comment">//6,5</span></span><br><span class="line">System.out.println(<span class="string">&quot;减法运算：&quot;</span> + bd1.subtract(bd2));  <span class="comment">//3.9</span></span><br><span class="line">System.out.println(<span class="string">&quot;乘法运算：&quot;</span> + bd1.multiply(bd2));  <span class="comment">//6.76</span></span><br><span class="line">System.out.println(<span class="string">&quot;除法运算：&quot;</span> + bd1.divide(bd2));    <span class="comment">//4.0</span></span><br></pre></td></tr></table></figure>

<h4 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h4><p>若希望表示比long类型范围还大的整数数据，则需要借助java.math.BigInteger类型描述。</p>
<p>常用方法：</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>BigInteger(String val)</td>
<td>根据参数指定的字符串来构造对象</td>
</tr>
<tr>
<td>“加减乘除”与上述BigDecimal一样</td>
<td></td>
</tr>
<tr>
<td>BigInteger remainder(BigInteger val)</td>
<td>用于实现取余运算</td>
</tr>
<tr>
<td>BigInteger[] divideAndRemainder(BigInteger val)</td>
<td>用于实现取商和余数的运算</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigInteger bi1 = <span class="keyword">new</span> BigInteger(<span class="string">&quot;20&quot;</span>);</span><br><span class="line">BigInteger bi2 = <span class="keyword">new</span> BigInteger(<span class="string">&quot;8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取商和取余数一起</span></span><br><span class="line">BigInteger[] arr = bi1.divideAndRemainder(bi2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;下标为&quot;</span> + i + <span class="string">&quot;的元素值是：&quot;</span> + arr[i]);    <span class="comment">//0--2， 1--4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><ul>
<li><p>java.lang.String类用于描述字符串，Java程序中所有的字符串字面值都可以使用该类的对象加以描述，如：”abc”。</p>
</li>
<li><p>该类由fifinal关键字修饰，表示该类不能被继承。</p>
</li>
<li><p>从jdk1.9开始该类的底层不使用char[]来存储数据，而是改成 byte[]加上编码标记，从而节约了一些空间。</p>
</li>
<li><p>该类描述的字符串内容是个常量不可更改，因此可以被共享使用。</p>
<p>如：</p>
<p> String str = “abc”; -表示str指向”abc”，其中”abc”这个字符串是个常量不可改变。 </p>
<p> str = “123”; - 将“123”字符串的地址赋值给变量str。</p>
<p> - 改变str的指向并没有改变指向的内容</p>
</li>
</ul>
<h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><p>由于String类型描述的字符串内容是常量不可改变，因此Java虚拟机将首次出现的字符串放入常量</p>
<p>池中，若后续代码中出现了相同字符串内容则直接使用池中已有的字符串对象而无需申请内存及创建对</p>
<p>象，从而提高了性能。</p>
<p>例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;adcd&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;adcd&quot;</span>;</span><br><span class="line">System.out.println(str1 == str2);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="常用构造方法"><a href="#常用构造方法" class="headerlink" title="常用构造方法"></a>常用构造方法</h3><table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>String()</td>
<td>使用无参方式构造对象得到空字符序列</td>
</tr>
<tr>
<td>String(byte[] bytes, int offset, int length)</td>
<td>使用bytes数组中下标从offset位置开始的length个字节来构造对象</td>
</tr>
<tr>
<td>String(byte[] bytes)</td>
<td>使用bytes数组中的所有内容构造对象</td>
</tr>
<tr>
<td>String(char[] value, int offset, int count)</td>
<td>使用value数组中下标从offset位置开始的count个字符来构造对象</td>
</tr>
<tr>
<td>String(char[] value)</td>
<td>使用value数组中的所有内容构造对象</td>
</tr>
<tr>
<td>String(String original)</td>
<td>根据参数指定的字符串内容来构造对象，新创建对象为参数对象的副本</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bArr = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line">String str = <span class="keyword">new</span> String(bArr);</span><br><span class="line">System.out.println(str);  <span class="comment">//abcd   由ASCII码转换而成。</span></span><br></pre></td></tr></table></figure>

<p><strong>考点</strong>：</p>
<ul>
<li>String str = “abc”  和 String str = new String(“abc”)的区别：<br>String str = “abc”：常量“abc”被创建在常量池中，str指向“abc”。<br>String str = new String(“abc”)：常量“abc”被创建在常量池中，new String()被创建在堆区，str指向堆区的new String()。</li>
<li>判断如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;adcd&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;adcd&quot;</span>;</span><br><span class="line">String str3 = <span class="keyword">new</span> String(<span class="string">&quot;adcd&quot;</span>);</span><br><span class="line">String str4 = <span class="keyword">new</span> String(<span class="string">&quot;adcd&quot;</span>);</span><br><span class="line"><span class="comment">//判断内容</span></span><br><span class="line">System.out.println(str1.equals(str2));   <span class="comment">//true</span></span><br><span class="line">System.out.println(str3.equals(str4));   <span class="comment">//true</span></span><br><span class="line"><span class="comment">//判断地址</span></span><br><span class="line">System.out.println(str1 == str2);   <span class="comment">//true，都指向常量池中的常量“abcd”。</span></span><br><span class="line">System.out.println(str3 == str4);   <span class="comment">//false，指向堆区中不同的String类型对象。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;ab&quot;</span> + <span class="string">&quot;cd&quot;</span>;   <span class="comment">//常量优化机制</span></span><br><span class="line">System.out.println(str1 == str2);   <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">String str3 = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">String str4 = str3 + <span class="string">&quot;cd&quot;</span>;  <span class="comment">//没有常量优化机制</span></span><br><span class="line">System.out.println(str1 == str4);   <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="常用成员方法"><a href="#常用成员方法" class="headerlink" title="常用成员方法"></a>常用成员方法</h3><table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>String toString()</td>
<td>返回字符串本身</td>
</tr>
<tr>
<td>byte[] getBytes()</td>
<td>将当前字符串内容转换为byte数组并返回</td>
</tr>
<tr>
<td>char[] toCharArray()</td>
<td>用于将当前字符串内容转换为char数组并返回</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>char charAt(int index)</td>
<td>方法charAt用于返回字符串指定位置的字符。</td>
</tr>
<tr>
<td>int length()</td>
<td>返回字符串字符序列的长度</td>
</tr>
<tr>
<td>boolean isEmpty()</td>
<td>判断字符串是否为空</td>
</tr>
</tbody></table>
<p>案例题目:</p>
<p>判断字符串“上海自来水来自海上”是否为回文并打印，所谓回文是指一个字符序列无论从左向右读</p>
<p>还是从右向左读都是相同的句子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str2 = <span class="string">&quot;上海自来水来自海上&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str2.length()/<span class="number">2</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>( str2.charAt(i) != str2.charAt(str2.length()-<span class="number">1</span>-i) )&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不是回文！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;是回文！&quot;</span>);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>int compareTo(String anotherString)</td>
<td>用于比较调用对象和参数对象的大小关系</td>
</tr>
<tr>
<td>int compareToIgnoreCase(String str)</td>
<td>不考虑大小写，也就是’a’和’A’是相等的关系</td>
</tr>
</tbody></table>
<p>从头比，相同的继续比较下一个，不同就用字符串对应的ASCII码值相减。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println( str.compareTo(<span class="string">&quot;hello&quot;</span>) );          <span class="comment">//相同返回 0</span></span><br><span class="line">System.out.println( str.compareTo(<span class="string">&quot;hgllo&quot;</span>) );          <span class="comment">//e-g 返回 -2</span></span><br><span class="line">System.out.println( str.compareTo(<span class="string">&quot;hello1234&quot;</span>) );      <span class="comment">//长度返回 -4</span></span><br><span class="line">System.out.println( str.compareToIgnoreCase(<span class="string">&quot;HELLO&quot;</span>) );<span class="comment">//不区分大小写 0</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>String concat(String str)</td>
<td>用于实现字符串的拼接</td>
</tr>
<tr>
<td>boolean contains(CharSequence s)</td>
<td>用于判断当前字符串是否包含参数指定的内容</td>
</tr>
<tr>
<td>String toLowerCase()</td>
<td>返回字符串的小写形式</td>
</tr>
<tr>
<td>String toUpperCase()</td>
<td>返回字符串的大写形式</td>
</tr>
<tr>
<td>String trim()</td>
<td>返回去掉前导和后继空白的字符串</td>
</tr>
<tr>
<td>boolean startsWith(String prefifix)</td>
<td>判断字符串是否以参数字符串开头</td>
</tr>
<tr>
<td>boolean startsWith(String prefifix, int toffffset)</td>
<td>从指定位置开始是否以参数字符串开头</td>
</tr>
<tr>
<td>boolean endsWith(String suffiffiffix)</td>
<td>判断字符串是否以参数字符串结尾</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>boolean equals(Object anObject)</td>
<td>用于比较字符串内容是否相等并返回</td>
</tr>
<tr>
<td>boolean equalsIgnoreCase(String anotherString)</td>
<td>用于比较字符串内容是否相等并返回，不考虑大小写，如：’A’和’a’是相等</td>
</tr>
<tr>
<td>int hashCode()</td>
<td>获取调用对象的哈希码值</td>
</tr>
</tbody></table>
<p>案例题目</p>
<p>提示用户从键盘输入用户名和密码信息，若输入”admin”和”123456”则提示“登录成功，欢迎使</p>
<p>用”，否则提示“用户名或密码错误，您还有n次机会”，若用户输入三次后依然错误则提示“账户已</p>
<p>冻结，请联系客服人员！”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">    String user = sc.next();</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">    String password = sc.next();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(user) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功，欢迎使用&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;账户已冻结，请联系客服人员！&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名或密码错误，您还有&quot;</span> + (i-<span class="number">1</span>) + <span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>int indexOf(int ch)</td>
<td>用于返回当前字符串中参数ch指定的字符第一次出现的下标</td>
</tr>
<tr>
<td>int indexOf(int ch, int fromIndex)</td>
<td>用于从fromIndex位置开始查找ch指定的字符</td>
</tr>
<tr>
<td>int indexOf(String str)</td>
<td>在字符串中检索str返回其第一次出现的位置，若找不到返回-1</td>
</tr>
<tr>
<td>int indexOf(String str, int fromIndex)</td>
<td>表示从字符串的fromIndex位置开始检索str第一次出现的位置</td>
</tr>
<tr>
<td>int lastIndexOf(int ch)</td>
<td>用于返回参数ch指定的字符最后一次出现的下标</td>
</tr>
<tr>
<td>int lastIndexOf(int ch, int fromIndex)</td>
<td>用于从fromIndex位置开始查找ch指定字符出现的下标</td>
</tr>
<tr>
<td>int lastIndexOf(String str)</td>
<td>返回str指定字符串最后一次出现的下标</td>
</tr>
<tr>
<td>int lastIndexOf(String str, int fromIndex)</td>
<td>用于从fromIndex位置开始反向搜索的第一次出现的下标。</td>
</tr>
</tbody></table>
<p>注意：indexOf() 是从左往右第一个，而lastIndexOf() 是从右往左第一个。</p>
<ul>
<li>案例题目</li>
</ul>
<p>编写通用的代码可以查询字符串”Good Good Study, Day Day Up!”中所有”Day”出现的索引位置并打印出来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;Good Good Study, Day Day Up!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = str.indexOf(<span class="string">&quot;Day&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(i != -<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i = str.indexOf(<span class="string">&quot;Day&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;Good Good Study, Day Day Up!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>( (i=str.indexOf(<span class="string">&quot;Day&quot;</span>, i)) != -<span class="number">1</span> )&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i += <span class="string">&quot;Day&quot;</span>.length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>String substring(int beginIndex, int endIndex)</td>
<td>返回字符串中从下标beginIndex（包括）开始到endIndex（不包括）结束的子字符串</td>
</tr>
<tr>
<td>String substring(int beginIndex)</td>
<td>返回字符串中从下标beginIndex（包括）开始到字符串结尾的子字符串</td>
</tr>
</tbody></table>
<ul>
<li>案例题目</li>
</ul>
<p>提示用户从键盘输入一个字符串和一个字符，输出该字符(不含)后面的所有子字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入字符串：&quot;</span>);</span><br><span class="line">String str1 = sc.next();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入字符：&quot;</span>);</span><br><span class="line">String str2 = sc.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = str1.indexOf(str2);</span><br><span class="line">String str3 = str1.substring(i+<span class="number">1</span>);</span><br><span class="line">System.out.println(str3);</span><br></pre></td></tr></table></figure>

<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式本质就是一个“规则字符串”，可以用于对字符串数据的格式进行验证，以及匹配、查</p>
<p>找、替换等操作。该字符串通常使用^运算符作为开头标志，使用$运算符作为结尾标志，当然也可以省</p>
<p>略。</p>
<p>规则：</p>
<ul>
<li><p>[abc] ：可以出现a、b、c中任意一个字符</p>
</li>
<li><p>[^abc] ：可以出现任何字符，除了a、b、c的任意字符</p>
</li>
<li><p>[a-z] ：可以出现a、b、c、……、z中的任意一个字符</p>
</li>
<li><p>[a-zA-Z0-9] ：可以出现a<del>z、A</del>Z、0~9中任意一个字符</p>
</li>
</ul>
<hr>
<hr>
<ul>
<li><p>. ：任意一个字符（通常不包含换行符）</p>
</li>
<li><p>\d ：任意一个数字字符，相当于[0-9]</p>
</li>
<li><p>\D ：任意一个非数字字符</p>
</li>
<li><p>\s ：空白字符，相当于[\t\n\x0B\f\r]</p>
</li>
<li><p>\S ：非空白字符</p>
</li>
<li><p>\w ：任意一个单词字符，相当于[a-zA-Z_0-9]</p>
</li>
<li><p>\W ：任意一个非单词字符</p>
</li>
</ul>
<hr>
<hr>
<ul>
<li><p>X? ：表示X可以出现一次或一次也没有，也就是0 ~ 1次</p>
</li>
<li><p>X* ：表示X可以出现零次或多次，也就是0 ~ n次</p>
</li>
<li><p>X+ ：表示X可以出现一次或多次，也就是1 ~ n次</p>
</li>
<li><p>X{n} ：表示X可以出现恰好 n 次</p>
</li>
<li><p>X{n，} ：表示X可以出现至少 n 次，也就是&gt;=n次</p>
</li>
<li><p>X{n，m} ：表示X可以出现至少 n 次，但是不超过 m 次，也就是&gt;=n并且&lt;=m次</p>
</li>
</ul>
<p><strong>相关方法：</strong></p>
<table>
<thead>
<tr>
<th><strong>方法名称</strong></th>
<th><strong>方法说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>boolean matches(String regex)</td>
<td>判断当前正在调用的字符串是否匹配参数指定的正则表达式规则</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入字符串：&quot;</span>);</span><br><span class="line">String str = sc.next();</span><br><span class="line"><span class="comment">//规则: 银行卡密码的规则：要求是由6位数字组成。</span></span><br><span class="line">String reg = <span class="string">&quot;\\d&#123;6&#125;&quot;</span>;   </span><br><span class="line"><span class="keyword">if</span>( str.matches(reg) )&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;字符规则正确！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;字符规则错误！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分割和替换：</p>
<table>
<thead>
<tr>
<th><strong>方法名称</strong></th>
<th>方法说明</th>
</tr>
</thead>
<tbody><tr>
<td>String[] split(String regex)</td>
<td>参数regex为正则表达式，以regex所表示的字符串为分隔符，将字符串拆分成字符串数组</td>
</tr>
<tr>
<td>String replace(char oldChar, char newChar)</td>
<td>使用参数newChar替换此字符串中出现的所有参数oldChar</td>
</tr>
<tr>
<td>String replaceFirst(String regex, String replacement)</td>
<td>替换此字符串匹配给定的正则表达式的第一个子字符串</td>
</tr>
<tr>
<td>String replaceAll(String regex, String replacement)</td>
<td>将字符串中匹配正则表达式regex的字符串替换成replacement</td>
</tr>
</tbody></table>
<h2 id="可变字符串类"><a href="#可变字符串类" class="headerlink" title="可变字符串类"></a>可变字符串类</h2><ul>
<li><p>由于String类描述的字符串内容是个常量不可改变，当需要在Java代码中描述大量类似的字符串时，只能单独申请和存储，此时会造成内存空间的浪费。</p>
</li>
<li><p>为了解决上述问题，可以使用java.lang.StringBuilder类和java.lang.StringBuffer类来描述字符列可以改变的字符串</p>
</li>
<li><p>StringBuffer类是从jdk1.0开始存在，属于线程安全的类，因此效率比较低。</p>
</li>
<li><p>StringBuilder类是从jdk1.5开始存在，属于非线程安全的类，效率比较高。</p>
</li>
</ul>
<h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p><strong>构造方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>StringBuilder()</td>
<td>使用无参方式构造对象，容量为16</td>
</tr>
<tr>
<td>StringBuilder(int capacity)</td>
<td>根据参数指定的容量来构造对象，容量为参数指定大小</td>
</tr>
<tr>
<td>StringBuilder(String str)</td>
<td>根据参数指定的字符串来构造对象，容量为：16+字符串长度</td>
</tr>
</tbody></table>
<p><strong>成员方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>int capacity()</td>
<td>用于返回调用对象的容量</td>
</tr>
<tr>
<td>int length()</td>
<td>用于返回字符串的长度，也就是字符的个数</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">System.out.println(<span class="string">&quot;sb1的容量是：&quot;</span> + sb1.capacity());   <span class="comment">//16</span></span><br><span class="line">System.out.println(<span class="string">&quot;sb1的长度是：&quot;</span> + sb1.length());     <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">StringBuilder sb2 = <span class="keyword">new</span> StringBuilder(<span class="number">20</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb2的容量是：&quot;</span> + sb2.capacity());   <span class="comment">//20</span></span><br><span class="line">System.out.println(<span class="string">&quot;sb2的长度是：&quot;</span> + sb2.length());     <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">StringBuilder sb3 = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb3的容量是：&quot;</span> + sb3.capacity());    <span class="comment">//16+5=21</span></span><br><span class="line">System.out.println(<span class="string">&quot;sb3的长度是：&quot;</span> + sb3.length());      <span class="comment">//5</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>StringBuilder insert(int offset, String str)</td>
<td>插入字符串并返回调用对象的引用，就是自己。</td>
</tr>
<tr>
<td>StringBuilder append(String str)</td>
<td>追加字符串</td>
</tr>
<tr>
<td>StringBuilder deleteCharAt(int index)</td>
<td>将当前字符串中下标为index位置的单个字符删除</td>
</tr>
<tr>
<td>StringBuilder delete(int start，int end)</td>
<td>删除字符串</td>
</tr>
<tr>
<td>StringBuilder replace(int start，int end，String str)</td>
<td>替换字符串</td>
</tr>
<tr>
<td>void setCharAt(int index, char ch)</td>
<td>指定索引处的字符设置为 ch 。</td>
</tr>
<tr>
<td>StringBuilder reverse()</td>
<td>字符串反转</td>
</tr>
<tr>
<td>查询操作与String类差不多。。。。</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb1 = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">sb1.insert(<span class="number">2</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1 = &quot;</span> + sb1);  <span class="comment">//he123llo</span></span><br><span class="line">sb1.append(<span class="string">&quot;word&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1 = &quot;</span> + sb1);  <span class="comment">//he123lloword</span></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">sb1.deleteCharAt(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1 = &quot;</span> + sb1);  <span class="comment">//he23lloword</span></span><br><span class="line">sb1.delete(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1 = &quot;</span> + sb1);  <span class="comment">//helloword</span></span><br><span class="line"><span class="comment">//改</span></span><br><span class="line">sb1.setCharAt(<span class="number">0</span>, <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1 = &quot;</span> + sb1);  <span class="comment">//Helloword</span></span><br><span class="line">sb1.replace(<span class="number">5</span>,<span class="number">9</span>, <span class="string">&quot;Teacher&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1 = &quot;</span> + sb1);  <span class="comment">//Helloteacher</span></span><br><span class="line"><span class="comment">//反转操作</span></span><br><span class="line">sb1.reverse();</span><br><span class="line">System.out.println(<span class="string">&quot;sb1 = &quot;</span> + sb1);  <span class="comment">//rehcaetolleH</span></span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">System.out.println(<span class="string">&quot;索引为1的字符是：&quot;</span> + sb1.charAt(<span class="number">1</span>) );     <span class="comment">//e</span></span><br><span class="line">System.out.println(<span class="string">&quot;e第一次出现的位置的下标是：&quot;</span> + sb1.indexOf(<span class="string">&quot;e&quot;</span>) );  <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong><br>作为参数传递的话，方法内部String不会改变其值，StringBuffer和StringBuilder会改变其值。</p>
<p><strong>自动扩容机制</strong></p>
<p>当StringBuffer和StringBuilder中的字符串长度超过了原始的容量。容量会自动扩容。<br>扩容后容量 = 原始容量 * 2 + 2。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动扩容机制</span></span><br><span class="line">StringBuilder sb1 = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1的容量是：&quot;</span> + sb1.capacity());  <span class="comment">//16+5=21</span></span><br><span class="line">System.out.println(<span class="string">&quot;sb1的长度是：&quot;</span> + sb1.length());    <span class="comment">//5</span></span><br><span class="line"><span class="comment">//增加，但没超过原始容量</span></span><br><span class="line">sb1.append(<span class="string">&quot;word&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1的容量是：&quot;</span> + sb1.capacity());  <span class="comment">//21</span></span><br><span class="line">System.out.println(<span class="string">&quot;sb1的长度是：&quot;</span> + sb1.length());    <span class="comment">//9</span></span><br><span class="line"><span class="comment">//增加，并且超过了原始容量，sb1将自动扩容。</span></span><br><span class="line">sb1.append(<span class="string">&quot;1234567890123456&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1的容量是：&quot;</span> + sb1.capacity());  <span class="comment">//21*2+2=44</span></span><br><span class="line">System.out.println(<span class="string">&quot;sb1的长度是：&quot;</span> + sb1.length());    <span class="comment">//25</span></span><br></pre></td></tr></table></figure>

<p><strong>考点</strong></p>
<ul>
<li><p>1，既然StringBuilder类的对象本身可以被改变，为什么成员方法还要返回值，返回本身。<br>答：为了连续调用，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb1.append(<span class="string">&quot;1&quot;</span>).append(<span class="string">&quot;5&quot;</span>).reverse().delete(<span class="number">0</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>2，如何实现String和StringBuilder之间的转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;213456&quot;</span>;</span><br><span class="line"></span><br><span class="line">StringBuilder sb1 = <span class="keyword">new</span> StringBuilder(s1);</span><br><span class="line">String s2 = sb1.toString();</span><br></pre></td></tr></table></figure></li>
<li><p>3，String、StringBuilder和StringBuffer效率排序：</p>
<pre><code>  低到高：String &lt; StringBuffer &lt; StringBuilder
</code></pre>
</li>
</ul>
<h2 id="Java8以前时间相关类"><a href="#Java8以前时间相关类" class="headerlink" title="Java8以前时间相关类"></a>Java8以前时间相关类</h2><h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><p>Java.lang.System类中提供了一些有用的类字段和方法。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static long currentTimeMillis()</td>
<td>返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差（时间戳）</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> l = System.currentTimeMillis();</span><br><span class="line">System.out.println(l);   <span class="comment">//1640670878418</span></span><br></pre></td></tr></table></figure>

<h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><p>java.util.Date类主要用于描述特定的瞬间，也就是年月日时分秒，可以精确到毫秒。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Date()</td>
<td>使用无参的方式构造对象，也就是当前系统时间</td>
</tr>
<tr>
<td>Date(long date)</td>
<td>根据参数指定毫秒数构造对象， 参数为距离1970年1月1日0时0分0秒的毫秒数</td>
</tr>
<tr>
<td>long getTime()</td>
<td>获取调用对象距离1970年1月1日0时0分0秒的毫秒数</td>
</tr>
<tr>
<td>void setTime(long time)</td>
<td>设置调用对象为距离基准时间time毫秒的时间点</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前系统时间</span></span><br><span class="line">Date d1 = <span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(d1);  <span class="comment">//Tue Dec 28 10:39:07 CST 2021</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//距离基准时间相差1000毫秒的时间</span></span><br><span class="line">Date d2 = <span class="keyword">new</span> Date(<span class="number">1000</span>);</span><br><span class="line">System.out.println(d2);  <span class="comment">//Thu Jan 01 08:00:01 CST 1970  (东八区，所以超了八小时)</span></span><br><span class="line"><span class="comment">//对象时间与基准时间的相差毫秒</span></span><br><span class="line"><span class="keyword">long</span> l = d2.getTime();</span><br><span class="line">System.out.println(l);   <span class="comment">//1000</span></span><br><span class="line"><span class="comment">//更改对象时间与基准时间相差的毫秒</span></span><br><span class="line">d2.setTime(<span class="number">2000</span>);</span><br><span class="line">System.out.println(d2);  <span class="comment">//Thu Jan 01 08:00:02 CST 1970  (东八区，所以超了八小时)</span></span><br></pre></td></tr></table></figure>

<h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><p>java.text.SimpleDateFormat类主要用于实现日期和文本之间的转换。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>SimpleDateFormat()</td>
<td>使用无参方式构造对象</td>
</tr>
<tr>
<td>SimpleDateFormat(String pattern)</td>
<td>根据参数指定的模式来构造对象，模式主要有: y-年 M-月 d-日H-时 m-分 s-秒</td>
</tr>
<tr>
<td>fifinal String format(Date date)</td>
<td>用于将日期类型转换为文本类型</td>
</tr>
<tr>
<td>Date parse(String source)</td>
<td>用于将文本类型转换为日期类型</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date now = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">//设定时间格式</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd  HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">String s = sdf.format(now);</span><br><span class="line">System.out.println(s);       <span class="comment">//2021-12-28  10:49:42</span></span><br><span class="line">Date now1 = sdf.parse(s);</span><br><span class="line">System.out.println(now1);    <span class="comment">//Tue Dec 28 10:49:42 CST 2021</span></span><br></pre></td></tr></table></figure>

<h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p>java.util.Calender类主要用于描述特定的瞬间，取代Date类中的过时方法实现全球化。</p>
<p>该类是个抽象类，因此不能实例化对象，其具体子类针对不同国家的日历系统，其中应用最广泛的<br>是GregorianCalendar（格里高利历），对应世界上绝大多数国家/地区使用的标准日历系统。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static Calendar getInstance()</td>
<td>用于获取Calendar类型的引用</td>
</tr>
<tr>
<td>void set(int year, int month, int date, int hourOfDay, int minute, int second)</td>
<td>用于设置年月日时分秒信息，月份需减一</td>
</tr>
<tr>
<td>void set(int fifield, int value)</td>
<td>设置指定字段的数值</td>
</tr>
<tr>
<td>void add(int fifield, int amount)</td>
<td>向指定字段增加数值</td>
</tr>
<tr>
<td>Date getTime()</td>
<td>用于将Calendar类型转换为Date类型</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取Calendar实例</span></span><br><span class="line">Calendar c1 = Calendar.getInstance();</span><br><span class="line"><span class="comment">//设置时间，月份需要减一</span></span><br><span class="line">c1.set(<span class="number">2020</span>, <span class="number">12</span>-<span class="number">1</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">30</span>,<span class="number">00</span>);</span><br><span class="line">c1.set(Calendar.YEAR, <span class="number">2021</span>);</span><br><span class="line">c1.add(Calendar.DAY_OF_MONTH, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//将Calendar类型转换从Date类型</span></span><br><span class="line">Date d1 = c1.getTime();</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常打印对应格式的时间</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日  HH:mm:ss&quot;</span>);</span><br><span class="line">String s1 = sdf.format(d1);</span><br><span class="line">System.out.println(s1);   <span class="comment">//2021年12月15日  08:30:00</span></span><br></pre></td></tr></table></figure>

<h2 id="Java8以后时间相关类"><a href="#Java8以后时间相关类" class="headerlink" title="Java8以后时间相关类"></a>Java8以后时间相关类</h2><p><strong>java8以前</strong></p>
<p>JDK 1.0中包含了一个java.util.Date类，但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。</p>
<p>而Calendar并不比Date好多少。它们面临的问题是：</p>
<ul>
<li><p>Date类中的年份是从1900开始的，而月份都从0开始。</p>
</li>
<li><p>格式化只对Date类有用，对Calendar类则不能使用。</p>
</li>
<li><p>非线程安全等。</p>
</li>
</ul>
<p><strong>Java8以后</strong></p>
<ul>
<li><p>Java 8通过发布新的Date-Time API来进一步加强对 日期与时间的处理。</p>
</li>
<li><p>java.time包：该包日期/时间API的基础包。</p>
</li>
<li><p>java.time.chrono包：该包提供对不同日历系统的访问。 </p>
</li>
<li><p>java.time.format包：该包能够格式化和解析日期时间对象。</p>
</li>
<li><p>java.time.temporal包：该包包含底层框架和扩展特性。</p>
</li>
<li><p>java.time.zone包：该包支持不同时区以及相关规则的类。</p>
</li>
</ul>
<h3 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h3><p>java.time.LocalDate类主要用于描述年-月-日格式的日期信息，该类不表示时间和时区信息。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static LocalDate now()</td>
<td>在默认时区中从系统时钟获取当前日期</td>
</tr>
</tbody></table>
<h3 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h3><p>java.time.LocalTime 类主要用于描述时间信息，可以描述时分秒以及纳秒。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static LocalTime now()</td>
<td>从默认时区的系统时间中获取当前时间</td>
</tr>
<tr>
<td>static LocalTime now(ZoneId zone)</td>
<td>获取指定时区的当前时间</td>
</tr>
</tbody></table>
<h3 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h3><p>java.time.LocalDateTime类主要用于描述ISO-8601日历系统中没有时区的日期时间，如2007-12-03T10:15:30。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static LocalDateTime now()</td>
<td>从默认时区的系统时间中获取当前日期时间</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate now1 = LocalDate.now();</span><br><span class="line">System.out.println(now1);            <span class="comment">//2021-12-28</span></span><br><span class="line"></span><br><span class="line">LocalTime now2 = LocalTime.now();</span><br><span class="line">System.out.println(now2);            <span class="comment">//14:23:29.800789600</span></span><br><span class="line"></span><br><span class="line">LocalDateTime now3 = LocalDateTime.now();</span><br><span class="line">System.out.println(now3);            <span class="comment">//2021-12-28T14:23:29.800789600</span></span><br></pre></td></tr></table></figure>

<p>其他成员方法</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second)</td>
<td>根据参数指定的年月日时分秒信息来设置日期时间</td>
</tr>
<tr>
<td>int getYear()</td>
<td>获取年份字段的数值</td>
</tr>
<tr>
<td>int getMonthValue()</td>
<td>获取1到12之间的月份字段</td>
</tr>
<tr>
<td>int getDayOfMonth()</td>
<td>获取日期字段</td>
</tr>
<tr>
<td>int getHour()</td>
<td>获取小时数</td>
</tr>
<tr>
<td>int getMinute()</td>
<td>获取分钟数</td>
</tr>
<tr>
<td>int getSecond()</td>
<td>获取秒数</td>
</tr>
<tr>
<td>LocalDateTime withYear(int year)</td>
<td>设置为参数指定的年</td>
</tr>
<tr>
<td>LocalDateTime withMonth(int month)</td>
<td>设置为参数指定的月</td>
</tr>
<tr>
<td>LocalDateTime withDayOfMonth(int dayOfMonth)</td>
<td>设置为参数指定的日</td>
</tr>
<tr>
<td>LocalDateTime withHour(int hour)</td>
<td>设置为参数指定的时</td>
</tr>
<tr>
<td>LocalDateTime withMinute(int minute)</td>
<td>设置为参数指定的分</td>
</tr>
<tr>
<td>LocalDateTime withSecond(int second)</td>
<td>设置为参数指定的秒</td>
</tr>
<tr>
<td>LocalDateTime plusYears(long years)</td>
<td>加上参数指定的年</td>
</tr>
<tr>
<td>LocalDateTime plusMonths(long months)</td>
<td>加上参数指定的月</td>
</tr>
<tr>
<td>LocalDateTime plusDays(long days)</td>
<td>加上参数指定的日</td>
</tr>
<tr>
<td>LocalDateTime plusHours(long hours)</td>
<td>加上参数指定的时</td>
</tr>
<tr>
<td>LocalDateTime plusMinutes(long minutes)</td>
<td>加上参数指定的分</td>
</tr>
<tr>
<td>LocalDateTime plusSeconds(long seconds)</td>
<td>加上参数指定的秒</td>
</tr>
<tr>
<td>LocalDateTime minusYears(long years)</td>
<td>减去参数指定的年</td>
</tr>
<tr>
<td>LocalDateTime minusMonths(long months)</td>
<td>减去参数指定的月</td>
</tr>
<tr>
<td>LocalDateTime minusDays(long days)</td>
<td>减去参数指定的日</td>
</tr>
<tr>
<td>LocalDateTime minusHours(long hours)</td>
<td>减去参数指定的时</td>
</tr>
<tr>
<td>LocalDateTime minusMinutes(long minutes)</td>
<td>减去参数指定的分</td>
</tr>
<tr>
<td>LocalDateTime minusSeconds(long seconds)</td>
<td>减去参数指定的秒</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设定时间</span></span><br><span class="line">LocalDateTime time = LocalDateTime.of(<span class="number">2021</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">30</span>,<span class="number">00</span>);</span><br><span class="line"><span class="comment">//重新设定年</span></span><br><span class="line">time = time.withYear(<span class="number">2020</span>);</span><br><span class="line"><span class="comment">//加上指定年</span></span><br><span class="line">time = time.plusYears(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//减去指定年</span></span><br><span class="line">time = time.minusYears(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//获取年</span></span><br><span class="line"><span class="keyword">int</span> year = time.getYear();</span><br><span class="line">System.out.println(year);    <span class="comment">//2019</span></span><br></pre></td></tr></table></figure>

<h3 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h3><p>java.time.format.DateTimeFormatter类主要用于格式化和解析日期。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static DateTimeFormatter ofPattern(String pattern)</td>
<td>根据参数指定的模式来获取对象</td>
</tr>
<tr>
<td>String format(TemporalAccessor temporal)</td>
<td>将参数指定日期时间转换为字符串</td>
</tr>
<tr>
<td>TemporalAccessor parse(CharSequence text)</td>
<td>将参数指定字符串转换为日期时间</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前时间</span></span><br><span class="line">LocalDateTime now = LocalDateTime.now();</span><br><span class="line"><span class="comment">//1,设定时间格式</span></span><br><span class="line">DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日  HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">String s = dtf.format(now);</span><br><span class="line">System.out.println(s);      <span class="comment">//2021年12月28日  11:50:45</span></span><br><span class="line"></span><br><span class="line">TemporalAccessor date = dtf.parse(s);</span><br><span class="line">System.out.println(date);   <span class="comment">//&#123;&#125;,ISO resolved to 2021-12-28T11:50:45</span></span><br></pre></td></tr></table></figure>

<h3 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h3><p>java.time.Instant类主要用于描述瞬间的时间点信息。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>static Instant now()</td>
<td>从系统时钟上获取当前时间</td>
</tr>
<tr>
<td>OffsetDateTime atOffset(ZoneOffset offset)</td>
<td>将此瞬间与偏移量组合以创建偏移日期时间</td>
</tr>
<tr>
<td>static Instant ofEpochMilli(long epochMilli)</td>
<td>根据参数指定的毫秒数来构造对象，参数为距离1970年1月1 日0时0分0秒的毫秒数</td>
</tr>
<tr>
<td>long toEpochMilli()</td>
<td>获取距离1970年1月1日0时0分0秒的毫秒数</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Instant now = Instant.now();</span><br><span class="line">System.out.println(now);       <span class="comment">//与本地时间相差8小时，</span></span><br><span class="line"><span class="comment">//将now相差的8小时偏移过来，变成本地时间</span></span><br><span class="line">OffsetDateTime now2 = now.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">System.out.println(now2);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据毫秒数创建时间</span></span><br><span class="line">Instant time = Instant.ofEpochMilli(<span class="number">1000</span>);</span><br><span class="line">System.out.println(time);    <span class="comment">//1970-01-01T00:00:01Z</span></span><br><span class="line"><span class="comment">//对象时间与基准时间相差的毫秒数</span></span><br><span class="line"><span class="keyword">long</span> l = time.toEpochMilli();</span><br><span class="line">System.out.println(l);    <span class="comment">//1000</span></span><br></pre></td></tr></table></figure>

<h2 id="集合类库-上"><a href="#集合类库-上" class="headerlink" title="集合类库(上)"></a>集合类库(上)</h2><p><strong>集合的由来</strong></p>
<ul>
<li>当需要在Java程序中记录单个数据内容时，则声明一个变量。</li>
<li>当需要在Java程序中记录多个类型相同的数据内容时，声明一个一维数组。 </li>
<li>当需要在Java程序中记录多个类型不同的数据内容时，则创建一个对象。</li>
<li>当需要在Java程序中记录多个类型相同的对象数据时，创建一个对象数组。 </li>
<li>当需要在Java程序中记录多个类型不同的对象数据时，则准备一个集合。<br>（注意集合可以记录类型不同的对象，但是也可以记录类型相同的对象。）</li>
</ul>
<p><strong>集合的框架结构</strong></p>
<p><a href="https://imgtu.com/i/TfqsJ0"><img src="https://s4.ax1x.com/2021/12/31/TfqsJ0.png" alt="TfqsJ0.png"></a></p>
<ul>
<li>Java中集合框架顶层框架是：java.util.Collection集合 和 java.util.Map集合。</li>
<li>其中Collection集合中存取元素的基本单位是：单个元素。</li>
<li>其中Map集合中存取元素的基本单位是：单对元素。</li>
</ul>
<h3 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h3><p>java.util.Collection接口是List接口、Queue 接口以及Set接口的父接口，<br>因此该接口里定义的方法既可用于操作List集合，也可用于操作Queue集合和Set集合。</p>
<p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>boolean add(E e);</td>
<td>向集合中添加对象</td>
</tr>
<tr>
<td>boolean addAll(Collection&lt;? extends E&gt; c)</td>
<td>用于将参数指定集合c中的所有元素添加到当前集合中</td>
</tr>
<tr>
<td>boolean contains(Object o);</td>
<td>判断是否包含指定对象</td>
</tr>
<tr>
<td>boolean containsAll(Collection&lt;?&gt; c)</td>
<td>判断是否包含参数指定的所有对象</td>
</tr>
<tr>
<td>boolean retainAll(Collection&lt;?&gt; c)</td>
<td>保留当前集合中存在且参数集合中存在的所有对象（取交集保留到所调用集合）</td>
</tr>
<tr>
<td>boolean remove(Object o);</td>
<td>从集合中删除对象</td>
</tr>
<tr>
<td>boolean removeAll(Collection&lt;?&gt; c)</td>
<td>从集合中删除参数指定的所有对象</td>
</tr>
<tr>
<td>void clear();</td>
<td>清空集合</td>
</tr>
<tr>
<td>int size();</td>
<td>返回包含对象的个数</td>
</tr>
<tr>
<td>boolean isEmpty();</td>
<td>判断是否为空</td>
</tr>
<tr>
<td>boolean equals(Object o)</td>
<td>判断是否相等</td>
</tr>
<tr>
<td>int hashCode()</td>
<td>获取当前集合的哈希码值</td>
</tr>
<tr>
<td>Object[] toArray()</td>
<td>将集合转换为数组</td>
</tr>
<tr>
<td>Iterator iterator()</td>
<td>获取当前集合的迭代器</td>
</tr>
</tbody></table>
<p>add()和addAll()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">Collection c2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">System.out.println(c1);    <span class="comment">//[]</span></span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">c1.add(<span class="number">1</span>);      <span class="comment">//自动装箱机制</span></span><br><span class="line">c1.add(<span class="string">&quot;abc&quot;</span>);  <span class="comment">//常量池</span></span><br><span class="line">c1.add(<span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;张飞&quot;</span>));</span><br><span class="line">System.out.println(c1);   <span class="comment">//[1, abc, Person&#123;name=&#x27;张飞&#x27;, id=1&#125;], 相当于输出每个元素的toString()方法</span></span><br><span class="line"></span><br><span class="line">c2.add(<span class="number">5</span>);</span><br><span class="line">c2.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">System.out.println(c2);   <span class="comment">//[5, one]</span></span><br><span class="line">c1.addAll(c2);       </span><br><span class="line">System.out.println(c1); <span class="comment">//[1, abc, Person&#123;name=&#x27;张飞&#x27;, id=1&#125;, 5, one]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//考点： c1.add(c2); 和 c1.addAll(c2); 的区别。</span></span><br><span class="line"><span class="comment">//c1.add(c2);    把c2当作整体添加到c1中---&gt;[1, abc, Person&#123;name=&#x27;张飞&#x27;, id=1&#125;, [5, one]]</span></span><br><span class="line"><span class="comment">//c1.addAll(c2); 把c2的每个元素依次添加到c1中---&gt;[1, abc, Person&#123;name=&#x27;张飞&#x27;, id=1&#125;, 5, one]</span></span><br></pre></td></tr></table></figure>

<p>contains()和containsAll()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="number">1</span>);</span><br><span class="line">c1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">c1.add(<span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;张飞&quot;</span>));</span><br><span class="line">System.out.println(c1);    <span class="comment">//[1, one, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试contains()</span></span><br><span class="line"><span class="keyword">boolean</span> b = c1.contains(<span class="number">1</span>);</span><br><span class="line">System.out.println(b);   <span class="comment">//true</span></span><br><span class="line">b = c1.contains(<span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;张飞&quot;</span>));   </span><br><span class="line">System.out.println(b);   <span class="comment">//false      因为没有重写Person的equals()方法。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过源代码可知，contains判断是否包含的原理是调用 Objects.equals();方法。即：</span><br><span class="line">return a == b || a != null &amp;&amp; a.equals(b);   返回true包含，false不包含</span><br><span class="line">先判断地址是否相同：参数对象==集合元素</span><br><span class="line">然后判断参数对象不是null的前提下，调用：参数对象.equalse(集合元素)</span><br><span class="line">由于上面的Person类没有重写equels方法，所以默认判断地址是否相同。</span><br><span class="line">很明显两个张飞内存地址不相同，所以判断是否包含张飞时，返回false。</span><br><span class="line">假如我们在Person类中重写了equals方法，使得基于id相同，返回true的话。</span><br><span class="line">此时再判断是否包含张飞时，返回true。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试containsAll()</span></span><br><span class="line">Collection c2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c2.add(<span class="number">1</span>);</span><br><span class="line">c2.add(<span class="number">2</span>);</span><br><span class="line">System.out.println(c2);   <span class="comment">//[1, 2]</span></span><br><span class="line"></span><br><span class="line">b = c1.containsAll(c2);</span><br><span class="line">System.out.println(b);     <span class="comment">//false   因为没有全部包含</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//考点：c1.contains(c2); 和 c1.containsAll(c2); 区别。</span></span><br><span class="line"><span class="comment">//c1.contains(c2);     判断c1是否包含c2这个集合整体</span></span><br><span class="line"><span class="comment">//c1.containsAll(c2);  判断c1是否包含c2中的所有元素</span></span><br></pre></td></tr></table></figure>

<p>remove() 和  removeAll()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="number">1</span>);</span><br><span class="line">c1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(c1);   <span class="comment">//[1, one, hello]</span></span><br><span class="line"><span class="comment">//remover()</span></span><br><span class="line">c1.remove(<span class="number">2</span>);</span><br><span class="line">System.out.println(c1);   <span class="comment">//[1, one, hello]</span></span><br><span class="line">c1.remove(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">System.out.println(c1);   <span class="comment">//[1, hello]</span></span><br><span class="line"><span class="comment">//removeAll()</span></span><br><span class="line">Collection c2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c2.add(<span class="number">1</span>);</span><br><span class="line">c2.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">c1.removeAll(c2);</span><br><span class="line">System.out.println(c1);   <span class="comment">//[]</span></span><br><span class="line"><span class="comment">//包含就删，没有包含就不删。删除原理也是调用Objects.equals()，判断是true就表示包含，并删除。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//考点：c1.remove(c2); 和 c1.removeAll(c2);区别。</span></span><br><span class="line"><span class="comment">//c1.remove(c2)      c1删除c2这个集合整体</span></span><br><span class="line"><span class="comment">//c1.reomveAll(c2)   c1删除c2中的所有元素</span></span><br></pre></td></tr></table></figure>

<p><strong>集合和数组的转换</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">c1.add(<span class="number">2</span>);</span><br><span class="line">c1.add(<span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;张飞&quot;</span>));</span><br><span class="line"><span class="comment">//c1集合转数组</span></span><br><span class="line">Object[] arr = c1.toArray();</span><br><span class="line">System.out.println( Arrays.toString(arr) );   <span class="comment">//打印数组arr：[one, 2, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]</span></span><br><span class="line"><span class="comment">//arr数组转集合</span></span><br><span class="line">Collection c2 = Arrays.asList(arr);</span><br><span class="line">System.out.println(c2);   		 <span class="comment">//打印集合c2：[one, 2, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]</span></span><br></pre></td></tr></table></figure>

<h3 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h3><ul>
<li>java.util.Iterator接口主要用于描述迭代器对象，可以遍历Collection集合中的所有元素。</li>
<li>java.util.Collection接口继承Iterable接口，因此所有实现Collection接口的实现类都可以使用该迭 代器对象。</li>
</ul>
<p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>boolean hasNext()</td>
<td>判断集合中是否有可以迭代/访问的元素</td>
</tr>
<tr>
<td>E next()</td>
<td>用于取出一个元素并指向下一个元素</td>
</tr>
<tr>
<td>void remove()</td>
<td>用于删除访问到的最后一个元素</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="number">1</span>);</span><br><span class="line">c1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">c1.add(<span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;张飞&quot;</span>));</span><br><span class="line">System.out.println(c1);       <span class="comment">//[1, one, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]</span></span><br><span class="line"><span class="comment">//生成迭代器iterator1</span></span><br><span class="line">Iterator iterator1 = c1.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(iterator1.hasNext())&#123;</span><br><span class="line">    Object obj = iterator1.next();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;one&quot;</span>.equals(obj))&#123;</span><br><span class="line">        iterator1.remove();    <span class="comment">//删除next最近一个访问的元素。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(c1);    <span class="comment">//[1, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]</span></span><br></pre></td></tr></table></figure>

<p>案例：</p>
<p>用迭代器模拟集合提供的toString</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="number">1</span>);</span><br><span class="line">c1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">c1.add(<span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;张飞&quot;</span>));</span><br><span class="line">System.out.println( c1.toString() );       <span class="comment">//[1, one, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]，模拟此格式</span></span><br><span class="line"><span class="comment">//用迭代器模拟toString打印</span></span><br><span class="line">Iterator iterator1 = c1.iterator();</span><br><span class="line">StringBuilder sb1 = <span class="keyword">new</span> StringBuilder();   <span class="comment">//存放打印的内容</span></span><br><span class="line">sb1.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    Object obj = iterator1.next();</span><br><span class="line">    <span class="comment">//判断是不是最后一个元素。</span></span><br><span class="line">    <span class="keyword">if</span>(!iterator1.hasNext())&#123;</span><br><span class="line">        sb1.append(obj).append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sb1.append(obj).append(<span class="string">&quot;,&quot;</span>).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sb1);   <span class="comment">//[1, one, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]</span></span><br></pre></td></tr></table></figure>

<h3 id="for-each循环"><a href="#for-each循环" class="headerlink" title="for each循环"></a>for each循环</h3><ul>
<li><p>Java5推出了增强型for循环语句，可以应用数组和集合的遍历。  </p>
</li>
<li><p>是经典迭代的“简化版”。</p>
</li>
<li><p>格式：for(元素类型 变量名 :  数组/集合名称)  {循环体;}</p>
</li>
<li><p>不断地从数组/集合中取出一个元素赋值给变量名并执行循环体，直到取完所有元素为止。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for each遍历集合</span></span><br><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="number">1</span>);</span><br><span class="line">c1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">c1.add(<span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;张飞&quot;</span>));</span><br><span class="line">System.out.println( c1.toString() );       <span class="comment">//[1, one, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]</span></span><br><span class="line"><span class="keyword">for</span>(Object obj : c1)&#123;</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for each遍历数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i += <span class="number">5</span>;    <span class="comment">//不改变原始数组数据。</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));    <span class="comment">//[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><p><a href="https://imgtu.com/i/TfqsJ0"><img src="https://s4.ax1x.com/2021/12/31/TfqsJ0.png" alt="TfqsJ0.png"></a></p>
<ul>
<li>java.util.List集合是Collection集合的子集合，该集合中允许有重复的元素并且有先后放入次序。<br>该集合的主要实现类有：ArrayList类、LinkedList类、Stack类、Vector类。</li>
</ul>
<p>实现类：</p>
<ul>
<li>其中ArrayList类的底层是采用动态数组进行数据管理的，支持下标访问，增删元素不方便。</li>
<li>其中LinkedList类的底层是采用双向链表进行数据管理的，访问不方便，增删元素方便。</li>
</ul>
<p>可以认为ArrayList和LinkedList的方法在逻辑上完全一样，只是在性能上有一定的差别，ArrayList 更适合于随<br>机访问而LinkedList更适合于插入和删除；在性能要求不是特别苛刻的情形下可以忽略这个差别。</p>
<ul>
<li>其中Stack类的底层是采用动态数组进行数据管理的，该类主要用于描述一种具有后进先出特征的数据结构，<br>叫做栈(last in ﬁrst out LIFO)。</li>
<li>其中Vector类的底层是采用动态数组进行数据管理的，该类与ArrayList类相比属于线程安全的类，效率比较低，<br>以后开发中基本不用。</li>
</ul>
<p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>void add(int index, E element)</td>
<td>向集合中指定位置添加元素</td>
</tr>
<tr>
<td>boolean addAll(int index, Collection&lt;? extends E&gt; c)</td>
<td>向集合中添加所有元素</td>
</tr>
<tr>
<td>E get(int index)</td>
<td>从集合中获取指定位置元素</td>
</tr>
<tr>
<td>int indexOf(Object o)</td>
<td>查找参数指定的对象</td>
</tr>
<tr>
<td>int lastIndexOf(Object o)</td>
<td>反向查找参数指定的对象</td>
</tr>
<tr>
<td>E set(int index, E element)</td>
<td>修改指定位置的元素</td>
</tr>
<tr>
<td>E remove(int index)</td>
<td>删除指定位置的元素</td>
</tr>
<tr>
<td>List subList(int fromIndex, int toIndex)</td>
<td>用于获取子List</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List l = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">l.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">l.add(<span class="number">1</span>);</span><br><span class="line">System.out.println(l);   <span class="comment">//[one, 1]</span></span><br><span class="line">l.add(<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(l);   <span class="comment">//[one, hello, 1]</span></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">l.remove(<span class="number">2</span>);</span><br><span class="line">System.out.println(l);   <span class="comment">//[one, hello]</span></span><br><span class="line"><span class="comment">//改</span></span><br><span class="line">l.set(<span class="number">0</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">System.out.println(l);   <span class="comment">//[two, hello]</span></span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">Object obj = l.get(<span class="number">0</span>);</span><br><span class="line">System.out.println(obj);   <span class="comment">//two</span></span><br><span class="line"><span class="keyword">int</span> i = l.indexOf(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(i);   <span class="comment">//1</span></span><br><span class="line"><span class="comment">//获取子list</span></span><br><span class="line">List l2 = l.subList(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(l2);     <span class="comment">//[two]</span></span><br></pre></td></tr></table></figure>

<p><strong>stack实现类</strong>（栈，后进先出）</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Stack()</td>
<td>创建一个空堆栈</td>
</tr>
<tr>
<td>boolean empty()</td>
<td>测试此堆栈是否为空。</td>
</tr>
<tr>
<td>E pop()</td>
<td>移除此堆栈顶部的对象，并将该对象作为此函数的值返回。</td>
</tr>
<tr>
<td>E push(E item)</td>
<td>将项目推到此堆栈的顶部。</td>
</tr>
<tr>
<td>E peek()</td>
<td>查看此堆栈顶部的对象，而不将其从堆栈中删除。</td>
</tr>
</tbody></table>
<ul>
<li>案例题目<br>准备一个Stack集合，将数据11、22、33、44、55依次入栈并打印，然后查看栈顶元素并打印， 然后将栈中所有数据依次出栈并打印。<br>再准备一个Stack对象，将数据从第一个栈中取出来放入第二个栈中，然后再从第二个栈中取出并   打印。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stack st = <span class="keyword">new</span> Stack();    <span class="comment">//[]</span></span><br><span class="line">Stack st2 = <span class="keyword">new</span> Stack();   <span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//st进栈：11，22，33，44，55</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">    st.push(i*<span class="number">11</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(st);    <span class="comment">//[11, 22, 33, 44, 55]</span></span><br><span class="line">System.out.println(st.peek());  <span class="comment">//栈顶元素：55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//st出栈:55,44,33,22,11 ,并st2进栈每个元素</span></span><br><span class="line"><span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">    Object obj = st.pop();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">    st2.push(obj);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(st2);   <span class="comment">//[55, 44, 33, 22, 11]</span></span><br><span class="line">System.out.println(st2.peek());  <span class="comment">//栈顶元素：11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//st2出栈：11，22，33，44，55</span></span><br><span class="line"><span class="keyword">while</span>(!st2.empty())&#123;</span><br><span class="line">    Object obj = st2.pop();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Queue集合"><a href="#Queue集合" class="headerlink" title="Queue集合"></a>Queue集合</h3><p><a href="https://imgtu.com/i/TfqsJ0"><img src="https://s4.ax1x.com/2021/12/31/TfqsJ0.png" alt="TfqsJ0.png"></a></p>
<ul>
<li>java.util.Queue集合是Collection集合的子集合，与List集合属于平级关系。</li>
<li>该集合的主要用于描述具有先进先出特征的数据结构，叫做队列(ﬁrst in ﬁrst out FIFO)。</li>
<li>该集合的主要实现类是LinkedList类，因为该类在增删方面比较有优势。</li>
</ul>
<p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>boolean oﬀer(E e)</td>
<td>将一个对象添加至队尾，若添加成功则返回true</td>
</tr>
<tr>
<td>E poll()</td>
<td>从队首删除并返回一个元素</td>
</tr>
<tr>
<td>E peek()</td>
<td>返回队首的元素（但并不删除）</td>
</tr>
</tbody></table>
<ul>
<li>案例题目<br>准备一个Queue集合，将数据11、22、33、44、55依次入队并打印，然后查看队首元素并打印， 然后将队列中所有数据依次出队并打印。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Queue q = <span class="keyword">new</span> LinkedList();   <span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//进队列：11，22，33，44，55</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++)&#123;</span><br><span class="line">    q.offer(i*<span class="number">11</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(q);   <span class="comment">//[11, 22, 33, 44, 55]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//出队列：11，22，33，44，55</span></span><br><span class="line"><span class="keyword">while</span>(q.peek() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Object obj = q.poll();</span><br><span class="line">    System.out.println(obj);   <span class="comment">//11，22，33，44，55</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="集合类库-下"><a href="#集合类库-下" class="headerlink" title="集合类库(下)"></a>集合类库(下)</h2><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ul>
<li>通常情况下集合中可以存放不同类型的对象，是因为将所有对象都看做Object类型放入的，因此  从集合中取出元素时也是Object类型，为了表达该元素真实的数据类型，则需要强制类型转换，  而强制类型转换可能会引发类型转换异常。</li>
<li>为了避免上述错误的发生，从Java5开始增加泛型机制，也就是在集合名称的右侧使用&lt;数据类型&gt;     的方式来明确要求该集合中可以存放的元素类型，若放入其它类型的元素则编译报错。</li>
<li>泛型只在编译时期有效，在运行时期不区分是什么类型。</li>
</ul>
<p><strong>原理</strong></p>
<p>泛型的本质就是参数化类型，也就是让数据类型作为参数传递，其中E相当于形式参数负责占位，  而使用集合时&lt;&gt;中的数据类型相当于实际参数，用于给形式参数E进行初始化，从而使得集合中所   有的E被实际参数替换，由于实际参数可以传递各种各样广泛的数据类型，因此得名为泛型。<br>如：<br>//其中i叫做形式参数，负责占位<br>//int i = 10;<br>//int i = 20;<br>public static void show(int i) {<br>    …<br>}<br>//其中10叫做实际参数，负责给形式参数初始化<br>show(10);<br>show(20);        </p>
<p>如：<br>//其中E叫做形式参数，负责占位<br>E = String;<br>E = Integer;<br>public interface List&lt;E&gt;{<br>    …<br> }<br>//其中String叫做实际参数<br>List&lt;String&gt; lt1 = …;<br>List&lt;Integer&gt; lt2 = …;</p>
<h4 id="定义泛型接口"><a href="#定义泛型接口" class="headerlink" title="定义泛型接口"></a>定义泛型接口</h4><p>泛型接口和普通接口的区别就是后面添加了类型参数列表，可以有多个类型参数，如：&lt;E, T, .. &gt;<br>等。</p>
<h4 id="定义泛型类"><a href="#定义泛型类" class="headerlink" title="定义泛型类"></a>定义泛型类</h4><ul>
<li>泛型类和普通类的区别就是类名后面添加了类型参数列表，可以有多个类型参数，如：&lt;E, T, .. &gt;<br>等。</li>
<li>实例化泛型类时应该指定具体的数据类型，并且是引用数据类型而不是基本数据类型。 </li>
<li>父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型。</li>
<li>子类必须是“富二代”，子类除了指定或保留父类的泛型，还可以增加自己的泛型。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> E gender;   <span class="comment">//gender的数据类型是E，E是什么类型由创建对象决定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, E gender)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不是泛型方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(E gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person&lt;String&gt; t1 = <span class="keyword">new</span> Person&lt;&gt;(<span class="string">&quot;li&quot;</span>, <span class="string">&quot;男&quot;</span>);   <span class="comment">//将E赋值为String</span></span><br><span class="line">Person&lt;Boolean&gt; t2 = <span class="keyword">new</span> Person&lt;&gt;(<span class="string">&quot;li&quot;</span>, <span class="keyword">true</span>);  <span class="comment">//将E赋值为Booleean</span></span><br></pre></td></tr></table></figure>

<p>继承关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//public class SubPerson extends Person &#123;         //不保留的泛型且没有指定类型，此时父类的E默认是Object类型，擦除</span></span><br><span class="line"><span class="comment">//public class SubPerson extends Person&lt;String&gt; &#123; //不保留的泛型但是指定了类型，此时父类的E默认是String类型</span></span><br><span class="line"><span class="comment">//public class SubPerson&lt;E&gt; extends Person&lt;E&gt; &#123;   //保留了父类的泛型，可以在构造方法中指定E的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubPerson</span>&lt;<span class="title">E</span>, <span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Person</span>&lt;<span class="title">E</span>&gt; </span>&#123;  <span class="comment">//保留了父类的泛型，同时子类还增加了新的泛型T</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="定义泛型方法"><a href="#定义泛型方法" class="headerlink" title="定义泛型方法"></a>定义泛型方法</h4><ul>
<li>泛型方法就是我们输入参数的时候，输入的是泛型参数，而不是具体的参数。我们在调用这个泛型  方法的时需要对泛型参数进行实例化。</li>
<li>泛型方法的格式：<br>[访问权限] &lt;泛型&gt; 返回值类型 方法名([泛型标识 参数名称]) { 方法体; }</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//泛型方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; T <span class="title">show</span><span class="params">(T arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String s1 = show(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">Integer ia = show(<span class="number">123</span>);</span><br></pre></td></tr></table></figure>

<h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p>如果A和B具备父子类关系，但是List&lt;A&gt;和List&lt;B&gt;不具备父子关系。</p>
<ul>
<li>有时候我们希望传入的类型在一个指定的范围内，此时就可以使用泛型通配符了。</li>
<li>如：之前传入的类型要求为Integer类型，但是后来业务需要Integer的父类Number类也可以传入。</li>
<li>泛型中有三种通配符形式：<?> 无限制通配符：表示我们可以传入任意类型的参数。
<? extends E> 表示类型的上界是E，只能是E或者是E的子类。
<? super E> 表示类型的下界是E，只能是E或者是E的父类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; lt1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;SubPerson&gt; lt2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//lt1 = lt2;    //Error:不具备父子类关系</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用通配符作为泛型类型的公共父类</span></span><br><span class="line">List&lt;?&gt; lt3 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">lt3 = lt2;</span><br><span class="line">lt3 = lt1;</span><br><span class="line"><span class="comment">//lt3.add(new Person())    //Eooor:不支持添加元素操作，因为有更小的类型</span></span><br><span class="line">Object obj1 = lt3.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;? extends Person&gt; lt4 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//lt4.add(new Person());      //Error:不支持添加元素操作，因为有更小的类型</span></span><br><span class="line">Person p1 = lt4.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;? <span class="keyword">super</span> Person&gt; lt5 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">lt5.add(<span class="keyword">new</span> Person());    <span class="comment">//可以添加Person及以下子类型的对象</span></span><br><span class="line">Object obj2 = lt5.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><p><a href="https://imgtu.com/i/TfqsJ0"><img src="https://s4.ax1x.com/2021/12/31/TfqsJ0.png" alt="TfqsJ0.png"></a></p>
<ul>
<li>java.util.Set集合是Collection集合的子集合，与List集合平级。  </li>
<li>该集合中元素没有先后放入次序，且不允许重复。</li>
</ul>
<p>实现类：HashSet类 和 TreeSet类以及LinkedHashSet类。</p>
<ul>
<li>其中HashSet类的底层是采用哈希表进行数据管理的。</li>
<li>其中TreeSet类的底层是采用红黑树进行数据管理的。</li>
<li>其中LinkedHashSet类与HashSet类的不同之处在于内部维护了一个双向链表，链表中记录了元  素的迭代顺序，也就是元素插入集合中的先后顺序，因此便于迭代。</li>
</ul>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul>
<li>参考Collection集合中的方法即可！ </li>
<li>案例题目<br>准备一个Set集合指向HashSet对象，向该集合中添加元素”two”并打印，再向集合中添加元  素”one”并打印，再向集合中添加元素”three”并打印，再向集合中添加”one”并打印。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; set1 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">set1.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">set1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">set1.add(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">set1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">System.out.println(set1);    <span class="comment">//[one, two, three]  没有先后顺序，且不能重复</span></span><br></pre></td></tr></table></figure>

<p><strong>元素放入HashSet原理</strong></p>
<ul>
<li>使用元素调用hashCode方法获取对应的<em>哈希码值</em>，再由某种哈希算法计算出该元素在数组中的索  引位置。</li>
<li>若该位置没有元素，则将该元素直接放入即可。</li>
<li>若该位置有元素，则使用新元素与已有元素依次比较<em>哈希值</em>，若哈希值不相同，则将该元素直接放  入。</li>
<li>若新元素与已有元素的哈希值相同，则使用新元素调用<em>equals方法</em>与已有元素依次比较。  </li>
<li>若相等则添加元素失败，否则将元素直接放入即可。</li>
</ul>
<p>思考：为什么要求重写equals方法后要重写hashCode方法呢？</p>
<p>解析：<br>当两个元素调用equals方法相等时证明这两个元素相同，重写hashCode方法后保证这两个元    素得到的哈希码值相同，由同一个哈希算法生成的索引位置相同，此时只需要与该索引位置已有元  素比较即可，从而提高效率并避免重复元素的出现。</p>
<h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><ul>
<li>二叉树主要指每个节点最多只有两个子节点的树形结构。</li>
<li>满足以下3个特征的二叉树叫做有序二叉树。<br>a.左子树中的任意节点元素都小于根节点元素值；<br>b.右子树中的任意节点元素都大于根节点元素值；<br>c.左子树和右子树的内部也遵守上述规则；</li>
<li>由于TreeSet集合的底层采用红黑树进行数据的管理，当有新元素插入到TreeSet集合时，需要使用新元素与集合中已有的元素依次比较来确定新元素的合理位置。</li>
<li>比较元素大小的规则有两种方式：<br>a.使用元素的自然排序规则进行比较并排序，让元素类型实现java.lang.Comparable接口；<br>b.使用比较器规则进行比较并排序，构造TreeSet集合时传入java.util.Comparator接口；</li>
<li>自然排序的规则比较单一，而比较器的规则比较多元化，而且比较器优先于自然排序；</li>
</ul>
<table>
<thead>
<tr>
<th>构造器</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>TreeSet()</td>
<td>构造一个新的空树集，根据其元素的自然顺序进行排序。</td>
</tr>
<tr>
<td>TreeSet(Comparator&lt;? super E&gt; comparator)</td>
<td>构造一个新的空树集，根据指定的比较器进行排序。</td>
</tr>
</tbody></table>
<p>TreeSet集合中放入String数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">set.add(<span class="string">&quot;nihao&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">System.out.println(set);   <span class="comment">//[abc, hello, nihao]</span></span><br><span class="line"><span class="comment">//String类型放入TreeSet不需要添加排序，因为String类中官方已经实现了comparable接口。</span></span><br></pre></td></tr></table></figure>

<p>TreeSet集合中放入其他数据需要定义排序规则：</p>
<p>自然排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;   <span class="comment">//元素类型实现java.lang.Comparable接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用对象this表示新增的对象，this和o进行比较。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o：Object o 表示集合中已有的元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>：0表示相同，丢弃；正数表示大于，放后面；负数表示小于，放前面。（从小到大）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//自定义排序规则：</span></span><br><span class="line">        <span class="comment">//age从小到大，年龄相同按name排序</span></span><br><span class="line">        <span class="keyword">int</span> ia = <span class="keyword">this</span>.age - ((Person)o).age;</span><br><span class="line">        <span class="keyword">int</span> ib = <span class="keyword">this</span>.name.compareTo( ((Person)o).name );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>!=ia ? ia : ib ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Person&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">23</span>, <span class="string">&quot;guanyu&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">18</span>, <span class="string">&quot;zhangfei&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">18</span>, <span class="string">&quot;Li&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">35</span>, <span class="string">&quot;liubei&quot;</span>));</span><br><span class="line">System.out.println(set);</span><br></pre></td></tr></table></figure>

<p>比较器排序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用匿名内部类创建比较器</span></span><br><span class="line">Comparator  comparetor1 = <span class="keyword">new</span> Comparator()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o, Object t1)</span> </span>&#123;  <span class="comment">//o是新增对象，t1是集合中已有对象。</span></span><br><span class="line">        <span class="keyword">int</span> ia = ((Person)o).age - ((Person)t1).age;</span><br><span class="line">        <span class="keyword">int</span> ib = ((Person)o).name.compareTo( ((Person)t1).name );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>!=ia ? ia : ib ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//java8支持Lambda表达式</span></span><br><span class="line">Comparator comparetor2 = (Object o, Object t1) -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> ia = ((Person)o).age - ((Person)t1).age;</span><br><span class="line">    <span class="keyword">int</span> ib = ((Person)o).name.compareTo( ((Person)t1).name );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>!=ia ? ia : ib ;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Set&lt;Person&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;(comparetor1);</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">23</span>, <span class="string">&quot;guanyu&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">18</span>, <span class="string">&quot;zhangfei&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">18</span>, <span class="string">&quot;Li&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">35</span>, <span class="string">&quot;liubei&quot;</span>));</span><br><span class="line">System.out.println(set);</span><br></pre></td></tr></table></figure>

<h3 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h3><p><a href="https://imgtu.com/i/TfqsJ0"><img src="https://s4.ax1x.com/2021/12/31/TfqsJ0.png" alt="TfqsJ0.png"></a></p>
<ul>
<li>java.util.Map&lt;K,V&gt;集合中存取元素的基本单位是：单对元素，其中类型参数如下：<br>K - 此映射所维护的键(Key)的类型，相当于目录。<br>V - 映射值(Value)的类型，相当于内容。</li>
<li>该集合中key是不允许重复的，而且一个key只能对应一个value。</li>
</ul>
<p>实现类：HashMap类、TreeMap类、LinkedHashMap类、Hashtable类、Properties类。</p>
<ul>
<li>其中HashMap类的底层是采用哈希表进行数据管理的。 </li>
<li>其中TreeMap类的底层是采用红黑树进行数据管理的。</li>
<li>其中LinkedHashMap类与HashMap类的不同之处在于内部维护了一个双向链表，链表中记录了元素的迭代顺序，也就是元素插入集合中的先后顺序，因此便于迭代。</li>
<li>其中Hashtable类是古老的Map实现类，与HashMap类相比属于线程安全的类，且不允许null作为key或者value的数值。</li>
<li>其中Properties类是Hashtable类的子类，该对象用于处理属性文件，key和value都是String类型的。</li>
</ul>
<p>Map集合是面向查询优化的数据结构, 在大数据量情况下有着优良的查询性能。经常用于根据key检索value的业务场景。</p>
<h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>V put(K key, V value)</td>
<td>将Key-Value对存入Map，若集合中已经包含该Key，则替换该Key所对应的Value，返回值为该Key原来所对应的Value，若没有则返回null</td>
</tr>
<tr>
<td>V remove(Object key)</td>
<td>根据参数指定的key进行删除</td>
</tr>
<tr>
<td>V get(Object key)</td>
<td>返回与参数Key所对应的Value对象，如果不存在则返回null</td>
</tr>
<tr>
<td>boolean containsKey(Object key);</td>
<td>判断集合中是否包含指定的Key</td>
</tr>
<tr>
<td>boolean containsValue (Object value);</td>
<td>判断集合中是否包含指定的Value</td>
</tr>
<tr>
<td>Set keySet()</td>
<td>返回此映射中包含的键的Set视图</td>
</tr>
<tr>
<td>Collection values()</td>
<td>返回此映射中包含的值的Set视图</td>
</tr>
<tr>
<td>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</td>
<td>返回此映射中包含的映射的Set视图</td>
</tr>
</tbody></table>
<p>基本操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; m1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//增改。  无则添加，有则修改</span></span><br><span class="line">m1.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">m1.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;Word&quot;</span>);</span><br><span class="line">m1.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">m1.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;nihao&quot;</span>);</span><br><span class="line">System.out.println(m1);   <span class="comment">//&#123;1=nihao, 2=Word&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除。  有则删，无则不删</span></span><br><span class="line">m1.remove(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">System.out.println(m1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">String s1 = m1.get(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">System.out.println(s1);   <span class="comment">//nihao</span></span><br><span class="line"><span class="keyword">boolean</span> b = m1.containsKey(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">System.out.println(b);    <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>map的三种遍历方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//key的视图</span></span><br><span class="line">Set&lt;String&gt; set1 = m1.keySet();</span><br><span class="line">System.out.println(set1);   <span class="comment">//[1, 3]</span></span><br><span class="line"><span class="keyword">for</span>(String s: set1)&#123;</span><br><span class="line">    System.out.println(s + <span class="string">&quot;对应的值是：&quot;</span> + m1.get(s));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//value的视图</span></span><br><span class="line">Collection&lt;String&gt; co1 = m1.values();</span><br><span class="line">System.out.println(co1);   <span class="comment">//[nihao, abc]</span></span><br><span class="line"><span class="keyword">for</span>(String s: co1)&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//键值映射的视图</span></span><br><span class="line">Set&lt;Map.Entry&lt;String, String&gt;&gt; set2 = m1.entrySet();</span><br><span class="line">System.out.println(set2);   <span class="comment">//[1=nihao, 3=abc]</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, String&gt; me: set2)&#123;</span><br><span class="line">    System.out.println(me);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>元素放入HashMap集合原理</strong></p>
<ul>
<li>使用元素的key调用hashCode方法获取对应的<em>哈希码值</em>，再由某种哈希算法计算在数组中的索引位置。</li>
<li>若该位置没有元素，则将该键值对直接放入即可。</li>
<li>若该位置有元素，则使用key与已有元素依次比较<em>哈希值</em>，若哈希值不相同，则将该元素直接放入。</li>
<li>若key与已有元素的哈希值相同，则使用key调用<em>equals方法</em>与已有元素依次比较。  </li>
<li>若相等则将对应的value修改，否则将键值对直接放入即可</li>
</ul>
<p><strong>相关常量</strong></p>
<ul>
<li>DEFAULT_INITIAL_CAPACITY : HashMap的默认容量是16。</li>
<li>DEFAULT_LOAD_FACTOR：HashMap 的默认加载因子是 0.75 。                    </li>
<li>threshold： 扩 容 的 临 界 值 ， 该 数 值 为 ： 容 量 * 填 充 因 子 ， 也 就 是 12 。 </li>
<li>TREEIFY_THRESHOLD：若Bucket中链表长度大于该默认值则转化为红黑树存储，该数值是8。</li>
<li>MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量，该数值是64。</li>
</ul>
<h3 id="Collections类"><a href="#Collections类" class="headerlink" title="Collections类"></a>Collections类</h3><p>java.util.Collections类主要提供了对集合操作或者返回集合的静态方法。</p>
<h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T max(Collection&lt;? extends T&gt; coll)</td>
<td>根据元素的自然顺序返回给定集合的最大元素</td>
</tr>
<tr>
<td>static T max(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</td>
<td>根据指定比较器引发的顺序返回给定集合的最大元素</td>
</tr>
<tr>
<td>static &lt;T extends Object &amp; Comparable&lt;?super T&gt;&gt; T min(Collection&lt;? extends T&gt; coll)</td>
<td>根据元素的自然顺序返回给定集合的最小元素</td>
</tr>
<tr>
<td>static T min(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</td>
<td>根据指定比较器引发的顺序返回给定集合的最小元素</td>
</tr>
<tr>
<td>static void copy(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src)</td>
<td>将一个列表中的所有元素复制到另一个列表中</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static void reverse(List&lt;?&gt; list)</td>
<td>反转指定列表中元素的顺序</td>
</tr>
<tr>
<td>static void shuﬄe(List&lt;?&gt; list)</td>
<td>使用默认的随机源随机置换指定的列表</td>
</tr>
<tr>
<td>static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List list)</td>
<td>根据其元素的自然顺序将指定列表按升序排序</td>
</tr>
<tr>
<td>static void sort(List list, Comparator&lt;? super T&gt; c)</td>
<td>根据指定比较器指定的顺序对指定列表进行排序</td>
</tr>
<tr>
<td>static void swap(List&lt;?&gt; list, int i, int j)</td>
<td>交换指定列表中指定位置的元素</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; lt1 = Arrays.asList(<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">Integer ia = Collections.max(lt1);</span><br><span class="line">System.out.println(<span class="string">&quot;最大值是&quot;</span> + ia);</span><br><span class="line">ia = Collections.min(lt1);</span><br><span class="line">System.out.println(<span class="string">&quot;最小值是&quot;</span> + ia);</span><br><span class="line"></span><br><span class="line"><span class="comment">//copy将lt1复制到lt2中</span></span><br><span class="line">List&lt;Integer&gt; lt2 = Arrays.asList(<span class="keyword">new</span> Integer[<span class="number">10</span>]);</span><br><span class="line">Collections.copy(lt2, lt1);</span><br><span class="line">System.out.println(lt2);    <span class="comment">//[9, 1, 2, 5, 3, 11, null, null, null, null]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//reverse反转操作</span></span><br><span class="line">Collections.reverse(lt1);</span><br><span class="line">System.out.println(lt1);    <span class="comment">//[11, 3, 5, 2, 1, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sort升序</span></span><br><span class="line">Collections.sort(lt1);</span><br><span class="line">System.out.println(lt1);    <span class="comment">//[1, 2, 3, 5, 9, 11]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//swap交换指定下标元素</span></span><br><span class="line">Collections.swap(lt1, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(lt1);    <span class="comment">//[5, 2, 3, 1, 9, 11]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shuffle随机打乱</span></span><br><span class="line">Collections.shuffle(lt1);</span><br><span class="line">System.out.println(lt1);    <span class="comment">//每次都随机打乱顺序</span></span><br></pre></td></tr></table></figure>

<h1 id="Java核心类库-下"><a href="#Java核心类库-下" class="headerlink" title="Java核心类库(下)"></a>Java核心类库(下)</h1><h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><p><a href="https://imgtu.com/i/7w6SW8"><img src="https://s4.ax1x.com/2022/01/18/7w6SW8.png" alt="7w6SW8.png"></a></p>
<p>异常就是”不正常”的含义，在Java语言中主要指程序执行中发生的不正常情况。</p>
<ul>
<li>java.lang.Throwable类：是Java语言中错误(Error)和异常(Exception)的超类。</li>
<li>Error类：主要用于描述Java虚拟机无法解决的严重错误，通常无法编码解决，如：JVM挂掉了    等。</li>
<li>Exception类：主要用于描述因编程错误或偶然外在因素导致的轻微错误，通常可以编码解决， 如：0作为除数等。</li>
</ul>
<h3 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h3><p>java.lang.Exception类是所有异常的超类，主要分为以下两种： </p>
<ul>
<li>RuntimeException ： 运行时异常，也叫作非检测性异常</li>
<li>IOException和其它异常 ： 其它异常，也叫作检测性异常，所谓检测性异常就是指在编译阶段都能被编译器检测出来的异常。</li>
</ul>
<p>其 中 RuntimeException 类 的 主 要 子 类 ： </p>
<ul>
<li>ArithmeticException类 - 算术异常</li>
<li>ArrayIndexOutOfBoundsException类 - 数组下标越界异常</li>
<li>NullPointerException - 空指针异常</li>
<li>ClassCastException - 类型转换异常</li>
<li>NumberFormatException - 数字格式异常</li>
</ul>
<p><strong>注意：</strong><br>当程序执行过程中发生异常但又没有手动处理时，则由Java虚拟机采用默认方式处理异常，而默认处理方式就是：打印异常的名称、异常发生的原因、异常发生的位置以及终止程序。</p>
<p>在以后的开发中尽量使用if条件判断来避免异常的发生。<br>但是过多的if条件判断会导致程序的代码加长、臃肿，可读性差。</p>
<h3 id="异常的捕获"><a href="#异常的捕获" class="headerlink" title="异常的捕获"></a>异常的捕获</h3><ul>
<li><p>语法格式：<br>try {</p>
<pre><code>编写可能发生异常的代码;
</code></pre>
<p>}<br>catch(异常类型 引用变量名) {</p>
<pre><code>编写针对该类异常的处理代码；
</code></pre>
<p>}<br>…可以有多个catch<br>ﬁnally {</p>
<pre><code>编写无论是否发生异常都要执行的代码；
</code></pre>
<p>}</p>
</li>
<li><p>注意事项<br>a. 当需要编写多个catch分支时，切记小类型应该放在大类型的前面；<br>b. 懒人的写法：catch(Exception e) {}<br>c. ﬁnally通常用于进行善后处理，如：关闭已经打开的文件等。</p>
</li>
<li><p>执行流程<br>try { </p>
<pre><code>a;
b; - 可能发生异常的语句
c;
</code></pre>
<p>}catch(Exception ex) { </p>
<pre><code>d;
</code></pre>
<p>}ﬁnally { </p>
<pre><code>e;
</code></pre>
<p>}<br>当没有发生异常时的执行流程：a b c e;<br>当发生异常时的执行流程：a b d e;</p>
</li>
</ul>
<p><strong>考点</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义如下方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//......可能出错代码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception  e)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法，无论有没有异常，show()的返回值都是3</span></span><br><span class="line"><span class="keyword">int</span> ia = show();</span><br><span class="line">System.out.println(<span class="string">&quot;ia = &quot;</span> + ia);   <span class="comment">//ia = 3</span></span><br></pre></td></tr></table></figure>

<h3 id="异常的抛出"><a href="#异常的抛出" class="headerlink" title="异常的抛出"></a>异常的抛出</h3><p>异常的抛出：在某些特殊情况下有些异常不能处理或者不便于处理时，就可以将该异常转移给该方法的调用者。<br>当方法执行时出现异常，则底层生成一个异常类对象抛出，此时异常代码后续的代码就不再执行</p>
<ul>
<li>语法格式<br>访问权限 返回值类型 方法名称(形参列表) throws 异常类型1,异常类型2,…{ 方法体; }<br>如：<pre><code>public void show() throws IOException&#123;&#125;
</code></pre>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">throws</span> ArithmeticException</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ia = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在main中抛出异常相当于交给jvm虚拟机处理</span></span><br><span class="line"><span class="comment">//不建议在main中抛出异常，jvm的负担很重</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="comment">/*throws ArithmeticException*/</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        show();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法重写的原则<br>a. 要求方法名相同、参数列表相同以及返回值类型相同，从jdk1.5开始支持返回子类类型；<br>b. 要求方法的访问权限不能变小，可以相同或者变大；<br>c. 要求方法<strong>不能抛出更大的异常</strong>；</li>
</ul>
<p>注意：<br>子类重写的方法不能抛出更大的异常、不能抛出平级不一样的异常，但可以抛出一样的异常、更小的异常以及不抛出异常。</p>
<p>经验分享：<br>若父类中被重写的方法没有抛出异常时，则子类中重写的方法只能进行异常的捕获处理。<br>若一个方法内部又以递进方式分别调用了好几个其它方法，则建议这些方法内可以使用抛出 的方法处理到最后一层进行捕获方式处理。</p>
<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>当需要在程序中表达年龄不合理的情况时，而Java官方又没有提供这种针对性的异常，此时就需要程序员自定义异常加以描述。</p>
<ul>
<li>实现流程<br>a. 自定义名为“xxxException”异常类，并继承Exception类或者其子类。<br>b.提供两个版本的构造方法，一个是无参构造方法，另外一个是字符串作为参数的构造方法。 </li>
<li>异常的产生<br>throw new 异常类型(实参);</li>
</ul>
<p>自定义异常类AgeException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgeException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7516993124229948L</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AgeException</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AgeException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>封装Person类，当年龄不合理时抛出AgeException异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> <span class="keyword">throws</span> AgeException</span>&#123;<span class="comment">//抛出异常</span></span><br><span class="line">        setAge(age);</span><br><span class="line">        setName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> <span class="keyword">throws</span> AgeException</span>&#123;<span class="comment">//抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(age&gt;=<span class="number">0</span> &amp;&amp; age &lt;= <span class="number">150</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//抛出自定义的异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AgeException(<span class="string">&quot;年龄不合理哦！&quot;</span>);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Person p1 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        p1 = <span class="keyword">new</span> Person(<span class="string">&quot;zhang&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(AgeException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;p1 = &quot;</span> + p1);</span><br><span class="line">    <span class="comment">//对于自己抛出的异常，需要异常处理，</span></span><br><span class="line">    <span class="comment">//假如在抛出自定义异常时，立马try,catch处理，结果将是：p1 = Person&#123;name=&#x27;zhang&#x27;, age=0&#125;</span></span><br><span class="line">    <span class="comment">//假如如上代码，抛出自定义异常时，再利用throws抛出外面处理，结果将是：null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java采用的异常处理机制是将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简洁、优雅，并易于维护。</p>
<h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>java.io.File类主要用于描述文件或目录路径的抽象表示信息，可以获取文件或目录的特征信息， 如：大小等。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能概述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>File(String pathname)</td>
<td>根据参数指定的路径名来构造对象</td>
</tr>
<tr>
<td>File(String parent, String child)</td>
<td>根据参数指定的父路径和子路径信息构造对象</td>
</tr>
<tr>
<td>File(File parent, String child)</td>
<td>根据参数指定的父抽象路径和子路径信息构造对象</td>
</tr>
<tr>
<td>boolean exists()</td>
<td>测试此抽象路径名表示的文件或目录是否存在</td>
</tr>
<tr>
<td>String getName()</td>
<td>用于获取文件的名称</td>
</tr>
<tr>
<td>long length()</td>
<td>返回由此抽象路径名表示的文件的长度</td>
</tr>
<tr>
<td>long lastModiﬁed()</td>
<td>用于获取文件的最后一次修改时间</td>
</tr>
<tr>
<td>String getAbsolutePath()</td>
<td>用于获取绝对路径信息</td>
</tr>
<tr>
<td>boolean delete()</td>
<td>用于删除文件，当删除目录时要求是空目录</td>
</tr>
<tr>
<td>boolean createNewFile()</td>
<td>用于创建新的空文件</td>
</tr>
<tr>
<td>boolean mkdir()</td>
<td>用于创建目录</td>
</tr>
<tr>
<td>boolean mkdirs()</td>
<td>用于创建多级目录</td>
</tr>
<tr>
<td>File[] listFiles()</td>
<td>获取该目录下的所有内容</td>
</tr>
<tr>
<td>boolean isFile()</td>
<td>判断是否为文件</td>
</tr>
<tr>
<td>boolean isDirectory()</td>
<td>判断是否为目录</td>
</tr>
<tr>
<td>File[] listFiles(FileFilter ﬁlter)</td>
<td>获取目录下满足筛选器的所有内容</td>
</tr>
</tbody></table>
<p>文件操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造File类型的对象和“d:/a.txt”相关联</span></span><br><span class="line">    File f1 = <span class="keyword">new</span> File(<span class="string">&quot;d:/a.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(f1.exists())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名称是&quot;</span> + f1.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件长度是&quot;</span> + f1.length());</span><br><span class="line">        <span class="keyword">long</span> l = f1.lastModified();</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(l);</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日，HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;最后一次修改日期&quot;</span> + sdf.format(date));</span><br><span class="line">        System.out.println(<span class="string">&quot;绝对路径是&quot;</span> + f1.getAbsolutePath());</span><br><span class="line">        System.out.println(f1.delete() ? <span class="string">&quot;删除成功&quot;</span> : <span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(f1.createNewFile() ? <span class="string">&quot;创建成功&quot;</span> : <span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目录操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    File f1 = <span class="keyword">new</span> File(<span class="string">&quot;d:/aaa/bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(f1.exists())&#123;</span><br><span class="line">        System.out.println(f1.getName());</span><br><span class="line">        System.out.println(f1.delete() ? <span class="string">&quot;删除成功&quot;</span> : <span class="string">&quot;删除失败&quot;</span>);<span class="comment">//目录为空时才能删除</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(f1.mkdirs() ? <span class="string">&quot;创建成功&quot;</span> : <span class="string">&quot;创建失败&quot;</span>);<span class="comment">//mkdirs()创建多级目录</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历目录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File f1 = <span class="keyword">new</span> File(<span class="string">&quot;d:/aaa&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(f1.exists())&#123;</span><br><span class="line">    File[] f1Array = f1.listFiles();</span><br><span class="line">    <span class="keyword">for</span>(File f : f1Array)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f.isFile())&#123;</span><br><span class="line">            System.out.println(f.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f.isDirectory())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[&quot;</span> + f.getName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用筛选器遍历目录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义筛选器，筛选出以.docx结尾的文件</span></span><br><span class="line">FileFilter ff1 = <span class="keyword">new</span> FileFilter()&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//返回true筛选出来, 返回false不筛选</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file.getName().endsWith(<span class="string">&quot;docx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//lambda表达式定义筛选器</span></span><br><span class="line">FileFilter ff2 = (File file) -&gt; &#123; <span class="keyword">return</span> file.getName().endsWith(<span class="string">&quot;.docx&quot;</span>); &#125;;</span><br><span class="line"></span><br><span class="line">File f1 = <span class="keyword">new</span> File(<span class="string">&quot;d:/aaa&quot;</span>);</span><br><span class="line">File[] f1Array = f1.listFiles(ff1);</span><br><span class="line"><span class="keyword">for</span>(File f : f1Array)&#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历目录及其子目录，可以利用方法的递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印某目录下及其子目录所有的.docx文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String pathName)</span></span>&#123;</span><br><span class="line">    File f1 = <span class="keyword">new</span> File(pathName);</span><br><span class="line">    File[] f1Array = f1.listFiles();</span><br><span class="line">    <span class="keyword">if</span>(f1Array != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(File f : f1Array)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f.isFile() &amp;&amp; f.getName().endsWith(<span class="string">&quot;.docx&quot;</span>))&#123;</span><br><span class="line">                System.out.println(f);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(f.isDirectory())&#123;</span><br><span class="line">                show(f.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试，打印d盘下的所有.docx文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    show(<span class="string">&quot;d:/&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>IO就是Input和Output的简写，也就是输入和输出的含义。</p>
<p>IO流就是指读写数据时像流水一样从一端流到另外一端，因此得名为“流”。</p>
<h3 id="基本分类"><a href="#基本分类" class="headerlink" title="基本分类"></a>基本分类</h3><ul>
<li>按照读写数据的基本单位不同，分为 字节流 和 字符流。<br>字节流主要指以字节为单位进行数据读写的流，可以读写任意类型的文件。<br>字符流主要指以字符(2个字节)为单位进行数据读写的流，只能读写文本文件。</li>
<li>按照读写数据的方向不同，分为 输入流 和 输出流（站在程序的角度）。<br>输入流主要指从文件中读取数据内容输入到程序中，也就是读文件。<br>输出流主要指将程序中的数据内容输出到文件中，也就是写文件。</li>
<li>按照流的角色不同分为节点流和处理流。<br>节点流主要指直接和输入输出源对接的流。<br>处理流主要指需要建立在节点流的基础之上的流。</li>
</ul>
<h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><p><a href="https://imgtu.com/i/74xkgf"><img src="https://s4.ax1x.com/2022/01/23/74xkgf.png" alt="74xkgf.png"></a></p>
<p><a href="https://imgtu.com/i/74xXin"><img src="https://s4.ax1x.com/2022/01/23/74xXin.png" alt="74xXin.png"></a></p>
<h3 id="FileWriter类"><a href="#FileWriter类" class="headerlink" title="FileWriter类"></a>FileWriter类</h3><p>java.io.FileWriter类主要用于将文本内容写入到文本文件。</p>
<p>常用方法</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>FileWriter(String fileName)</td>
<td>根据参数指定的文件名构造对象</td>
</tr>
<tr>
<td>FileWriter(String fileName, boolean append)</td>
<td>以追加的方式根据参数指定的文件名来构造对象</td>
</tr>
<tr>
<td>void write(int c)</td>
<td>写入单个字符</td>
</tr>
<tr>
<td>void write(char[] cbuf, int off, int len)</td>
<td>将指定字符数组中从偏移量off开始的len个字符写入此文件输出流</td>
</tr>
<tr>
<td>void write(char[] cbuf)</td>
<td>将cbuf.length个字符从指定字符数组写入此文件输出流中</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新流</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//1,创建FileWriter类型引用与“d:/aaa.a.txt”相关联</span></span><br><span class="line">    fw= <span class="keyword">new</span> FileWriter(<span class="string">&quot;d:/aaa/a.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//2,通过输出流写入字符</span></span><br><span class="line">    fw.write(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    fw.write(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;写入成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//3,关闭资源</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != fw)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FileReader类"><a href="#FileReader类" class="headerlink" title="FileReader类"></a>FileReader类</h3><p>java.io.FileReader类主要用于从文本文件读取文本数据内容。</p>
<p>常用方法</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>FileReader(String fileName)</td>
<td>根据参数指定的文件名构造对象</td>
</tr>
<tr>
<td>int read()</td>
<td>读取单个字符的数据并返回，返回-1表示读取到末尾</td>
</tr>
<tr>
<td>int read(char[] cbuf, int offset, int length)</td>
<td>从输入流中将最多len个字符的数据读入一个字符数组中，返回读取到的字符个数，返回-1表示读取到末尾</td>
</tr>
<tr>
<td>int read(char[] cbuf)</td>
<td>从此输入流中将最多 cbuf.length 个字符的数据读入字符数组中，返回读取到的字符个数，返回-1表示读取到末尾</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileReader fr = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//1,创建FileReader类型的引用和“d:/aaa/a.txt”相关联</span></span><br><span class="line">    fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;d:/aaa/a.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//2,从输入流中读取数据</span></span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    <span class="keyword">while</span>((result = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读取结果：&quot;</span> + (<span class="keyword">char</span>)result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//3,关闭资源</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != fr)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            fr.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FileOutputStream类"><a href="#FileOutputStream类" class="headerlink" title="FileOutputStream类"></a>FileOutputStream类</h3><p>java.io.FileOutputStream类主要用于将图像数据之类的原始字节流写入到输出流中。</p>
<p>常用方法</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>FileOutputStream(String name)</td>
<td>根据参数指定的文件名来构造对象</td>
</tr>
<tr>
<td>FileOutputStream(String name, boolean append)</td>
<td>以追加的方式根据参数指定的文件名来构造对象</td>
</tr>
<tr>
<td>void write(int b)</td>
<td>将指定字节写入此文件输出流</td>
</tr>
<tr>
<td>void write(byte[] b, int off, int len)</td>
<td>将指定字节数组中从偏移量off开始的len个字节写入此文件输出流</td>
</tr>
<tr>
<td>void write(byte[] b)</td>
<td>将 b.length 个字节从指定字节数组写入此文件输出流中</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新此输出流并强制写出任何缓冲的输出字节</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<h3 id="FileInputStream类"><a href="#FileInputStream类" class="headerlink" title="FileInputStream类"></a>FileInputStream类</h3><p>java.io.FileInputStream类主要用于从输入流中以字节流的方式读取图像数据等。</p>
<p>常用方法</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>FileInputStream(String name)</td>
<td>根据参数指定的文件路径名来构造对象</td>
</tr>
<tr>
<td>int read()</td>
<td>从输入流中读取单个字节的数据并返回，返回-1表示读取到末尾</td>
</tr>
<tr>
<td>int read(byte[] b, int off, int len)</td>
<td>从此输入流中将最多len个字节的数据读入字节数组中，返回读取到的字节个数，返回-1表示读取到末尾</td>
</tr>
<tr>
<td>int read(byte[] b)</td>
<td>从此输入流中将最多 b.length 个字节的数据读入字节数组中，返回读取到的字节个数，返回-1表示读取到末尾</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
<tr>
<td>int available()</td>
<td>获取输入流所关联文件的大小</td>
</tr>
</tbody></table>
<p><strong>FileOutputStream</strong>类和<strong>FileInputStream</strong>类的用法与<strong>FileWriter</strong>类和<strong>FileReader</strong>类的用法差不多</p>
<p>拷贝文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:/aaa/a.png&quot;</span>);</span><br><span class="line">    fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:/aaa/b.png&quot;</span>);</span><br><span class="line">    <span class="comment">/*拷贝方式一：读一个写一个*/</span></span><br><span class="line">    <span class="comment">//int result;</span></span><br><span class="line">    <span class="comment">//while((result = fis.read()) != -1)&#123;</span></span><br><span class="line">    	<span class="comment">//fos.write(result);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">/*拷贝方式二：一次性全部读出来，再全部写进去*/</span></span><br><span class="line">    <span class="comment">//byte[] arr = new byte[fis.available()];</span></span><br><span class="line">    <span class="comment">//fis.read(arr);</span></span><br><span class="line">    <span class="comment">//fos.write(arr);</span></span><br><span class="line">    <span class="comment">/*拷贝方式三：设定合理缓冲区（推荐）*/</span></span><br><span class="line">    <span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = fis.read(arr)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        fos.write(arr, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != fos)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != fis)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BufferedOutputStream类"><a href="#BufferedOutputStream类" class="headerlink" title="BufferedOutputStream类"></a>BufferedOutputStream类</h3><p>java.io.BufferedOutputStream类主要用于描述缓冲输出流，此时不用为写入的每个字节调用底层系统。</p>
<p>常用方法</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>BufferedOutputStream(OutputStream out)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>BufferedOutputStream(OutputStream out, int size)</td>
<td>根据参数指定的引用和缓冲区大小来构造对象</td>
</tr>
<tr>
<td>void write(int b)</td>
<td>写入单个字节</td>
</tr>
<tr>
<td>void write(byte[] b, int off, int len)</td>
<td>写入字节数组中的一部分数据</td>
</tr>
<tr>
<td>void write(byte[] b)</td>
<td>写入参数指定的整个字节数组</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新流</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<h3 id="BufferedInputStream类"><a href="#BufferedInputStream类" class="headerlink" title="BufferedInputStream类"></a>BufferedInputStream类</h3><p>java.io.BufferedInputStream类主要用于描述缓冲输入流。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>BufferedInputStream(InputStream in)</td>
<td>根据参数指定的引用构造对象</td>
</tr>
<tr>
<td>BufferedInputStream(InputStream in, int size)</td>
<td>根据参数指定的引用和缓冲区大小构造对象</td>
</tr>
<tr>
<td>int read()</td>
<td>读取单个字节</td>
</tr>
<tr>
<td>int read(byte[] b, int off, int len)</td>
<td>读取len个字节</td>
</tr>
<tr>
<td>int read(byte[] b)</td>
<td>读取b.length个字节</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<p>以后开发中推荐使用这类带有(Buffered)缓冲区的输入输出流，用法和上面差不多</p>
<p>拷贝文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:/aaa/a.png&quot;</span>));</span><br><span class="line">    bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:/aaa/b.png&quot;</span>));</span><br><span class="line">    <span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = bis.read(arr)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        bos.write(arr, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bos != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            bos.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(bis !=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            bis.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以在代码开头和结尾利用<code>System.currentTimeMillis()</code>测试运行速度，的确快了不少。</p>
<h3 id="BufferedWriter类"><a href="#BufferedWriter类" class="headerlink" title="BufferedWriter类"></a>BufferedWriter类</h3><p>java.io.BufferedWriter类主要用于写入单个字符、字符数组以及字符串到输出流中。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>BufferedWriter(Writer out)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>BufferedWriter(Writer out, int sz)</td>
<td>根据参数指定的引用和缓冲区大小来构造对象</td>
</tr>
<tr>
<td>void write(int c)</td>
<td>写入单个字符到输出流中</td>
</tr>
<tr>
<td>void write(char[] cbuf, int off, int len)</td>
<td>将字符数组cbuf中从下标off开始的len个字符写入输出流中</td>
</tr>
<tr>
<td>void write(char[] cbuf)</td>
<td>将字符串数组cbuf中所有内容写入输出流中</td>
</tr>
<tr>
<td>void write(String s, int off, int len)</td>
<td>将参数s中下标从off开始的len个字符写入输出流中</td>
</tr>
<tr>
<td>void write(String str)</td>
<td>将参数指定的字符串内容写入输出流中</td>
</tr>
<tr>
<td>void newLine()</td>
<td>用于写入行分隔符到输出流中</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新流</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<h3 id="BufferedReader类"><a href="#BufferedReader类" class="headerlink" title="BufferedReader类"></a>BufferedReader类</h3><p>java.io.BufferedReader类用于从输入流中读取单个字符、字符数组以及字符串。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>BufferedReader(Readerin)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>BufferedReader(Readerin, int sz)</td>
<td>根据参数指定的引用和缓冲区大小来构造对象</td>
</tr>
<tr>
<td>int read()</td>
<td>从输入流读取单个字符，读取到末尾则返回-1，否则返回实际读取到的字符内容</td>
</tr>
<tr>
<td>int read(char[] cbuf, int off, int len)</td>
<td>从输入流中读取len个字符放入数组cbuf中下标从off开始的位置上，若读取到末尾则返回-1，否则返回实际读取到的字符个数</td>
</tr>
<tr>
<td>int read(char[] cbuf)</td>
<td>从输入流中读满整个数组cbuf</td>
</tr>
<tr>
<td>String readLine()</td>
<td>读取一行字符串并返回，返回null表示读取到末尾</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<p>拷贝文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;d:/aaa/a.txt&quot;</span>));</span><br><span class="line">    bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;d:/aaa/b.txt&quot;</span>));</span><br><span class="line">    String s;</span><br><span class="line">    <span class="keyword">while</span>((s = br.readLine()) != <span class="keyword">null</span>)&#123;  <span class="comment">//注意放回null才是末尾，而不是-1</span></span><br><span class="line">        bw.write(s);</span><br><span class="line">        bw.newLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != bw)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            bw.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != br)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PrintStream类"><a href="#PrintStream类" class="headerlink" title="PrintStream类"></a>PrintStream类</h3><p>java.io.PrintStream类主要用于更加方便地打印各种数据内容。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>PrintStream(OutputStream out)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>void print(String s)</td>
<td>用于将参数指定的字符串内容打印出来</td>
</tr>
<tr>
<td>void println(String x)</td>
<td>用于打印字符串后并终止该行</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新流</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭输出流并释放有关的资源</td>
</tr>
</tbody></table>
<h3 id="PrintWriter类"><a href="#PrintWriter类" class="headerlink" title="PrintWriter类"></a>PrintWriter类</h3><p>java.io.PrintWriter类主要用于将对象的格式化形式打印到文本输出流。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>PrintWriter(Writer out)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>void print(String s)</td>
<td>将参数指定的字符串内容打印出来</td>
</tr>
<tr>
<td>void println(String x)</td>
<td>打印字符串后并终止该行</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新流</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<ul>
<li>案例题目<br>不断地提示用户输入要发送的内容，若发送的内容是”bye”则聊天结束，否则将用户输入的内容写入到文件d:/a.txt中。<br>要求使用PrintStream类负责将数据写入文件 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintWriter pw = <span class="keyword">null</span>;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> who = <span class="keyword">true</span>;</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;d:/aaa/c.txt&quot;</span>, <span class="keyword">true</span>)); <span class="comment">//追加模式</span></span><br><span class="line">    <span class="comment">//聊天开始</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请&quot;</span> + (who?<span class="string">&quot;张三&quot;</span>:<span class="string">&quot;李四&quot;</span>) + <span class="string">&quot;输入聊天内容：&quot;</span>);</span><br><span class="line">        s = sc.next();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(s))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;聊天结束！&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Date d = <span class="keyword">new</span> Date();</span><br><span class="line">        pw.println(sdf.format(d) + (who?<span class="string">&quot;张三&quot;</span>:<span class="string">&quot;李四&quot;</span>) + <span class="string">&quot;说：&quot;</span> + s);</span><br><span class="line">        who = !who;</span><br><span class="line">    &#125;</span><br><span class="line">    pw.println();</span><br><span class="line">    pw.println();</span><br><span class="line">    pw.println();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != pw)&#123;</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="OutputStreamWriter类"><a href="#OutputStreamWriter类" class="headerlink" title="OutputStreamWriter类"></a>OutputStreamWriter类</h3><p>java.io.OutputStreamWriter类主要用于实现从字符流到字节流的转换。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>OutputStreamWriter(OutputStream out)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>OutputStreamWriter(OutputStream out, String charsetName)</td>
<td>根据参数指定的引用和编码构造对象</td>
</tr>
<tr>
<td>void write(String str)</td>
<td>将参数指定的字符串写入</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新流</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭输出流并释放有关的资源</td>
</tr>
</tbody></table>
<h3 id="InputStreamReader类"><a href="#InputStreamReader类" class="headerlink" title="InputStreamReader类"></a>InputStreamReader类</h3><p>java.io.InputStreamReader类主要用于实现从字节流到字符流的转换。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>InputStreamReader(InputStream in)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>InputStreamReader(InputStream in, String charsetName)</td>
<td>根据参数指定的引用和编码来构造对象</td>
</tr>
<tr>
<td>int read(char[] cbuf)</td>
<td>读取字符数据到参数指定的数组</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭输出流并释放有关的资源</td>
</tr>
</tbody></table>
<h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p><strong>由来</strong></p>
<p>计算机只能识别二进制数据，早期就是电信号。为了方便计算机可以识别各个国家的文字，就需要将各个国家的文字采用数字编号的方式进行描述并建立对应的关系表，该表就叫做编码表。</p>
<p><strong>常见字符编码</strong></p>
<ul>
<li>ASCII：美国标准信息交换码， 使用一个字节的低7位二位进制进行表示。 </li>
<li>ISO8859-1：拉丁码表，欧洲码表，使用一个字节的8位二进制进行表示。</li>
<li>GB2312：中国的中文编码表，最多使用两个字节16位二进制为进行表示。</li>
<li>GBK：中国的中文编码表升级，融合了更多的中文文字符号，最多使用两个字节16位二进制位表示。</li>
<li>Unicode：国际标准码，融合了目前人类使用的所有字符，为每个字符分配唯一的字符码。所有的文字都用两个字节16位二进制位来表示。</li>
</ul>
<p><strong>发展</strong></p>
<ul>
<li>面向传输的众多 UTF（UCS Transfer Format）标准出现了，UTF-8就是每次8个位传输数据，而<br>UTF-16就是每次16个位。这是为传输而设计的编码并使编码无国界，这样就可以显示全世界上所有文化的字符了。</li>
<li>Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯一确定的编号，具体存储成什么样的字节流，取决于字符编码方案。推荐的Unicode编码是UTF-8和UTF-16。</li>
<li>UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</li>
</ul>
<h3 id="DataOutputStream类"><a href="#DataOutputStream类" class="headerlink" title="DataOutputStream类"></a>DataOutputStream类</h3><p>java.io.DataOutputStream类主要用于以适当的方式将基本数据类型写入输出流中。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>DataOutputStream(OutputStream out)</td>
<td>根据参数指定的引用构造对象 OutputStream类是个抽象类，实参需要传递子类对象</td>
</tr>
<tr>
<td>void writeInt(int v)</td>
<td>用于将参数指定的整数一次性写入输出流，优先写入高字节</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭文件输出流并释放有关的资源</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:/aaa/d.txt&quot;</span>));</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">123</span>;</span><br><span class="line">    dos.writeInt(num);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != dos)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DataInputStream类"><a href="#DataInputStream类" class="headerlink" title="DataInputStream类"></a>DataInputStream类</h3><p>java.io.DataInputStream类主要用于从输入流中读取基本数据类型的数据。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>DataInputStream(InputStream in)</td>
<td>根据参数指定的引用来构造对象 InputStream类是抽象类，实参需要传递子类对象</td>
</tr>
<tr>
<td>int readInt()</td>
<td>用于从输入流中一次性读取一个整数数据并返回</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭文件输出流并释放有关的资源</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:/aaa/d.txt&quot;</span>));</span><br><span class="line">    <span class="keyword">int</span> result = dis.readInt();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != dis)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ObjectOutputStream类"><a href="#ObjectOutputStream类" class="headerlink" title="ObjectOutputStream类"></a>ObjectOutputStream类</h3><p>java.io.ObjectOutputStream类主要用于将一个对象的所有内容整体写入到输出流中。</p>
<ul>
<li>只能将支持 java.io.Serializable 接口的对象写入流中。</li>
<li>类通过实现 java.io.Serializable 接口以启用其序列化功能。</li>
<li>所谓<strong>序列化</strong>主要指将一个<strong>对象</strong>需要存储的相关信息有效组织成<strong>字节序列</strong>的转化过程。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>ObjectOutputStream(OutputStream out)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>void writeObject(Object obj)</td>
<td>用于将参数指定的对象整体写入到输出流中</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭输出流并释放有关的资源</td>
</tr>
</tbody></table>
<h3 id="ObjectInputStream类"><a href="#ObjectInputStream类" class="headerlink" title="ObjectInputStream类"></a>ObjectInputStream类</h3><p>java.io.ObjectInputStream类主要用于从输入流中一次性将对象整体读取出来。</p>
<p>所谓<strong>反序列化</strong>主要指将有效组织的<strong>字节序列</strong>恢复为一个<strong>对象</strong>及相关信息的转化过程。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>ObjectInputStream(InputStream in)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>Object readObject()</td>
<td>主要用于从输入流中读取一个对象并返回 无法通过返回值来判断是否读取到文件的末尾</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭输入流并释放有关的资源</td>
</tr>
</tbody></table>
<ul>
<li>案例：<br>自定义Person类，将Person的一个实例对象写入文件中，再从文件读取出来</li>
</ul>
<p>自定义Person类，需要实现Serializable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8693454448435568461L</span>;  <span class="comment">//提供一个版本号</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="comment">/*transient*/</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:/aaa/h.txt&quot;</span>));</span><br><span class="line">    oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;zhang&quot;</span>,<span class="number">18</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != oos)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:/aaa/h.txt&quot;</span>));</span><br><span class="line">    Object obj = ois.readObject();</span><br><span class="line">    System.out.println(obj);   <span class="comment">//结果：Person&#123;name=&#x27;zhang&#x27;, age=18&#125;</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != ois)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>补充</strong></p>
<p>（1）序列化版本号<br>序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。<br>在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，<br>如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常(InvalidCastException)。</p>
<p>（2）transient关键字<br>transient是Java语言的关键字，用来表示一个域不是该对象串行化的一部分。<br>当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。<br>（即被transient修饰的成员不进行序列化，也就是不保存。假设对Person中的age变量用transient修饰，则age变量不会被保存到文件中，读取的时候，age变量也是默认值0。）</p>
<p>（3）经验的分享<br>当希望将多个对象写入文件时，通常建议将多个对象放入一个集合中，<br>然后将集合这个整体看做一个对象写入输出流中，此时只需要调用一次readObject方法就可以将整个集合的数据读取出来，<br>从而避免了通过返回值进行是否达到文件末尾的判断。</p>
<h3 id="RandomAccessFile类"><a href="#RandomAccessFile类" class="headerlink" title="RandomAccessFile类"></a>RandomAccessFile类</h3><p>java.io.RandomAccessFile类主要支持对随机访问文件的读写操作。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>RandomAccessFile(String name, String mode)</td>
<td>根据参数指定的名称和模式构造对象，r: 以只读方式打开，rw：打开以便读取和写入，rwd:打开以便读取和写入，同步文件内容的更新，rws:打开以便读取和写入，同步文件内容和元数据的更新</td>
</tr>
<tr>
<td>int read()</td>
<td>读取单个字节的数据</td>
</tr>
<tr>
<td>void seek(long pos)</td>
<td>用于设置从此文件的开头开始测量的文件指针偏移量</td>
</tr>
<tr>
<td>void write(int b)</td>
<td>将参数指定的单个字节写入</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭流并释放有关的资源</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RandomAccessFile raf = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;d:/aaa/a.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    raf.seek(<span class="number">2</span>);   <span class="comment">//光标偏移两个位置</span></span><br><span class="line">    <span class="keyword">int</span> res = raf.read();</span><br><span class="line">    System.out.println((<span class="keyword">char</span>) res);</span><br><span class="line">    raf.write(<span class="string">&#x27;Q&#x27;</span>);   <span class="comment">//相当于改写，覆盖</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != raf)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            raf.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p><strong>程序和进程</strong></p>
<ul>
<li><p>程序：数据结构 + 算法，主要指存放在硬盘上的可执行文件。</p>
</li>
<li><p>进程：主要指运行在内存中的可执行文件。</p>
</li>
</ul>
<p>目前主流的操作系统都支持多进程，为了让操作系统同时可以执行多个任务，但进程是重量级的，也就是新建一个进程会消耗CPU和内存空间等系统资源，因此进程的数量比较局限。</p>
<p>  <strong>线程</strong></p>
<ul>
<li>为了解决上述问题就提出线程的概念，线程就是进程内部的程序流，也就是说操作系统内部支持多进程的，而每个进程的内部又是支持多线程的，线程是轻量的，新建线程会共享所在进程的系统资源，因此目前主流的开发都是采用多线程。</li>
<li>多线程是采用时间片轮转法来保证多个线程的并发执行，所谓并发就是指宏观并行微观串行的机制。</li>
</ul>
<h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><ul>
<li>java.lang.Thread类代表线程，任何线程对象都是Thread类（子类）的实例。</li>
<li>Thread类是线程的模板，封装了复杂的线程开启等操作，封装了操作系统的差异性。</li>
</ul>
<p><strong>相关方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Thread()</td>
<td>使用无参的方式构造对象</td>
</tr>
<tr>
<td>Thread(String name)</td>
<td>根据参数指定的名称来构造对象</td>
</tr>
<tr>
<td>Thread(Runnable target)</td>
<td>根据参数指定的引用来构造对象，其中Runnable是个接口类型</td>
</tr>
<tr>
<td>Thread(Runnable target, String name)</td>
<td>根据参数指定引用和名称来构造对象</td>
</tr>
<tr>
<td>void run()</td>
<td>若使用Runnable引用构造了线程对象，调用该方法时最终调用接口中的版本若没有使用Runnable引用构造线程对象，调用该方法时则啥也不做</td>
</tr>
<tr>
<td>void start()</td>
<td>用于启动线程，Java虚拟机会自动调用该线程的run方法</td>
</tr>
</tbody></table>
<p><strong>创建线程方法</strong></p>
<ul>
<li>自定义类继承Thread类并重写run方法，然后创建该类的对象调用start方法。</li>
<li>自定义类实现Runnable接口并重写run方法，创建该类的对象作为实参来构造Thread类型的对象，然后使用Thread类型的对象调用start方法。</li>
</ul>
<p>继承Thread类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">100</span>; i+=<span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ThreadTest tt = <span class="keyword">new</span> ThreadTest();</span><br><span class="line">    <span class="comment">//直接调用run()方法，和普通的方法一样，应该调用start()方法，才会启动线程。</span></span><br><span class="line">    <span class="comment">//rt.run();   </span></span><br><span class="line">    tt.start();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i+=<span class="number">2</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---主线程&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现Runnable接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">100</span>; i+=<span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RunnableTest rt = <span class="keyword">new</span> RunnableTest();</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(rt);</span><br><span class="line">    t.start();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i+=<span class="number">2</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---主线程&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行流程</strong></p>
<ul>
<li>执行main方法的线程叫做主线程，执行run方法的线程叫做新线程/子线程。</li>
<li>main方法是程序的入口，对于start方法之前的代码来说，由主线程执行一次，当start方法调用成功后线程的个数由1个变成了2个，新启动的线程去执行run方法的代码，主线程继续向下执行，两个线程各自独立运行互不影响。</li>
<li>当run方法执行完毕后子线程结束，当main方法执行完毕后主线程结束。</li>
<li>两个线程执行没有明确的先后执行次序，由操作系统调度算法来决定。</li>
</ul>
<p><strong>两种创建方式的比较</strong></p>
<p>继承Thread类的方式代码简单，但是若该类继承Thread类后则无法继承其它类，<br>而实现Runnable接口的方式代码复杂，但不影响该类继承其它类以及实现其它接口，<br>因此以后的开发中推荐使用第二种方式。</p>
<p><strong>匿名内部类的方式创建</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1,继承Thread方式，的匿名内部类</span></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    t1.start();</span><br><span class="line">    <span class="comment">//简化写法</span></span><br><span class="line">    <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2,实现Runnable接口的，匿名内部类</span></span><br><span class="line">    Runnable r1  = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(r1);</span><br><span class="line">    t2.start();</span><br><span class="line">    <span class="comment">//lambda表达式</span></span><br><span class="line">    Runnable r2 = () -&gt; &#123;System.out.println(<span class="string">&quot;子线程4&quot;</span>);&#125;;</span><br><span class="line">    Thread t3 = <span class="keyword">new</span> Thread(r2);</span><br><span class="line">    t3.start();</span><br><span class="line">    <span class="comment">//再简化写法</span></span><br><span class="line">    <span class="keyword">new</span> Thread( () -&gt; &#123;System.out.println(<span class="string">&quot;子线程5&quot;</span>);&#125; ).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><p><a href="https://imgtu.com/i/HSA0TP"><img src="https://s4.ax1x.com/2022/01/29/HSA0TP.png" alt="HSA0TP.png"></a></p>
<ul>
<li>新建状态：使用new关键字创建之后进入的状态，此时线程并没有开始执行。</li>
<li>就绪状态：调用start方法后进入的状态，此时线程还是没有开始执行。</li>
<li>运行状态：使用线程调度器调用该线程后进入的状态，此时线程开始执行，当线程的时间片执行完毕但任务没有完成时回到就绪状态</li>
<li>消亡状态：当线程的任务执行完成后进入的状态，此时线程已经终止。</li>
<li>阻塞状态：当线程执行的过程中发生了阻塞事件进入的状态，如：sleep方法。<br>阻塞状态解除后进入就绪状态。</li>
</ul>
<h3 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h3><p><strong>线程的编号和名称</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>long getId()</td>
<td>获取调用对象所表示线程的编号</td>
</tr>
<tr>
<td>String getName()</td>
<td>获取调用对象所表示线程的名称</td>
</tr>
<tr>
<td>void setName(String name)</td>
<td>设置/修改线程的名称为参数指定的数值</td>
</tr>
<tr>
<td>static Thread currentThread()</td>
<td>获取当前正在执行线程的引用</td>
</tr>
</tbody></table>
<ul>
<li>案例题目<br>自定义线程类，在run方法中先打印当前线程的编号和名称，然后将线程的名称修改为”zhangfei”后再次打印编号和名称。<br>要求在main方法中也要打印主线程的编号和名称。</li>
</ul>
<p>继承Thread类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test1</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);     <span class="comment">//Thread(String name)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程，编号：&quot;</span> + getId() + <span class="string">&quot;，名称：&quot;</span> + getName());</span><br><span class="line">        setName(<span class="string">&quot;zhangfei&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程，编号：&quot;</span> + getId() + <span class="string">&quot;，名称：&quot;</span> + getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Test1 t = <span class="keyword">new</span> Test1(<span class="string">&quot;guanyu&quot;</span>);  <span class="comment">//设定线程名称，</span></span><br><span class="line">    t.start();</span><br><span class="line"></span><br><span class="line">    Thread t1 = Thread.currentThread();</span><br><span class="line">    System.out.println(<span class="string">&quot;---主线程，编号：&quot;</span> + t1.getId() + <span class="string">&quot;，名称&quot;</span> + t1.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现Runnable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();  <span class="comment">//需要获取当前线程</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子线程，编号&quot;</span> + t.getId() + <span class="string">&quot;，名称：&quot;</span> + t.getName());</span><br><span class="line">        t.setName(<span class="string">&quot;zhangfei&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程，编号&quot;</span> + t.getId() + <span class="string">&quot;，名称：&quot;</span> + t.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Test2 t2 = <span class="keyword">new</span> Test2();</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(t2, <span class="string">&quot;guanyu&quot;</span>);</span><br><span class="line">    t.start();</span><br><span class="line"></span><br><span class="line">    Thread t1 = Thread.currentThread();</span><br><span class="line">    System.out.println(<span class="string">&quot;---主线程，编号&quot;</span> + t1.getId() + <span class="string">&quot;，名称：&quot;</span> + t1.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其他方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>static void yield()</td>
<td>当前线程让出处理器（离开Running状态），使当前线程进入Runnable 状态等待</td>
</tr>
<tr>
<td>static void sleep(times)</td>
<td>使当前线程从 Running 放弃处理器进入Block状态, 休眠times毫秒, 再返回到Runnable如果其他线程打断当前线程的Block(sleep), 就会发生InterruptedException。</td>
</tr>
<tr>
<td>int getPriority()</td>
<td>获取线程的优先级</td>
</tr>
<tr>
<td>void setPriority(int newPriority)</td>
<td>修改线程的优先级。 优先级越高的线程不一定先执行，但该线程获取到时间片的机会会更多一些</td>
</tr>
<tr>
<td>void join()</td>
<td>等待该线程终止</td>
</tr>
<tr>
<td>void join(long millis)</td>
<td>等待参数指定的毫秒数</td>
</tr>
<tr>
<td>boolean isDaemon()</td>
<td>用于判断是否为守护线程</td>
</tr>
<tr>
<td>void setDaemon(boolean on)</td>
<td>用于设置线程为守护线程</td>
</tr>
</tbody></table>
<p><strong>sleep方法的使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            Date d1 = <span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">            System.out.println( sdf.format(d1) );  <span class="comment">//打印当前时间</span></span><br><span class="line">            <span class="comment">//休眠1秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Test3 t = <span class="keyword">new</span> Test3();</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="comment">//主线程等待5秒后结束子线程</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始等待。。&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        t.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>线程优先级管理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程优先级：&quot;</span> + getPriority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Test4 t = <span class="keyword">new</span> Test4();</span><br><span class="line">        <span class="comment">//设置优先级：1到10之间</span></span><br><span class="line">        <span class="comment">//Thread.MAX_PRIORITY(相当于10)</span></span><br><span class="line">        <span class="comment">//Thread.MIN_PRIORITY(相当于1)</span></span><br><span class="line">        <span class="comment">//Thread.NORM_PRIORITY(相当于5)</span></span><br><span class="line">        t.setPriority(<span class="number">10</span>);    <span class="comment">//优先级：1到10之间</span></span><br><span class="line">        t.start();</span><br><span class="line">        Thread  t1 = Thread.currentThread();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程优先级：&quot;</span> + t1.getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>线程的等待</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">        Test5 t = <span class="keyword">new</span> Test5();</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//当前线程（主线程）等待调用线程（子线程）结束，才继续执行下去。</span></span><br><span class="line">            t.join();</span><br><span class="line">            <span class="comment">//t.join(2000);  //最多等指定的毫秒数。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>守护线程</strong></p>
<p>守护线程会随着主线程的结束而结束，默认线程不是守护线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test6</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(isDaemon() ? <span class="string">&quot;是守护线程&quot;</span> : <span class="string">&quot;不是守护线程&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">        Test6 t = <span class="keyword">new</span> Test6();</span><br><span class="line">        <span class="comment">//子线程设为守护线程：随着主线程的结束而结束。</span></span><br><span class="line">        t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h3><ul>
<li>当多个线程同时访问同一种共享资源时，可能会造成数据的覆盖等不一致性问题，此时就需要对线程之间进行通信和协调，该机制就叫做线程的同步机制。</li>
<li>多个线程并发读写同一个临界资源时会发生线程并发安全问题。</li>
<li>异步操作:多线程并发的操作，各自独立运行。</li>
<li>同步操作:多线程串行的操作，先后执行的顺序。</li>
</ul>
<p><strong>问题的产生</strong></p>
<p>当两个线程同时对同一个账户进行取款时，导致最终的账户余额不合理。</p>
<p>引发原因：线程一执行取款时还没来得及将取款后的余额写入后台，线程二就已经开始取款。</p>
<p><strong>解决</strong></p>
<p>在Java语言中使用synchronized关键字来实现同步/对象锁机制从而保证线程执行的原子性，具体方式如下：</p>
<ul>
<li>使用同步代码块的方式实现部分代码的锁定，格式如下：<br>synchronized(类类型的引用) {<pre><code>      编写所有需要锁定的代码；
</code></pre>
 }  </li>
<li>使用同步方法的方式实现所有代码的锁定。<br>直接使用synchronized关键字来修饰整个方法即可该方式等价于:<br>synchronized(this) { 整个方法体的代码 }   </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> money;</span><br><span class="line">    <span class="keyword">private</span> Deom d = <span class="keyword">new</span> Deom();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span> <span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程：&quot;</span> + Thread.currentThread().getId() + <span class="string">&quot;启动中&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span>(d<span class="comment">/*this*/</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tem = money;</span><br><span class="line">            <span class="keyword">if</span>(tem&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;取款中。。 &quot;</span>);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                tem -= <span class="number">200</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            money = tem;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;卡内金额：&quot;</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deom</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Account a = <span class="keyword">new</span> Account(<span class="number">1000</span>);</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(a);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(a);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>静态方法是锁定</strong></p>
<p>当我们对一个静态方法加锁，如:<br>public synchronized static void xxx(){….}<br>那么该方法锁的对象是类对象。每个类都有唯一的一个类对象。获取类对象的方式:类名.class。</p>
<p>静态方法与非静态方法同时使用了synchronized后它们之间是非互斥关系的。<br>原因在于：静态方法锁的是类对象而非静态方法锁的是当前方法所属对象。</p>
<p><strong>注意事项</strong></p>
<p>使用synchronized保证线程同步应当注意: 多个需要同步的线程在访问同步块时，看到的应该是同一个锁对象引用。<br>在使用同步块时应当尽量减少同步范围以提高并发的执行效率。</p>
<p><strong>线程安全和线程不安全</strong></p>
<p>线程安全就是有了锁住代码的特点，串行的操作，虽然变安全了，但是效率降低。</p>
<ul>
<li>StringBuffer类是线程安全的类，但StringBuilder类不是线程安全的类。</li>
<li>Vector类和 Hashtable类是线程安全的类，但ArrayList类和HashMap类不是线程安全的类。</li>
<li>Collections.synchronizedList() 和 Collections.synchronizedMap()等方法实现安全。</li>
</ul>
<p><strong>死锁的概念</strong></p>
<ul>
<li>线程一执行的代码：<br>public void run(){<pre><code>synchronized(a)&#123;    //持有对象锁a，等待对象锁b
   synchronized(b)&#123;
       编写锁定的代码;
   &#125;
&#125;
</code></pre>
}</li>
<li>线程二执行的代码：<br>public void run(){<pre><code>synchronized(b)&#123;    //持有对象锁b，等待对象锁a
   synchronized(a)&#123;
       编写锁定的代码;
   &#125;
&#125;
</code></pre>
}</li>
</ul>
<p>注意：在以后的开发中尽量减少同步的资源，减少同步代码块的嵌套结构的使用！</p>
<p><strong>使用Lock锁实现线程同步</strong></p>
<ul>
<li>从Java5开始提供了更强大的线程同步机制—使用显式定义的同步锁对象来实现。</li>
<li>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。</li>
<li>该接口的主要实现类是ReentrantLock类，该类拥有与synchronized相同的并发性，在以后的线程安全控制中，经常使用ReentrantLock类显式加锁和释放锁。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>ReentrantLock()</td>
<td>使用无参方式构造对象</td>
</tr>
<tr>
<td>void lock()</td>
<td>获取锁</td>
</tr>
<tr>
<td>void unlock()</td>
<td>释放锁</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account3</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> money;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();  <span class="comment">//获取Lock锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account3</span> <span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程：&quot;</span> + Thread.currentThread().getId() + <span class="string">&quot;启动中&quot;</span>);</span><br><span class="line">        <span class="comment">//上锁</span></span><br><span class="line">        lock.lock();   </span><br><span class="line">        <span class="keyword">int</span> tem = money;</span><br><span class="line">        <span class="keyword">if</span>(tem&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;取款中。。 &quot;</span>);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            tem -= <span class="number">200</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        money = tem;</span><br><span class="line">        <span class="comment">//解锁</span></span><br><span class="line">        lock.unlock();   </span><br><span class="line">        System.out.println(<span class="string">&quot;卡内金额：&quot;</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Lock锁与synchronized方式的比较</strong></p>
<ul>
<li>Lock是显式锁，需要手动实现开启和关闭操作，而synchronized是隐式锁，执行锁定代码后自动释放。</li>
<li>Lock只有同步代码块方式的锁，而synchronized有同步代码块方式和同步方法两种锁。</li>
</ul>
<p>使用Lock锁方式时，Java虚拟机将花费较少的时间来调度线程，因此性能更好。</p>
<h3 id="线程之间的通信"><a href="#线程之间的通信" class="headerlink" title="线程之间的通信"></a>线程之间的通信</h3><p><strong>Object的常用方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void wait()</td>
<td>用于使得线程进入等待状态，直到其它线程调用notify()或notifyAll()方法</td>
</tr>
<tr>
<td>void wait(long timeout)</td>
<td>用于进入等待状态，直到其它线程调用方法或参数指定的毫秒数已经过去为止</td>
</tr>
<tr>
<td>void notify()</td>
<td>用于唤醒等待的单个线程</td>
</tr>
<tr>
<td>void notifyAll()</td>
<td>用于唤醒等待的所有线程</td>
</tr>
</tbody></table>
<ul>
<li>案例：<br>两个线程打印0到20，要求：有序的一人打印一下来。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;=<span class="number">20</span>) &#123;</span><br><span class="line">                    notify();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程&quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; : &quot;</span> + i);</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                        wait();   <span class="comment">//进入阻塞状态</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    notify();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test1 t = <span class="keyword">new</span> Test1();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生产者和消费者模型"><a href="#生产者和消费者模型" class="headerlink" title="生产者和消费者模型"></a>生产者和消费者模型</h3><p><a href="https://imgtu.com/i/HSKQPI"><img src="https://s4.ax1x.com/2022/01/29/HSKQPI.png" alt="HSKQPI.png"></a></p>
<p>生产者输入数据到仓库中，消费者从仓库中输出数据。<br>每次操作或访问仓库时应该锁住仓库。<br>当仓库满了，生产者应该停止生产。<br>当仓库空了，消费者应该停止消费。</p>
<p><strong>代码实现如下：</strong></p>
<p>仓库类StoreHouse</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreHouse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;  <span class="comment">//仓库存储量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">                notify();</span><br><span class="line">                <span class="keyword">if</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;生产者线程正在生产第&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">                notify();</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;消费者线程正在消费第&quot;</span> + i + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">                    i--;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生产者线程类ProduceThread</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProduceThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="comment">//声明一个仓库类型的引用作为成员变量，是为了能调用仓库类中的生产方法</span></span><br><span class="line">    <span class="comment">//合成复用原则</span></span><br><span class="line">    <span class="keyword">private</span> StoreHouse s;</span><br><span class="line">    <span class="comment">//为了确保两个线程公用用一个仓库</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProduceThread</span><span class="params">(StoreHouse s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        s.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消费者线程类ConsumerThread</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StoreHouse s;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsumerThread</span><span class="params">(StoreHouse s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        s.consumer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建仓库</span></span><br><span class="line">    StoreHouse sh = <span class="keyword">new</span> StoreHouse();</span><br><span class="line">    <span class="comment">//创建生产者线程</span></span><br><span class="line">    ProduceThread pt = <span class="keyword">new</span> ProduceThread(sh);</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(pt);</span><br><span class="line">    <span class="comment">//创建消费者线程</span></span><br><span class="line">    ConsumerThread ct = <span class="keyword">new</span> ConsumerThread(sh);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(ct);</span><br><span class="line">    <span class="comment">//开始模拟</span></span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Callable接口创建线程"><a href="#Callable接口创建线程" class="headerlink" title="Callable接口创建线程"></a>Callable接口创建线程</h3><p><strong>Callable接口</strong></p>
<p>从Java5开始新增加创建线程的第三种方式为实现java.util.concurrent.Callable接口。</p>
<p>线程实现Callable接口，重写call()方法，call()方法有返回值。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>V call()</td>
<td>计算结果并返回</td>
</tr>
</tbody></table>
<p><strong>FutureTask类</strong></p>
<p>java.util.concurrent.FutureTask类用于描述可取消的异步计算，该类提供了Future接口的基本实现，包括启动和取消计算、查询计算是否完成以及检索计算结果的方法，也可以用于获取方法调用后的返回结果。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>FutureTask(Callable callable)</td>
<td>根据参数指定的引用来创建一个未来任务</td>
</tr>
<tr>
<td>V get()</td>
<td>获取call方法计算的结果</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    CallableTest c = <span class="keyword">new</span> CallableTest();</span><br><span class="line">    FutureTask ft = <span class="keyword">new</span> FutureTask(c);</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(ft);</span><br><span class="line">    t.start();</span><br><span class="line">    Object obj = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        obj = ft.get();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p><strong>由来</strong></p>
<ul>
<li>在服务器编程模型的原理，每一个客户端连接用一个单独的线程为之服务，当与客户端的会话结束时，线程也就结束了，即每来一个客户端连接，服务器端就要创建一个新线程。</li>
<li>如果访问服务器的客户端很多，那么服务器要不断地创建和销毁线程，这将严重影响服务器的性能。</li>
</ul>
<p><strong>原理</strong></p>
<ul>
<li>线程池的概念：首先创建一些线程，它们的集合称为线程池，当服务器接受到一个客户请求后，就从线程池中取出一个空闲的线程为之服务，服务完后不关闭该线程，而是将该线程还回到线程池中。</li>
<li>在线程池的编程模式下，任务是提交给整个线程池，而不是直接交给某个线程，线程池在拿到任务后，它就在内部找有无空闲的线程，再把任务交给内部某个空闲的线程，任务是提交给整个线程池，一个线程同时只能执行一个任务，但可以同时向一个线程池提交多个任务。</li>
</ul>
<p><strong>相关类和方法</strong></p>
<p>从Java5开始提供了线程池的相关类和接口：java.util.concurrent.Executors类和 java.util.concurrent.ExecutorService接口。</p>
<p>其中<strong>Executors</strong>是个工具类和线程池的工厂类，可以创建并返回不同类型的线程池，常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>static ExecutorService newCachedThreadPool()</td>
<td>创建一个可根据需要创建新线程的线程池</td>
</tr>
<tr>
<td>static ExecutorService newFixedThreadPool(int nThreads)</td>
<td>创建一个可重用固定线程数的线程池</td>
</tr>
<tr>
<td>static ExecutorService newSingleThreadExecutor()</td>
<td>创建一个只有一个线程的线程池</td>
</tr>
</tbody></table>
<p>其中<strong>ExecutorService</strong>接口是真正的线程池接口，主要实现类是ThreadPoolExecutor，常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void execute(Runnable command)</td>
<td>执行任务和命令，通常用于执行Runnable</td>
</tr>
<tr>
<td>Future submit(Callable task)</td>
<td>执行任务和命令，通常用于执行Callable</td>
</tr>
<tr>
<td>void shutdown()</td>
<td>启动有序关闭</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1，创建线程池</span></span><br><span class="line">    ExecutorService pool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//2，向线程池布置任务</span></span><br><span class="line">    Test1 t = <span class="keyword">new</span> Test1();</span><br><span class="line">    pool.execute(t);</span><br><span class="line">    pool.execute(t);</span><br><span class="line">    <span class="comment">//3，关闭线程池</span></span><br><span class="line">    pool.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="网络常识"><a href="#网络常识" class="headerlink" title="网络常识"></a>网络常识</h3><p><strong>七层网络模型</strong>：</p>
<ul>
<li>OSI（Open System Interconnect）即开放式系统互联，是ISO（国际标准化组织）在1985年研究的网络互联模型。</li>
<li>OSI七层模型和TCP/IP五层模型的划分如下：</li>
</ul>
<p><a href="https://imgtu.com/i/Hme9fK"><img src="https://s4.ax1x.com/2022/02/05/Hme9fK.png" alt="Hme9fK.png"></a></p>
<ul>
<li>当发送数据时，需要对发送的内容按照上述七层模型进行层层加包后发送出去。</li>
<li>当接收数据时，需要对接收的内容按照上述七层模型相反的次序层层拆包并显示出来。</li>
</ul>
<p><strong>相关协议</strong>：</p>
<p>计算机在网络中实现通信就必须有一些约定或者规则，这种约定和规则就叫做通信协议，通信协议可以对速率、传输代码、代码结构、传输控制步骤、出错控制等制定统一的标准。</p>
<p>（1）TCP协议</p>
<ul>
<li>传输控制协议(Transmission Control Protocol)，是一种面向连接的协议，类似于打电话。 </li>
<li>建立连接 =&gt; 进行通信 =&gt; 断开连接在传输前采用”三次握手”方式。</li>
<li>在通信的整个过程中全程保持连接，形成数据传输通道。</li>
<li>保证了数据传输的<strong>可靠性和有序性</strong>。</li>
</ul>
<p>是一种全双工的字节流通信方式，可以进行大数据量的传输。传输完毕后需要释放已建立的连接，发送数据的<strong>效率比较低</strong>。</p>
<p>（2）UDP协议</p>
<ul>
<li>用户数据报协议(User Datagram Protocol)，是一种非面向连接的协议，类似于写信。</li>
<li>在通信的整个过程中不需要保持连接，其实是不需要建立连接。</li>
<li><strong>不保证数据传输的可靠性和有序性。</strong></li>
<li>是一种全双工的数据报通信方式，每个数据报的大小限制在64K内。</li>
</ul>
<p>发送数据完毕后无需释放资源，开销小，发送数据的<strong>效率比较高，速度快</strong>。</p>
<p><strong>IP地址：</strong></p>
<ul>
<li><p>192.168.1.1  - 是绝大多数路由器的登录地址，主要配置用户名和密码以及Mac过滤。</p>
</li>
<li><p>IP地址是互联网中的唯一地址标识，本质上是由32位二进制组成的整数，叫做IPv4，当然也有128 位二进制组成的整数，叫做IPv6，目前主流的还是IPv4。</p>
</li>
<li><p>日常生活中采用点分十进制表示法来进行IP地址的描述，将每个字节的二进制转化为一个十进制整数，不同的整数之间采用小数点隔开。<br>  如：0x01020304 =&gt; 1.2.3.4   </p>
</li>
<li><p>查看IP地址的方式：<br>Windows系统：在dos窗口中使用ipconfig或ipconfig/all命令即可<br>Unix/linux系统：在终端窗口中使用ifconfig或/sbin/ifconfig命令即可   特殊的地址<br>本地回环地址(hostAddress)：127.0.0.1 主机名(hostName)：localhost</p>
</li>
</ul>
<p><strong>端口号：</strong></p>
<ul>
<li>IP地址 - 可以定位到具体某一台设备。</li>
<li>端口号 - 可以定位到该设备中具体某一个进程。</li>
<li>端口号本质上是16位二进制组成的整数，表示范围是：0 ~ 65535，其中0 ~ 1024之间的端口号通常被系统占用，建议编程从1025开始使用。</li>
<li>特殊的端口：<pre><code>HTTP:80       FTP:21       Oracle:1521       MySQL:3306       Tomcat:8080
</code></pre>
</li>
<li>网络编程需要提供：IP地址 + 端口号，组合在一起叫做网络套接字：Socket。</li>
</ul>
<h3 id="TCP协议的编程模型"><a href="#TCP协议的编程模型" class="headerlink" title="TCP协议的编程模型"></a>TCP协议的编程模型</h3><h4 id="C-S架构介绍"><a href="#C-S架构介绍" class="headerlink" title="C/S架构介绍"></a>C/S架构介绍</h4><ul>
<li>在C/S模式下客户向服务器发出服务请求，服务器接收请求后提供服务。</li>
<li>例如：在一个酒店中，顾客找服务员点菜,服务员把点菜单通知厨师，厨师按点菜单做好菜后让服务员端给客户，这就是一种C/S工作方式。如果把酒店看作一个系统，服务员就是客户端，厨师就是服务器。这种系统分工和协同工作的方式就是C/S的工作方式。</li>
<li>客户端部分：为每个用户所专有的，负责执行前台功能。</li>
<li>服务器部分：由多个用户共享的信息与功能，招待后台服务。</li>
</ul>
<h4 id="编程模型"><a href="#编程模型" class="headerlink" title="编程模型"></a>编程模型</h4><p>服务器：</p>
<ul>
<li>创建ServerSocket类型的对象并提供端口号；</li>
<li>等待客户端的连接请求，调用accept()方法；</li>
<li>使用输入输出流进行通信；</li>
<li>关闭Socket；</li>
</ul>
<p>客户端：</p>
<ul>
<li>创建Socket类型的对象并提供服务器的IP地址和端口号；</li>
<li>使用输入输出流进行通信；</li>
<li>关闭Socket；</li>
</ul>
<h4 id="相关类和方法"><a href="#相关类和方法" class="headerlink" title="相关类和方法"></a>相关类和方法</h4><p><strong>ServerSocket类</strong></p>
<p>java.net.ServerSocket类主要用于描述服务器套接字信息（大插排）。常用的方法如</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>ServerSocket(int port)</td>
<td>根据参数指定的端口号来构造对象</td>
</tr>
<tr>
<td>Socket accept()</td>
<td>侦听并接收到此套接字的连接请求</td>
</tr>
<tr>
<td>void   close()</td>
<td>用于关闭套接字</td>
</tr>
</tbody></table>
<p><strong>Socket类</strong></p>
<p>java.net.Socket类主要用于描述客户端套接字，是两台机器间通信的端点（小插排）。常用的方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Socket(String host, int port)</td>
<td>根据指定主机名和端口来构造对象</td>
</tr>
<tr>
<td>InputStream getInputStream()</td>
<td>用于获取当前套接字的输入流</td>
</tr>
<tr>
<td>OutputStream   getOutputStream()</td>
<td>用于获取当前套接字的输出流</td>
</tr>
<tr>
<td>void   close()</td>
<td>用于关闭套接字</td>
</tr>
</tbody></table>
<p><strong>注意事项</strong></p>
<ul>
<li>客户端 Socket 与服务器端 Socket 对应, 都包含输入和输出流。</li>
<li>客户端的socket.getInputStream() 连接于服务器socket.getOutputStream()。</li>
<li>客户端的socket.getOutputStream()连接于服务器socket.getInputStream()</li>
</ul>
<p>案例：<br>客户端可以发送消息给服务器，服务器接收后回复消息给客户端，直到客户端发送bye时，结束。</p>
<p>服务器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">        Socket s = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1，创建ServerSocket类型的对象并提供端口号；</span></span><br><span class="line">            ss = <span class="keyword">new</span> ServerSocket(<span class="number">3333</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2，等待客户端的连接请求，调用accept()方法；</span></span><br><span class="line">            System.out.println(<span class="string">&quot;等待客户端连接..&quot;</span>);</span><br><span class="line">            s = ss.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端连接成功!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3，使用输入输出流进行通信；</span></span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">            ps = <span class="keyword">new</span> PrintStream(s.getOutputStream());</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String s1 = br.readLine();</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到客户端的消息是：&quot;</span> + s1);</span><br><span class="line">                <span class="comment">//如果是bye，取消循环</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(s1)) <span class="keyword">break</span>;</span><br><span class="line">                ps.println(<span class="string">&quot;收到&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4，关闭Socket；</span></span><br><span class="line">            <span class="keyword">if</span>(ps != <span class="keyword">null</span>)&#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    s.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ss != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Socket s = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1, 创建Socket类型的对象并提供服务器的IP地址和端口号；</span></span><br><span class="line">            s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3333</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功连接服务器&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2, 使用输入输出流进行通信；</span></span><br><span class="line">            ps = <span class="keyword">new</span> PrintStream(s.getOutputStream());</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入内容：&quot;</span>);</span><br><span class="line">                String s1 = sc.next();</span><br><span class="line">                ps.println(s1);</span><br><span class="line">                <span class="comment">//如果是bye，取消循环</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(s1)) <span class="keyword">break</span>;</span><br><span class="line">                String s2 = br.readLine();</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到服务器的消息是：&quot;</span> + s2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//3, 关闭Socket；</span></span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ps != <span class="keyword">null</span>)&#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    s.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基于上面案例，利用多线程，服务器应该如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">        Socket s = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1，创建ServerSocket类型的对象并提供端口号；</span></span><br><span class="line">            ss = <span class="keyword">new</span> ServerSocket(<span class="number">3333</span>);</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">//2，等待客户端的连接请求，调用accept()方法；</span></span><br><span class="line">                System.out.println(<span class="string">&quot;等待客户端连接..&quot;</span>);</span><br><span class="line">                s = ss.accept();</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端连接成功!&quot;</span>);</span><br><span class="line">                <span class="comment">//启动线程</span></span><br><span class="line">                <span class="keyword">new</span> ServerThread(s).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//4，关闭Socket；</span></span><br><span class="line">            <span class="keyword">if</span>(s != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    s.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ss != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerThread</span><span class="params">(Socket s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//3，使用输入输出流进行通信；</span></span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">            ps = <span class="keyword">new</span> PrintStream(s.getOutputStream());</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String s1 = br.readLine();</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到客户端的消息是：&quot;</span> + s1 );</span><br><span class="line">                <span class="comment">//如果是bye，取消循环</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(s1)) <span class="keyword">break</span>;</span><br><span class="line">                ps.println(<span class="string">&quot;收到&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(ps != <span class="keyword">null</span>)&#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UDP协议的编程模型"><a href="#UDP协议的编程模型" class="headerlink" title="UDP协议的编程模型"></a>UDP协议的编程模型</h3><h4 id="编程模型-1"><a href="#编程模型-1" class="headerlink" title="编程模型"></a>编程模型</h4><p>接收方：</p>
<ul>
<li>创建DatagramSocket类型的对象并提供端口号；</li>
<li>创建DatagramPacket类型的对象并提供缓冲区；</li>
<li>通过Socket接收数据内容存放到Packet中，调用receive方法；</li>
<li>关闭Socket；</li>
</ul>
<p>发送方：</p>
<ul>
<li>创建DatagramSocket类型的对象；</li>
<li>创建DatagramPacket类型的对象并提供接收方的通信地址；</li>
<li>通过Socket将Packet中的数据内容发送出去，调用send方法；</li>
<li>关闭Socket；</li>
</ul>
<h4 id="相关类和方法-1"><a href="#相关类和方法-1" class="headerlink" title="相关类和方法"></a>相关类和方法</h4><p><strong>DatagramSocket</strong></p>
<p>java.net.DatagramSocket类主要用于描述发送和接收数据报的套接字(邮局)。换句话说，该类就是包裹投递服务的发送或接收点。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>DatagramSocket()</td>
<td>使用无参的方式构造对象</td>
</tr>
<tr>
<td>DatagramSocket(int port)</td>
<td>根据参数指定的端口号来构造对象</td>
</tr>
<tr>
<td>void   receive(DatagramPacket p)</td>
<td>用于接收数据报存放到参数指定的位置</td>
</tr>
<tr>
<td>void   send(DatagramPacket p)</td>
<td>用于将参数指定的数据报发送出去</td>
</tr>
<tr>
<td>void   close()</td>
<td>关闭Socket并释放相关资源</td>
</tr>
</tbody></table>
<p><strong>DatagramPacket</strong></p>
<p>java.net.DatagramPacket类主要用于描述数据报，数据报用来实现无连接包裹投递服务。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>DatagramPacket(byte[] buf, int length)</td>
<td>根据参数指定的数组来构造对象，用于接收长度为length的数据报</td>
</tr>
<tr>
<td>DatagramPacket(byte[] buf, int length, InetAddress address, int port)</td>
<td>根据参数指定数组来构造对象，将数据报发送到指定地址和端口</td>
</tr>
<tr>
<td>InetAddress   getAddress()</td>
<td>用于获取发送方或接收方的通信地址</td>
</tr>
<tr>
<td>int   getPort()</td>
<td>用于获取发送方或接收方的端口号</td>
</tr>
<tr>
<td>int   getLength()</td>
<td>用于获取发送数据或接收数据的长度</td>
</tr>
</tbody></table>
<p><strong>InetAddress类</strong></p>
<p>java.net.InetAddress类主要用于描述互联网通信地址信息。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>static InetAddress getLocalHost()</td>
<td>用于获取当前主机的通信地址</td>
</tr>
<tr>
<td>static InetAddress getByName(String host)</td>
<td>根据参数指定的主机名获取通信地址</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接收方</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1,创建DatagramSocket类型的对象并提供端口号；</span></span><br><span class="line">            ds = <span class="keyword">new</span> DatagramSocket(<span class="number">3333</span>);</span><br><span class="line">            <span class="comment">//2,创建DatagramPacket类型的对象并提供缓冲区；</span></span><br><span class="line">            System.out.println(<span class="string">&quot;等待接收数据。。&quot;</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] bArr1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            DatagramPacket dp1 = <span class="keyword">new</span> DatagramPacket(bArr1, bArr1.length);</span><br><span class="line">            <span class="comment">//3,通过Socket接收数据内容存放到Packet中，调用receive方法；</span></span><br><span class="line">            ds.receive(dp1);</span><br><span class="line">            System.out.println(<span class="string">&quot;接收的数据：&quot;</span> + <span class="keyword">new</span> String(bArr1, <span class="number">0</span>, dp1.getLength()));</span><br><span class="line">            <span class="comment">//回复数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] bArr2 = <span class="string">&quot;收到！&quot;</span>.getBytes();</span><br><span class="line">            DatagramPacket dp2 = <span class="keyword">new</span> DatagramPacket(bArr2, bArr2.length, dp1.getAddress(), dp1.getPort());</span><br><span class="line">            ds.send(dp2);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(SocketException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//4,关闭Socket；</span></span><br><span class="line">            <span class="keyword">if</span>(ds != <span class="keyword">null</span>)&#123;</span><br><span class="line">                ds.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送方</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1,创建DatagramSocket类型的对象；</span></span><br><span class="line">            ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">            <span class="comment">//2,创建DatagramPacket类型的对象并提供接收方的通信地址；</span></span><br><span class="line">            <span class="keyword">byte</span>[] bArr1 = <span class="string">&quot;hello&quot;</span>.getBytes();</span><br><span class="line">            DatagramPacket dp1 = <span class="keyword">new</span> DatagramPacket(bArr1, bArr1.length, InetAddress.getLocalHost(), <span class="number">3333</span>);</span><br><span class="line">            <span class="comment">//3,通过Socket将Packet中的数据内容发送出去，调用send方法；</span></span><br><span class="line">            ds.send(dp1);</span><br><span class="line">            System.out.println(<span class="string">&quot;发送数据成功！&quot;</span>);</span><br><span class="line">            <span class="comment">//接收回复</span></span><br><span class="line">            <span class="keyword">byte</span>[] bArr2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            DatagramPacket dp2 = <span class="keyword">new</span> DatagramPacket(bArr2, bArr2.length);</span><br><span class="line">            ds.receive(dp2);</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的内容是：&quot;</span> + <span class="keyword">new</span> String(bArr2, <span class="number">0</span>, dp2.getLength()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4,关闭Socket；</span></span><br><span class="line">            <span class="keyword">if</span>(ds != <span class="keyword">null</span>)&#123;</span><br><span class="line">                ds.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="URL类"><a href="#URL类" class="headerlink" title="URL类"></a>URL类</h3><ul>
<li>java.net.URL（Uniform Resource Identifier）类主要用于表示统一的资源定位器，也就是指向万维网上“资源”的指针。这个资源可以是简单的文件或目录，也可以是对复杂对象的引用，例如对数据库或搜索引擎的查询等。</li>
<li>通过URL可以访问万维网上的网络资源，最常见的就是www和ftp站点，浏览器通过解析给定的</li>
<li>URL可以在网络上查找相应的资源。<br>URL的基本结构如下：<br>&lt;传输协议&gt;://&lt;主机名&gt;:&lt;端口号&gt;/&lt;资源地址&gt;</li>
</ul>
<p>URL类的相关方法：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>URL(String spec)</td>
<td>根据参数指定的字符串信息构造对象</td>
</tr>
<tr>
<td>String getProtocol()</td>
<td>获取协议名称</td>
</tr>
<tr>
<td>String getHost()</td>
<td>获取主机名称</td>
</tr>
<tr>
<td>int getPort()</td>
<td>获取端口号</td>
</tr>
<tr>
<td>String getPath()</td>
<td>获取路径信息</td>
</tr>
<tr>
<td>String getFile()</td>
<td>获取文件名</td>
</tr>
<tr>
<td>URLConnection openConnection()</td>
<td>获取URLConnection类的实例</td>
</tr>
</tbody></table>
<p><strong>URLConnection类</strong></p>
<p>java.net.URLConnection类是个抽象类，该类表示应用程序和URL之间的通信链接的所有类的超类，主要实现类有支持HTTP特有功能的HttpURLConnection类。</p>
<p><strong>HttpURLConnection类的常用方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>InputStream getInputStream()</td>
<td>获取输入流</td>
</tr>
<tr>
<td>void disconnect()</td>
<td>断开连接</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        URL url = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            url = <span class="keyword">new</span> URL(<span class="string">&quot;https://www.lagou.com&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;url的协议是：&quot;</span> + url.getProtocol());</span><br><span class="line">        System.out.println(<span class="string">&quot;url的主机是：&quot;</span> + url.getHost());</span><br><span class="line">        System.out.println(<span class="string">&quot;url的端口号是：&quot;</span> + url.getPort());</span><br><span class="line">        System.out.println(<span class="string">&quot;url的路径信息是：&quot;</span> + url.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;url的文件名是：&quot;</span> + url.getFile());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HttpURLConnection con = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = (HttpURLConnection)url.openConnection();</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(con.getInputStream()));</span><br><span class="line">            String s;</span><br><span class="line">            <span class="keyword">while</span>((s = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            con.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><ul>
<li>通常情况下编写代码都是固定的，无论运行多少次执行的结果也是固定的，在某些特殊场合中编写代码时不确定要创建什么类型的对象，也不确定要调用什么样的方法，这些都希望通过运行时传递的参数来决定，该机制叫做动态编程技术，也就是反射机制。</li>
<li>通俗来说，反射机制就是用于动态创建对象并且动态调用方法的机制。</li>
<li>目前主流的框架底层都是采用反射机制实现的。</li>
<li>如：<br>Person p = new Person();  - 表示声明Person类型的引用指向Person类型的对象<br>p.show();                              - 表示调用Person类中的成员方法show</li>
</ul>
<h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><ul>
<li>java.lang.Class类的实例可以用于描述Java应用程序中的类和接口，也就是一种数据类型。</li>
<li>该类没有公共构造方法，该类的实例由Java虚拟机和类加载器自动构造完成，本质上就是加载到内存中的运行时类。</li>
</ul>
<p><strong>获取Class对象的方式</strong></p>
<ul>
<li>使用数据类型.class的方式可以获取对应类型的Class对象（掌握）。</li>
<li>使用引用/对象.getClass()的方式可以获取对应类型的Class对象。</li>
<li>使用包装类.TYPE的方式可以获取对应基本数据类型的Class对象。</li>
<li>使用Class.forName()的方式来获取参数指定类型的Class对象（掌握）。</li>
<li>使用类加载器ClassLoader的方式获取指定类型的Class对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">//1,使用数据类型.class的方式可以获取对应类型的Class对象（掌握）</span></span><br><span class="line">    Class c1 = <span class="keyword">int</span>.class;</span><br><span class="line">    System.out.println(<span class="string">&quot;c1 = &quot;</span>+ c1);    <span class="comment">//int</span></span><br><span class="line">    c1 = String.class;</span><br><span class="line">    System.out.println(<span class="string">&quot;c1 = &quot;</span> + c1);   <span class="comment">//class java.lang.String</span></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2,使用引用/对象.getClass()的方式可以获取对应类型的Class对象</span></span><br><span class="line">    String s = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    c1 = s.getClass();</span><br><span class="line">    System.out.println(<span class="string">&quot;c1 = &quot;</span> + c1);   <span class="comment">//class java.lang.String</span></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3,使用包装类.TYPE的方式可以获取对应基本数据类型的Class对象</span></span><br><span class="line">    c1 = Integer.TYPE;</span><br><span class="line">    System.out.println(<span class="string">&quot;c1 = &quot;</span> + c1);    <span class="comment">//int</span></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//4,使用Class.forName()的方式来获取参数指定类型的Class对象（掌握）。</span></span><br><span class="line">    c1 = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;c1 = &quot;</span> + c1);</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//5,使用类加载器ClassLoader的方式获取指定类型的Class对象。</span></span><br><span class="line">    ClassLoader classLoader = ClassTest.class.getClassLoader();</span><br><span class="line">    c1 = classLoader.loadClass(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;c1 = &quot;</span> + c1);    <span class="comment">//class java.lang.String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>static Class&lt;?&gt; forName(String className)</td>
<td>用于获取参数指定类型对应的Class对象并返回</td>
</tr>
<tr>
<td>T newInstance()</td>
<td>用于创建该Class对象所表示类的新实例，过时</td>
</tr>
</tbody></table>
<h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><p>java.lang.reflect.Constructor类主要用于描述获取到的构造方法信息</p>
<p><strong>Class方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Constructor getConstructor(Class&lt;?&gt;…parameterTypes)</td>
<td>用于获取此Class对象所表示类型中参数指定的公共构造方法</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getConstructors()</td>
<td>用于获取此Class对象所表示类型中所有的公共构造方法</td>
</tr>
</tbody></table>
<p><strong>Constructor方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>T newInstance(Object…initargs)</td>
<td>使用此Constructor对象描述的构造方法来构造Class对象代表类型的新实例</td>
</tr>
<tr>
<td>int getModifiers()</td>
<td>获取方法的访问修饰符</td>
</tr>
<tr>
<td>String getName()</td>
<td>获取方法的名称</td>
</tr>
<tr>
<td>Class&lt;?&gt;[] getParameterTypes()</td>
<td>获取方法所有参数的类型</td>
</tr>
</tbody></table>
<p>获取单个构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  <span class="comment">//测试阶段暂时抛出异常给jvm</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//常规使用构造方法，即创建对象</span></span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;zhangfei&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用反射机制调用构造方法，创建对象</span></span><br><span class="line">    Class c1 = Class.forName(<span class="string">&quot;org.de3.Test_11.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取无参构造方法,并创建对象</span></span><br><span class="line">    Constructor&lt;Person&gt; constructor1 = c1.getConstructor();</span><br><span class="line">    Person p3 = constructor1.newInstance();</span><br><span class="line">    <span class="comment">//获取有参构造方法,并创建对象</span></span><br><span class="line">    Constructor&lt;Person&gt; constructor2 = c1.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">    Person p4 = constructor2.newInstance(<span class="string">&quot;zhangfei&quot;</span>, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取所有构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入类名称：&quot;</span>);</span><br><span class="line">    String s = sc.next();</span><br><span class="line">    Class c1 = Class.forName(s);</span><br><span class="line">    <span class="comment">//获取所有构造方法</span></span><br><span class="line">    Constructor[] constructors = c1.getConstructors();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Constructor constructor : constructors)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法的访问修饰符是：&quot;</span> + constructor.getModifiers());</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法的名称是：&quot;</span> + constructor.getName());</span><br><span class="line">        System.out.print(<span class="string">&quot;构造方法的参数类型是：&quot;</span>);</span><br><span class="line">        Class[] cArr = constructor.getParameterTypes();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Class c: cArr)&#123;</span><br><span class="line">            System.out.print(c+ <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n======================================\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h3><p>java.lang.reflect.Field类主要用于描述获取到的单个成员变量信息。</p>
<p><strong>Class方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Field getDeclaredField(String name)</td>
<td>用于获取此Class对象所表示类中参数指定的单个成员变量信息</td>
</tr>
<tr>
<td>Field[] getDeclaredFields()</td>
<td>用于获取此Class对象所表示类中所有成员变量信息</td>
</tr>
</tbody></table>
<p><strong>Field方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Object get(Object obj)</td>
<td>获取参数对象obj中此Field对象所表示成员变量的数值</td>
</tr>
<tr>
<td>void set(Object obj, Object value)</td>
<td>将参数对象obj中此Field对象表示成员变量的数值修改为参数 value的数值</td>
</tr>
<tr>
<td>void setAccessible(boolean flag)</td>
<td>当实参传递true时，则反射对象在使用时应该取消 Java 语言访问检查</td>
</tr>
<tr>
<td>int getModifiers()</td>
<td>获取成员变量的访问修饰符</td>
</tr>
<tr>
<td>Class&lt;?&gt; getType()</td>
<td>获取成员变量的数据类型</td>
</tr>
<tr>
<td>String getName()</td>
<td>获取成员变量的名称</td>
</tr>
</tbody></table>
<p>获取单个成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//常规访问成员变量</span></span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>);</span><br><span class="line">    System.out.println(p1.name);</span><br><span class="line">    p1.name = <span class="string">&quot;guanyu&quot;</span>;</span><br><span class="line">    System.out.println(p1.name);</span><br><span class="line">    System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用反射访问成员变量</span></span><br><span class="line">    Class c1 = Class.forName(<span class="string">&quot;org.de3.Test_11.Person&quot;</span>);</span><br><span class="line">    <span class="comment">//创建实例对象p2</span></span><br><span class="line">    Constructor&lt;Person&gt; constructor = c1.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">    Person p2 = constructor.newInstance(<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取成员变量Field，即name</span></span><br><span class="line">    Field field = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);   <span class="comment">//是否取消检测访问权限，即可以访问private的成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印对象p2的成员变量field，即name</span></span><br><span class="line">    System.out.println( field.get(p2) );  <span class="comment">//zhang</span></span><br><span class="line">    <span class="comment">//修改对象p2的成员变量field，即name</span></span><br><span class="line">    field.set(p2, <span class="string">&quot;guanyu&quot;</span>);</span><br><span class="line">    System.out.println( field.get(p2) );  <span class="comment">//guanyu</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取所有成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    Class c1 = Class.forName(<span class="string">&quot;org.de3.Test_11.Person&quot;</span>);</span><br><span class="line">    Field[] fArr = c1.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Field field: fArr)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;成员变量的访问权限是：&quot;</span> + field.getModifiers());</span><br><span class="line">        System.out.println(<span class="string">&quot;成员变量的数据类型是：&quot;</span> + field.getType());</span><br><span class="line">        System.out.println(<span class="string">&quot;成员变量的名称是：&quot;</span> + field.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=======================================\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h3><p>java.lang.reflect.Method类主要用于描述获取到的单个成员方法信息。</p>
<p><strong>Class方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td>用于获取该Class对象表示类中名字为name参数为 parameterTypes的指定公共成员方法</td>
</tr>
<tr>
<td>Method[] getMethods()</td>
<td>用于获取该Class对象表示类中所有公共成员方法</td>
</tr>
</tbody></table>
<p><strong>Method方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Object invoke(Object obj, Object… args)</td>
<td>使用对象obj来调用此Method对象所表示的成员方法，实参传递args</td>
</tr>
<tr>
<td>int getModifiers()</td>
<td>获取方法的访问修饰符</td>
</tr>
<tr>
<td>Class&lt;?&gt; getReturnType()</td>
<td>获取方法的返回值类型</td>
</tr>
<tr>
<td>String getName()</td>
<td>获取方法的名称</td>
</tr>
<tr>
<td>Class&lt;?&gt;[] getParameterTypes()</td>
<td>获取方法所有参数的类型</td>
</tr>
<tr>
<td>Class&lt;?&gt;[] getExceptionTypes()</td>
<td>获取方法的异常信息</td>
</tr>
</tbody></table>
<p>获取单个成员方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//常规调用成员方法</span></span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>);</span><br><span class="line">    p1.show(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用反射机制调用成员方法</span></span><br><span class="line">    Class c1 = Class.forName(<span class="string">&quot;org.de3.Test_11.Person&quot;</span>);</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    Constructor&lt;Person&gt; constructor =  c1.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">    Person p2 = constructor.newInstance(<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="comment">//获取成员方法method， 即show()</span></span><br><span class="line">    Method method = c1.getMethod(<span class="string">&quot;show&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">    <span class="comment">//调用对象p2的成员方法method,即show();</span></span><br><span class="line">    method.invoke(p2, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取所有成员方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    Class c1 = Class.forName(<span class="string">&quot;org.de3.Test_11.Person&quot;</span>);</span><br><span class="line">    Method[] methods = c1.getMethods();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Method method: methods)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;成员方法的修饰符是：&quot;</span> + method.getModifiers());</span><br><span class="line">        System.out.println(<span class="string">&quot;成员方法的返回值类型是：&quot;</span> + method.getReturnType());</span><br><span class="line">        System.out.println(<span class="string">&quot;成员方法的名称是：&quot;</span> + method.getName());</span><br><span class="line">        System.out.print(<span class="string">&quot;成员方法的参数类型是： &quot;</span>);</span><br><span class="line">        Class[] cArr = method.getParameterTypes();</span><br><span class="line">        <span class="keyword">for</span>(Class c: cArr)&#123;</span><br><span class="line">            System.out.print(c + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;成员方法的异常类型是： &quot;</span>);</span><br><span class="line">        Class[] cArr2 = method.getExceptionTypes();</span><br><span class="line">        <span class="keyword">for</span>(Class c: cArr2)&#123;</span><br><span class="line">            System.out.print(c + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n==================================\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他结构信息"><a href="#其他结构信息" class="headerlink" title="其他结构信息"></a>其他结构信息</h3><p><strong>Class方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Package getPackage()</td>
<td>获取所在的包信息</td>
</tr>
<tr>
<td>Class&lt;? super T&gt; getSuperclass()</td>
<td>获取继承的父类信息</td>
</tr>
<tr>
<td>Class&lt;?&gt;[] getInterfaces()</td>
<td>获取实现的所有接口</td>
</tr>
<tr>
<td>Annotation[] getAnnotations()</td>
<td>获取注解信息</td>
</tr>
<tr>
<td>Type[] getGenericInterfaces()</td>
<td>获取泛型信息</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    Class c1 = Class.forName(<span class="string">&quot;org.de3.Test_11.Person&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;类的包信息：&quot;</span> + c1.getPackage());</span><br><span class="line">    System.out.println(<span class="string">&quot;类的父类：&quot;</span> + c1.getSuperclass());</span><br><span class="line">    System.out.println(<span class="string">&quot;类的接口：&quot;</span> + c1.getInterfaces());</span><br><span class="line">    System.out.println(<span class="string">&quot;类的注解：&quot;</span> + c1.getAnnotations());</span><br><span class="line">    System.out.println(<span class="string">&quot;类的泛型：&quot;</span> + c1.getGenericInterfaces());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p><strong>代理模式：</strong></p>
<p>当一个对象不能直接使用，可以在客户和目标中间直接创建一个中介，这个中介就是代理。</p>
<p>例：<br>    A类不能直接访问C类，可创建B类为中介，<br>    A类访问B类，B类访问C类，<br>    A类是客户，B类是代理，C类是目标。</p>
<p><strong>作用：</strong></p>
<ul>
<li>控制访问，在代理中，控制是否可以调用目标对象的方法。</li>
<li>功能增强，可以在完成目标方法的调用时，附加一些额外的功能。</li>
</ul>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>代理类是手工实现的java文件，代理的目标对象是固定的</p>
<p><strong>优点</strong>：容易理解，使用方便</p>
<p><strong>缺点</strong>：在目标类比较多时，会产生大量的代理类。</p>
<p>案例：<br>某人到商家买U盘，商家到厂家买U盘。某人是客户，商家是代理，厂家是目标。</p>
<p>销售U盘的接口UsbCell</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsbCell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">cell</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目标类：厂家，UsbFactory1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsbFactory1</span> <span class="keyword">implements</span> <span class="title">UsbCell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cell</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标类中的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">85.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理类：商家，TaoBao1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaoBao1</span> <span class="keyword">implements</span> <span class="title">UsbCell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UsbFactory1 factory = <span class="keyword">new</span> UsbFactory1();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cell</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1，访问目标类方法</span></span><br><span class="line">        <span class="keyword">float</span> price = factory.cell(num);</span><br><span class="line">        <span class="comment">//2，功能增强</span></span><br><span class="line">        price = price + <span class="number">30</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;送一张优惠券！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试，客户买U盘</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TaoBao1 taoBao = <span class="keyword">new</span> TaoBao1();</span><br><span class="line">        <span class="keyword">float</span> price = taoBao.cell(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Usb的价格是：&quot;</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动态代理-1"><a href="#动态代理-1" class="headerlink" title="动态代理"></a>动态代理</h3><p>使用反射机制，在程序执行中，创建代理类对象。</p>
<p>特点：不用创建类文件，代理的目标类是活动的，可设置的</p>
<p><strong>动态代理的实现</strong></p>
<p>jdk动态代理：使用java.lang.reflect包里的三个类：</p>
<p>InvocationHandler，Method， Proxy</p>
<p><strong>InvocationHandler</strong>接口（调用处理器）：接口中就一个invoke()方法，</p>
<ul>
<li>invoke()：表示代理对象要执行的功能代码。代理类要完成的功能就写在invoke方法中。</li>
<li>代理类完成的功能：调用目标类方法，功能增强</li>
</ul>
<p>方法原型：</p>
<p>public Object invoke(Object proxy, Method method, Object[] args)</p>
<p>参数：<br>Object proxy：jdk创建的代理对象，无需赋值<br>Method method：目标类中的方法，jdk提供method对象<br>Object[] args：目标类中的方法的参数</p>
<p>用法：</p>
<p>创建类实现InvocationHandler接口，重写invoke()方法，把代理内容写invoke()方法中。</p>
<p><strong>Proxy</strong>类：中有静态方法 newProxyInstance()，创建代理对象</p>
<p>方法原型：</p>
<p>public static Object newProxyInstance（ClassLoader loader，Class&lt;&gt;[] interfaces, InvocationHandler h）</p>
<p>参数：</p>
<p>ClassLoader loader：类加载器，<br>Class&lt;&gt;[] interfaces：类的接口，<br>InvocationHandler h：我们自己写的，代理类要完成的功能</p>
<p>返回值：就是代理对象</p>
<p><strong>实现动态代理步骤</strong></p>
<p>1，创建接口，定义目标类要完成的功能</p>
<p>2，创建目标类，并实现接口</p>
<p>3，创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能：<br>        调用目标方法，增强功能</p>
<p>4，使用Proxy类的静态方法newProxyInstance()，创建代理对象，并发返回值转化成接口类型</p>
<p>5，使用代理对象调用需要的方法。</p>
<p>案例：<br>以静态代理为例，编写动态代码：</p>
<p>销售U盘的接口：UsbCell</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsbCell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">cell</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目标类：厂家，UsbFactory1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsbFactory1</span> <span class="keyword">implements</span> <span class="title">UsbCell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cell</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标类中的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">85.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建InvocationHandler接口的实现类：重写invoke方法，写代理内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//目标类</span></span><br><span class="line">    <span class="keyword">private</span> UsbCell target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(UsbCell target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理的内容写在invoke方法中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o :代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method：需要执行的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects：参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] objects)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//1, 访问目标类的方法，</span></span><br><span class="line">        <span class="comment">// 动态，因为此时(方法method)，(目标类target)，(参数objects)都还没有确定</span></span><br><span class="line">        Object price = method.invoke(target, objects);</span><br><span class="line">        <span class="comment">//2, 功能增强</span></span><br><span class="line">        <span class="keyword">if</span>(price != <span class="keyword">null</span>)&#123;</span><br><span class="line">            Float f = (<span class="keyword">float</span>)price;</span><br><span class="line">            price = f + <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;赠送一张优惠券！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试，买U盘</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        UsbCell uc = <span class="keyword">new</span> UsbFactory1();</span><br><span class="line">        <span class="comment">//创建invocationHandler对象，目标类target确定为uc</span></span><br><span class="line">        MyInvocationHandler invocationHandler = <span class="keyword">new</span> MyInvocationHandler(uc);</span><br><span class="line">        <span class="comment">//创建动态代理对象</span></span><br><span class="line">        UsbCell proxy = (UsbCell)Proxy.newProxyInstance(uc.getClass().getClassLoader(),</span><br><span class="line">                uc.getClass().getInterfaces(),</span><br><span class="line">                invocationHandler);</span><br><span class="line">        <span class="comment">//方法method确定为cell, 参数objects确定为1</span></span><br><span class="line">        Object price = proxy.cell(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;价格为：&quot;</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>动态代理实际作用</strong></p>
<p>可以在不改变原来的目标方法功能的前提下，在代理中增强自己的功能代码。</p>
<p>比如：在项目中，有一个功能是其他人写好的，我可以使用。但是发现这个功能不能完全满足我的需求，需要增强自己的代码，就可以使用代理，在代理中访问目标类的方法，并且增加自己的代码(增强功能)。</p>
<p>例如：现有接口Hello如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>功能类GongNeng，实现了Hello接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GongNeng</span> <span class="keyword">implements</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在可以使用该GongNeng类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hello h1 = <span class="keyword">new</span> GongNeng();</span><br><span class="line">h1.print(<span class="string">&quot;abc&quot;</span>);  </span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="comment">//abc</span></span><br></pre></td></tr></table></figure>

<p>假如现在不满足我的需求，我需要在打印后，再打印字符串“bye”，可以添加代理：</p>
<p>创建InvocationHandler接口的实现类：重写invoke方法，写代理内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Hello target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Hello target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] objects)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//调用目标类方法</span></span><br><span class="line">        method.invoke(target, objects);</span><br><span class="line">        <span class="comment">//功能增强，增加自己的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Hello h2 = <span class="keyword">new</span> GongNeng();</span><br><span class="line">    MyInvocationHandler invocationHandler = <span class="keyword">new</span> MyInvocationHandler(h2);</span><br><span class="line">    Hello proxy = (Hello)Proxy.newProxyInstance( h2.getClass().getClassLoader(),</span><br><span class="line">                                                h2.getClass().getInterfaces(),</span><br><span class="line">                                                invocationHandler);</span><br><span class="line">    proxy.print(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="comment">//结果：</span></span><br><span class="line">    <span class="comment">//abc</span></span><br><span class="line">    <span class="comment">//bye</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="常用设计原则和设计模式"><a href="#常用设计原则和设计模式" class="headerlink" title="常用设计原则和设计模式"></a>常用设计原则和设计模式</h1><h2 id="常用设计原则"><a href="#常用设计原则" class="headerlink" title="常用设计原则"></a>常用设计原则</h2><p><strong>软件开发流程</strong></p>
<p>需求分析文档、概要设计文档、详细设计文档、编码和测试、安装和调试、维护和升级</p>
<p><strong>常用的设计原则</strong></p>
<ul>
<li>开闭原则（Open Close Principle）<br>对扩展开放对修改关闭，为了使程序的扩展性好，易于维护和升级。</li>
<li>里氏代换原则（Liskov Substitution Principle）<br>任何基类可以出现的地方，子类一定可以出现，多使用多态的方式。</li>
<li>依赖倒转原则（Dependence Inversion Principle）<br>尽量多依赖于抽象类或接口而不是具体实现类，对子类具有强制性和规范性</li>
<li>接口隔离原则（Interface Segregation Principle）<br>尽量多使用小接口而不是大接口，避免接口的污染，降低类之间耦合度。</li>
<li>迪米特法则（ 少知道原则）（Demeter Principle）<br>一个实体应当尽量少与其他实体之间发生相互作用，使系统功能模块相对独立。<br>高内聚，低耦合。</li>
<li>合成复用原则（Composite Reuse Principle）<br>尽量多使用合成/聚合的方式，而不是继承的方式。</li>
</ul>
<h2 id="常用设计模式"><a href="#常用设计模式" class="headerlink" title="常用设计模式"></a>常用设计模式</h2><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p>
<p>设计模式就是一种用于固定场合的固定套路。</p>
<p><strong>基本分类</strong></p>
<ul>
<li>创建型模式 ： 单例设计模式、工厂方法模式、抽象工厂模式、…</li>
<li>结构型模式 ： 装饰器模式、代理模式、…</li>
<li>行为型模式 ： 模板设计模式、…</li>
</ul>
<h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><p>主要分为：饿汉式 和 懒汉式，懒汉式需要对多线程进行同步处理。</p>
<p>饿汉式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2,创建本类类型的引用指向本类类型的对象，private static</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="comment">//1,私有化构造方法，private</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//3,提供共有的成员方法，将本类对象返回出去，public static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>懒汉式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2,创建本类类型的引用指向本类类型的对象，private static</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//1,私有化构造方法，private</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//3,提供共有的成员方法，将本类对象返回出去，public static。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的懒汉式会有线程不安全的情况，优化后如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2,创建本类类型的引用指向本类类型的对象，private static</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//1,私有化构造方法，private</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//3,提供共有的成员方法，将本类对象返回出去，public static。由于线程不安全原因，加上锁synchronized</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p><strong>普通工厂模式</strong></p>
<p> 普通工厂方法模式就是建立一个工厂类，对实现了同一接口的不同实现类进行实例的创建。</p>
<p><a href="https://imgtu.com/i/HgIISg"><img src="https://s4.ax1x.com/2022/02/15/HgIISg.png" alt="HgIISg.png"></a></p>
<p>某发送消息的接口Sender：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*public abstract */</span><span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口Sender的实现类MailSender：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;邮件发送消息。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口Sender的实现类SmsSender：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;短信发送消息。。。 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>普通工厂类SendFactory，专门用来创建Sender接口实现类的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;SmsSender&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;MailSender&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//正常创建对象</span></span><br><span class="line">    Sender s = <span class="keyword">new</span> SmsSender();</span><br><span class="line">    s.send();</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">    <span class="comment">//利用工厂类创建对象</span></span><br><span class="line">    SendFactory sf = <span class="keyword">new</span> SendFactory();</span><br><span class="line">    Sender s1 = sf.produce(<span class="string">&quot;SmsSender&quot;</span>);</span><br><span class="line">    s1.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>缺点</strong>：</p>
<p>在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，并且可能出现空指针异常。</p>
<p><strong>多个工厂方法模式</strong></p>
<p><a href="https://imgtu.com/i/HgHfBj"><img src="https://s4.ax1x.com/2022/02/15/HgHfBj.png" alt="HgHfBj.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>缺点</strong></p>
<p>在多个工厂方法模式中，为了能够正确创建对象，先需要创建工厂类的对象才能调用工厂类中的生产方法。</p>
<p><strong>静态工厂方法模式</strong></p>
<p><a href="https://imgtu.com/i/Hgb4MD"><img src="https://s4.ax1x.com/2022/02/15/Hgb4MD.png" alt="Hgb4MD.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>意义</strong>：</p>
<p>工厂方法模式适合：凡是出现了大量的产品需要创建且具有共同的接口时，可以通过工厂方法模式进行创建。</p>
<p><strong>缺点：</strong></p>
<p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序生产新的产品，就必须对工厂类的代码进行修改，这就违背了开闭原则。</p>
<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p><a href="https://imgtu.com/i/HgqolT"><img src="https://s4.ax1x.com/2022/02/15/HgqolT.png" alt="HgqolT.png"></a></p>
<p>创建对象的工厂类的接口Provider：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Sender工厂类的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Sender <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建MailSender对象的工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainSendFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MainSender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建SmsSender对象的工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSendFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此后假如Sender接口有了新的实现类，为该类添加工厂方法时，可以不用修改原来的代码，直接创建一个新的工厂类，实现工厂类的接口即可。符合了开闭原则。</p>
<h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>装饰器模式就是给一个对象动态的增加一些新功能，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例。</p>
<p><a href="https://imgtu.com/i/HgO7dJ"><img src="https://s4.ax1x.com/2022/02/15/HgO7dJ.png" alt="HgO7dJ.png"></a></p>
<p>某接口Sourceable：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该接口的实现类Source：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现了某个功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要给该实现类添加其他的功能，但是又不能改变原来的代码，创建修饰器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span>  <span class="keyword">implements</span> <span class="title">Sourceable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sourceable source;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Sourceable source)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        source.method();</span><br><span class="line">        System.out.println(<span class="string">&quot;修饰器又添加了一些其他功能！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//正常使用</span></span><br><span class="line">    Sourceable s = <span class="keyword">new</span> Source();</span><br><span class="line">    s.method();      <span class="comment">//实现了某个功能</span></span><br><span class="line">    System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用修饰器</span></span><br><span class="line">    Decorator d = <span class="keyword">new</span> Decorator(<span class="keyword">new</span> Source());</span><br><span class="line">    d.method();      </span><br><span class="line">    <span class="comment">//实现了某个功能</span></span><br><span class="line">    <span class="comment">//修饰器又添加了一些其他功能！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实际意义</strong></p>
<ul>
<li>可以实现一个类功能的扩展。</li>
<li>可以动态的增加功能，而且还能动态撤销（继承不行）。</li>
<li>缺点：产生过多相似的对象，不易排错。</li>
</ul>
<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><ul>
<li>代理模式就是找一个代理类替原对象进行一些操作。</li>
<li>比如我们在租房子的时候找中介，再如我们打官司需要请律师，中介和律师在这里就是我们的代理。</li>
<li><a href="https://imgtu.com/i/HgjwDS"><img src="https://s4.ax1x.com/2022/02/15/HgjwDS.png" alt="HgjwDS.png"></a></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sourceable source = <span class="keyword">new</span> Source();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//访问控制，访问了目标方法</span></span><br><span class="line">        source.method();</span><br><span class="line">        <span class="comment">//增强功能</span></span><br><span class="line">        System.out.println(<span class="string">&quot;代理增加了一些功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//正常使用</span></span><br><span class="line">    Sourceable s = <span class="keyword">new</span> Source();</span><br><span class="line">    s.method();      <span class="comment">//实现了某个功能</span></span><br><span class="line">    System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用代理</span></span><br><span class="line">    Proxy p = <span class="keyword">new</span> Proxy();</span><br><span class="line">    p.method();      </span><br><span class="line">    <span class="comment">//实现了某个功能</span></span><br><span class="line">    <span class="comment">//代理增加了一些功能</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实际意义</strong>     </p>
<ul>
<li>如果在使用的时候需要对原有的方法进行改进，可以采用一个代理类调用原有方法，并且对产生的结果进行控制，这种方式就是代理模式。</li>
<li>使用代理模式，可以将功能划分的更加清晰，有助于后期维护。</li>
</ul>
<p><strong>代理模式和装饰器模式的比较</strong>     </p>
<ul>
<li>装饰器模式通常的做法是将原始对象作为一个参数传给装饰者的构造器，而代理模式通常在一个代理类中创建一个被代理类的对象。</li>
<li>装饰器模式关注于在一个对象上动态的添加方法，然而代理模式关注于控制对对象的访问。</li>
</ul>
<h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>模板方法模式主要指一个抽象类中封装了一个固定流程，流程中的具体步骤可以由不同子类进行不同的实现，通过抽象类让固定的流程产生不同的结果。</p>
<p><a href="https://imgtu.com/i/H2S8qf"><img src="https://s4.ax1x.com/2022/02/15/H2S8qf.png" alt="H2S8qf.png"></a></p>
<p>抽象方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将字符串exp，按照op分割，返回计算结果。如,参数&quot;1+1&quot;,&quot;+&quot;,返回2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">splitExpression</span><span class="params">(String exp, String op)</span></span>&#123;</span><br><span class="line">        String[] sArr = exp.split(op);</span><br><span class="line">        <span class="keyword">return</span> calculate(Integer.parseInt(sArr[<span class="number">0</span>]), Integer.parseInt(sArr[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> ia, <span class="keyword">int</span> ib)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>某一子类，加法运算：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> ia, <span class="keyword">int</span> ib)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ia + ib;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>某一子类，减法运算：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> ia, <span class="keyword">int</span> ib)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ia - ib;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    AbstractCalculator ac = <span class="keyword">new</span> Plus();</span><br><span class="line">    <span class="keyword">int</span> ia = ac.splitExpression(<span class="string">&quot;1+2&quot;</span>, <span class="string">&quot;\\+&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;ia = &quot;</span> + ia);    <span class="comment">//ia = 3</span></span><br><span class="line">    System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    ac = <span class="keyword">new</span> Minus();</span><br><span class="line">    ia = ac.splitExpression(<span class="string">&quot;5-1&quot;</span>, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;ia = &quot;</span> + ia);    <span class="comment">//ia = 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java新特性"><a href="#Java新特性" class="headerlink" title="Java新特性"></a>Java新特性</h1><h2 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h2><p>Java8是 Java 语言的一个重要版本，该版本于2014年3月发布，是自Java5以来 具革命性的版本，这个版本包含语言、编译器、库、工具和JVM等方面的十多个新特性。</p>
<h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><ul>
<li>函数式接口主要指只包含一个抽象方法的接口，如：java.lang.Runnable、java.util.Comparator 接口等。    </li>
<li>Java8提供@FunctionalInterface注解来定义函数式接口，若定义的接口不符合函数式的规范便会报错。</li>
<li>Java8中增加了java.util.function包，该包包含了常用的函数式接口，具体如下：</li>
</ul>
<table>
<thead>
<tr>
<th>接口名称</th>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Consumer</td>
<td>void accept(T t)</td>
<td>根据指定的参数执行操作</td>
</tr>
<tr>
<td>Supplier</td>
<td>T get()</td>
<td>得到一个返回值</td>
</tr>
<tr>
<td>Function&lt;T,R&gt;</td>
<td>R apply(T t)</td>
<td>根据指定的参数执行操作并返回</td>
</tr>
<tr>
<td>Predicate</td>
<td>boolean test(T t)</td>
<td>判断指定的参数是否满足条件</td>
</tr>
</tbody></table>
<h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><ul>
<li>Lambda 表达式是实例化<strong>函数式接口</strong>的重要方式，使用 Lambda 表达式可以使代码变的更加简洁紧凑。</li>
<li>lambda表达式：参数列表、箭头符号-&gt;和方法体组成，而方法体中可以是表达式，也可以是语句块。</li>
<li>语法格式：(参数列表) -&gt; { 方法体; }      </li>
<li>其中()、参数类型、{} 以及return关键字 可以省略。</li>
</ul>
<h3 id="引用方法"><a href="#引用方法" class="headerlink" title="引用方法"></a>引用方法</h3><ul>
<li>方法引用主要指通过方法的名字来指向一个方法而不需要为方法引用提供方法体，该方法的调用交给函数式接口执行。</li>
<li>方法引用使用一对冒号  :: 将类或对象与方法名进行连接，通常使用方式如下：<ul>
<li>对象的非静态方法引用    ObjectName :: MethodName</li>
<li>类的静态方法引用              ClassName :: StaticMethodName</li>
<li>类的非静态方法引用          ClassName :: MethodName </li>
<li>构造器的引用                      ClassName :: new </li>
<li>数组的引用                        TypeName[] :: new</li>
</ul>
</li>
<li>方法引用是在特定场景下lambda表达式的一种简化表示，可以进一步简化代码的编写使代码更加紧凑简洁，从而减少冗余代码。</li>
</ul>
<p>使用案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1,Runnable,抽象方法run无参无返回值</span></span><br><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">Runnable Runnable1 = () -&gt; System.out.println();</span><br><span class="line"><span class="comment">//方法引用</span></span><br><span class="line">Runnable Runnable2 = System.out::println;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2,Consumer,抽象方法accept有参无返回值</span></span><br><span class="line">Consumer consumer  = <span class="keyword">new</span> Consumer() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">Consumer consumer1 = o -&gt; System.out.println(o);</span><br><span class="line"><span class="comment">//方法引用</span></span><br><span class="line">Consumer consumer2 = System.out::println;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3,Supplier，抽象方法get无参有返回值</span></span><br><span class="line">Supplier supplier = <span class="keyword">new</span> Supplier()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">Supplier supplier1 = () -&gt; <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//方法引用</span></span><br><span class="line">Supplier supplier2 = Person::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4, Function, 抽象方法apply有参有返回值</span></span><br><span class="line">Function&lt;String, Integer&gt; function = <span class="keyword">new</span> Function&lt;&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">Function&lt;String, Integer&gt; function1 = s -&gt; Integer.parseInt(s);</span><br><span class="line"><span class="comment">//方法引用</span></span><br><span class="line">Function&lt;String, Integer&gt; functioin2 = Integer::parseInt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5,Predicate, 抽象方法test有参有boolean类型返回值</span></span><br><span class="line">Predicate&lt;Integer&gt; predicate = <span class="keyword">new</span> Predicate&lt;&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Integer age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">Predicate&lt;Integer&gt; predicate1 = age -&gt; age&gt;=<span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<p>1，实现接口，可以创建实现类，但是麻烦，可以利用匿名内部类。</p>
<p>2，在接口是函数式接口的条件下，可以使用lambda表达式。</p>
<p>3，在lambda的特定条件下可以再简化，使用方法引用。<br>      特定条件：重写方法的返回值和参数，跟返回的方法的返回值和参数一致。</p>
<h3 id="Stream接口"><a href="#Stream接口" class="headerlink" title="Stream接口"></a>Stream接口</h3><ul>
<li>案例题目：<br>准备一个List集合并放入Person类型的对象，将集合中所有age&gt;=18过滤出来放到另外一个集合并打印出来。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//准备List</span></span><br><span class="line">List&lt;Person&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;Person&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1,list1添加元素Person</span></span><br><span class="line">list1.add(<span class="keyword">new</span> Person(<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>));</span><br><span class="line">list1.add(<span class="keyword">new</span> Person(<span class="string">&quot;li&quot;</span>, <span class="number">16</span>));</span><br><span class="line">list1.add(<span class="keyword">new</span> Person(<span class="string">&quot;wang&quot;</span>, <span class="number">10</span>));</span><br><span class="line">list1.add(<span class="keyword">new</span> Person(<span class="string">&quot;liu&quot;</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2，遍历list1，符合条件的添加到list2中</span></span><br><span class="line"><span class="keyword">for</span>(Person p:list1)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p.getAge() &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">        list2.add(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3，遍历打印list2</span></span><br><span class="line"><span class="keyword">for</span>(Person p: list2)&#123;</span><br><span class="line">    System.out.println(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>概念</strong></p>
<ul>
<li>java.util.stream.Stream接口是对集合功能的增强，可以对集合元素进行复杂的查找、过滤、筛选等操作。</li>
<li>Stream接口借助于Lambda 表达式极大的提高编程效率和程序可读性，同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势。</li>
</ul>
<p><strong>步骤</strong></p>
<ul>
<li>创建操作：创建Stream，通过一个数据源来获取一个流。</li>
<li>中间操作：转换Stream，每次转换返回一个新的Stream对象。</li>
<li>终止操作：对Stream进行聚合操作并产生结果。</li>
</ul>
<h4 id="创建操作"><a href="#创建操作" class="headerlink" title="创建操作"></a>创建操作</h4><p>创建流对象</p>
<ul>
<li>方式一：通过调用集合的默认方法来获取流，如：default Stream stream() </li>
<li>方式二：通过数组工具类中的静态方法来获取流，如：static IntStream stream(int[] array) </li>
<li>方式三：通过Stream接口的静态方法来获取流，如：static  Stream of(T… values) </li>
<li>方式四：通过Stream接口的静态方法来获取流，static  Stream generate(Supplier&lt;? extends T&gt; s)</li>
</ul>
<h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><p>从某个流通过变换得到另一个流</p>
<p>筛选与切片的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Stream filter(Predicate&lt;? super T&gt; predicate)</td>
<td>返回一个包含匹配元素的流</td>
</tr>
<tr>
<td>Stream distinct()</td>
<td>返回不包含重复元素的流</td>
</tr>
<tr>
<td>Stream limit(long maxSize)</td>
<td>返回不超过给定元素数量的流</td>
</tr>
<tr>
<td>Stream skip(long n)</td>
<td>返回丢弃前n个元素后的流</td>
</tr>
</tbody></table>
<p>用Stream解决上面案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list1.stream().filter(<span class="keyword">new</span> Predicate&lt;Person&gt;()&#123;  <span class="comment">//从流中，筛选年龄大于等于18</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p.getAge() &gt;= <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).forEach(<span class="keyword">new</span> Consumer&lt;Person&gt;() &#123;    <span class="comment">//从流中，筛选完后，遍历，添加到list2中，并打印</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line">        list2.add(p);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用lambda表达式写法</span></span><br><span class="line">list1.stream().filter(p -&gt; p.getAge()&gt;=<span class="number">18</span>)</span><br><span class="line">    		  .forEach(p -&gt; &#123;</span><br><span class="line">                  list2.add(p);</span><br><span class="line">                  System.out.println(p);</span><br><span class="line">              &#125;);</span><br></pre></td></tr></table></figure>

<p>映射的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Stream map(Function&lt;? super T,? extends R&gt; mapper)</td>
<td>返回每个处理过元素组成的流</td>
</tr>
<tr>
<td>Stream flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)</td>
<td>返回每个被替换过元素组成的流，并将所有流合成一个流</td>
</tr>
</tbody></table>
<p>将Person的age映射出来并打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list1.stream().map(<span class="keyword">new</span> Function&lt;Person, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  person.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).forEach(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">list1.stream().map(p -&gt; p.getAge()).forEach(age -&gt; System.out.println(age));</span><br><span class="line"></span><br><span class="line"><span class="comment">//特定条件，可以再简化，方法引用</span></span><br><span class="line">list1.stream().map(Person::getAge).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>排序的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Stream sorted()</td>
<td>返回经过自然排序后元素组成的流</td>
</tr>
<tr>
<td>Stream sorted(Comparator&lt;? super T&gt; comparator)</td>
<td>返回经过比较器排序后元素组成的流</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自然排序</span></span><br><span class="line">Stream.of(<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>).sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义比较器排序</span></span><br><span class="line">list1.stream().sorted(<span class="keyword">new</span> Comparator&lt;Person&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person p1, Person p2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1.getAge()!=p2.getAge() ?</span><br><span class="line">               p1.getAge()-p2.getAge() :</span><br><span class="line">        	   p1.getName().compareTo(p2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda表达式,只按年龄排</span></span><br><span class="line">list1.stream().sorted((p1,p2) -&gt; p1.getAge()-p2.getAge()).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h4 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h4><p> 匹配与查找的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Optional findFirst()</td>
<td>返回该流的第一个元素</td>
</tr>
<tr>
<td>boolean allMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>返回所有元素是否都匹配</td>
</tr>
<tr>
<td>boolean noneMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>返回所有元素是否都不匹配</td>
</tr>
<tr>
<td>Optional max(Comparator&lt;? super T&gt; comparator)</td>
<td>根据比较器返回 大元素</td>
</tr>
<tr>
<td>Optional min(Comparator&lt;? super T&gt; comparator)</td>
<td>根据比较器返回 小元素</td>
</tr>
<tr>
<td>long count()</td>
<td>返回元素的个数</td>
</tr>
<tr>
<td>void forEach(Consumer&lt;? super T&gt; action)</td>
<td>对流中每个元素执行操作</td>
</tr>
</tbody></table>
<p>规约的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Optional reduce(BinaryOperator accumulator)</td>
<td>返回结合后的元素值</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有年龄累加和</span></span><br><span class="line">Optional&lt;Integer&gt; reduce = list1.stream().map(Person::getAge).reduce(<span class="keyword">new</span> BinaryOperator&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer ia, Integer ib)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.sum(ia,ib);  <span class="comment">//相当于ia + ib</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">Optional&lt;Integer&gt; reduce1 = list1.stream().map(p -&gt; p.getAge()).reduce((ia,ib) -&gt; ia+ib);</span><br><span class="line"></span><br><span class="line"><span class="comment">//再简化，方法引用</span></span><br><span class="line">Optional&lt;Integer&gt; reduce2 = list1.stream().map(Person::getAge).reduce(Integer::sum);</span><br></pre></td></tr></table></figure>

<p>收集的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;R,A&gt; R collect(Collector&lt;? super T,A,R&gt; collector)</td>
<td>使用收集器对元素进行处理</td>
</tr>
</tbody></table>
<h3 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h3><ul>
<li>java.util.Optional类可以理解为一个简单的容器，其值可能是null或者不是null，代表一个值存在或不存在。</li>
<li>该类的引入很好的解决空指针异常，不用显式进行空值检测。</li>
</ul>
<p>常用方法</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>static Optional ofNullable(T value)</td>
<td>根据参数指定数值来得到Optional类型的对象</td>
</tr>
<tr>
<td>Optional map(Function&lt;? super T,? extends U&gt; mapper)</td>
<td>根据参数指定规则的结果来得到Optional类型的对象</td>
</tr>
<tr>
<td>T orElse(T other)</td>
<td>若该值存在就返回，否则返回other的数值。</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="keyword">null</span>;</span><br><span class="line">Optional&lt;String&gt; optional = Optional.ofNullable(s);</span><br><span class="line">System.out.println(optional.orElse(<span class="string">&quot;没有值&quot;</span>));  <span class="comment">//没有值</span></span><br></pre></td></tr></table></figure>

<h2 id="Java9新特性"><a href="#Java9新特性" class="headerlink" title="Java9新特性"></a>Java9新特性</h2><ul>
<li>Java9发布于2017年9月发布，带来了很多新特性，其中 主要的变化是模块化系统。</li>
</ul>
<p><strong>模块化</strong></p>
<ul>
<li><p>模块就是代码和数据的封装体，模块的代码被组织成多个包，每个包中包含Java类和接口，模块的数据则包括资源文件和其他静态信息。</p>
</li>
<li><p>语法格式：<br>在 module-info.java 文件中，我们可以用新的关键词module来声明一个模块，具体如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> ExamSystemClient &#123;</span><br><span class="line">    <span class="comment">//将org.de.model暴露出去</span></span><br><span class="line">    <span class="keyword">exports</span> org.de.Model;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> ExamSystemServer &#123;</span><br><span class="line">    <span class="comment">//需要该模块所暴露出来的东西</span></span><br><span class="line">    <span class="keyword">requires</span> ExamSystemClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>模块化的优势：</p>
<ul>
<li>减少内存的开销。 </li>
<li>可简化各种类库和大型应用的 开发和维护。</li>
<li>安全性，可维护性，提高性能。</li>
</ul>
<p><strong>砖石操作符</strong></p>
<p>在Java9中允许在匿名内部类的使用中使用钻石操作符。即泛型的菱形特性，可以在匿名内部类中使用。</p>
<p><strong>集合工厂方法</strong></p>
<ul>
<li>Java9的List、Set和Map集合中增加了静态工厂方法of实现不可变实例的创建。</li>
<li>不可变体现在无法添加、修改和删除它们的元素。</li>
<li>不允许添加null元素对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">System.out.println(list);   <span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">//list.add(3);   //异常：java.lang.UnsupportedOperationException</span></span><br></pre></td></tr></table></figure>

<p>意义：</p>
<ul>
<li>保证线程安全：在并发程序中既保证线程安全性，也大大增强了并发时的效率。</li>
<li>被不可信的类库使用时会很安全。</li>
<li>如果一个对象不需要支持修改操作，将会节省空间和时间的开销。</li>
<li>可以当作一个常量来对待，并且这个对象在以后也不会被改变。</li>
</ul>
<p><strong>InputStream的增强</strong></p>
<p>InputStream类中提供了transferTo方法实现将数据直接传输到OutputStream中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  实现d://a.txt拷贝到d://b.txtw</span></span><br><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;d://a.txt&quot;</span>);</span><br><span class="line">    fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d://b.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//将 输入流InputStream数据 直接传输到 输出流OutputStream 中。</span></span><br><span class="line">    fis.transferTo(fos); </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Java10新特性"><a href="#Java10新特性" class="headerlink" title="Java10新特性"></a>Java10新特性</h2><ul>
<li>Java10于2018年3月发布，改进的关键点包括一个本地类型推断、一个垃圾回收的增强。</li>
<li>Java10计划只是一个短期版本，因此公开更新将在六个月内结束，9月份发布的Java11将是Java的长期支持（LTS）版本，LTS版本的发布每三年发布一次。</li>
</ul>
<p><strong>局部变量类型推断</strong></p>
<ul>
<li>Java10可以使用var作为局部变量类型推断标识符，此符号仅适用于局部变量，增强for循环的索引，以及传统for循环的本地变量。</li>
<li>它<strong>不能使用于</strong>方法形式参数，构造函数形式参数，方法返回类型，字段，catch形式参数或任何其他类型的变量声明。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动推断类型</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;            <span class="comment">//a是int类型</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;abc&quot;</span>;        <span class="comment">//b是String类型</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Person(); <span class="comment">//c是Person类型</span></span><br></pre></td></tr></table></figure>

<p>意义：</p>
<ul>
<li>标识符var不是关键字，只是一个保留的类型名称。这意味着var用作变量，<br>方法名或包名的代码不会受到影响，但var不能作为类或则接口的名字。</li>
<li>避免了信息冗余。</li>
<li>对齐了变量名。</li>
<li>更容易阅读。</li>
</ul>
<h2 id="Java11新特性"><a href="#Java11新特性" class="headerlink" title="Java11新特性"></a>Java11新特性</h2><p>Java11于2018年9月正式发布，这是 Java 大版本周期变化 后的第一个长期支持版本，非常值得关注。</p>
<p><strong>简单的编译运行操作</strong></p>
<ul>
<li><p>正常的编译运行操作：<br>javac 文件名.java(将编写的java文件编译成字节码文件)    —&gt;    java 文件名(将编译好的字节码文件解释并运行)</p>
</li>
<li><p>在Java11中可以使用java命令一次性进行编译和运行操作。</p>
</li>
<li><p>执行源文件中的第一个类必须包含主方法。</p>
</li>
<li><p>不可以使用其它源文件中自定义的类。</p>
</li>
</ul>
<p><strong>String类新增方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>boolean isBlank()</td>
<td>判断字符串是否为空或只包含空白代码点</td>
</tr>
<tr>
<td>Optional map(Function&lt;? super T,? extends U&gt; mapper)</td>
<td>根据参数指定规则的结果来得到Optional类型的对象</td>
</tr>
<tr>
<td>T orElse(T other)</td>
<td>若该值存在就返回，否则返回other的数值。</td>
</tr>
</tbody></table>
<h1 id="在线考试系统"><a href="#在线考试系统" class="headerlink" title="在线考试系统"></a>在线考试系统</h1><p>（无）</p>
<h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><p><strong>IO回顾：</strong></p>
<ul>
<li>IO：Input OutPut（输入 输出）</li>
<li>IO技术的作用：解决设备和设备之间的数据传输问题</li>
<li>IO的应用场景：图片上传、下载、打印机打印信息表、解析XML…</li>
</ul>
<p><strong>NIO：</strong></p>
<ul>
<li>即 <code>Java New IO</code></li>
<li>是1个全新的、 <code>JDK 1.4</code>后提供的 <code>IO API</code></li>
<li>Java API中提供了两套NIO，一套是针对<code>标准输入输出NIO</code>，另一套就是<code>网络编程NIO</code></li>
</ul>
<p><strong>作用和区别：</strong></p>
<ul>
<li><code>NIO</code>和<code>IO</code>有相同的作用和目的，但实现方式不同</li>
<li>可替代 标准<code>Java IO</code> 的<code>IO API</code></li>
<li>IO是以<strong>流</strong>的方式处理数据，而NIO是以<strong>块</strong>的方式处理数据。</li>
</ul>
<p><strong>流和块的比较：</strong></p>
<ul>
<li><p>NIO和IO最大的区别是数据打包和传输方式。</p>
</li>
<li><p>IO是以<strong>流</strong>的方式处理数据，而NIO是以<strong>块</strong>的方式处理数据。</p>
</li>
</ul>
<p><strong>面向流</strong>的IO一次一个字节的处理数据，一个输入流产生一个字节，一个输出流就消费一个字节。</p>
<p><strong>面向块</strong>的IO系统以块的形式处理数据。每一个操作都在一步中产生或消费一个数据块。按块要比按流快的多</p>
<p>（举例：拿水龙头来比喻：流就像水龙头滴水，每次只有一滴；块就像水龙头往水壶放水，放满之后对一整个水壶的水进行操作）</p>
<h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><p><code>Java NIO</code>的核心组件 包括：</p>
<ul>
<li><p>缓冲区（<code>Buffer</code>）</p>
</li>
<li><p>通道（<code>Channel</code>）</p>
</li>
<li><p>选择器（<code>Selector</code>）</p>
</li>
</ul>
<p>在NIO中并不是以流的方式来处理数据的，而是以buffer缓冲区和Channel管道<strong>配合使用</strong>来处理数据。</p>
<p>Selector是因为NIO可以使用异步的非阻塞模式才加入的东西</p>
<p>简单理解一下：</p>
<ul>
<li><p>Channel管道比作成铁路，buffer缓冲区比作成火车(运载着货物)<br>而我们的NIO就是<strong>通过Channel管道运输着存储数据的Buffer缓冲区的来实现数据的处理</strong>！</p>
</li>
<li><p>要时刻记住：Channel不与数据打交道，它只负责运输数据。与数据打交道的是Buffer缓冲区</p>
</li>
<li><p><strong>Channel–&gt;运输</strong><br><strong>Buffer–&gt;数据</strong></p>
</li>
</ul>
<p>相对于传统IO而言，<strong>流是单向的</strong>。对于NIO而言，有了Channel管道这个概念，我们的<strong>读写都是双向</strong>的(铁路上的火车能从广州去北京、自然就能从北京返还到广州)！</p>
<h2 id="Buffer缓存区"><a href="#Buffer缓存区" class="headerlink" title="Buffer缓存区"></a>Buffer缓存区</h2><p>作用：缓冲区，用来存放具体要被传输的数据，比如文件、scoket 等。这里将数据装入 Buffer 再通过通道进行传输。</p>
<p>Buffer 就是一个数组，用来保存不同数据类型的数据</p>
<p>在 NIO 中，所有的缓冲区类型都继承于抽象类 Buffer，最常用的就是 ByteBuffer，对于 Java 中的基本类型，基本都有一个具体 Buffer 类型与之相对应，它们之间的继承关系如下图所示</p>
<p><a href="https://imgtu.com/i/b08ppd"><img src="https://s4.ax1x.com/2022/03/05/b08ppd.png" alt="b08ppd.png"></a></p>
<ul>
<li>ByteBuffer：存储字节数据到缓冲区</li>
<li>ShortBuffer：存储字符串数据到缓冲区</li>
<li>CharBuffer： 存储字符数据到缓冲区</li>
<li>IntBuffer：存储整数数据到缓冲区</li>
<li>LongBuffer：存储长整型数据到缓冲区</li>
<li>DoubleBuffer：存储小数到缓冲区</li>
<li>FloatBuffer：存储小数到缓冲区</li>
</ul>
<p>对于 Java 中的基本数据类型，都有一个 Buffer 类型与之相对应，最常用的自然是<strong>ByteBuffer</strong> 类（二进制数据）</p>
<h3 id="ByteBuffer的创建方式"><a href="#ByteBuffer的创建方式" class="headerlink" title="ByteBuffer的创建方式"></a>ByteBuffer的创建方式</h3><ul>
<li><p>在堆中创建缓冲区：allocate(int capacity)， 常用。</p>
</li>
<li><p>在系统内存创建缓冲区：allocateDirect(int capacity)</p>
</li>
<li><p>通过普通数组创建缓冲区：wrap(byte[] arr)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在堆中创建缓冲区：allocate(int capacity)，常用</span></span><br><span class="line">ByteBuffer byteBuffer1 = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在系统内存创建缓冲区：allocateDirect(int capacity)</span></span><br><span class="line">ByteBuffer byteBuffer2 = ByteBuffer.allocateDirect(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过普通数组创建缓冲区：wrap(byte[] arr)</span></span><br><span class="line"><span class="keyword">byte</span>[] bArr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">ByteBuffer byteBuffer3 = ByteBuffer.wrap(bArr);</span><br></pre></td></tr></table></figure>

<h3 id="常用方法-4"><a href="#常用方法-4" class="headerlink" title="常用方法"></a>常用方法</h3><p>拿到一个缓冲区我们往往会做什么？很简单，就是<strong>读取缓冲区的数据/写数据到缓冲区中</strong>。</p>
<p>所以，缓冲区的核心方法就是:</p>
<ul>
<li>put(byte b) : 给缓冲区添加元素</li>
<li>get() :从缓存区获取一个元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Buffer对象</span></span><br><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//put放数据，byte类型数据。</span></span><br><span class="line">byteBuffer.put((<span class="keyword">byte</span>)<span class="number">10</span>);</span><br><span class="line">byteBuffer.put(<span class="string">&quot;nihao&quot;</span>.getBytes());</span><br><span class="line">byteBuffer.put((<span class="keyword">byte</span>)<span class="number">5.12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="keyword">byte</span>[] bArr = byteBuffer.array();</span><br><span class="line">System.out.println(Arrays.toString(bArr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//get取数据</span></span><br><span class="line"><span class="keyword">byte</span> b = byteBuffer.get(<span class="number">0</span>);</span><br><span class="line">System.out.println(b);   <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h3 id="核心变量"><a href="#核心变量" class="headerlink" title="核心变量"></a>核心变量</h3><p>Buffer类维护了4个核心变量属性来提供<strong>关于其所包含的数组的信息</strong>。它们是：</p>
<ul>
<li>容量Capacity<br><strong>缓冲区能够容纳的数据元素的最大数量</strong>。容量在缓冲区创建时被设定，并且永远不能被改变。(不能被改变的原因也很简单，底层是数组嘛)</li>
</ul>
<ul>
<li><p>位置Position<br><strong>下一个要被读或写的元素的位置</strong>。Position会自动由相应的 <code>get( )</code>和 <code>put( )</code>函数更新。</p>
</li>
<li><p>界限Limit<br><strong>缓冲区中可以操作数据的大小</strong>，代表了当前缓冲区中一共有多少数据（从limit开始后面的位置不能操作）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以上三个属性值之间有一些相对大小的关系：0 &lt;= position &lt;= limit &lt;= capacity</span><br><span class="line">例：- 如果我们创建一个新的容量大小为20 的 ByteBuffer 对象，在初始化的时候，position 设置为 0，</span><br><span class="line"> limit 和 capacity 被设置为 10，在以后使用 ByteBuffer对象过程中，capacity 的值不会再发生变化，而其它两个个将会随着使用而变化。</span><br></pre></td></tr></table></figure></li>
</ul>
<p>核心变量值的变化过程如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//初始化的各属性值</span></span><br><span class="line">System.out.println(<span class="string">&quot;capacity = &quot;</span> + byteBuffer.capacity());  <span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="string">&quot;limit    = &quot;</span> + byteBuffer.limit());     <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//put放数据后各属性值的变化,position更新</span></span><br><span class="line"><span class="keyword">byte</span>[] bArr = <span class="string">&quot;javaSE&quot;</span>.getBytes();</span><br><span class="line">byteBuffer.put(bArr);</span><br><span class="line">System.out.println(<span class="string">&quot;capacity = &quot;</span> + byteBuffer.capacity());  <span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//6</span></span><br><span class="line">System.out.println(<span class="string">&quot;limit    = &quot;</span> + byteBuffer.limit());     <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//需要get取数据时，应该调用flip()。使得limit=position=6， position=0</span></span><br><span class="line">byteBuffer.flip();</span><br><span class="line">System.out.println(<span class="string">&quot;capacity = &quot;</span> + byteBuffer.capacity());  <span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="string">&quot;limit    = &quot;</span> + byteBuffer.limit());     <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] bArr2 = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuffer.limit()];  <span class="comment">//因为Buffer对象只有limit个数据</span></span><br><span class="line">byteBuffer.get(bArr2);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(bArr2));   <span class="comment">//javaSE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//get取数据后，各属性值的变化，position更新</span></span><br><span class="line">System.out.println(<span class="string">&quot;capacity = &quot;</span> + byteBuffer.capacity());  <span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//6</span></span><br><span class="line">System.out.println(<span class="string">&quot;limit    = &quot;</span> + byteBuffer.limit());     <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此时，需要put继续放数据，应该调用clear()。使得position=0, limit=capacity=10</span></span><br><span class="line">byteBuffer.clear();</span><br><span class="line">System.out.println(<span class="string">&quot;capacity = &quot;</span> + byteBuffer.capacity());  <span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="string">&quot;limit    = &quot;</span> + byteBuffer.limit());     <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>标记Mark<br>一个备忘位置。<strong>用于记录上一次读写的位置</strong>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//put放数据，position更新</span></span><br><span class="line">byteBuffer.put(<span class="string">&quot;ni&quot;</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用mark()标记此时的position,即2</span></span><br><span class="line">byteBuffer.mark();</span><br><span class="line"></span><br><span class="line"><span class="comment">//继续put放数据，position更新</span></span><br><span class="line">byteBuffer.put(<span class="string">&quot;hao&quot;</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用reset()，将position更新为上次mark()标记位置，即2。</span></span><br><span class="line">byteBuffer.reset();</span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h2 id="Channel通道"><a href="#Channel通道" class="headerlink" title="Channel通道"></a>Channel通道</h2><p>通道（Channel）：由 java.nio.channels 包定义 的。Channel 表示 IO 源与目标打开的连接。 </p>
<p>Channel 类似于传统的“<strong>流</strong>”。</p>
<p>标准的IO基于字节流和字符流进行操作的，而NIO是基于通道（Channel）和缓冲区（Buffer）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中（白话: 就是数据传输用的通道，作用是打开到IO设备的连接，文件、套接字都行）</p>
<p>例：相当于一根管子，buffer中的数据可以通过管子写入被操作的资源当中，也可以将资源通过管子写入到buffer中去</p>
<h3 id="Channel接口"><a href="#Channel接口" class="headerlink" title="Channel接口"></a>Channel接口</h3><p> Java 为 Channel 接口提供的最主要实现类如下：</p>
<p><a href="https://imgtu.com/i/b0GGrt"><img src="https://s4.ax1x.com/2022/03/05/b0GGrt.png" alt="b0GGrt.png"></a></p>
<ul>
<li>FileChannel：用于读取、写入、映射和操作文件的通道。 </li>
<li>DatagramChannel：通过 UDP 读写网络中的数据通道。 </li>
<li>SocketChannel：通过 TCP 读写网络中的数据。 </li>
<li>ServerSocketChannel：可以监听新进来的 TCP 连接，对每一个新进来 的连接都会创建一个 SocketChannel。</li>
</ul>
<h3 id="FileChannel的使用"><a href="#FileChannel的使用" class="headerlink" title="FileChannel的使用"></a>FileChannel的使用</h3><p>使用FileChannel完成，将D://a.txt文件复制到D://b.txt</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException</span>&#123;</span><br><span class="line">    <span class="comment">//将D://a.txt文件复制到D://b.txt</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取输入输出流</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\a.txt&quot;</span>);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将输入输出流转换成FileChannel通道</span></span><br><span class="line">    FileChannel fileChannel1 = fis.getChannel();</span><br><span class="line">    FileChannel fileChannel2 = fos.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用Channel通道，缓冲区Buffer在里面传输数据</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环，读写</span></span><br><span class="line">    <span class="keyword">while</span>(fileChannel1.read(byteBuffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//flip之后，才能从Buffer缓冲区取出数据</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        fileChannel2.write(byteBuffer);</span><br><span class="line">        <span class="comment">//clear之后，才能继续在Buffer缓冲区放数据</span></span><br><span class="line">        byteBuffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    fos.close();</span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基于TCP编程"><a href="#基于TCP编程" class="headerlink" title="基于TCP编程"></a>基于TCP编程</h3><p>服务器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建服务器对象</span></span><br><span class="line">    ServerSocketChannel ssc = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定端口号</span></span><br><span class="line">    ssc.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置为非阻塞，就不会在accept那里一直等待客户端连接</span></span><br><span class="line">    <span class="comment">//ssc.configureBlocking(false);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待客户端连接</span></span><br><span class="line">    SocketChannel sc = ssc.accept();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Channel通道，利用Buffer缓冲区传输数据</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收客户端数据</span></span><br><span class="line">    <span class="keyword">int</span> len = sc.read(byteBuffer);</span><br><span class="line">    <span class="comment">//处理数据</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(byteBuffer.array(), <span class="number">0</span>, len));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反馈消息给客户端</span></span><br><span class="line">    byteBuffer.clear();</span><br><span class="line">    byteBuffer.put(<span class="string">&quot;收到！&quot;</span>.getBytes());</span><br><span class="line">    byteBuffer.flip();</span><br><span class="line">    sc.write(byteBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    sc.close();</span><br><span class="line">    ssc.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建客户端对象</span></span><br><span class="line">    SocketChannel sc = SocketChannel.open();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置连接的服务器的ip，端口</span></span><br><span class="line">    sc.connect(<span class="keyword">new</span> InetSocketAddress(InetAddress.getLocalHost(), <span class="number">8888</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过Channel通道，利用Buffer缓冲区传输数据</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">    byteBuffer.put(<span class="string">&quot;哈哈哈哈哈&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出数据给服务器</span></span><br><span class="line">    byteBuffer.flip();</span><br><span class="line">    sc.write(byteBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收服务器的消息</span></span><br><span class="line">    byteBuffer.clear();</span><br><span class="line">    <span class="keyword">int</span> len = sc.read(byteBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理数据</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(byteBuffer.array(), <span class="number">0</span>, len));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    sc.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Selector选择器"><a href="#Selector选择器" class="headerlink" title="Selector选择器"></a>Selector选择器</h2><p><strong>多路复用</strong>：<br>一个选择器可以同时监听多个服务器端口, 帮多个服务器端口同时等待客户端的访问</p>
<p><strong>关系：</strong></p>
<p>Channel和Buffer比较好理解 ，联系也比较密切，他们的关系简单来说就是：数据总是从通道中读到buffer缓冲区内，或者从buffer写入到通道中。</p>
<p>选择器（Selector） 是 Channel（通道）的多路复用器，Selector 可以同时监控多个 通道的 IO（输入输出） 状况。</p>
<p><strong>作用</strong>：<br>选择器提供选择执行已经就绪的任务的能力。从底层来看，Selector提供了询问通道是否已经准备好执行每个I/O操作的能力。Selector 允许单线程处理多个Channel。仅用单个线程来处理多个Channels的好处是，只需要更少的线程来处理通道。事实上，可以只用一个线程处理所有的通道，这样会大量的减少线程之间上下文切换的开销。</p>
<p><strong>可选择通道</strong></p>
<p>注意：并不是所有的Channel，都是可以被Selector 复用的。比方说，FileChannel就不能被选择器复用。为什么呢？</p>
<p>判断一个Channel 能被Selector 复用，有一个前提：判断他是否继承了一个抽象类SelectableChannel。如果继承了SelectableChannel，则可以被复用，否则不能。</p>
<p>SelectableChannle 的结构如下图：</p>
<p><a href="https://imgtu.com/i/b0YRgJ"><img src="https://s4.ax1x.com/2022/03/05/b0YRgJ.png" alt="b0YRgJ.png"></a></p>
<p>SelectableChannel类提供了实现通道的可选择性所需要的公共方法</p>
<p><strong>通道和选择器注册之后，他们是绑定的关系吗？</strong></p>
<p>答:不是。不是一对一的关系。一个通道可以被注册到多个选择器上，但对每个选择器而言只能被注册一次。</p>
<p>通道和选择器之间的关系，使用注册的方式完成。SelectableChannel可以被注册到Selector对象上，在注册的时候，需要指定通道的哪些操作，是Selector感兴趣的。</p>
<p><a href="https://imgtu.com/i/b0Yq8e"><img src="https://s4.ax1x.com/2022/03/05/b0Yq8e.png" alt="b0Yq8e.png"></a></p>
<h3 id="Channel注册到Selector上"><a href="#Channel注册到Selector上" class="headerlink" title="Channel注册到Selector上"></a>Channel注册到Selector上</h3><p>使用Channel.register（Selector sel，int ops）方法，将一个通道注册到一个选择器时。</p>
<p>​                                         第一个参数：指定通道要注册的选择器是谁</p>
<p>​                                         第二个参数：指定选择器需要查询的通道操作</p>
<p>可以供选择器查询的通道操作，从类型来分，包括以下四种：</p>
<p>​                                        （1）可读 : SelectionKey.OP_READ</p>
<p>​                                        （2）可写 : SelectionKey.OP_WRITE</p>
<p>​                                        （3）连接 : SelectionKey.OP_CONNECT</p>
<p>​                                        （4）接收 : SelectionKey.OP_ACCEPT</p>
<p>如果Selector对通道的多操作类型感兴趣，可以用“位或”操作符来实现：int key = SelectionKey.OP_READ | SelectionKey.OP_WRITE ;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将通道注册到选择器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1，创建Selector选择器</span></span><br><span class="line">    Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2，创建ServerSocketeChannel通道</span></span><br><span class="line">    ServerSocketChannel ssc = ServerSocketChannel.open();</span><br><span class="line">    <span class="comment">//绑定端口号</span></span><br><span class="line">    ssc.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">    <span class="comment">//设置非阻塞</span></span><br><span class="line">    ssc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3，将通道Channel注册到选择器Selector上，并指定监听的事件为“接收”事件</span></span><br><span class="line">    ssc.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面通过调用通道的register()方法会将它注册到一个选择器上。</p>
<p>首先需要注意的是：</p>
<p>与Selector一起使用时，Channel<strong>必须处于非阻塞模式</strong>下，否则将抛出异常IllegalBlockingModeException</p>
<h3 id="选择键SelectionKey"><a href="#选择键SelectionKey" class="headerlink" title="选择键SelectionKey"></a>选择键SelectionKey</h3><p>Channel和Selector的关系确定好后（注册），并且一旦通道处于某种就绪的状态，就可以被选择器查询到。这个工作，使用选择器Selector的select（）方法完成。select方法的作用，对感兴趣的通道操作，进行就绪状态的查询。</p>
<p>Selector可以不断的查询Channel中发生的操作的就绪状态。并且挑选感兴趣的操作就绪状态。一旦通道有操作的就绪状态达成，并且是Selector感兴趣的操作，就会被Selector选中，放入选择键集合中。</p>
<ul>
<li><p>select()：选择器等待客户端连接的方法，<br>阻塞问题:</p>
<pre><code>    1.在开始没有客户访问的时候是阻塞的
    2.在有客户来访问的时候方法会变成非阻塞的
    3.如果客户的访问被处理结束之后,又会恢复成阻塞的
</code></pre>
</li>
<li><p>selectedKeys()：选择器会把被连接的服务端对象放在Set集合中,这个方法就是返回一个Set集合</p>
</li>
</ul>
<h3 id="轮询查询就绪操作"><a href="#轮询查询就绪操作" class="headerlink" title="轮询查询就绪操作"></a>轮询查询就绪操作</h3><p>注册完后，万事俱备，下一步是查询就绪的操作。</p>
<p>通过Selector的 select() 方法，可以查询出已经就绪的通道操作的个数，这些就绪的状态集合，包存在一个元素是SelectionKey对象的Set集合中。</p>
<p>1，select()方法返回的int值，表示有多少通道已经就绪</p>
<p>2，通过调用Selector的selectedKeys()方法来访问已选择键集合，然后迭代集合的每一个选择键元素，根据就绪操作的类型，完成对应的操作：</p>
<p>服务器如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建服务器对象1</span></span><br><span class="line">        ServerSocketChannel ssc1 = ServerSocketChannel.open();</span><br><span class="line">        ssc1.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">5555</span>));</span><br><span class="line">        ssc1.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建服务器对象2</span></span><br><span class="line">        ServerSocketChannel ssc2 = ServerSocketChannel.open();</span><br><span class="line">        ssc2.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">6666</span>));</span><br><span class="line">        ssc2.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建服务器对象3</span></span><br><span class="line">        ServerSocketChannel ssc3 = ServerSocketChannel.open();</span><br><span class="line">        ssc3.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">7777</span>));</span><br><span class="line">        ssc3.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建选择器对象</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将通道分别注册到选择器上，监听的操作都为“接收”事件</span></span><br><span class="line">        ssc1.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        ssc2.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        ssc3.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//selector.select()类监听的事件“准备就绪”的个数</span></span><br><span class="line">        <span class="keyword">while</span>(selector.select() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//准备就绪的事件，会存放在selectedKeys()返回的Set集合中</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys().iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(selectionKeys.hasNext())&#123;</span><br><span class="line">                SelectionKey selectionKey = selectionKeys.next();</span><br><span class="line">                <span class="comment">//判断就绪的事件是什么事件，根据不同的事件执行不同的操作，这里只以“接收”事件为例</span></span><br><span class="line">                <span class="keyword">if</span>(selectionKey.isAcceptable())&#123;</span><br><span class="line">                    <span class="comment">//获取ServerSocketChannel管道</span></span><br><span class="line">                    ServerSocketChannel ssc = (ServerSocketChannel)selectionKey.channel();</span><br><span class="line">                    <span class="comment">//等待客户端连接</span></span><br><span class="line">                    SocketChannel sc = ssc.accept();</span><br><span class="line">                    <span class="comment">//获取数据</span></span><br><span class="line">                    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span>((len = sc.read(byteBuffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                        System.out.println(<span class="keyword">new</span> String(byteBuffer.array(),<span class="number">0</span>, len));</span><br><span class="line">                        byteBuffer.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//移除选择建</span></span><br><span class="line">                selectionKeys.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，可以创建多个客户端来访问这个服务器，端口为5555，6666，7777，都可以同时连接得上。</p>
]]></content>
      <categories>
        <category>jave</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2022/03/09/MySQL/</url>
    <content><![CDATA[<p>这是一篇关于MySQL的个人笔记。</p>
<p>包含MySql的基本语法，MySql表单、约束和事物，MySql多表、外键和数据库设计，Mysql索引、存储过程和触发器。</p>
<span id="more"></span>

<h1 id="MySql基础"><a href="#MySql基础" class="headerlink" title="MySql基础"></a>MySql基础</h1><p>什么是数据库？</p>
<ul>
<li>数据库(DataBase) 就是存储和管理数据的仓库</li>
<li>其本质是一个文件系统, 还是以文件的方式,将数据保存在电脑上</li>
</ul>
<p>为什么用数据库？</p>
<table>
<thead>
<tr>
<th><strong>存储方式</strong></th>
<th><strong>优点</strong></th>
<th><strong>缺点</strong></th>
</tr>
</thead>
<tbody><tr>
<td>内存</td>
<td>速度快</td>
<td>不能够永久保存,数据是临时状态的</td>
</tr>
<tr>
<td>文件</td>
<td>数据是可以永久保存的</td>
<td>使用IO流操作文件, 不方便</td>
</tr>
<tr>
<td>数据库</td>
<td>1.数据可以永久保存  2.方便存储和管理数据   3.使用统一的方式操作数据库  (SQL)</td>
<td>占用资源,有些数据库需要付费(比如Oracle数据  库)</td>
</tr>
</tbody></table>
<p>通过上面的比较,我们可以看出,使用数据库存储数据, 用户可以非常方便对数据库中的数据进行增加, 删除, 修改及查询操作。</p>
<p>常见数据库</p>
<table>
<thead>
<tr>
<th><strong>数据库名</strong></th>
<th><strong>介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>MySql数据</strong>  <strong>库</strong></td>
<td>开源免费的数据库  因为免费开源、运作简单的特点，常作为中小型的项目的数据库首选。  MySQL1996年开始运作，目前已经被Oracle公司收购了.  MySQL6.x开始收费</td>
</tr>
<tr>
<td>Oracle数据  库</td>
<td>收费的大型数据库，Oracle公司的核心产品。  安全性高</td>
</tr>
<tr>
<td>DB2</td>
<td>IBM公司的数据库产品,收费的超大型数据库。  常在银行系统中使用</td>
</tr>
<tr>
<td>SQL Server</td>
<td>MicroSoft 微软公司收费的中型的数据库。  C#、.net等语言常使用。   但该数据库只能运行在windows机器上，扩展性、稳定性、安全性、性能都表现平平。</td>
</tr>
</tbody></table>
<p>为什么选择MySQL ?</p>
<ul>
<li>功能强大,足以应付web应用开发</li>
<li>开源, 免费</li>
</ul>
<p><strong>Mysql服务启动</strong>：</p>
<p>1，打开任务管理器，在“服务”选项卡下将“MySQL”启动。</p>
<p>2，win + R 快捷键，输入services.msc后进入，将“MySQL”启动。</p>
<p>3，以管理员身份打开DOS命令行，输入“net start mysql57”启动，输入“net stop mysql57”关闭。</p>
<p><strong>DOS命令行登入MySQL</strong>（前提是添加了环境变量）</p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>mysql -u 用户名 -p 密码</td>
<td>使用指定用户名和密码登录当前计算机中的MySQL数据库</td>
</tr>
<tr>
<td>mysql -h 主机IP -u 用户名  -p 密码</td>
<td>-h 指定IP  方式,进行 登录</td>
</tr>
<tr>
<td>exit 或  quit</td>
<td>退出</td>
</tr>
</tbody></table>
<h2 id="MySQL目录结构"><a href="#MySQL目录结构" class="headerlink" title="MySQL目录结构"></a>MySQL目录结构</h2><p><strong>MySQL安装目录</strong></p>
<p>MySql的默认安装目录在 C:\Program Files\MySQL\MySQL Server 5.7</p>
<table>
<thead>
<tr>
<th><strong>目录</strong></th>
<th><strong>目录内容</strong></th>
</tr>
</thead>
<tbody><tr>
<td>bin</td>
<td>放置一些可执行文件</td>
</tr>
<tr>
<td>docs</td>
<td>文档</td>
</tr>
<tr>
<td>include</td>
<td>包含(头)文件</td>
</tr>
<tr>
<td>lib</td>
<td>依赖库</td>
</tr>
<tr>
<td>share</td>
<td>用于存放字符集、语言等信息。</td>
</tr>
</tbody></table>
<h2 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h2><p>数据库管理系统（DataBase Management System，DBMS）：指一种操作和管理维护数据库的大型软件。</p>
<p>MySQL就是一个 数据库管理系统软件, 安装了Mysql的电脑,我们叫它数据库服务器.</p>
<p><strong>作用</strong></p>
<p> 用于建立、使用和维护数据库，对数据库进行统一的管理。</p>
<p><strong>数据库管理系统、数据库 和表之间的关系</strong></p>
<p> MySQL中管理着很多数据库，在实际开发环境中 一个数据库一般对应了一个的应用，数据库当中保存着多张表，每一张表对应着不同的业务，表中保存着对应业务的数据。</p>
<p><strong>几个概念</strong> </p>
<ul>
<li>数据库：文件夹</li>
<li>表：文件</li>
<li>数据：文件中的记录</li>
</ul>
<h2 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h2><p>数据库中以表为组织单位存储数据</p>
<p>表类似我们Java中的类,每个字段都有对应的数据类型，那么我们使用熟悉的Java程序来与关系型数据对比,就会发现以下关系: </p>
<ul>
<li>类————-&gt;表</li>
<li>类中变量—–&gt;表中字段</li>
<li>对象———-&gt;数据记录</li>
</ul>
<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p> 结构化查询语言(Structured Query Language)简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p>
<p><strong>作用</strong></p>
<ul>
<li>是所有关系型数据库的统一查询规范，不同的关系型数据库都支持SQL 所有的关系型数据库都可以使用SQL</li>
<li>不同数据库之间的SQL 有一些区别  方言</li>
</ul>
<p><strong>SQL通用语法</strong></p>
<ul>
<li><p>SQL语句可以单行 或者 多行书写，以分号 结尾 ;   （Sqlyog中可以不用写分号） </p>
</li>
<li><p>可以使用空格和缩进来增加语句的可读性。</p>
</li>
<li><p>MySql中使用SQL不区分大小写，一般关键字大写，数据库名 表名列名 小写。</p>
</li>
<li><p>注释方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 空格	单行注释</span></span><br><span class="line"><span class="comment">/* */</span>	 多行注释</span><br><span class="line">#	     MySql特有的单行注释</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>SQL的分类</strong></p>
<table>
<thead>
<tr>
<th><strong>分类</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>数据定义语言</td>
<td>简称DDL(Data Definition Language)，用来定义数据库对象：数据库，表，列等。</td>
</tr>
<tr>
<td>数据操作语言</td>
<td>简称DML(Data  Manipulation Language)，用来对数据库中表的记录进行更新。</td>
</tr>
<tr>
<td>数据查询语言</td>
<td>简称DQL(Data  Query Language)，用来查询数据库中表的记录。</td>
</tr>
<tr>
<td>数据控制语言</td>
<td>简称DCL(Date  Control Language)，用来定义数据库的访问权限和安全级别，及创建用户。(了解)</td>
</tr>
</tbody></table>
<p><a href="https://imgtu.com/i/bR54AO"><img src="https://s1.ax1x.com/2022/03/09/bR54AO.png" alt="bR54AO.png"></a></p>
<h2 id="DDL操作库"><a href="#DDL操作库" class="headerlink" title="DDL操作库"></a>DDL操作库</h2><p><strong>增，创建库</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>create database 数据库名；</td>
<td>创建指定名称的数据库。</td>
</tr>
<tr>
<td>create database 数据库名 character  set  字符集；</td>
<td>创建指定名称的数据库，并且指定字符集（一般都指定utf8）</td>
</tr>
</tbody></table>
<p><strong>删，删除库</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>drop database 数据库名</td>
<td>从MySql中永久的删除某个数据库</td>
</tr>
</tbody></table>
<p><strong>改，修改库</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>alter database 数据库名 character  set 字符集；</td>
<td>数据库的字符集修改操作</td>
</tr>
</tbody></table>
<p><strong>查，查询库</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>use 数据库</td>
<td>切换数据库</td>
</tr>
<tr>
<td>select database();</td>
<td>查看当前正在使用的数据库</td>
</tr>
<tr>
<td>show databases;</td>
<td>查看Mysql中 都有哪些数据库</td>
</tr>
<tr>
<td>show create database 数据库名；</td>
<td>查看一个数据库的定义信息</td>
</tr>
</tbody></table>
<h2 id="DDL操作表"><a href="#DDL操作表" class="headerlink" title="DDL操作表"></a>DDL操作表</h2><p><strong>MySQL的数据类型</strong></p>
<p>常见类型</p>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>整型</td>
</tr>
<tr>
<td>double</td>
<td>浮点型</td>
</tr>
<tr>
<td>char</td>
<td>字符串型（固定长度）</td>
</tr>
<tr>
<td>varchar</td>
<td>字符串型（可变长度，根据实际内容）</td>
</tr>
<tr>
<td>date</td>
<td>日期类型，给是为  yyyy-MM-dd ,只有年月日，没有时分秒</td>
</tr>
</tbody></table>
<p>其他类型</p>
<p><a href="https://imgtu.com/i/bRIgPg"><img src="https://s1.ax1x.com/2022/03/09/bRIgPg.png" alt="bRIgPg.png"></a></p>
<p>注意：MySQL中的 char类型与 varchar类型，都对应了 Java中的字符串类型，区别在于：</p>
<ul>
<li>char类型是固定长度的： 根据定义的字符串长度分配足够的空间。</li>
<li>varchar类型是可变长度的： 只使用字符串长度所需的空间</li>
</ul>
<p>适用场景：</p>
<ul>
<li>char类型适合存储 固定长度的字符串，比如 密码 ，性别一类 </li>
<li>varchar类型适合存储 在一定范围内，有长度变化的字符串 ，如姓名</li>
</ul>
<p><strong>增，创建表</strong></p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">	字段名1 字段类型(长度),</span><br><span class="line">	字段名2 字段类型(长度),</span><br><span class="line">	字段名3 字段类型(长度)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	uname <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>快速创建一个表test1，结构与表test相同（复制表结构）：</p>
<p>CREATE TABLE test1 LIKE test;</p>
<p><strong>删，删除表</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>drop table 表名；</td>
<td>删除表（从数据库中永久删除某一张表）</td>
</tr>
<tr>
<td>drop table if exists 表名；</td>
<td>判断表是否存在， 存在的话就删除,不存在就不执行删除</td>
</tr>
</tbody></table>
<p><strong>改，修改表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表名字rename</span></span><br><span class="line">RENAME <span class="keyword">TABLE</span> test <span class="keyword">TO</span> test1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表字符集alter</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给表添加一个字段alter,add</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">ADD</span> age <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段信息alter, modify</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 MODIFY age <span class="type">VARCHAR</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段名字和信息alter, change</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 CHANGE age uage <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给表删除一个字段alter, drop</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">DROP</span> uage;</span><br></pre></td></tr></table></figure>

<p><strong>查，查看表</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>show tables;</td>
<td>查看当前数据库中的所有表名</td>
</tr>
<tr>
<td>desc 表名；</td>
<td>查看数据表的结构</td>
</tr>
<tr>
<td>show create table 表名</td>
<td>查看创建表的sql语句</td>
</tr>
</tbody></table>
<h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><p>数据管理语言</p>
<p><strong>增，插入数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名 （字段名1，字段名2） values(字段值1，字段值2);  </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名 values(字段值1，字段值2...所有字段);</span><br></pre></td></tr></table></figure>

<p><strong>删，删除数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 where 条件表达式;  删除表的指定条件的记录</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名;       删除表的所有记录，不推荐</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truncate table 表名;    删除表的所有记录，推荐</span><br></pre></td></tr></table></figure>

<p><strong>改，修改数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 列名 = 值;   修改表中所有数据</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 列名 = 值 where 条件表达式；  修改表中指定条件的数据</span><br></pre></td></tr></table></figure>

<h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><p>数据查询语言</p>
<p><strong>查，查询数据</strong></p>
<p>select 列名 from 表名  where 条件表达式</p>
<p><strong>简单查询</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM 表名;        查询所有字段，使用 * 表示所有列</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id,uname FROM 表名;   查询指定的字段</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT uname AS &#x27;姓名&#x27; FROM 表名;  给查询出来的字段取别名   </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id + 100 AS &#x27;编号&#x27;, uname FROM 表名;  查询出的结果可以进行运算</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT * FROM 表名;     使用DISTINCT去重操作</span><br></pre></td></tr></table></figure>

<p><strong>运算符</strong></p>
<p>比较运算符</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>&gt; &lt; &lt;= &gt;= = &lt;&gt; !=</td>
<td>大于、小于、大于(小于)等于、不等于</td>
</tr>
<tr>
<td>BETWEEN …AND…</td>
<td>显示在某一区间的值  例如: 2000-10000之间：  Between 2000 and 10000</td>
</tr>
<tr>
<td>IN(集合)</td>
<td>集合表示多个值,使用逗号分隔,例如:  name in (悟空，八戒) in中的每个数据都会作为一次条件,只要满足条件就会显示</td>
</tr>
<tr>
<td>LIKE ‘%张%’</td>
<td>模糊查询，%表示任意多个字符，_表示任意一个字符</td>
</tr>
<tr>
<td>IS NULL</td>
<td>查询某一列为NULL的值, 注: 不能写 =  NULL</td>
</tr>
<tr>
<td>IS NOT NULL</td>
<td>查询某一列不为NULL的值</td>
</tr>
</tbody></table>
<p>逻辑运算符</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>And &amp;&amp;</td>
<td>多个条件同时成立</td>
</tr>
<tr>
<td>Or ||</td>
<td>多个条件任一成立</td>
</tr>
<tr>
<td>Not</td>
<td>不成立，取反。</td>
</tr>
</tbody></table>
<p><strong>条件查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询员工姓名为黄蓉的员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;黄蓉&#x27;</span>; </span><br><span class="line"></span><br><span class="line"># 查询薪水价格为<span class="number">5000</span>的员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">=</span> <span class="number">5000</span>; </span><br><span class="line"></span><br><span class="line"># 查询薪水价格不是<span class="number">5000</span>的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">!=</span> <span class="number">5000</span>; </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">&lt;&gt;</span> <span class="number">5000</span>; </span><br><span class="line"></span><br><span class="line"># 查询薪水价格大于<span class="number">6000</span>元的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">6000</span>;</span><br><span class="line"></span><br><span class="line"># 查询薪水价格在<span class="number">5000</span>到<span class="number">10000</span>之间所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> <span class="number">5000</span> <span class="keyword">AND</span> <span class="number">10000</span>; </span><br><span class="line"></span><br><span class="line"># 查询薪水价格是<span class="number">3600</span>或<span class="number">7200</span>或者<span class="number">20000</span>的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">=</span> <span class="number">3600</span> <span class="keyword">OR</span> salary <span class="operator">=</span> <span class="number">7200</span> <span class="keyword">OR</span> salary <span class="operator">=</span> <span class="number">20000</span>; </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="keyword">IN</span>(<span class="number">3600</span>,<span class="number">7200</span>,<span class="number">20000</span>);</span><br></pre></td></tr></table></figure>

<p><strong>模糊查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询含有<span class="string">&#x27;精&#x27;</span>字的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;%精%&#x27;</span>; </span><br><span class="line"></span><br><span class="line"># 查询以<span class="string">&#x27;孙&#x27;</span>开头的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;孙%&#x27;</span>; </span><br><span class="line"></span><br><span class="line"># 查询第二个字为<span class="string">&#x27;兔&#x27;</span>的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;_兔%&#x27;</span>; </span><br><span class="line"></span><br><span class="line"># 查询没有部门的员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_name <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"># 查询有部门的员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>





























































































































]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
