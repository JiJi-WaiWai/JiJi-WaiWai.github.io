<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><span id="more"></span>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>数据分析与挖掘(数据分析三剑客)</title>
    <url>/2021/11/25/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%89%E5%89%91%E5%AE%A2/</url>
    <content><![CDATA[<p>介绍了python中用于数据分析的三个模块，numpy，Pandas，Matplotlib。</p>
<span id="more"></span>

<h1 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h1><p>本次学习我们使用的是Anaconda数据科学平台</p>
<p>Anaconda是Python的一个发行版，里面内置了很多常用的库，例如Pandas、NumPy，Matplotlib，这些都不用自己再安装（pip）了。</p>
<p>下载一个Anaconda就自带了Python和常用的工具，Python本身也不需要再单独下载了。</p>
<p><em><strong>注：</strong></em>如果自己已经安装了python，并且需要再安装Anaconda的话，就把之前安装的python的环境变量删除掉。安装时记得勾选添加环境变量。</p>
<p><strong>jupyter notebook</strong>  </p>
<p>它是一个交互式记事本（Anaconda自带），里面可以写Python代码，还可以插入文字和图片（markdown模式）。</p>
<p>使用方法：</p>
<p>在cmd中打开需要目录后，输入jupyter notebook即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#jupyter notebook 快捷键</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行：Ctrl + Enter 或 Shift + Enter</span></span><br><span class="line"><span class="comment">#注释：Ctrl + /</span></span><br><span class="line"><span class="comment">#帮助：Shift + Tab(按一到四次)</span></span><br></pre></td></tr></table></figure>

<p>在jupyter notebook中安装包：<code>! pip install 库名 -i https://pypi.douban.com/simple</code></p>
<h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><h2 id="数组array"><a href="#数组array" class="headerlink" title="数组array"></a>数组array</h2><p><strong>运算快，效率高</strong></p>
<p>列表list在进行数学运算时，列表不能直接参与运算，需要借助for循环、列表表达式等。而numpy提供的数组可以直接参与运算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment"># list + 5    会报错</span></span><br><span class="line">array1 = np.array(<span class="built_in">list</span>)</span><br><span class="line">array1 + <span class="number">5</span>     </span><br><span class="line"><span class="comment">#结果：array([6, 7, 8, 9])</span></span><br></pre></td></tr></table></figure>

<p>列表的索引方法可以在数组中使用，而且数组还有间断索引和逻辑索引。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([<span class="number">11</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">18</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#数组和列表一样可以索引，切片索引</span></span><br><span class="line">array[-<span class="number">1</span>]     </span><br><span class="line">array[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment">#间隔索引</span></span><br><span class="line">array[[<span class="number">0</span>,<span class="number">2</span>]]    <span class="comment">#结果：array([11, 15])</span></span><br><span class="line"><span class="comment">#逻辑索引，即布尔索引</span></span><br><span class="line">array&lt;<span class="number">10</span>        <span class="comment">#结果：array([False,  True, False,  True, False,  True])</span></span><br><span class="line">array[array&lt;<span class="number">10</span>]   <span class="comment">#结果：array([8, 6, 1])</span></span><br></pre></td></tr></table></figure>

<p><strong>二维数组</strong>，索引时采用  [行下标,列下标]  即  [rows,cols] ，下标都是从0开始。使用 ：符号表示任意。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array2 = np.array([</span><br><span class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">        [<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>],</span><br><span class="line">        [<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>]</span><br><span class="line">    ])</span><br><span class="line">array2[<span class="number">1</span>,<span class="number">1</span>]        <span class="comment">#结果：6</span></span><br><span class="line">array2[<span class="number">1</span>,:]        <span class="comment">#结果：array([2, 6, 9, 1])</span></span><br><span class="line">array2[:,<span class="number">2</span>]        <span class="comment">#结果：array([3, 9, 7])</span></span><br></pre></td></tr></table></figure>

<h2 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h2><p><strong>数学运算符</strong></p>
<ul>
<li><p>+：数组对应元素的和</p>
</li>
<li><p>-：数组对应元素的差</p>
</li>
<li><p>*：数组对应元素的乘积</p>
</li>
<li><p>/：数组对应元素的商</p>
</li>
<li><p>%：数组对应元素商的余数</p>
</li>
<li><p>//：数组对应元素的整除数</p>
</li>
<li><p>**：数组对应元素的幂指数</p>
</li>
</ul>
<p><strong>比较运算符</strong></p>
<ul>
<li>&gt; 或 np.greater(arr1,arr2)：判断arr1的元素是否大于arr2的元素</li>
<li>&gt;= 或 np.greater_equal(arr1,arr2)：判断arr1的元素是否大于等于arr2的元素</li>
<li>&lt; 或 np.less(arr1,arr2)：判断arr1的元素是否小于arr2的元素</li>
<li>&lt;= 或 np.less_equal(arr1,arr2)：判断arr1的元素是否小于等于arr2的元素</li>
<li>== 或 np.equal(arr1,arr2)：判断arr1的元素是否等于arr2的元素</li>
<li>!= 或 np.not_equal(arr1,arr2)：判断arr1的元素是否不等于arr2的元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>])</span><br><span class="line">arr2 = np.array([<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">9</span>])</span><br><span class="line">arr1+arr2           <span class="comment">#结果：array([ 3,  9,  6, 15])</span></span><br><span class="line">arr1&lt;arr2           <span class="comment">#结果：array([ True, False, False,  True])</span></span><br><span class="line">np.less(arr1,arr2)  <span class="comment">#结果：array([ True, False, False,  True])</span></span><br></pre></td></tr></table></figure>

<p><strong>常用的数学函数</strong></p>
<ul>
<li>np.round(arr)：对各元素四舍五入</li>
<li>np.sqrt(arr)：计算各元素的算术平方根</li>
<li>np.square(arr)：计算各元素的平方值</li>
<li>np.exp(arr)：计算以e为底的指数</li>
<li>np.power(arr, a)：计算各元素的指数</li>
<li>np.log2(arr)：计算以2为底各元素的对数</li>
<li>np.log10(arr)：计算以10为底各元素的对数</li>
<li>np.log(arr)：计算以e为底各元素的对数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>])</span><br><span class="line">np.square(arr1)</span><br><span class="line"><span class="comment">#结果：array([ 1, 25,  9, 36], dtype=int32)</span></span><br><span class="line">np.sqrt(arr1)</span><br><span class="line"><span class="comment">#结果：array([1.        , 2.23606798, 1.73205081, 2.44948974])</span></span><br></pre></td></tr></table></figure>

<p><strong>常用的统计函数</strong></p>
<ul>
<li>np.min(arr,axis)：按照轴的方向计算最小值</li>
<li>np.max(arr,axis)：按照轴的方向计算最大值</li>
<li>np.mean(arr,axis)：按照轴的方向计算平均值</li>
<li>np.median(arr,axis)：按照轴的方向计算中位数</li>
<li>np.sum(arr,axis)：按照轴的方向计算求和</li>
<li>np.std(arr,axis)：按照轴的方向计算标准差</li>
<li>np.var(arr,axis)：按照轴的方向计算方差</li>
</ul>
<p><em>注意</em>：axis=0 时，计算数组各列的统计值，形象记忆变成胖子；axis=1时，计算数组各行的统计值，形象记忆变成瘦子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</span><br><span class="line">    [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">#对每行计算求和,三种写法</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(np.<span class="built_in">sum</span>(arr[i,:]))</span><br><span class="line">np.<span class="built_in">sum</span>(arr, axis=<span class="number">1</span>)</span><br><span class="line">arr.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对每列计算求和，三种写法</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(np.<span class="built_in">sum</span>(arr[:,i]))</span><br><span class="line">np.<span class="built_in">sum</span>(arr, axis=<span class="number">0</span>)</span><br><span class="line">arr.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="random随机数"><a href="#random随机数" class="headerlink" title="random随机数"></a>random随机数</h2><p>import numpy as np</p>
<ul>
<li>np.random.randint()：随机整数</li>
<li>np.random.uniform()：随机均匀分布</li>
<li>np.random.normal()：随机正态分布</li>
</ul>
<p><strong>案例</strong>：有100钱去理想状态下赌博，赢了加1钱，输了扣1钱。模拟赌1000次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">money = <span class="number">100</span></span><br><span class="line">P = [<span class="number">100</span>]  <span class="comment">#用于记录每次的钱</span></span><br><span class="line">R = np.random.uniform(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> R:</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">0.5</span>:</span><br><span class="line">        money -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">0.5</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        money += <span class="number">1</span></span><br><span class="line">    P.append(money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1001</span>), P)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><a href="https://imgtu.com/i/oM0B9I"><img src="https://z3.ax1x.com/2021/11/29/oM0B9I.png" alt="oM0B9I.png" border="0" /></a></p>
<h1 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h1><h2 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h2><p><strong>文本文件</strong></p>
<p>pandas.read_csv(filepath_or_buffer, sep=”,”)<br><em>参数</em>：</p>
<ul>
<li>filepath_or_buffer：指定txt或csv文件所在的路径</li>
<li>sep：指定原数据集中各字段之间的分隔符，默认为逗号” , “。</li>
<li>header：是否将原数据集中第一行作为表头，默认是，赋值None不是</li>
<li>names：如果原数据集中没有表头，该参数添加表头</li>
<li>usecols：指定需要读取原数据集中的那些字段</li>
<li>skiprows：数据读取时，指定需要跳过原数据集开头的行数（空白行不计入）</li>
<li>skipfooter：数据读取时，指定需要跳过原数据集末尾的行数</li>
<li>converters：将字段的类型转换（以字典的形式）</li>
<li>encoding：指定字符编码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&quot;D:\tempFile(2)&quot;</span></span><br><span class="line">pn.read_csv(path+<span class="string">&quot;/test_1.txt&quot;</span>, sep=<span class="string">&quot; &quot;</span>, skiprows=<span class="number">1</span>, skipfooter=<span class="number">1</span>, </span><br><span class="line">            header=<span class="literal">None</span>, names=[<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>], </span><br><span class="line">            usecols=[<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>], converters=&#123;<span class="string">&quot;id&quot;</span>:<span class="built_in">str</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>excel表</strong></p>
<p>pandas.read_excel(io, sheetname=0)</p>
<p><em>参数</em>：</p>
<ul>
<li>io：工作蒲的路径</li>
<li>sheetname：哪张表，默认第一张</li>
<li>header，skiprows，skip_footer等等参数同上。</li>
</ul>
<p><strong>sql</strong></p>
<p>pandas.read_sql(“sql语句”, con=连接)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"><span class="comment">#利用pymysql创建连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;root&quot;</span>, </span><br><span class="line">                      database=<span class="string">&quot;studentv2db&quot;</span>, port=<span class="number">3306</span>, charset=<span class="string">&quot;utf8&quot;</span>, )</span><br><span class="line"></span><br><span class="line">df = pn.read_sql(<span class="string">&quot;select * from student&quot;</span>, con=con)</span><br><span class="line"><span class="comment">#关闭资源</span></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure>

<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><strong>数据的概览</strong>（df表示数据集）</p>
<ul>
<li>df.head()：浏览前5条数据</li>
<li>df.shape：查看数据量，几行几列</li>
<li>df.size：查看数据量，行*列</li>
<li>df.columns：查看所有字段</li>
<li>df.dtypes：查看字段类型，在pandas中，非数值型就是object类型</li>
<li>df.describe()：数据描述，默认对数值型字段经行数学统计。df.describe(include=”object”)对非数值型字段数学统计。</li>
</ul>
<p><strong>数据筛选</strong></p>
<ul>
<li>df.字段名：选取某一字段</li>
<li>df[“字段名”]：选取某一字段，可以多个字段，平时推荐该方法</li>
<li>df.loc[行条件，列名称]：选取某子表，用冒号” : “ 表示任意行或列。如<code>df.loc[ df[&quot;Gender&quot;]==&quot;男&quot;, [&quot;Name&quot;, &quot;Gender&quot;] ]</code>，表示选取“Gender”条件为男的”Name“和”Gender“字段。</li>
</ul>
<p><strong>补充</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#简单构造数据集df</span></span><br><span class="line">df = pn.DataFrame(&#123;<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;bob&quot;</span>,<span class="string">&quot;jake&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">18</span>,<span class="number">20</span>]&#125;)</span><br><span class="line"><span class="comment">#对df数据集重新定义字段顺序</span></span><br><span class="line">df = pn.DataFrame(df, columns=[<span class="string">&quot;age&quot;</span>, <span class="string">&quot;name&quot;</span>])</span><br><span class="line"><span class="comment">#对df数据集的字段重命名</span></span><br><span class="line">df = df.rename(columns=&#123;<span class="string">&quot;age&quot;</span>:<span class="string">&quot;年龄&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;姓名&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><p><strong>数据类型的修改</strong></p>
<ul>
<li><p>pandas.to_datetime(columns,format=)：转换成时间类型</p>
</li>
<li><p>columns.astype()：转换从其他类型</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将df的&quot;Birthday&quot;字段转换成时间类型</span></span><br><span class="line">df[<span class="string">&quot;Birthday&quot;</span>] = pn.to_datetime(df[<span class="string">&quot;Birthday&quot;</span>], <span class="built_in">format</span>=<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"><span class="comment">#将df的&quot;SNo&quot;字段转换成str类型</span></span><br><span class="line">df[<span class="string">&quot;SNo&quot;</span>] = df[<span class="string">&quot;SNo&quot;</span>].astype(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>

<p><strong>数据冗余</strong></p>
<ul>
<li>df.duplicated()：查看数据冗余（所有字段都一致），subset参数指定某一字段</li>
<li>df.drop_duplicates()：删除冗余的记录，inplace参数为True表示同步原数据集df</li>
</ul>
<p><strong>异常值识别和处理</strong></p>
<p>无</p>
<p><strong>缺省值</strong></p>
<ul>
<li>df.isnull()：查看缺省值</li>
<li>df.dropna()：删除缺省值</li>
<li>df.fillna()：填充缺省值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看,可借助any()和sum()</span></span><br><span class="line">df.isnull()</span><br><span class="line">df.isnull().<span class="built_in">any</span>(axis=<span class="number">0</span>)</span><br><span class="line">df.isnull().<span class="built_in">sum</span>(axis=<span class="number">0</span>)                 <span class="comment">#计算每个字段的缺省值数量</span></span><br><span class="line">df.isnull().<span class="built_in">sum</span>(axis=<span class="number">0</span>) / df.shape[<span class="number">0</span>]   <span class="comment">#计算每个字段的缺省值率</span></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">df.dropna(axis=<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#填充</span></span><br><span class="line">df.fillna(value=<span class="number">0</span>, inplace=<span class="literal">True</span>)      <span class="comment">#所有缺省值填充0</span></span><br><span class="line">df.fillna(value=&#123;<span class="string">&quot;Birthday&quot;</span>:df[<span class="string">&quot;Birthday&quot;</span>].mode()[<span class="number">0</span>],<span class="string">&quot;Image&quot;</span>:<span class="string">&quot;无&quot;</span>&#125;)   <span class="comment">#不同字段填充不同数据</span></span><br><span class="line"><span class="comment">#补充要点</span></span><br><span class="line">df[<span class="string">&quot;Birthday&quot;</span>].mode()  <span class="comment">#某字段众数</span></span><br><span class="line">df[<span class="string">&quot;SNo&quot;</span>].median()     <span class="comment">#某字段中位数</span></span><br></pre></td></tr></table></figure>

<h2 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h2><p><strong>透视表功能</strong></p>
<p>pandas.pivot_table(data, index=None, columns=None, values=None, aggfunc=”mean”)</p>
<p><em>参数</em>：</p>
<ul>
<li>data：原数据集</li>
<li>index：需要拉入”行标签“的字段列表</li>
<li>columns：需要拉入”列标签“的字段列表</li>
<li>values：需要计算的字段</li>
<li>aggfunc：指定统计函数，也可以指定numpy模块中的其他统计函数</li>
<li>fill_value：指定一个标量，用于填充缺失值</li>
<li>margins：bool类型参数，是否显示行或列的总计数，默认为False</li>
<li>droopan：bool类型参数，是否删除整列为缺失的字段，默认为True</li>
<li>margins_name：指定行或列的总计名称，默认为All</li>
</ul>
<p>数据集如下：表3-1</p>
<table>
<thead>
<tr>
<th>id</th>
<th>姓名</th>
<th>性别</th>
<th>部门</th>
<th>年龄</th>
<th>薪水</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>李</td>
<td>男</td>
<td>开发部</td>
<td>23</td>
<td>12000</td>
</tr>
<tr>
<td>2</td>
<td>王</td>
<td>女</td>
<td>UI部</td>
<td>33</td>
<td>8000</td>
</tr>
<tr>
<td>3</td>
<td>刘</td>
<td>女</td>
<td>开发部</td>
<td>34</td>
<td>15000</td>
</tr>
<tr>
<td>4</td>
<td>赵</td>
<td>女</td>
<td>UI部</td>
<td>45</td>
<td>9000</td>
</tr>
<tr>
<td>5</td>
<td>江</td>
<td>男</td>
<td>测试部</td>
<td>26</td>
<td>23000</td>
</tr>
<tr>
<td>6</td>
<td>陈</td>
<td>女</td>
<td>测试部</td>
<td>28</td>
<td>18000</td>
</tr>
<tr>
<td>7</td>
<td>阮</td>
<td>女</td>
<td>开发部</td>
<td>29</td>
<td>15000</td>
</tr>
<tr>
<td>8</td>
<td>莫</td>
<td>男</td>
<td>UI部</td>
<td>27</td>
<td>10000</td>
</tr>
<tr>
<td>9</td>
<td>金</td>
<td>男</td>
<td>开发部</td>
<td>18</td>
<td>8000</td>
</tr>
<tr>
<td>10</td>
<td>曹</td>
<td>男</td>
<td>开发部</td>
<td>36</td>
<td>10000</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"><span class="comment">#df数据集如上表3-1</span></span><br><span class="line">df = pn.read_excel(<span class="string">r&quot;D:\tempFile(2)\test_2.xlsx&quot;</span>)</span><br><span class="line"><span class="comment">#男女性别薪水的平均值</span></span><br><span class="line">pn.pivot_table(df, index=<span class="string">&quot;性别&quot;</span>, values=<span class="string">&quot;薪水&quot;</span>, aggfunc=<span class="string">&quot;mean&quot;</span>)</span><br><span class="line"><span class="comment">#不同部门，男女性别薪水平均值</span></span><br><span class="line">pn.pivot_table(df, index=<span class="string">&quot;部门&quot;</span>, columns=<span class="string">&quot;性别&quot;</span>, values=<span class="string">&quot;薪水&quot;</span>, aggfunc=<span class="string">&quot;mean&quot;</span>)</span><br><span class="line"><span class="comment"># 不同部门，男女性别数量</span></span><br><span class="line">pn.pivot_table(df, index=<span class="string">&quot;部门&quot;</span>, columns=<span class="string">&quot;性别&quot;</span>, aggfunc=<span class="string">&quot;size&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>分组汇总</strong></p>
<ul>
<li>df.groupby(by=”字段”)：在汇总前，设定需要分组的字段</li>
<li>grouped.aggregate()：基于上面的groupby方法分组后的结果，做进一步的统计汇总。需以字典的形式传参，选择统计的字段和对应的统计方法。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#df数据集如上表3-1</span></span><br><span class="line">df = pn.read_excel(<span class="string">r&quot;D:\tempFile(2)\test_2.xlsx&quot;</span>)</span><br><span class="line"><span class="comment">#对部门，性别进行分组</span></span><br><span class="line">grouped = df.groupby(by = [<span class="string">&quot;部门&quot;</span>, <span class="string">&quot;性别&quot;</span>])</span><br><span class="line"><span class="comment">#对分组后的结果做统计计算：年龄的最小值，薪水平均值</span></span><br><span class="line">result = grouped.aggregate(&#123;<span class="string">&quot;年龄&quot;</span>:np.<span class="built_in">min</span>, <span class="string">&quot;薪水&quot;</span>:np.mean&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>合并表</strong></p>
<p>pandas.concat(objs)</p>
<p><em>参数</em></p>
<ul>
<li>objs：指定需要合并的对象</li>
<li>axis：合并的轴，默认为0，合并行；为1，合并列。</li>
<li>join：合并的方式，默认为outer，表示合并所有数据；为inner，表示合并公共部分数据</li>
<li>join_axes：合并数据后，指定保留的数据轴</li>
<li>ignore_index：bool类型参数，是否忽略原数据集的索引，默认False。如果为True，则重新生成新索引。</li>
<li>keys：为合并后的数据添加新的索引，用于区分各个数据源于哪张表。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"></span><br><span class="line">df1 = pn.DataFrame(&#123;<span class="string">&quot;id&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;Jake&quot;</span>,<span class="string">&quot;Alice&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">18</span>,<span class="number">16</span>,<span class="number">10</span>]&#125;)</span><br><span class="line">df2 = pn.DataFrame(&#123;<span class="string">&quot;id&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;Jeff&quot;</span>,<span class="string">&quot;Jamse&quot;</span>,<span class="string">&quot;Alice&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">11</span>,<span class="number">25</span>,<span class="number">10</span>]&#125;)</span><br><span class="line">pn.concat([df1,df2],keys=[<span class="string">&quot;表1&quot;</span>,<span class="string">&quot;表2&quot;</span>])</span><br></pre></td></tr></table></figure>

<p><strong>连接表</strong></p>
<p>pandas.merge(left, right, how=”inner”, on=None)</p>
<p><em>参数</em></p>
<ul>
<li>left：连接的左表（主表）</li>
<li>right：连接的右表（辅表）</li>
<li>how：连接方式，默认inner内连接。left左连接，right右链接，outer外连接</li>
<li>on：指定连接的两张表共同的字段。如果没有共同的字段，则使用下面两个参数</li>
<li>left_on：指定左表需要连接的共同字段</li>
<li>rigth_on：指定右表需要连接的共同字段</li>
<li>left_index：bool类型参数，是否将左表的行索引作为连接的共同字段，默认False</li>
<li>right_index：bool类型参数，是否将右表的行索引作为连接的共同字段，默认False</li>
<li>sort：bool类型参数，是否对连接后的数据按照共同字段排序，默认False</li>
<li>suffixes：如果数据连接中存在相同的字段名，则使用前缀经行区分。传列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line">df1 = pn.DataFrame(&#123;<span class="string">&quot;id&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;Jake&quot;</span>,<span class="string">&quot;Alice&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">18</span>,<span class="number">16</span>,<span class="number">10</span>]&#125;)</span><br><span class="line">df2 = pn.DataFrame(&#123;<span class="string">&quot;ID&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;score&quot;</span>:[<span class="number">99</span>,<span class="number">83</span>,<span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line">pn.merge(df1,df2,left_on=<span class="string">&quot;id&quot;</span>,right_on=<span class="string">&quot;ID&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1>]]></content>
      <categories>
        <category>数据分析与挖掘</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2022/07/08/Linux/</url>
    <content><![CDATA[<p>使用VMware虚拟机，安装CentOS版本的Linux系统。</p>
<p>使用Xshell和Xftp管理Linux系统。</p>
<span id="more"></span>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>计算机体系结构</strong></p>
<ul>
<li>计算机由计算机硬件和计算机软件两个部分组成，其中计算机软件(Computer Software)可分为系统软件和应用软件，系统软件就是操作系统，是其他软件的基础。</li>
<li>目前主流的操作系统有：Windows系列、Unix系列、Linux系列、Android系列、IOS系列、…</li>
</ul>
<p><strong>Linux概述</strong></p>
<ul>
<li>Linux系统诞生于1991年，在林纳斯·托瓦兹（Linus Torvalds）上大学期间因不满意教学中使用的MINIX操作系统并出于个人爱好设计和研发的。</li>
<li>Linux系统是一套免费、自由、开发源代码的类Unix操作系统，是一个基于Posix(PortableOperating System Interface)标准和多用户、多任务、支持多线程的操作系统。</li>
<li>Linux能运行主要的Unix工具软件、应用程序和网络协议，支持32位和64位硬件。</li>
</ul>
<p><strong>Linux主要发行版本</strong></p>
<p><a href="https://imgtu.com/i/jBtXKU"><img src="https://s1.ax1x.com/2022/07/08/jBtXKU.png" alt="jBtXKU.png"></a></p>
<ul>
<li>Redhat：目前最大的Linux发行商，功能全面并且稳定，于2018年10月被IBM以340亿美元的价格收购。</li>
<li>Ubuntu：目前最好的Linux桌面版，拥有很人性化的亮丽的交互界面，强大的软件源支持。</li>
<li>CentOS：是RHEL的克隆版本，可以认为是免费版本的Redhat系统。（学习）</li>
</ul>
<h1 id="CentOS系统安装"><a href="#CentOS系统安装" class="headerlink" title="CentOS系统安装"></a>CentOS系统安装</h1><p>先安装VMware虚拟机，在虚拟机中安装CentOS系统。</p>
<p><strong>Vmware的下载和安装</strong></p>
<p>下载地址：<a href="https://www.vmware.com/cn.html">https://www.vmware.com/cn.html</a><br>按照安装教程一步步操作即可。</p>
<p><strong>CentOS系统的下载和安装</strong></p>
<p>下载地址：<a href="https://www.centos.org/">https://www.centos.org/</a><br>按照安装教程通过Vmware软件进行CentOS系统的安装。</p>
<p><strong>目录结构</strong></p>
<table>
<thead>
<tr>
<th>目录名称</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>/bin</td>
<td>binarie:存放二进制可执行文件 (例如tomcat的bin目录)</td>
</tr>
<tr>
<td>/sbin</td>
<td>super  binaries:存放二进制文件,只有root用户才能访问</td>
</tr>
<tr>
<td>/boot</td>
<td>系统启动核心目录,存放系统启动程序文件，例:查看启动文件的大小</td>
</tr>
<tr>
<td>/dev</td>
<td>devices:用于存放硬件设备文件</td>
</tr>
<tr>
<td>/etc</td>
<td>etcetera:存放系统配置文件(字体文件等)</td>
</tr>
<tr>
<td>/home</td>
<td>家目录,每一个用户都有一个”家”，用户的起始目录,创建用户跟随创建相应的家目录</td>
</tr>
<tr>
<td>/lib</td>
<td>library:系统资源文件类库</td>
</tr>
<tr>
<td>/proc</td>
<td>内存映射目录,可以查看系统相关硬件的信息</td>
</tr>
<tr>
<td>/var</td>
<td>variable:可变的,变量.  部署项目用的</td>
</tr>
<tr>
<td>/tmp</td>
<td>temporary:用来存放临时文件</td>
</tr>
<tr>
<td>/root</td>
<td>超级用户root的家目录</td>
</tr>
<tr>
<td>/usr</td>
<td>unix  shared resouce: 存放unix共享系统资源，类似于” C:/ Program Files”,用于安装各种软件</td>
</tr>
</tbody></table>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p> <strong>Shell的概念</strong></p>
<p>Shell俗称外壳，是提供用户使用界面的一种软件，叫做命令解释器。<br>主要负责接受用户输入的命令，然后调用相应的应用程序，最后向用户输出程序运行的结果。</p>
<p><strong>命令的格式</strong><br>命令 [-选项] [参数]<br>命令区分大小写，其中选项和参数是可选的，中间采用空格隔开。</p>
<p><strong>常用命令详解</strong></p>
<p><strong>(1)查看目录下文件/目录</strong>  </p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>ls</td>
<td>list显示文件</td>
</tr>
<tr>
<td>ls -l 或  ll</td>
<td>list  -list显示详细信息</td>
</tr>
<tr>
<td>ls -a</td>
<td>list  -all显示全部(包含隐藏文件)文件</td>
</tr>
<tr>
<td>ls -al</td>
<td>list  -all list 上两个合体</td>
</tr>
<tr>
<td>ls 目录名</td>
<td>查看目录下有什么东西</td>
</tr>
</tbody></table>
<p><strong>(2)目录切换</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>cd ..</td>
<td>上一级目录</td>
</tr>
<tr>
<td>cd dirname</td>
<td>进入目录</td>
</tr>
<tr>
<td>cd 或  cd ~</td>
<td>直接回到用户的家目录</td>
</tr>
<tr>
<td>cd /</td>
<td>回到系统根目录</td>
</tr>
</tbody></table>
<p><strong>(3)查看完整路径</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>pwd</td>
<td>查看当前目录所在的位置</td>
</tr>
</tbody></table>
<p><strong>(4)查看当前用户</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th></th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>whoami</td>
<td></td>
<td>查看当前用户的名称</td>
</tr>
</tbody></table>
<p><strong>(5)用户切换</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>su</td>
<td>普通用户切换到root用户</td>
</tr>
<tr>
<td>su root</td>
<td>切换到root用户</td>
</tr>
<tr>
<td>su 用户名</td>
<td>切换到普通用户</td>
</tr>
<tr>
<td>exit</td>
<td>退回到原来用户</td>
</tr>
</tbody></table>
<p>最好使用su和exit搭配使用，否则多次使用 ”su用户“ 会导致用户的”叠加”。</p>
<p><strong>(6)管理用户</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>useradd xxx</td>
<td>创建用户</td>
</tr>
<tr>
<td>passwd xxx</td>
<td>为创建的用户设置密码</td>
</tr>
<tr>
<td>userdel</td>
<td>删除用户</td>
</tr>
</tbody></table>
<p><strong>(7)查看命令的所在目录</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>which 命令</td>
<td>查看指定命令所在的路径信息</td>
</tr>
</tbody></table>
<p><strong>(8)文件操作</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>touch fileName</td>
<td>创建名字为fileName的文件</td>
</tr>
<tr>
<td>touch dir/fileName</td>
<td>在dir目录下创建名字为fileName的文件</td>
</tr>
<tr>
<td>echo 内容  &gt; fileName</td>
<td>把内容覆盖写到文件中，若文件不存在则创建</td>
</tr>
<tr>
<td>echo 内容  &gt;&gt; fileName</td>
<td>把内容追加到文件中</td>
</tr>
<tr>
<td>cat fileName</td>
<td>打印文件内容到终端</td>
</tr>
<tr>
<td>more fileName</td>
<td>分屏查看文件各行内容，不支持回看</td>
</tr>
<tr>
<td>less fileName</td>
<td>查看文件各部分内容，支持回看</td>
</tr>
<tr>
<td>head -n fileName</td>
<td>查看文件的前n行内容</td>
</tr>
<tr>
<td>tail -n fileName</td>
<td>查看文件末尾n行内容</td>
</tr>
<tr>
<td>wc fileName</td>
<td>查看文件的行数</td>
</tr>
</tbody></table>
<p><strong>(9)目录操作</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>mkdir 目录名</td>
<td>创建普通文件夹</td>
</tr>
<tr>
<td>mkdir -p 目录/目录/目录</td>
<td>递归方式创建多级父子文件夹</td>
</tr>
<tr>
<td>mv dir1 dir2</td>
<td>将dir1移动到dir2中</td>
</tr>
<tr>
<td>mv dir1/dir2 ./</td>
<td>将dir1中dir2移动到当前目录下</td>
</tr>
<tr>
<td>mv dir1 name</td>
<td>将dir1改名为name</td>
</tr>
<tr>
<td>cp dir1 name</td>
<td>将dir1拷贝为name</td>
</tr>
<tr>
<td>cp -r dir1 dir2</td>
<td>需要设置参数  -r (recursive递归) 无视目录层次</td>
</tr>
<tr>
<td>rm 文件</td>
<td>删除文件</td>
</tr>
<tr>
<td>rm -r 目录</td>
<td>递归删除目录(无视目录层次)</td>
</tr>
<tr>
<td>rm -rf 文件/目录</td>
<td>-r  force(强制) 删除文件/目录</td>
</tr>
</tbody></table>
<p><strong>(10)查找操作</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>find / -name passwd[完整名称]</td>
<td>查找根目录下的passwd文件</td>
</tr>
<tr>
<td>find ./ -name “p*”</td>
<td>查找当前目录下带”p”的文件</td>
</tr>
<tr>
<td>find ./ -type f或d</td>
<td>查找当前目录下所有文件或目录</td>
</tr>
<tr>
<td>grep 内容  fileName</td>
<td>从指定文件中查找指定的内容</td>
</tr>
</tbody></table>
<p><strong>(11)权限管理</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>chmod 权限 文件/目录名</td>
<td>管理指定文件的权限信息，r读:4 w写:2  x执行:1</td>
</tr>
</tbody></table>
<p>ls -l 可以查看详细信息，包括权限信息。即属主，属组，其他组权限。<br>例：更改a.txt文件的属主，属组，其他组的权限都为rwx：<code>chmod 777 a.txt</code></p>
<p><strong>(12)进程管理</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>ps</td>
<td>查看当前终端窗口里的进程</td>
</tr>
<tr>
<td>ps -aux</td>
<td>查看系统中的所有进程</td>
</tr>
<tr>
<td>ps -ef</td>
<td>查看进程列表</td>
</tr>
<tr>
<td>kill 进程号</td>
<td>杀死指定的进程</td>
</tr>
<tr>
<td>kill -9 进程号</td>
<td>强制杀死指定的进程</td>
</tr>
</tbody></table>
<p><strong>(13)其他命令</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>ifconfig</td>
<td>查看当前系统的IP地址等信息</td>
</tr>
<tr>
<td>tar zcvf 压缩文件名.tar.gz  路径1 路径2  …</td>
<td>实现一组文件或文件夹的压缩</td>
</tr>
<tr>
<td>tar zxvf 压缩文件名.tar.gz</td>
<td>实现缩解包的解压</td>
</tr>
<tr>
<td>man [章节号]  命令/函数名</td>
<td>查询指定的命令或函数</td>
</tr>
</tbody></table>
<p><strong>开放防火墙的某个端口</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 端口号 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h1 id="vi工具"><a href="#vi工具" class="headerlink" title="vi工具"></a>vi工具</h1><p>vi和vim是Linux系统命令行下的文本编辑器，通常格式为：vi 文件名 或 vim 文件名。</p>
<p><strong>三种模式</strong></p>
<p><a href="https://imgtu.com/i/jB0lDK"><img src="https://s1.ax1x.com/2022/07/08/jB0lDK.png" alt="jB0lDK.png"></a></p>
<p><strong>命令模式</strong></p>
<p>删除命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x 删除一个字符 </span><br><span class="line">dw 删除当前词 </span><br><span class="line">3dw 删除三个词 </span><br><span class="line">dd 删除当前行 </span><br><span class="line">5dd 删除五行</span><br></pre></td></tr></table></figure>

<p>修改命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r 替换一个字符 </span><br><span class="line">cw 替换一个单词 </span><br><span class="line">cc 替换一行 </span><br><span class="line">C 替换从光标至行尾</span><br></pre></td></tr></table></figure>

<p>拷贝命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yw 拷贝词 </span><br><span class="line">yy 拷贝行(或Y) </span><br><span class="line">dd 剪切行 </span><br><span class="line">p 当前行下粘贴 </span><br><span class="line">u 撤销 </span><br><span class="line">ctrl+r 取消撤销</span><br></pre></td></tr></table></figure>



<p><strong>编辑模式</strong></p>
<p>命令模式按a/i/o键转换编辑模式，编辑模式按Esc键返回命令模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i：在当前位置之前插入 </span><br><span class="line">a：在当前位置之后插入 </span><br><span class="line">o：在当前行下插入</span><br></pre></td></tr></table></figure>



<p><strong>底行模式</strong></p>
<p>命令模式按：键转换底行模式，底行模式按Enter键失效并返回命令模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:w 保存 </span><br><span class="line">:w newfile 另存为 </span><br><span class="line">:q 退出</span><br><span class="line">:wq 保存并退出Vi(或ZZ，或:x) </span><br><span class="line">:q! 强行退出不保存 </span><br><span class="line">:1,2co3 拷贝行1，行2在行3之后 </span><br><span class="line">:4,5mo6 移动行4，行5在行6之后 </span><br><span class="line">:%s /源字符串/目标字符串     替换每一行中第一个匹配字符串</span><br><span class="line">:%s /源字符串/目标字符串/g   替换每一行中的所有匹配字符串</span><br></pre></td></tr></table></figure>



<p><strong>注意</strong></p>
<p>使用vimtutor 命令用来练习vi命令。</p>
<p>用户主目录下.vimrc文件可以实现vi的简单设置。</p>
<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><h2 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h2><p>Xshell用来连接远程的Linux服务器并操作。</p>
<p><strong>下载和安装Xshell</strong></p>
<p>下载地址：<a href="https://www.netsarang.com/zh/">https://www.netsarang.com/zh/</a><br>安装方式：直接一路点击下一步即可，安装过程选择免费版。</p>
<p><strong>配置Linux服务器</strong></p>
<p>（1）设置网络连接模式为NAT模式，如下图：</p>
<p><a href="https://imgtu.com/i/jBrU29"><img src="https://s1.ax1x.com/2022/07/08/jBrU29.png" alt="jBrU29.png"></a></p>
<p>（2）修改配置文件：</p>
<p>使用root用户打开/etc/sysconfig/network-scripts/ifcfg-eno16777736文件，修改添加内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">修改内容</span><br><span class="line">BOOTPROTO=static </span><br><span class="line">ONBOOT=yes </span><br><span class="line"></span><br><span class="line">添加内容</span><br><span class="line">IPADDR=IP地址</span><br><span class="line">GATEWAY=网关IP</span><br><span class="line">NETMASK=子网掩码</span><br><span class="line">DNS1=114.114.114.114</span><br></pre></td></tr></table></figure>

<p> 使用命令使得配置文件生效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<p>查看相关IP，如图：</p>
<p><a href="https://imgtu.com/i/jBya0x"><img src="https://s1.ax1x.com/2022/07/08/jBya0x.png" alt="jBya0x.png"></a></p>
<p><strong>使用Xshell连接远程Linux服务器</strong></p>
<p><a href="https://imgtu.com/i/jB6cPU"><img src="https://s1.ax1x.com/2022/07/08/jB6cPU.png" alt="jB6cPU.png"></a></p>
<h2 id="Xftp"><a href="#Xftp" class="headerlink" title="Xftp"></a>Xftp</h2><p>下载和安装好Xftp，用来本地和远程连接服务器的文件传输         </p>
<h2 id="JDK的下载和安装"><a href="#JDK的下载和安装" class="headerlink" title="JDK的下载和安装"></a>JDK的下载和安装</h2><p><strong>下载和安装</strong></p>
<p>下载地址：<a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a><br>安装方式：将下载好的jdk安装包(Linux版本) 通过Xftp工具传输到CentOS系统中，使用tar命令解压即可。<br>习惯：将jdk移动到/usr/目录下，并改名为javajdk</p>
<p><strong>配置环境变量</strong></p>
<p>使用root用户打开配置文件/etc/profile，向文件末尾追加内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/javajdk   即jdk安装路径</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>保存退出后让文件生效并验证是否配置成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile    </span><br><span class="line">javac -version			</span><br></pre></td></tr></table></figure>

<h2 id="Tomcat的下载和安装"><a href="#Tomcat的下载和安装" class="headerlink" title="Tomcat的下载和安装"></a>Tomcat的下载和安装</h2><p><strong>下载和安装方式</strong></p>
<p>下载地址：<a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a><br>安装方式：将下载好的Tomcat安装包(Linux版本) 通过Xftp工具传输到CentOS系统中，使用tar命令解压即可。<br>习惯：将解压文件移动到/usr/目录下，并改名为tomcat</p>
<p><strong>启动和关闭</strong></p>
<p>在tomcat安装目录的bin目录下执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./startup.sh   启动</span><br><span class="line">./shutdown.sh  关闭</span><br></pre></td></tr></table></figure>

<p><strong>开放防火墙端口</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开启8080端口（暂时开通）</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT </span><br></pre></td></tr></table></figure>

<p><strong>配置环境变量（不建议配置）</strong><br>使用root用户打开配置文件/etc/profile，向文件末尾追加内容。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export CATALINA_HOME=/usr/tomcat </span><br><span class="line">export PATH=$CATALINA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>保存退出后让文件生效并验证是否配置成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile </span><br><span class="line">startup.sh</span><br></pre></td></tr></table></figure>

<p><strong>发部web项目</strong></p>
<p>将Web项目打成war包，通过Xftp工具将war包放在tomcat安装目录下的webapps目录，并启动tomcat即可。</p>
<h2 id="MySQL的下载和安装"><a href="#MySQL的下载和安装" class="headerlink" title="MySQL的下载和安装"></a>MySQL的下载和安装</h2><p><strong>下载和安装</strong></p>
<p>先在/usr目录下新建mysql文件夹，并进入</p>
<p>（1）下载Mysql的repo源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>（2）安装rpm包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>（3）安装Mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-server</span><br></pre></td></tr></table></figure>

<p>遇到以下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The GPG keys listed for the &quot;MySQL 5.7 Community Server&quot; repository are already installed but they are not correct for this package.</span><br><span class="line">Check that the correct key URLs are configured for this repository.</span><br><span class="line"> Failing package is: mysql-community-client-5.7.38-1.el7.x86_64</span><br><span class="line"> GPG Keys are configured as: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>

<p>解决：输入以下代码后，重新执行yum -y install mysql-server</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br></pre></td></tr></table></figure>

<p><strong>启动服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld start           启动mysql服务</span><br><span class="line">systemctl status mysqld		   查看服务状态</span><br></pre></td></tr></table></figure>

<p><strong>第一次登入mysql</strong></p>
<p>查看自动生成的临时密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep password /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<p>使用root用户登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p 输入密码</span><br></pre></td></tr></table></figure>

<p>修改临时密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;De@123456&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="图形化界面访问远程数据库"><a href="#图形化界面访问远程数据库" class="headerlink" title="图形化界面访问远程数据库"></a>图形化界面访问远程数据库</h2><p><strong>配置远程服务器的数据库允许外界访问</strong></p>
<p>使用root权限登录数据库后选择mysql库，并将user表的user字段为root的记录的host字段改为%</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set host=&#x27;%&#x27; where user=&#x27;root&#x27;;</span><br><span class="line">flush privileges;  刷新</span><br></pre></td></tr></table></figure>

<p><strong>开放防火墙端口号</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">开启3306端口（暂时开通）</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT </span><br></pre></td></tr></table></figure>

<p><strong>启动图形化界面工具SQLyog连接虚拟机中Mysql数据库</strong></p>
<p>输入服务器IP地址，用户名，密码，端口号，连接即可。</p>
<h2 id="防火墙相关设置"><a href="#防火墙相关设置" class="headerlink" title="防火墙相关设置"></a>防火墙相关设置</h2><p><strong>端口设置：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看已经开放的端口：</span> </span><br><span class="line">firewall-cmd --list-ports </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">1，开启端口(永久)</span> </span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent </span><br><span class="line"><span class="meta">#</span><span class="bash">命令含义：</span> </span><br><span class="line">–zone #作用域 </span><br><span class="line">–add-port=8080/tcp #添加端口，格式为：端口/通讯协议 </span><br><span class="line">–permanent #永久生效，没有此参数重启后失效 </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">2，开启端口（暂时开通，重启失效）</span></span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>防火墙设置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span></span><br><span class="line">firewall-cmd --state </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启防火墙</span> </span><br><span class="line">firewall-cmd --reload #重启firewall </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭防火墙</span> </span><br><span class="line">systemctl stop firewalld.service #停止firewall </span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动 </span><br></pre></td></tr></table></figure>

<h1 id="shell编程-熟悉"><a href="#shell编程-熟悉" class="headerlink" title="shell编程(熟悉)"></a>shell编程(熟悉)</h1><p><strong>概念</strong></p>
<p>Shell是一个命令行解释器，可以接收应用程序或用户命令，然后访问操作系统内核。<br>Shell是一个功能相当强大的编程语言，易编写、易调试、灵活性强；</p>
<p><strong>编写第一个程序</strong></p>
<p>使用vi工具创建xxx.sh的文件。<br>以#!/bin/bash开头并编写代码后保存。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo hellowrod!</span><br></pre></td></tr></table></figure>



<p><strong>执行shell程序</strong></p>
<p>方式一：<code>./文件名</code>，此方式需要执行权限。</p>
<p>方式二：<code>/bin/bash 文件名</code>，或者<code>bash 文件名</code>，或者<code>sh 文件名</code>。此方式不需要执行权限。</p>
<p><strong>变量的定义</strong></p>
<p>格式：<br>定义变量：变量=值<br>撤销变量：unset 变量</p>
<p>定义规则：<br>变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。<br>不能使用bash里的关键字。<br>中间不能有空格，可以有下划线。<br>在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。<br>变量的值如果有空格，需要使用双引号或单引号括起来。</p>
<p><strong>常用运算符</strong></p>
<p>算术运算符</p>
<p><a href="https://imgtu.com/i/jBh5lT"><img src="https://s1.ax1x.com/2022/07/08/jBh5lT.png" alt="jBh5lT.png"></a></p>
<p>关系运算符</p>
<p><a href="https://imgtu.com/i/jBhoXF"><img src="https://s1.ax1x.com/2022/07/08/jBhoXF.png" alt="jBhoXF.png"></a></p>
<p><strong>条件语句</strong></p>
<p>if判断</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ 条件判断式 ] </span><br><span class="line">	then</span><br><span class="line">		程序 </span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>case判断</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case $变量名 in </span><br><span class="line">	&quot;值1&quot;） </span><br><span class="line">		如果变量的值等于值1，则执行程序1 </span><br><span class="line">		;; </span><br><span class="line">	&quot;值2&quot;） </span><br><span class="line">		如果变量的值等于值2，则执行程序2 </span><br><span class="line">		;;</span><br><span class="line">	*）</span><br><span class="line">		如果变量的值都不是以上的值，则执行此程序 </span><br><span class="line">		;; </span><br><span class="line">esac</span><br></pre></td></tr></table></figure>



<p><strong>循环语句</strong></p>
<p>for循环</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for (( 初始值;循环控制条件;变量变化 )) </span><br><span class="line">	do</span><br><span class="line">		程序 </span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>while循环</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while [ 条件判断式 ] </span><br><span class="line">	do</span><br><span class="line">		程序 </span><br><span class="line">done</span><br></pre></td></tr></table></figure>



<p>函数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ function ] funname[()]     中括号部分可以省略</span><br><span class="line">&#123; </span><br><span class="line">	Action; </span><br><span class="line">	[return int;] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funname</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy框架</title>
    <url>/2021/09/07/Scrapy%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>写一个爬虫，需要做很多事情。比如：发送网络请求、数据解析、数据存储、反反爬虫机制（更换IP代理、设置请求头等）、异步请求等。这些工作如果每次都要写的话，比较浪费时间。因此Scrapy把一些基础东西封装好了，提高爬取效率和开发效率。</p>
<span id="more"></span>



<p>Scrapy官方文档：<a href="http://doc.scrapy.org/en/latest">http://doc.scrapy.org/en/latest</a></p>
<p>Scrapy中文文档：<a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html">http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html</a></p>
<p><strong>安装</strong>:</p>
<p>pip install scrapy</p>
<p>可能会出现的问题：</p>
<p>1,在windos系统下，提示错误ModuleNotFoundError:No module nmed ‘win32api’，那么先使用命令安装：pip install pypiwin32</p>
<p>2,如果安装时提示twisted安装有问题，那么先到这个网站下载twisted的whl文件：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/%EF%BC%8C%E6%A0%B9%E6%8D%AE%E8%87%AA%E5%B7%B1%E7%9A%84python%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E3%80%82%E4%B8%8B%E8%BD%BD%E5%AE%8C%E5%90%8E%EF%BC%8C%E5%86%8D%E4%BD%BF%E7%94%A8pip">https://www.lfd.uci.edu/~gohlke/pythonlibs/，根据自己的python版本下载。下载完后，再使用pip</a> install xxx.whl安装刚刚下载的文件。</p>
<h1 id="Scrapy框架架构介绍："><a href="#Scrapy框架架构介绍：" class="headerlink" title="Scrapy框架架构介绍："></a>Scrapy框架架构介绍：</h1><ol>
<li>Scrapy Engine（引擎）：Scrapy框架的核心部分。负责在Spider和ItemPipeline、Downloader、Scheduler中间通信、传递数据等。</li>
<li>Spider（爬虫）：发送需要爬取的链接给引擎，最后引擎把其他模块请求回来的数据再发送给爬虫，爬虫就去解析想要的数据。这个部分是我们开发者自己写的，因为要爬取哪些链接，页面中的哪些数据是需要的，都是由程序员自己决定。</li>
<li>Scheduler（调度器）：负责接收引擎发送过来的请求，并按照一定的方式进行排列和整理，负责调度请求的顺序等。</li>
<li>Downloader（下载器）：负责接收引擎传过来的下载请求，然后去网络上下载对应的数据再交还给引擎。</li>
<li>Item Pipeline（管道）：负责将Spider（爬虫）传递过来的数据进行保存。具体保存在哪里，应该看开发者自己的需求。</li>
<li>Downloader Middlewares（下载中间件）：可以扩展下载器和引擎之间通信功能的中间件。</li>
<li>Spider Middlewares（Spider中间件）：可以扩展引擎和爬虫之间通信功能的中间件。</li>
</ol>
<p><strong>工作流程：</strong></p>
<p><a href="https://imgtu.com/i/hIxYRI"><img src="https://z3.ax1x.com/2021/09/07/hIxYRI.png" alt="hIxYRI.png"></a></p>
<h1 id="创建项目："><a href="#创建项目：" class="headerlink" title="创建项目："></a>创建项目：</h1><p>用cmd创建项目，先进入到项目存放的目录。</p>
<p>1，创建项目：<br>scrapy startproject [项目名称]</p>
<p>2，进入项目，然后创建爬虫：<br>scrapy genspider [爬虫名称] [爬虫的作用域名]</p>
<p><strong>目录结构介绍</strong>：</p>
<p>items.py：用来存放爬虫爬取下来的数据的模型</p>
<p>middlewares.py：用来存放各种中间件的文件</p>
<p>pipelines.py：用来将items的模型存储到本地磁盘中</p>
<p>settings.py：本爬虫的一些配置信息（比如请求头、多久发送一次请求、ip代理池等）</p>
<p>scrapy.cfg：项目的配置文件</p>
<p>spiders包：以后所有的爬虫，对是存放到这个里面</p>
<h1 id="实战-古诗文网爬虫实战："><a href="#实战-古诗文网爬虫实战：" class="headerlink" title="实战-古诗文网爬虫实战："></a>实战-古诗文网爬虫实战：</h1><p>先在settings.py文件中配置：</p>
<ul>
<li><p>将ROBOTSTXT_OBEY改为False，表示不遵守机器人协议</p>
</li>
<li><p>在DEFAULT_REQUEST_HEADERS里添加请求头信息</p>
</li>
<li><p>ITEM_PIPELINES设置pipelines.py的优先级</p>
</li>
</ul>
<p>在cmd中输入命令：scrapy crawl [爬虫名称]，运行指定爬虫。每次都cmd手动输入会很麻烦，所以在项目中新建一个py文件，内容如下。运行该文件就相当于在cmd中输入了相关命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行该文件，相当于运行爬虫</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line">cmds = [<span class="string">&quot;scrapy&quot;</span>, <span class="string">&quot;crawl&quot;</span>, <span class="string">&quot;gsww_spider&quot;</span>]</span><br><span class="line">cmdline.execute(cmds)</span><br></pre></td></tr></table></figure>

<p>编写代码时，每次print打印时，会有大量其他不相关内容，因此分辨不清，所以自己定义了一个myprint方法，用myprint打印内容方便观察，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<h2 id="各文件代码如下："><a href="#各文件代码如下：" class="headerlink" title="各文件代码如下："></a>各文件代码如下：</h2><p>爬虫文件代码(gsww_spider)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> GswwItem  <span class="comment">#导入item模型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GswwSpiderSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;gsww_spider&#x27;</span>  <span class="comment">#爬虫名称</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;gushiwen.cn&#x27;</span>]   <span class="comment">#爬虫的作用域名</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.gushiwen.cn/default_1.aspx&#x27;</span>]   <span class="comment">#爬虫爬取的初始url</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span>   <span class="comment">#主要内容在这里面编写</span></span><br><span class="line">        bList = response.xpath(<span class="string">&quot;//div[@class=&#x27;left&#x27;]/div[@class=&#x27;sons&#x27;]/div[@class=&#x27;cont&#x27;]//b&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> bList:</span><br><span class="line">            title = b.xpath(<span class="string">&quot;./text()&quot;</span>).get()   <span class="comment">#标题</span></span><br><span class="line">            cont = b.xpath(<span class="string">&quot;..&quot;</span>).xpath(<span class="string">&quot;..&quot;</span>).xpath(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">            source = cont.xpath(<span class="string">&quot;./p[@class=&#x27;source&#x27;]/a/text()&quot;</span>).getall()</span><br><span class="line">            author = source[<span class="number">0</span>]   <span class="comment">#作者</span></span><br><span class="line">            dynasty = source[<span class="number">1</span>]  <span class="comment">#朝代</span></span><br><span class="line">            content = cont.xpath(<span class="string">&quot;./div[@class=&#x27;contson&#x27;]//text()&quot;</span>).getall()</span><br><span class="line">            content = <span class="string">&quot;&quot;</span>.join(content).strip()   <span class="comment">#内容</span></span><br><span class="line">            item = GswwItem(title=title, author=author, dynasty=dynasty, content=content)</span><br><span class="line">            <span class="keyword">yield</span> item    <span class="comment">#每次yield item，将item传入pipelines.py文件并调用,表示存储数据</span></span><br><span class="line">            </span><br><span class="line">        url = response.xpath(<span class="string">&quot;//a[@id=&#x27;amore&#x27;]/@href&quot;</span>).get()</span><br><span class="line">        <span class="comment">#response.urljoin(url)  域名+指定的url</span></span><br><span class="line">        <span class="keyword">if</span> url:</span><br><span class="line">            request = scrapy.Request(url)</span><br><span class="line">            <span class="keyword">yield</span> request   <span class="comment">#每次yield request，会重新调用所在的parse方法，表示发送请求</span></span><br></pre></td></tr></table></figure>

<p>items.py文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://docs.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GswwItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    dynasty = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br></pre></td></tr></table></figure>

<p>pipelines.py文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># useful for handling different item types with a single interface</span></span><br><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GswwPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span>   <span class="comment">#爬虫开始时调用，用于打开文件</span></span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&quot;古诗文.csv&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        self.writer = csv.writer(self.fp)</span><br><span class="line">        self.writer.writerow([<span class="string">&quot;title&quot;</span>, <span class="string">&quot;author&quot;</span>, <span class="string">&quot;dynasty&quot;</span>, <span class="string">&quot;content&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span>  <span class="comment">#存储数据操作放在该方法中</span></span><br><span class="line">        item_dict = <span class="built_in">dict</span>(item)</span><br><span class="line">        title = item_dict[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">        author = item_dict[<span class="string">&quot;author&quot;</span>]</span><br><span class="line">        dynasty = item_dict[<span class="string">&quot;dynasty&quot;</span>]</span><br><span class="line">        content = item_dict[<span class="string">&quot;content&quot;</span>]</span><br><span class="line">        self.writer.writerow([title, author, dynasty, content])</span><br><span class="line">        <span class="keyword">return</span> item   <span class="comment">#必须要</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span>   <span class="comment">#爬虫结束时调用，用于关闭文件</span></span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong><br> .xpath()，返回的都是SelectorList对象<br>SelectorList.getall()，直接获取里面指定的值，是个列表<br>SelectorList.get()，直接获取里面指定的第一个的值</p>
<h1 id="CrawlSpider爬虫"><a href="#CrawlSpider爬虫" class="headerlink" title="CrawlSpider爬虫"></a>CrawlSpider爬虫</h1><p>之前使用的spider，请求完url后，想要继续请求url需要自己手动yield request。创建方法：scrapy genspider [爬虫名称] [爬虫的作用域名]。</p>
<p>CrawlSpider继承spider，但是有新的功能。可以自己定义url规则，当scrapy碰到满足规则的url时，自动去访问该url，而不需要手动yield request。创建方法：scrapy genspider -t crawl  [爬虫名称] [爬虫的作用域名]。</p>
<h2 id="定义url规则"><a href="#定义url规则" class="headerlink" title="定义url规则"></a>定义url规则</h2><p>在rules中写规则。</p>
<h3 id="Rule规则类："><a href="#Rule规则类：" class="headerlink" title="Rule规则类："></a>Rule规则类：</h3><p>Rule(link_extractor, callback=None, follow=None, process_links=None)</p>
<p>主要参数讲解：</p>
<p>1，link_extractor： 一个LinkExtractor对象，用于定义爬取规则。</p>
<p>2，callback：满足规则的url，需要执行哪个回调函数。</p>
<p>3，follow：在访问的url中，如果还有符合规则的url，需不需要跟进（即继续访问）</p>
<p>4，process_links：从link_extractor中获取到链接后会传递给这个函数，用来过滤不需要访问的链接。</p>
<h3 id="LinkExtractors链接提取器："><a href="#LinkExtractors链接提取器：" class="headerlink" title="LinkExtractors链接提取器："></a>LinkExtractors链接提取器：</h3><p>主要参数讲解：</p>
<p>allow：允许的url，所有满足该正则表达式的url都会被提取。</p>
<p>deny：禁止的url，所有满足该正则表达式的url都不会被提取。</p>
<p>allow_domains：允许的域名，只有在该域名下的url才会被提取。</p>
<p>deny_domains：禁止的域名，在该域名下的url都不会被提取。</p>
<p>restrict_xpaths：严格的xpath。和allow共同过滤链接。指定某个xpath规定的范围内的url。</p>
<h2 id="实战-猎云网爬虫："><a href="#实战-猎云网爬虫：" class="headerlink" title="实战-猎云网爬虫："></a>实战-猎云网爬虫：</h2><p>要求：使用CrawlSpider爬虫爬取，然后异步保存到mysql数据库</p>
<p>网站：<a href="https://www.lieyunwang.com/">https://www.lieyunwang.com/</a></p>
<p>步骤：</p>
<p>创建项目，创建CrawlSpider，在settings.py文件中更改配置信息</p>
<ul>
<li>将ROBOTSTXT_OBEY改为False，表示不遵守机器人协议</li>
<li>在DEFAULT_REQUEST_HEADERS里添加请求头信息</li>
<li>ITEM_PIPELINES设置pipelines.py的优先级</li>
</ul>
<p>爬虫文件(gsww_spider)代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> LywItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;lyw_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;lieyunwang.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.lieyunwang.com/&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">	<span class="comment">#定义的规则</span></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;latest/p\d+\.html&#x27;</span>), follow=<span class="literal">True</span>),</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;archives/\d+&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">False</span>),</span><br><span class="line">        <span class="comment"># Rule(LinkExtractor(allow=r&#x27;latest/p1\.html&#x27;), follow=True),</span></span><br><span class="line">        <span class="comment"># Rule(LinkExtractor(allow=r&#x27;archives/477777&#x27;), callback=&#x27;parse_item&#x27;, follow=False),</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        title = response.xpath(<span class="string">&quot;//h1[@class=&#x27;lyw-article-title-inner&#x27;]/text()&quot;</span>).getall()</span><br><span class="line">        title = <span class="string">&#x27;&#x27;</span>.join(title).strip()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            date = response.xpath(<span class="string">&quot;//div[@id=&#x27;main-text-id&#x27;]/p[1]//text()&quot;</span>).getall()[<span class="number">2</span>]</span><br><span class="line">            date = re.search(<span class="string">&#x27;】(.+)报道&#x27;</span>, date).group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            date = <span class="string">&quot;NULL&quot;</span></span><br><span class="line">        content = response.xpath(<span class="string">&quot;//div[@id=&#x27;main-text-id&#x27;]//text()&quot;</span>).getall()</span><br><span class="line">        content = <span class="string">&#x27;&#x27;</span>.join(content).strip()</span><br><span class="line">        origin = response.url</span><br><span class="line"></span><br><span class="line">        item = LywItem(title=title, date=date, content=content, origin=origin)</span><br><span class="line">        <span class="keyword">return</span> item   <span class="comment">#这里可以不使用yield item.</span></span><br></pre></td></tr></table></figure>

<p>item.py 文件代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    date = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br><span class="line">    origin = scrapy.Field()</span><br></pre></td></tr></table></figure>

<p>1，正常保存到mysql数据库，没有使用异步</p>
<p>pipelines.py文件代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#正常不使用异步保存到mysql数据库</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.con = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;root&quot;</span>, database=<span class="string">&quot;de&quot;</span>, charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">        self.cursor = self.con.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        insert into lyw_info (title, the_date, content, origin) value (%s, %s, %s, %s)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        args = (item[<span class="string">&quot;title&quot;</span>], item[<span class="string">&quot;date&quot;</span>], item[<span class="string">&quot;content&quot;</span>], item[<span class="string">&quot;origin&quot;</span>])</span><br><span class="line">        self.cursor.execute(sql, args)</span><br><span class="line">        self.con.commit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.con.close()</span><br></pre></td></tr></table></figure>

<p>2，使用异步，保存到mysql数据库</p>
<p><strong>异步操作数据库的方法</strong>：</p>
<ul>
<li>使用<code>twisted.enterprise.adbapi</code>来创建连接池ConnectionPool。</li>
<li>连接池使用<code>runInteraction</code>函数来运行执行sql语句的函数。</li>
<li>执行sql语句的函数中，第一个非self参数是cursor对象，使用该对象的execute执行sql语句。</li>
</ul>
<p><strong>实际步骤</strong>：</p>
<p>先在settings.py文件中配置数据库信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MYSQL_CONFIG = &#123;</span><br><span class="line">    <span class="string">&#x27;DRIVER&#x27;</span>: <span class="string">&#x27;pymysql&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DATABASE&#x27;</span>: <span class="string">&#x27;de&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CHARSET&#x27;</span>: <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后pipelines.py文件代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.enterprise <span class="keyword">import</span> adbapi</span><br><span class="line"></span><br><span class="line"><span class="comment">##异步保存到mysql数据库</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, mysql_config</span>):</span></span><br><span class="line">        <span class="comment"># 1,创建连接池，配置好数据库。</span></span><br><span class="line">        self.dbPoll = adbapi.ConnectionPool(</span><br><span class="line">            mysql_config[<span class="string">&quot;DRIVER&quot;</span>],</span><br><span class="line">            host=mysql_config[<span class="string">&#x27;HOST&#x27;</span>],</span><br><span class="line">            port=mysql_config[<span class="string">&#x27;PORT&#x27;</span>],</span><br><span class="line">            user=mysql_config[<span class="string">&quot;USER&quot;</span>],</span><br><span class="line">            password=mysql_config[<span class="string">&quot;PASSWORD&quot;</span>],</span><br><span class="line">            database=mysql_config[<span class="string">&#x27;DATABASE&#x27;</span>],</span><br><span class="line">            charset=mysql_config[<span class="string">&#x27;CHARSET&#x27;</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="comment">#只要重写了该from_crawler类方法，创建对象的时候，会自动掉用该方法获取pipeline对象。</span></span><br><span class="line">    <span class="comment">#这里用来获取保存在settings.py中的数据库配置信息,mysql_config。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls,crawler</span>):</span></span><br><span class="line">        mysql_config = crawler.settings[<span class="string">&quot;MYSQL_CONFIG&quot;</span>]</span><br><span class="line">        <span class="keyword">return</span> cls(mysql_config)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="comment">#2，使用`runInteraction`函数来运行执行sql语句的函数，还可以传递参数给执行sql语句的函数，比如item</span></span><br><span class="line">        self.dbPoll.runInteraction(self.inset_item, item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inset_item</span>(<span class="params">self,cursor,item</span>):</span></span><br><span class="line">        <span class="comment">#3，该函数为执行sql语句的函数。第一个非self参数是cursor对象，item参数是`runInteraction`函数传递过来的。</span></span><br><span class="line">        sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        insert into lyw_info (title, the_date, content, origin) value (%s,%s,%s,%s)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        args = (item[<span class="string">&#x27;title&#x27;</span>], item[<span class="string">&#x27;date&#x27;</span>], item[<span class="string">&#x27;content&#x27;</span>], item[<span class="string">&#x27;origin&#x27;</span>])</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        <span class="comment">#关闭连接池</span></span><br><span class="line">        self.dbPoll.close()</span><br></pre></td></tr></table></figure>



<p>出现的问题点：scrapy运行正常，pipeline管道经过测试是没有运行的。判断已经主要是并没有创建设置的IMAGES_STORE<br>提前指出解决的办法，主要是没有依赖处理图片的第三库pillow</p>
<p>pip install -i <a href="https://pypi.doubanio.com/simple/">https://pypi.doubanio.com/simple/</a> –trusted-host pypi.doubanio.com pillow</p>
<h1 id="scrapy下载图片"><a href="#scrapy下载图片" class="headerlink" title="scrapy下载图片"></a>scrapy下载图片</h1><p><strong>流程：</strong></p>
<p>1，解析图片的url</p>
<p>2，定义item。item中必须要有image_urls和images两个字段。image_urls中存放图片的url。</p>
<p>3，在settings.py中，使用scrapy.pipelines.images.ImagesPipeline来作为数据保存的pipeline。</p>
<p>4，在settings.py中，设置IMAGE_STORE来定义图片下载的路径。</p>
<p>此时，只操作以上步骤的话。指定的IMAGE_STORE路径中会自动生成full文件夹，所有图片保存在里面。</p>
<p>5，如果想要有更复杂的图片保存路径的需求。先在settings.py中，关掉第2步的‘scrapy.pipelines.images.ImagesPipeline’，打开‘zcool.pipelines.ZcoolPipeline’。然后在pipelines.py中重写ImagePipiline类的file_path方法。该方法用来返回每个图片的保存路径。</p>
<p>6，但是file_path方法中没有item对象。如果想要item对象的话，我们还需要重写ImagePipline类的get_media_requests方法,来把item绑定到request上。</p>
<h2 id="实战-zcool网站下载图片"><a href="#实战-zcool网站下载图片" class="headerlink" title="实战-zcool网站下载图片"></a>实战-zcool网站下载图片</h2><p>网站：<a href="https://www.zcool.com.cn/">https://www.zcool.com.cn/</a></p>
<p>把相同作品的图片下载到用一个文件夹，文件夹名就为作品名称</p>
<p><strong>实际步骤如下：</strong>（对照上面的流程）</p>
<p>创建scrapy项目，创建crawlSpider，在settings.py中更改配置，如不遵守机器人协议，请求头</p>
<p>流程一，zcool_spider.py文件代码：(访问网站，解析图片url)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> ZcoolItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZcoolSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;zcool_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;zcool.com.cn&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.zcool.com.cn/home?p=1#tab_anchor&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;home\?p=\d+#tab_anchor&#x27;</span>), follow=<span class="literal">True</span>),</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;work/.+=\.html&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">40</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        title = response.xpath(<span class="string">&quot;//div[@class=&#x27;details-contitle-box&#x27;]/h2/text()&quot;</span>).getall()</span><br><span class="line">        title = <span class="string">&#x27;&#x27;</span>.join(title).strip()</span><br><span class="line">        image_urls = response.xpath(<span class="string">&quot;//div[@class=&#x27;reveal-work-wrap js-sdata-box text-center&#x27;]//img/@src&quot;</span>).getall()</span><br><span class="line"></span><br><span class="line">        item = ZcoolItem(title=title, image_urls=image_urls)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<p>流程二，item.py文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZcoolItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment">#image_urls 和 images必须要有。</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    image_urls = scrapy.Field()</span><br><span class="line">    images = scrapy.Field()</span><br></pre></td></tr></table></figure>

<p>流程三四，配置settings.py文件：<br>1，设置ITEM_PIPELINES，如果图片放在一起就开启scrapy.pipelines.images.ImagesPipeline；如果有其他存放路径需求，就开启zcool.pipelines.ZcoolPipeline，并接着下一步在pipelines.py文件中重写方法</p>
<p>2，添加IMAGES_STORE，是图片的保存目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   &#x27;zcool.pipelines.ZcoolPipeline&#x27;: 300,</span><br><span class="line">   #  &#x27;scrapy.pipelines.images.ImagesPipeline&#x27;: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IMAGES_STORE = os.path.join(os.path.dirname(os.path.dirname(__file__)),&#x27;images&#x27;)</span><br></pre></td></tr></table></figure>

<p>流程五六，在pipelines.py文件中，重写ImagePipiline类的file_path方法和get_media_requests方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"><span class="keyword">from</span> scrapy.pipelines.images <span class="keyword">import</span> ImagesPipeline</span><br><span class="line"><span class="keyword">from</span> zcool <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZcoolPipeline</span>(<span class="params">ImagesPipeline</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span>(<span class="params">self, item, info</span>):</span></span><br><span class="line">        <span class="comment">#重写该方法的目的是，把item绑定在request上面，然后下面的file_path方法可以访问到item</span></span><br><span class="line">        media_requests = <span class="built_in">super</span>(ZcoolPipeline, self).get_media_requests(item, info)</span><br><span class="line">        <span class="keyword">for</span> media_request <span class="keyword">in</span> media_requests:</span><br><span class="line">            media_request.item = item</span><br><span class="line">        <span class="keyword">return</span> media_requests</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_path</span>(<span class="params">self, request, response=<span class="literal">None</span>, info=<span class="literal">None</span></span>):</span></span><br><span class="line">        orige_path = <span class="built_in">super</span>(ZcoolPipeline, self).file_path(request, response, info)</span><br><span class="line"></span><br><span class="line">        title = request.item[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">        title = re.sub(<span class="string">r&#x27;[/\\:\*\?&quot;&lt;&gt;\|]&#x27;</span>,<span class="string">&quot;_&quot;</span>,title)</span><br><span class="line">        image_path = os.path.join(settings.IMAGES_STORE,title)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(image_path):</span><br><span class="line">            os.mkdir(image_path)</span><br><span class="line">        image_name = orige_path.replace(<span class="string">&quot;full/&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">		<span class="comment">#返回值就是每个图片的保存路径</span></span><br><span class="line">        <span class="keyword">return</span> os.path.join(image_path, image_name)</span><br></pre></td></tr></table></figure>

<p>注意：创建文件夹时，名称不可用包含九种特殊符号。<br>我们的处理方式：<code>title = re.sub(r&#39;[/\\:\*\?&quot;&lt;&gt;\|]&#39;,&quot;_&quot;,title)</code></p>
<h1 id="下载器中间件："><a href="#下载器中间件：" class="headerlink" title="下载器中间件："></a>下载器中间件：</h1><p>Downloader Middlewares（下载中间件）是：引擎和下载器通信的中间件。在这个中间件里，可以设置ip代理、更换请求头等。主要有两个方法：</p>
<p>process_request(self, request, spider)：发送请求前调用</p>
<p>process_response(self, request, response, spider)：数据下载到引擎前调用</p>
<p><a href="https://imgtu.com/i/5At6je"><img src="https://z3.ax1x.com/2021/10/10/5At6je.png" alt="5At6je.png"></a></p>
<h2 id="process-request-self-request-spider"><a href="#process-request-self-request-spider" class="headerlink" title="process_request(self, request, spider)"></a>process_request(self, request, spider)</h2><p>下载器发送请求前调用，这里可以设置IP代理、请求头等</p>
<p>返回值：</p>
<p>1，None：scrapy继续处理request，直到下载器被调用。</p>
<p>2，Request对象：不再使用之前的request对象，而是使用新的request对象。</p>
<p>3，Response对象：scrapy不再调用process_request方法，直接返回response，调用已激活的中间件的process_response方法。</p>
<p>4，如果方法抛出异常，会调用process_exception方法。</p>
<h2 id="process-response-self-request-response-spider"><a href="#process-response-self-request-response-spider" class="headerlink" title="process_response(self, request, response, spider)"></a>process_response(self, request, response, spider)</h2><p>下载器下载的数据到引擎中间会执行的方法。</p>
<p>返回值：</p>
<p>1，Response对象：会将这个新的response对象返回给其他中间件，直到引擎。</p>
<p>2，Request对象：下载器被切断，返回的request会重新被下载器调度下载。</p>
<p>3，如果抛出异常，会调用requst的errback方法。</p>
<h2 id="随机更换请求头User-Agent"><a href="#随机更换请求头User-Agent" class="headerlink" title="随机更换请求头User-Agent"></a>随机更换请求头User-Agent</h2><p>介绍fake_useragent包：</p>
<p><strong>fake_useragent</strong>模块用来伪造User-Agent的。下载：<code>pip install fake_useragent</code></p>
<p>用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line">ua = UserAgent()</span><br><span class="line">ua.ie       //ie浏览器的user-agent</span><br><span class="line">ua.chrome	//谷歌浏览器的user-agent</span><br><span class="line">ua.firefox  //火狐浏览器的user-agent</span><br><span class="line">ur.random   //任意浏览器的user-agent</span><br></pre></td></tr></table></figure>

<p>如果使用时报错：fake_useragent.errors.FakeUserAgentError: Maximum amount of retries reached。解决方法：</p>
<p>1，找到python》Lib》site-packages》fake_useragent》settings.py</p>
<p>2，打开后，把16行附近的’CACHE_SERVER’属性中的’https‘改成’http‘</p>
<p>3，然后运行程序，依旧会报错，但是出现了一个结果。然后再次运行程序，运行正常。</p>
<p><strong>更换请求头User-Agent步骤：</strong></p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UseragentSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;userAgent&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;httpbin.org&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://httpbin.org/user-agent&#x27;</span>]   <span class="comment">#该网址直接返回请求的user-agent</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(self.start_urls[<span class="number">0</span>], dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>middlewares.py文件代码：(重点)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAgentDownloadmiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        ua = UserAgent()</span><br><span class="line">        request.headers[<span class="string">&quot;User-Agent&quot;</span>] = ua.random</span><br></pre></td></tr></table></figure>

<p>开启这个中间件，在settings.py中设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">&#x27;downloadmiddleware.middlewares.UserAgentDownloadmiddleware&#x27;</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置IP代理："><a href="#设置IP代理：" class="headerlink" title="设置IP代理："></a>设置IP代理：</h2><p>芝麻代理：<a href="http://www.zhimaruanjian.com/">http://www.zhimaruanjian.com</a></p>
<p>流程：</p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpproxySpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;ipProxy&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;httpbin.org&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://httpbin.org/ip&#x27;</span>]  //该网址直接返回请求的ip</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(self.start_urls[<span class="number">0</span>], dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>middlewares.py文件代码：（重点）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpProxyDownloadmiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    proxies = [   //购买的代理</span><br><span class="line">        &#123;<span class="string">&quot;ip&quot;</span>:<span class="string">&quot;223.242.9.160&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="number">4245</span>,<span class="string">&quot;expire_time&quot;</span>:<span class="string">&quot;2021-10-10 13:40:46&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;ip&quot;</span>:<span class="string">&quot;124.94.187.11&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="number">4224</span>,<span class="string">&quot;expire_time&quot;</span>:<span class="string">&quot;2021-10-10 13:40:46&quot;</span>&#125;,</span><br><span class="line">               ]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        proxy = random.choice(self.proxies)   //随机选择一个代理</span><br><span class="line">        <span class="comment"># 格式  http://223.242.9.160:4245</span></span><br><span class="line">        proxy_url = <span class="string">&quot;http://&quot;</span> + proxy[<span class="string">&quot;ip&quot;</span>] + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(proxy[<span class="string">&quot;port&quot;</span>])</span><br><span class="line">        request.meta[<span class="string">&quot;proxy&quot;</span>] = proxy_url</span><br></pre></td></tr></table></figure>

<p>开启这个中间件，在settings.py中设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">&#x27;downloadmiddleware.middlewares.IpProxyDownloadmiddleware&#x27;</span>: <span class="number">200</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开放代理池：上面这种购买的代理ip属于开放代理池，就是一下买多个代理ip，这些ip随便使用，时间比较短。</p>
<p>独享代理：只买一个代理，这个代理ip时间会比较长，而且还有密码。</p>
<p>独享代理的使用例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpProxyDownloadmiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        proxy = <span class="string">&#x27;121.99.4.124:16816&#x27;</span>  //代理ip</span><br><span class="line">        pwd = <span class="string">&quot;156486:fjkdf4s&quot;</span>		  //密码</span><br><span class="line">        request.meta[<span class="string">&quot;proxy&quot;</span>] = proxy</span><br><span class="line">        <span class="comment">#密码要base64加密</span></span><br><span class="line">        pwd_b64 = base64.b64encode(pwd.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="comment">#代理授权</span></span><br><span class="line">        request.headers[<span class="string">&#x27;Proxy-Authorization&#x27;</span>] = <span class="string">&#x27;Basic &#x27;</span> + paw_b64.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="实战-更换代理爬取猎聘网："><a href="#实战-更换代理爬取猎聘网：" class="headerlink" title="实战-更换代理爬取猎聘网："></a>实战-更换代理爬取猎聘网：</h1><p>网址：<a href="https://www.liepin.com/">https://www.liepin.com/</a></p>
<p>要求：搜索python，把有关python的职位信息爬取下来，爬取时需要自动更换代理。</p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> LiepinItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiepinSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;liepin_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;liepin.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.liepin.com/zhaopin/?headId=5299daf02f40ea2f23991628fa127774&amp;ckId=5299daf02f40ea2f23991628fa127774&amp;key=python&amp;currentPage=0&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;job/\d+\.shtml.*&#x27;</span>, restrict_xpaths=[<span class="string">&quot;//div[@class=&#x27;left-list-box&#x27;]/ul/li//div[@class=&#x27;job-detail-box&#x27;]/a[1]&quot;</span>]),callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">40</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        title = response.xpath(<span class="string">&quot;//span[@class=&#x27;name ellipsis-1&#x27;]/text()&quot;</span>).get()</span><br><span class="line">        company_1 = response.xpath(<span class="string">&quot;//div[@class=&#x27;title-box&#x27;]/span[1]//text()&quot;</span>).getall()</span><br><span class="line">        company_1 = <span class="string">&quot;&quot;</span>.join(company_1).strip()</span><br><span class="line">        company_2 = response.xpath(<span class="string">&quot;//div[@class=&#x27;title-box&#x27;]/span[2]//text()&quot;</span>).getall()</span><br><span class="line">        company_2 = <span class="string">&quot;&quot;</span>.join(company_2).strip()</span><br><span class="line">        company = company_1 + company_2</span><br><span class="line">        city = response.css(<span class="string">&quot;.job-properties&gt;span:nth-child(1)::text&quot;</span>).get()</span><br><span class="line">        experience = response.css(<span class="string">&quot;.job-properties&gt;span:nth-child(3)::text&quot;</span>).get()</span><br><span class="line">        edu = response.css(<span class="string">&quot;.job-properties&gt;span:nth-child(5)::text&quot;</span>).get()</span><br><span class="line">        salary = response.css(<span class="string">&quot;.salary::text&quot;</span>).get()</span><br><span class="line">        desc_list = response.css(<span class="string">&quot;.paragraph&gt;dd::text&quot;</span>).getall()</span><br><span class="line">        desc = <span class="string">&quot;&quot;</span>.join(desc_list).strip()</span><br><span class="line"></span><br><span class="line">        item = LiepinItem(title=title, company=company, city=city, experience=experience, edu=edu, salary=salary, desc=desc)</span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">        current_page = response.request.headers[<span class="string">&quot;Referer&quot;</span>].decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        page_num = <span class="built_in">int</span>( re.search(<span class="string">&quot;.*currentPage=(\d+)&quot;</span>,current_page).group(<span class="number">1</span>) )</span><br><span class="line">        next_page = <span class="string">&quot;https://www.liepin.com/zhaopin/?headId=5299daf02f40ea2f23991628fa127774&amp;ckId=5299daf02f40ea2f23991628fa127774&amp;key=python&amp;currentPage=&quot;</span> + <span class="built_in">str</span>( page_num+<span class="number">1</span> )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=next_page)</span><br></pre></td></tr></table></figure>

<p>items.py文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiepinItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    company = scrapy.Field()</span><br><span class="line">    city = scrapy.Field()</span><br><span class="line">    experience = scrapy.Field()</span><br><span class="line">    edu = scrapy.Field()</span><br><span class="line">    salary = scrapy.Field()</span><br><span class="line">    desc = scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>pipelines.py文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiepinPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&quot;zhaopin.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        self.fp.write( json.dumps(<span class="built_in">dict</span>(item), ensure_ascii=<span class="literal">False</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure>

<p>middlewares.py文件代码：（重点，这里设置代理）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json, requests</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Proxy</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyDownloadMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.current_proxy = <span class="literal">None</span></span><br><span class="line">        self.update_proxy()</span><br><span class="line">        self.lock = threading.Lock</span><br><span class="line">        <span class="comment">#创建一个线程，每60秒自动更换ip，或者ip被黑名单更换ip</span></span><br><span class="line">        th1 = threading.Thread(target=self.update_proxy_in_threading)</span><br><span class="line">        th1.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        request.meta[<span class="string">&quot;proxy&quot;</span>] = self.current_proxy.proxy_url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response, spider</span>):</span></span><br><span class="line">        <span class="keyword">if</span> response.status != <span class="number">200</span>:   <span class="comment">#状态码不等于200就当作ip被黑名单了</span></span><br><span class="line">            self.lock.acquire()</span><br><span class="line">            self.current_proxy.is_blacked = <span class="literal">True</span></span><br><span class="line">            self.lock.release()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;IP代理被禁用了&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">            <span class="keyword">return</span> request</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_proxy</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#获取IP代理，自己去买</span></span><br><span class="line">        resp = requests.get(<span class="string">&quot;购买的直连ip网址&quot;</span>)</span><br><span class="line">        proxy_dict = json.loads(resp.text)</span><br><span class="line">        proxy = Proxy(proxy_dict)    <span class="comment">#自己定义的Proxy模型类，下面有</span></span><br><span class="line">        self.current_proxy = proxy</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;更换了一次IP代理&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_proxy_in_threading</span>(<span class="params">self</span>):</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> count&gt;=<span class="number">6</span> <span class="keyword">or</span> self.current_proxy.is_blacked:</span><br><span class="line">                self.update_proxy()</span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>Proxy模型类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span>():</span></span><br><span class="line">    <span class="comment"># proxy的模型，方便管理</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, proxy_dict</span>):</span></span><br><span class="line">        data = proxy_dict[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>]</span><br><span class="line">        self.proxy_url = <span class="string">&quot;https://&quot;</span> + data[<span class="string">&quot;ip&quot;</span>] + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(data[<span class="string">&quot;port&quot;</span>])</span><br><span class="line">        self.is_blacked = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>最后在settings.py中将该下载器中间件启用。</p>
<h1 id="scrapy集成selenium爬取网页"><a href="#scrapy集成selenium爬取网页" class="headerlink" title="scrapy集成selenium爬取网页"></a>scrapy集成selenium爬取网页</h1><p>在scrapy爬取网址时，有时因为需要加载ajax或者需要点击某个按钮后，需要的数据才能完整展示出来，可以在scrapy中写selenium解决这个问题。</p>
<p><strong>流程：</strong>下载器中间件的process_request(self, request, spider)方法，发送请求时调用，即发送请求前截拦，然后执行该方法。所以在该方法内，用selenium发送请求，处理，再封装成response对象返回。</p>
<p>1，截拦原始请求。<br>2，用selenium请求。<br>3，将selenium请求的数据封装成response对象并返回。</p>
<p><em><strong>案例：</strong></em></p>
<p>爬取简书网站：<a href="http://jianshu.com/%EF%BC%8C%E7%AE%80%E4%B9%A6%E5%8F%91%E8%A1%A8%E7%9A%84%E6%96%87%E7%AB%A0%E4%B8%8B%E9%9D%A2%E6%9C%89%E6%98%BE%E7%A4%BA%E8%A2%AB%E6%9F%90%E6%9F%90%E4%B8%93%E9%A2%98%E6%94%B6%E5%85%A5%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%B8%93%E9%A2%98%E5%A4%9A%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%8F%AA%E4%BC%9A%E6%98%BE%E7%A4%BA%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%8C%E9%9C%80%E8%A6%81%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E2%80%9C%E5%B1%95%E5%BC%80%E6%9B%B4%E5%A4%9A%E2%80%9D%E6%89%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%85%A8%E9%83%A8%E3%80%82">http://jianshu.com/，简书发表的文章下面有显示被某某专题收入，如果专题多的话，只会显示一部分，需要点击按钮“展开更多”才能显示全部。</a></p>
<p>爬取简书，然后用selenium执行点击“展开更多”按钮后，把数据返回。</p>
<p><strong>代码如下：</strong></p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JianshuSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;jianshu_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;jianshu.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://jianshu.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;p/[0-9a-z]&#123;12&#125;&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>),</span><br><span class="line">        <span class="comment"># Rule(LinkExtractor(allow=r&#x27;p/dbc69681575f&#x27;), callback=&#x27;parse_item&#x27;, follow=True),</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">40</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        zhuantis = response.xpath(<span class="string">&quot;//div[@class=&#x27;_21bLU4 _3kbg6I&#x27;]/div[1]/div[1]/section[position()=3]/div[1]//text()&quot;</span>).getall()</span><br><span class="line">        self.myprint(zhuantis)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>middlewares.py文件：（<strong>重点</strong>）（记得在settings.py中开启）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> scrapy.http.response.html <span class="keyword">import</span> HtmlResponse   <span class="comment">#封装response对象用的。</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JianshuDownloaderMiddleware</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver_path = <span class="string">&quot;D:/webDriver/chromedriver_win32_95.exe&quot;</span></span><br><span class="line">        self.driver = webdriver.Chrome(executable_path=self.driver_path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="comment">#1,只要写了该方法就相当于截拦了原始请求</span></span><br><span class="line">        <span class="comment">#2，用selenium请求，并处理，点击“展开更多”按钮</span></span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">r&quot;.*?\.com/p/[0-9a-z]&#123;12&#125;&quot;</span>, request.url):</span><br><span class="line">            self.driver.get(request.url)</span><br><span class="line"></span><br><span class="line">            btn_path = <span class="string">&quot;//div[@class=&#x27;_21bLU4 _3kbg6I&#x27;]/div[1]/div[1]/section[position()=3]/div[1]/div[1]&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                WebDriverWait(self.driver, <span class="number">10</span>).until(</span><br><span class="line">                    EC.element_to_be_clickable((By.XPATH, btn_path))</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                response = HtmlResponse(request.url, body=self.driver.page_source, request=request, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    btn = self.driver.find_element_by_xpath(btn_path)</span><br><span class="line">                    self.driver.execute_script(<span class="string">&quot;arguments[0].click()&quot;</span>, btn)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="comment">#3，最后把selenium访问的网页数据，封装成response对象并返回</span></span><br><span class="line">            response = HtmlResponse(request.url, body=self.driver.page_source, request=request, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> response    <span class="comment">#这个返回的response给爬虫文件中的response对象。</span></span><br></pre></td></tr></table></figure>










































]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2022/03/09/MySQL/</url>
    <content><![CDATA[<p>这是一篇关于MySQL的个人笔记。</p>
<p>包含MySql的基本语法，MySql表单、约束和事物，MySql多表、外键和数据库设计，Mysql索引、存储过程和触发器。</p>
<span id="more"></span>

<h1 id="MySql基础"><a href="#MySql基础" class="headerlink" title="MySql基础"></a>MySql基础</h1><p>什么是数据库？</p>
<ul>
<li>数据库(DataBase) 就是存储和管理数据的仓库</li>
<li>其本质是一个文件系统, 还是以文件的方式,将数据保存在电脑上</li>
</ul>
<p>为什么用数据库？</p>
<table>
<thead>
<tr>
<th><strong>存储方式</strong></th>
<th><strong>优点</strong></th>
<th><strong>缺点</strong></th>
</tr>
</thead>
<tbody><tr>
<td>内存</td>
<td>速度快</td>
<td>不能够永久保存,数据是临时状态的</td>
</tr>
<tr>
<td>文件</td>
<td>数据是可以永久保存的</td>
<td>使用IO流操作文件, 不方便</td>
</tr>
<tr>
<td>数据库</td>
<td>1.数据可以永久保存  2.方便存储和管理数据   3.使用统一的方式操作数据库  (SQL)</td>
<td>占用资源,有些数据库需要付费(比如Oracle数据  库)</td>
</tr>
</tbody></table>
<p>通过上面的比较,我们可以看出,使用数据库存储数据, 用户可以非常方便对数据库中的数据进行增加, 删除, 修改及查询操作。</p>
<p>常见数据库</p>
<table>
<thead>
<tr>
<th><strong>数据库名</strong></th>
<th><strong>介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>MySql数据</strong>  <strong>库</strong></td>
<td>开源免费的数据库  因为免费开源、运作简单的特点，常作为中小型的项目的数据库首选。  MySQL1996年开始运作，目前已经被Oracle公司收购了.  MySQL6.x开始收费</td>
</tr>
<tr>
<td>Oracle数据  库</td>
<td>收费的大型数据库，Oracle公司的核心产品。  安全性高</td>
</tr>
<tr>
<td>DB2</td>
<td>IBM公司的数据库产品,收费的超大型数据库。  常在银行系统中使用</td>
</tr>
<tr>
<td>SQL Server</td>
<td>MicroSoft 微软公司收费的中型的数据库。  C#、.net等语言常使用。   但该数据库只能运行在windows机器上，扩展性、稳定性、安全性、性能都表现平平。</td>
</tr>
</tbody></table>
<p>为什么选择MySQL ?</p>
<ul>
<li>功能强大,足以应付web应用开发</li>
<li>开源, 免费</li>
</ul>
<p><strong>Mysql服务启动</strong>：</p>
<p>1，打开任务管理器，在“服务”选项卡下将“MySQL”启动。</p>
<p>2，win + R 快捷键，输入services.msc后进入，将“MySQL”启动。</p>
<p>3，以管理员身份打开DOS命令行，输入“net start mysql57”启动，输入“net stop mysql57”关闭。</p>
<p><strong>DOS命令行登入MySQL</strong>（前提是添加了环境变量）</p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>mysql -u 用户名 -p 密码</td>
<td>使用指定用户名和密码登录当前计算机中的MySQL数据库</td>
</tr>
<tr>
<td>mysql -h 主机IP -u 用户名  -p 密码</td>
<td>-h 指定IP  方式,进行 登录</td>
</tr>
<tr>
<td>exit 或  quit</td>
<td>退出</td>
</tr>
</tbody></table>
<h2 id="MySQL目录结构"><a href="#MySQL目录结构" class="headerlink" title="MySQL目录结构"></a>MySQL目录结构</h2><p><strong>MySQL安装目录</strong></p>
<p>MySql的默认安装目录在 C:\Program Files\MySQL\MySQL Server 5.7</p>
<table>
<thead>
<tr>
<th><strong>目录</strong></th>
<th><strong>目录内容</strong></th>
</tr>
</thead>
<tbody><tr>
<td>bin</td>
<td>放置一些可执行文件</td>
</tr>
<tr>
<td>docs</td>
<td>文档</td>
</tr>
<tr>
<td>include</td>
<td>包含(头)文件</td>
</tr>
<tr>
<td>lib</td>
<td>依赖库</td>
</tr>
<tr>
<td>share</td>
<td>用于存放字符集、语言等信息。</td>
</tr>
</tbody></table>
<h2 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h2><p>数据库管理系统（DataBase Management System，DBMS）：指一种操作和管理维护数据库的大型软件。</p>
<p>MySQL就是一个 数据库管理系统软件, 安装了Mysql的电脑,我们叫它数据库服务器.</p>
<p><strong>作用</strong></p>
<p> 用于建立、使用和维护数据库，对数据库进行统一的管理。</p>
<p><strong>数据库管理系统、数据库 和表之间的关系</strong></p>
<p> MySQL中管理着很多数据库，在实际开发环境中 一个数据库一般对应了一个的应用，数据库当中保存着多张表，每一张表对应着不同的业务，表中保存着对应业务的数据。</p>
<p><strong>几个概念</strong> </p>
<ul>
<li>数据库：文件夹</li>
<li>表：文件</li>
<li>数据：文件中的记录</li>
</ul>
<h2 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h2><p>数据库中以表为组织单位存储数据</p>
<p>表类似我们Java中的类,每个字段都有对应的数据类型，那么我们使用熟悉的Java程序来与关系型数据对比,就会发现以下关系: </p>
<ul>
<li>类————-&gt;表</li>
<li>类中变量—–&gt;表中字段</li>
<li>对象———-&gt;数据记录</li>
</ul>
<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p> 结构化查询语言(Structured Query Language)简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p>
<p><strong>作用</strong></p>
<ul>
<li>是所有关系型数据库的统一查询规范，不同的关系型数据库都支持SQL 所有的关系型数据库都可以使用SQL</li>
<li>不同数据库之间的SQL 有一些区别  方言</li>
</ul>
<p><strong>SQL通用语法</strong></p>
<ul>
<li><p>SQL语句可以单行 或者 多行书写，以分号 结尾 ;   （Sqlyog中可以不用写分号） </p>
</li>
<li><p>可以使用空格和缩进来增加语句的可读性。</p>
</li>
<li><p>MySql中使用SQL不区分大小写，一般关键字大写，数据库名 表名列名 小写。</p>
</li>
<li><p>注释方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 空格	单行注释</span></span><br><span class="line"><span class="comment">/* */</span>	 多行注释</span><br><span class="line">#	     MySql特有的单行注释</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>SQL的分类</strong></p>
<table>
<thead>
<tr>
<th><strong>分类</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>数据定义语言</td>
<td>简称DDL(Data Definition Language)，用来定义数据库对象：数据库，表，列等。</td>
</tr>
<tr>
<td>数据操作语言</td>
<td>简称DML(Data  Manipulation Language)，用来对数据库中表的记录进行更新。</td>
</tr>
<tr>
<td>数据查询语言</td>
<td>简称DQL(Data  Query Language)，用来查询数据库中表的记录。</td>
</tr>
<tr>
<td>数据控制语言</td>
<td>简称DCL(Date  Control Language)，用来定义数据库的访问权限和安全级别，及创建用户。(了解)</td>
</tr>
</tbody></table>
<p><a href="https://imgtu.com/i/bR54AO"><img src="https://s1.ax1x.com/2022/03/09/bR54AO.png" alt="bR54AO.png"></a></p>
<h2 id="DDL操作库"><a href="#DDL操作库" class="headerlink" title="DDL操作库"></a>DDL操作库</h2><p><strong>增，创建库</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>create database 数据库名；</td>
<td>创建指定名称的数据库。</td>
</tr>
<tr>
<td>create database 数据库名 character  set  字符集；</td>
<td>创建指定名称的数据库，并且指定字符集（一般都指定utf8）</td>
</tr>
</tbody></table>
<p><strong>删，删除库</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>drop database 数据库名</td>
<td>从MySql中永久的删除某个数据库</td>
</tr>
</tbody></table>
<p><strong>改，修改库</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>alter database 数据库名 character  set 字符集；</td>
<td>数据库的字符集修改操作</td>
</tr>
</tbody></table>
<p><strong>查，查询库</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>use 数据库</td>
<td>切换数据库</td>
</tr>
<tr>
<td>select database();</td>
<td>查看当前正在使用的数据库</td>
</tr>
<tr>
<td>show databases;</td>
<td>查看Mysql中 都有哪些数据库</td>
</tr>
<tr>
<td>show create database 数据库名；</td>
<td>查看一个数据库的定义信息</td>
</tr>
</tbody></table>
<h2 id="DDL操作表"><a href="#DDL操作表" class="headerlink" title="DDL操作表"></a>DDL操作表</h2><p><strong>MySQL的数据类型</strong></p>
<p>常见类型</p>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>整型</td>
</tr>
<tr>
<td>double</td>
<td>浮点型</td>
</tr>
<tr>
<td>char</td>
<td>字符串型（固定长度）</td>
</tr>
<tr>
<td>varchar</td>
<td>字符串型（可变长度，根据实际内容）</td>
</tr>
<tr>
<td>date</td>
<td>日期类型，给是为  yyyy-MM-dd ,只有年月日，没有时分秒</td>
</tr>
</tbody></table>
<p>其他类型</p>
<p><a href="https://imgtu.com/i/bRIgPg"><img src="https://s1.ax1x.com/2022/03/09/bRIgPg.png" alt="bRIgPg.png"></a></p>
<p>注意：MySQL中的 char类型与 varchar类型，都对应了 Java中的字符串类型，区别在于：</p>
<ul>
<li>char类型是固定长度的： 根据定义的字符串长度分配足够的空间。</li>
<li>varchar类型是可变长度的： 只使用字符串长度所需的空间</li>
</ul>
<p>适用场景：</p>
<ul>
<li>char类型适合存储 固定长度的字符串，比如 密码 ，性别一类 </li>
<li>varchar类型适合存储 在一定范围内，有长度变化的字符串 ，如姓名</li>
</ul>
<p><strong>增，创建表</strong></p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">	字段名1 字段类型(长度),</span><br><span class="line">	字段名2 字段类型(长度),</span><br><span class="line">	字段名3 字段类型(长度)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	uname <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>快速创建一个表test1，结构与表test相同（复制表结构）：</p>
<p>CREATE TABLE test1 LIKE test;</p>
<p><strong>删，删除表</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>drop table 表名；</td>
<td>删除表（从数据库中永久删除某一张表）</td>
</tr>
<tr>
<td>drop table if exists 表名；</td>
<td>判断表是否存在， 存在的话就删除,不存在就不执行删除</td>
</tr>
</tbody></table>
<p><strong>改，修改表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表名字rename</span></span><br><span class="line">RENAME <span class="keyword">TABLE</span> test <span class="keyword">TO</span> test1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表字符集alter</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给表添加一个字段alter,add</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">ADD</span> age <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段信息alter, modify</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 MODIFY age <span class="type">VARCHAR</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段名字和信息alter, change</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 CHANGE age uage <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给表删除一个字段alter, drop</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">DROP</span> uage;</span><br></pre></td></tr></table></figure>

<p><strong>查，查看表</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>show tables;</td>
<td>查看当前数据库中的所有表名</td>
</tr>
<tr>
<td>desc 表名；</td>
<td>查看数据表的结构</td>
</tr>
<tr>
<td>show create table 表名</td>
<td>查看创建表的sql语句</td>
</tr>
</tbody></table>
<h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><p>数据管理语言</p>
<p><strong>增，插入数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名 （字段名1，字段名2） values(字段值1，字段值2);  </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名 values(字段值1，字段值2...所有字段);</span><br></pre></td></tr></table></figure>

<p><strong>删，删除数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 where 条件表达式;  删除表的指定条件的记录</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名;       删除表的所有记录，不推荐</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truncate table 表名;    删除表的所有记录，推荐</span><br></pre></td></tr></table></figure>

<p><strong>改，修改数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 列名 = 值;   修改表中所有数据</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 列名 = 值 where 条件表达式；  修改表中指定条件的数据</span><br></pre></td></tr></table></figure>

<h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><p>数据查询语言</p>
<p><strong>查，查询数据</strong></p>
<p>select 列名 from 表名  where 条件表达式</p>
<p><strong>简单查询</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM 表名;        查询所有字段，使用 * 表示所有列</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id,uname FROM 表名;   查询指定的字段</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT uname AS &#x27;姓名&#x27; FROM 表名;  给查询出来的字段取别名   </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id + 100 AS &#x27;编号&#x27;, uname FROM 表名;  查询出的结果可以进行运算</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT * FROM 表名;     使用DISTINCT去重操作</span><br></pre></td></tr></table></figure>

<p><strong>运算符</strong></p>
<p>比较运算符</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>&gt; &lt; &lt;= &gt;= = &lt;&gt; !=</td>
<td>大于、小于、大于(小于)等于、不等于</td>
</tr>
<tr>
<td>BETWEEN …AND…</td>
<td>显示在某一区间的值  例如: 2000-10000之间：  Between 2000 and 10000</td>
</tr>
<tr>
<td>IN(集合)</td>
<td>集合表示多个值,使用逗号分隔,例如:  name in (悟空，八戒) in中的每个数据都会作为一次条件,只要满足条件就会显示</td>
</tr>
<tr>
<td>LIKE ‘%张%’</td>
<td>模糊查询，%表示任意多个字符，_表示任意一个字符</td>
</tr>
<tr>
<td>IS NULL</td>
<td>查询某一列为NULL的值, 注: 不能写 =  NULL</td>
</tr>
<tr>
<td>IS NOT NULL</td>
<td>查询某一列不为NULL的值</td>
</tr>
</tbody></table>
<p>逻辑运算符</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>And &amp;&amp;</td>
<td>多个条件同时成立</td>
</tr>
<tr>
<td>Or ||</td>
<td>多个条件任一成立</td>
</tr>
<tr>
<td>Not</td>
<td>不成立，取反。</td>
</tr>
</tbody></table>
<p><strong>条件查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询员工姓名为黄蓉的员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;黄蓉&#x27;</span>; </span><br><span class="line"></span><br><span class="line"># 查询薪水价格为<span class="number">5000</span>的员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">=</span> <span class="number">5000</span>; </span><br><span class="line"></span><br><span class="line"># 查询薪水价格不是<span class="number">5000</span>的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">!=</span> <span class="number">5000</span>; </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">&lt;&gt;</span> <span class="number">5000</span>; </span><br><span class="line"></span><br><span class="line"># 查询薪水价格大于<span class="number">6000</span>元的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">6000</span>;</span><br><span class="line"></span><br><span class="line"># 查询薪水价格在<span class="number">5000</span>到<span class="number">10000</span>之间所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> <span class="number">5000</span> <span class="keyword">AND</span> <span class="number">10000</span>; </span><br><span class="line"></span><br><span class="line"># 查询薪水价格是<span class="number">3600</span>或<span class="number">7200</span>或者<span class="number">20000</span>的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">=</span> <span class="number">3600</span> <span class="keyword">OR</span> salary <span class="operator">=</span> <span class="number">7200</span> <span class="keyword">OR</span> salary <span class="operator">=</span> <span class="number">20000</span>; </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="keyword">IN</span>(<span class="number">3600</span>,<span class="number">7200</span>,<span class="number">20000</span>);</span><br></pre></td></tr></table></figure>

<p><strong>模糊查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询含有<span class="string">&#x27;精&#x27;</span>字的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;%精%&#x27;</span>; </span><br><span class="line"></span><br><span class="line"># 查询以<span class="string">&#x27;孙&#x27;</span>开头的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;孙%&#x27;</span>; </span><br><span class="line"></span><br><span class="line"># 查询第二个字为<span class="string">&#x27;兔&#x27;</span>的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;_兔%&#x27;</span>; </span><br><span class="line"></span><br><span class="line"># 查询没有部门的员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_name <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"># 查询有部门的员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>通过 ORDER BY 子句,可以将查询出的结果进行排序(排序只是显示效果,不会影响真实数据)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段名 FROM 表名 [WHERE 条件表达式] ORDER BY 排序字段名 [ASC / DESC]</span><br></pre></td></tr></table></figure>

<ul>
<li>ASC：升序</li>
<li>DESC：降序</li>
</ul>
<p>多行排序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段名 FROM 表名 [WHERE 条件表达式] ORDER BY 排序字段名 [ASC / DESC], 排序字段名 [ASC / DESC]</span><br></pre></td></tr></table></figure>

<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>之前我们做的查询都是横向查询，它们都是根据条件一行一行的进行判断，而使用聚合函数查询是纵向<br>查询，它是对某一列的值进行计算，然后返回一个单一的值(另外聚合函数会忽略null空值。)；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 聚合函数(字段名) FROM 表名 [where 条件];</span><br></pre></td></tr></table></figure>

<p><strong>常用聚合函数：</strong> count()，sum()，max(),  min(),  avg() </p>
<p>案例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">1</span> 查询员工的总数 <span class="comment">-- 统计表中的记录条数 使用 count() </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(eid) <span class="keyword">FROM</span> emp; <span class="comment">-- 使用某一个字段 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp; <span class="comment">-- 使用 * </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> emp; <span class="comment">-- 使用 1,与 * 效果一样</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">2</span> 查看员工总薪水、最高薪水、最小薪水、薪水的平均值 <span class="comment">-- sum函数求和, max函数求最大, min函数求最小, avg函数求平均值 </span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="built_in">SUM</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;总薪水&#x27;</span>, </span><br><span class="line">	<span class="built_in">MAX</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;最高薪水&#x27;</span>, </span><br><span class="line">	<span class="built_in">MIN</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;最低薪水&#x27;</span>, </span><br><span class="line">	<span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;平均薪水&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">3</span> 查询薪水大于<span class="number">4000</span>员工的个数 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">4000</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">4</span> 查询部门为<span class="string">&#x27;教学部&#x27;</span>的所有员工的个数 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_name <span class="operator">=</span> <span class="string">&#x27;教学部&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">5</span> 查询部门为<span class="string">&#x27;市场部&#x27;</span>所有员工的平均薪水 </span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	<span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;市场部平均薪资&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> dept_name <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>分组查询指的是使用 GROUP BY 语句,对查询的信息进行分组,相同数据作为一组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 分组字段<span class="operator">/</span>聚合函数 <span class="keyword">FROM</span> 表名 [<span class="keyword">where</span> 条件] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段 [<span class="keyword">HAVING</span> 条件];</span><br></pre></td></tr></table></figure>

<p>例如：通过性别字段 进行分组,求各组的平均薪资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex, <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">1.</span> 查询有什么部门 </span><br><span class="line"><span class="keyword">SELECT</span> dept_name <span class="keyword">AS</span> <span class="string">&#x27;部门名称&#x27;</span> <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_name;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">2.</span>查询每个部门的平均薪资 </span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">dept_name <span class="keyword">AS</span> <span class="string">&#x27;部门名称&#x27;</span>, <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;平均薪资&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_name;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">3.</span>查询每个部门的平均薪资, 部门名称不能为<span class="keyword">null</span> </span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">dept_name <span class="keyword">AS</span> <span class="string">&#x27;部门名称&#x27;</span>, <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;平均薪资&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> dept_name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_name;</span><br></pre></td></tr></table></figure>

<p>having的用法：</p>
<ul>
<li><p>需要在分组后,对数据进行过滤,使用 关键字 having</p>
</li>
<li><p>分组操作中的having子语句，是用于在分组后对数据进行过滤的，作用类似于where条件。</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询平均薪资大于<span class="number">6000</span>的部门 <span class="comment">-- 需要在分组后再次进行过滤,使用 having </span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">dept_name , <span class="built_in">AVG</span>(salary) </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> dept_name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_name </span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&gt;</span> <span class="number">6000</span> ;</span><br></pre></td></tr></table></figure>

<p>where 与 having的区别</p>
<ul>
<li>where：where 进行分组前的过滤，where 后面不能写 聚合函数</li>
<li>having：having 是分组后的过滤，having 后面可以写 聚合函数</li>
</ul>
<h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><ul>
<li>limit是限制的意思,用于 限制返回的查询结果的行数 (可以通过limit指定查询多少行数据)</li>
<li>limit 语法是 MySql的方言,用来完成分页</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2.</span>.. <span class="keyword">FROM</span> 表名 LIMIT <span class="keyword">offset</span> , length;</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>offset： 起始行数, 从0开始记数, 如果省略 则默认为 0.</li>
<li>length：返回的行数</li>
</ul>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询emp表中的前 <span class="number">5</span>条数据</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">0</span> , <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>分页操作：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分页操作 每页显示3条数据 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">0</span>,<span class="number">3</span>; <span class="comment">-- 第1页 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">3</span>,<span class="number">3</span>; <span class="comment">-- 第2页 2-1=1 1*3=3 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">6</span>,<span class="number">3</span>; <span class="comment">-- 第三页</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分页公式 起始索引 = (当前页 - 1) * 每页条数</span></span><br></pre></td></tr></table></figure>

<h2 id="sql约束"><a href="#sql约束" class="headerlink" title="sql约束"></a>sql约束</h2><p>约束的作用: 对表中的数据进行进一步的限制，从而保证数据的正确性、有效性、完整性. 违反约束的不正确数据,将无法插入到表中</p>
<table>
<thead>
<tr>
<th><strong>约束名</strong></th>
<th><strong>约束关键字</strong></th>
</tr>
</thead>
<tbody><tr>
<td>主键</td>
<td>primary  key</td>
</tr>
<tr>
<td>唯一</td>
<td>unique</td>
</tr>
<tr>
<td>非空</td>
<td>not  null</td>
</tr>
<tr>
<td>外键</td>
<td>foreign  key</td>
</tr>
<tr>
<td>默认值</td>
<td>default</td>
</tr>
</tbody></table>
<h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>不可重复 唯一 非空，用来表示数据库中的每一条记录，每个表至多一个主键</p>
<p><strong>添加主键</strong></p>
<p>1，创建表时给字段添加主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp2( </span><br><span class="line">    <span class="comment">-- 设置主键 唯一 非空 </span></span><br><span class="line">    eid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">    ename <span class="type">VARCHAR</span>(<span class="number">20</span>), </span><br><span class="line">    sex <span class="type">CHAR</span>(<span class="number">1</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp2( </span><br><span class="line">    eid <span class="type">INT</span> , </span><br><span class="line">    ename <span class="type">VARCHAR</span>(<span class="number">20</span>), </span><br><span class="line">    sex <span class="type">CHAR</span>(<span class="number">1</span>), </span><br><span class="line">    <span class="comment">-- 指定主键为 eid字段 </span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(eid) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>2，给已存在且没有主键的表，添加主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp2 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(eid);</span><br></pre></td></tr></table></figure>

<p><strong>删除主键</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp2 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>

<p><strong>设置自增主键</strong></p>
<p>AUTO_INCREMENT： 表示自动增长(字段类型必须是整数类型) </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp2( </span><br><span class="line">    <span class="comment">-- 关键字 AUTO_INCREMENT,主键类型必须是整数类型 </span></span><br><span class="line">    eid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, </span><br><span class="line">    ename <span class="type">VARCHAR</span>(<span class="number">20</span>), </span><br><span class="line">    sex <span class="type">CHAR</span>(<span class="number">1</span>) </span><br><span class="line">)AUTO_INCREMENT<span class="operator">=</span><span class="number">100</span>;  <span class="comment">-- 还可以定义自增主键的起始值</span></span><br></pre></td></tr></table></figure>

<p>插入记录，主键自增，<code>select last_insert_id();</code>语句可以获取刚刚新增记录的主键是多少</p>
<p><strong>删除表中数据对自增主键的影响</strong></p>
<table>
<thead>
<tr>
<th><strong>清空表数据的方式</strong></th>
<th><strong>特点</strong></th>
</tr>
</thead>
<tbody><tr>
<td>DELETE</td>
<td>只是删除表中所有数据,对自增没有影响，主键自增到哪还是哪里</td>
</tr>
<tr>
<td>TRUNCATE</td>
<td>truncate 是将整个表删除掉,然后创建一个新的表自增的主键,重新从起始值开始</td>
</tr>
</tbody></table>
<h3 id="唯一键"><a href="#唯一键" class="headerlink" title="唯一键"></a>唯一键</h3><p>唯一不能重复， 但是可以为空，一个表中可以有多个唯一键约束</p>
<table>
<thead>
<tr>
<th><strong>主键约束与唯一约束的区别</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1.  主键约束 唯一且不能够为空</td>
</tr>
<tr>
<td>2.  唯一约束,唯一 但是可以为空</td>
</tr>
<tr>
<td>3.  一个表中只能有一个主键 , 但是可以有多个唯一约束</td>
</tr>
</tbody></table>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>事务是一个整体，由一条或者多条SQL 语句组成，这些SQL语句要么都执行成功,要么都执行失败，只要有一条SQL出现异常，整个操作就会回滚，整个业务执行失败</p>
<table>
<thead>
<tr>
<th><strong>功能</strong></th>
<th><strong>语句</strong></th>
</tr>
</thead>
<tbody><tr>
<td>开启事务</td>
<td><strong>start transaction;</strong> 或者 <strong>BEGIN</strong>;</td>
</tr>
<tr>
<td>提交事务</td>
<td><strong>commit;</strong></td>
</tr>
<tr>
<td>回滚事务</td>
<td><strong>rollback;</strong></td>
</tr>
</tbody></table>
<h2 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h2><table>
<thead>
<tr>
<th><strong>特性</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>原子性</td>
<td>每个事务都是一个整体，不可再拆分，事务中所有的  SQL 语句要么都执行成功， 要么都失败。</td>
</tr>
<tr>
<td>一致性</td>
<td>事务在执行前数据库的状态与执行后数据库的状态保持一致。如：转账前2个人的 总金额是  2000，转账后 2 个人总金额也是 2000.</td>
</tr>
<tr>
<td>隔离性</td>
<td>事务与事务之间不应该相互影响，执行时保持隔离的状态.</td>
</tr>
<tr>
<td>持久性</td>
<td>一旦事务执行成功，对数据库的修改是持久的。就算关机，数据也是要保存下来的.</td>
</tr>
</tbody></table>
<h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>事务在操作时的理想状态：<br>所有的事务之间保持隔离，互不影响。因为并发操作，多个用户同时访问同一个 数据。可能引发并发访问的问题</p>
<table>
<thead>
<tr>
<th><strong>并发访问的问题</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>脏读</td>
<td>一个事务读取到了另一个事务中尚未提交的数据</td>
</tr>
<tr>
<td>不可重复读</td>
<td>一个事务中两次读取的数据内容不一致, 要求的是在一个事务中多次读取时数据是一致的. 这是进行  update 操作时引发的问题</td>
</tr>
<tr>
<td>幻读</td>
<td>一个事务中,某一次的  select 操作得到的结果所表征的数据状态, 无法支撑后续的业务操作. 查询得到的数据状态不准确,导致幻读.</td>
</tr>
</tbody></table>
<p><strong>四种隔离级别</strong>（底到高）</p>
<p>1，read uncommitted：(读未提交) 会引发脏读，A事务开启后会读取到B事务没有提交的数据。</p>
<p>2，read committed：（读已提交）会引发不可重复读，A事务开启后访问了一个数据，此时B事务修改了改数据，然后B事务提交，A事务再次访问该数据时，是修改了的数据，导致前后两次访问同一数据不一致。（Oracle和SQLServer默认）</p>
<p>3，repeatable read：（可重复读）会引发幻读，例如A事务访问某个数据不存在时，准备添加该数据，而此时B事务刚好添加了该数据，A事务添加数据时就会异常。（MySql默认）</p>
<p>4，serializable：（串行化）完全隔离，所有问题解决</p>
<p>注意：出现问题，提高隔离级别可解决。虽然隔离级别越高，隔离性越好，但是代价是效率越低。</p>
<h2 id="隔离级别相关命令"><a href="#隔离级别相关命令" class="headerlink" title="隔离级别相关命令"></a>隔离级别相关命令</h2><p>查看隔离级别</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br></pre></td></tr></table></figure>

<p>设置事务隔离级别，需要退出 MySQL 再重新登录才能看到隔离级别的变化</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level 级别名称; </span><br><span class="line"></span><br><span class="line">read uncommitted 读未提交 </span><br><span class="line">read committed 读已提交 </span><br><span class="line">repeatable read 可重复读 </span><br><span class="line">serializable 串行化</span><br></pre></td></tr></table></figure>

<h1 id="多表"><a href="#多表" class="headerlink" title="多表"></a>多表</h1><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><ul>
<li><p>外键指的是在 从表 中的某个字段作为外键 与 主表 的主键字段相对于, 比如员工表的 dept_id,就是外键</p>
</li>
<li><p>使用外键约束可以让两张表之间产生一个对应关系,从而保证主从表的引用的完整性</p>
</li>
</ul>
<p>多表关系中的主表和从表：<br>主表: 主键id所在的表, 约束别人的表<br>从表: 外键所在的表多, 被约束的表</p>
<p><a href="https://imgtu.com/i/qMMqC8"><img src="https://s1.ax1x.com/2022/03/22/qMMqC8.png" alt="qMMqC8.png"></a></p>
<p><strong>创建语法</strong></p>
<p>1，新建表时，在字段后面，创建外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">CONSTRAINT</span>] [外键约束名称] <span class="keyword">FOREIGN</span> KEY(外键字段名) <span class="keyword">REFERENCES</span> 主表名(主键字段名)</span><br></pre></td></tr></table></figure>

<p>2，给已存在的表添加外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表 <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span>] [外键约束名称] <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表(主 键字段名);</span><br></pre></td></tr></table></figure>

<p><strong>删除外键</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表 <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键约束名称</span><br></pre></td></tr></table></figure>



<p><strong>外键约束的注意事项</strong></p>
<ol>
<li><p>从表外键类型必须与主表主键类型一致 否则创建失败. </p>
</li>
<li><p>添加数据时, 应该先添加主表中的数据.</p>
</li>
<li><p>删除数据时,应该先删除从表中的数据.</p>
</li>
</ol>
<p><strong>外键的级联删除</strong></p>
<p>创建外键时，在后面添加语法：ON DELETE CASCADE，为级联删除。</p>
<p>即，删除数据时，删除主表中的数据，从表中对应的数据也被直接删除。</p>
<p>例如，添加了级联删除后，删除部门表中的开发部，则员工表中，关于开发部的所有员工都将会被自动删除。</p>
<h2 id="多表关系设计"><a href="#多表关系设计" class="headerlink" title="多表关系设计"></a>多表关系设计</h2><p>表与表之间的三种关系：</p>
<ul>
<li>一对多关系: 最常见的关系, 学生对班级,员工对部门</li>
<li>多对多关系: 学生与课程, 用户与角色</li>
<li>一对一关系: 使用较少,因为一对一关系可以合成为一张表</li>
</ul>
<p><strong>一对多关系（1:n）</strong><br>例如：班级和学生，部门和员工，客户和订单，分类和商品</p>
<p>建表原则：在从表(多方)创建一个字段,字段作为外键指向主表(一方)的主键</p>
<p><a href="https://imgtu.com/i/qMYWnS"><img src="https://s1.ax1x.com/2022/03/22/qMYWnS.png" alt="qMYWnS.png"></a></p>
<p><strong>多对多（m:n）</strong><br>例如：老师和学生，学生和课程，用户和角色 </p>
<p>建表原则：需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向各自一方的 主键。</p>
<p><a href="https://imgtu.com/i/qMt1u8"><img src="https://s1.ax1x.com/2022/03/22/qMt1u8.png" alt="qMt1u8.png"></a></p>
<p><strong>一对一（1:1）</strong><br>在实际的开发中应用不多.因为一对一可以创建成一张表。 </p>
<p>建表原则：在任意一方添加外键，指向另一张表的主键，外键唯一 UNIQUE  </p>
<p><a href="https://imgtu.com/i/qMtTVe"><img src="https://s1.ax1x.com/2022/03/22/qMtTVe.png" alt="qMtTVe.png"></a></p>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>多表查询分为：内连接查询和外连接查询</p>
<h3 id="笛卡尔乘积"><a href="#笛卡尔乘积" class="headerlink" title="笛卡尔乘积"></a>笛卡尔乘积</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 表<span class="number">1</span>, 表<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>假设集合A={a, b}，集合B={0, 1, 2}，则两个集合的笛卡尔积为{(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}。</p>
<h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p><strong>隐式内连接</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 左表, 右表 <span class="keyword">WHERE</span> 连接条件;</span><br></pre></td></tr></table></figure>

<p>例如：查询所有商品信息和对应的分类信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products p,category c <span class="keyword">WHERE</span> p.category_id <span class="operator">=</span> c.cid;</span><br></pre></td></tr></table></figure>



<p><strong>显式内连接</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法   <span class="comment">-- inner 可以省略</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 左表 [<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> 右表 <span class="keyword">ON</span> 连接条件 <span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询所有商品信息和对应的分类信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products p <span class="keyword">INNER</span> <span class="keyword">JOIN</span> category c <span class="keyword">ON</span> p.category_id <span class="operator">=</span> c.cid;</span><br><span class="line"></span><br><span class="line"># 查询鞋服分类下,价格大于<span class="number">500</span>的商品名称和价格</span><br><span class="line"><span class="keyword">SELECT</span> p.pname, p.price </span><br><span class="line"><span class="keyword">FROM</span> products p <span class="keyword">INNER</span> <span class="keyword">JOIN</span> category c <span class="keyword">ON</span> p.category_id <span class="operator">=</span> c.cid </span><br><span class="line"><span class="keyword">WHERE</span> p.price <span class="operator">&gt;</span> <span class="number">500</span> <span class="keyword">AND</span> cname <span class="operator">=</span> <span class="string">&#x27;鞋服&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接的特点：</p>
<ul>
<li>以左表为基准, 匹配右边表中的数据,如果匹配的上,就展示匹配到的数据</li>
<li>如果匹配不到, 左表中的数据正常展示, 右边的展示为null.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法  <span class="keyword">outer</span>可省略</span><br><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 左表 <span class="keyword">LEFT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 右表 <span class="keyword">ON</span> 连接条件 <span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure>

<p>例如：左外连接, 查询每个分类下的商品个数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.cname <span class="keyword">AS</span> <span class="string">&#x27;分类名称&#x27;</span>, <span class="built_in">COUNT</span>(p.pid) <span class="keyword">AS</span> <span class="string">&#x27;商品个数&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> category c <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> products p </span><br><span class="line"><span class="keyword">ON</span> c.cid <span class="operator">=</span> p.category_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.cname;</span><br></pre></td></tr></table></figure>

<p>右外连接的特点：与左外连接一样，只不过以右表为基准，关键字，right  [outer]  join</p>
<p><strong>各种连接方式总结</strong>：</p>
<p><a href="https://imgtu.com/i/qMd1Rs"><img src="https://s1.ax1x.com/2022/03/22/qMd1Rs.png" alt="qMd1Rs.png"></a></p>
<ul>
<li>内连接: inner join , 只获取两张表中 交集部分的数据.</li>
<li>左外连接: left join , 以左表为基准 ,查询左表的所有数据, 以及与右表有交集的部分</li>
<li>右外连接: right join , 以右表为基准,查询右表的所有的数据,以及与左表有交集的部分</li>
</ul>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>概念：一条select 查询语句的结果, 作为另一条 select 语句的一部分</p>
<p>特点：<br>子查询必须放在小括号中<br>子查询一般作为父查询的查询条件使用</p>
<p>子查询常见分类：</p>
<ul>
<li>where型 子查询: 将子查询的结果, 作为父查询的比较条件</li>
<li>from型 子查询 : 将子查询的结果, 作为 一张表,提供给父层查询使用</li>
<li>exists型 子查询: 子查询的结果是单列多行, 类似一个数组, 父层查询使用 IN 函数 ,包含子查询的结果</li>
</ul>
<p><strong>where型 子查询</strong></p>
<p>将子查询的结果, 作为父查询的比较条件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段 <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 字段<span class="operator">=</span>（子查询）;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 通过子查询的方式, 查询价格最高的商品信息 </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.先查询出最高价格 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(price) <span class="keyword">FROM</span> products; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.将最高价格作为条件,获取商品信息 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> price <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(price) <span class="keyword">FROM</span> products);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询化妆品分类下的 商品名称 商品价格 </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先查出化妆品分类的 id </span></span><br><span class="line"><span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;化妆品&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 根据分类id ,去商品表中查询对应的商品信息 </span></span><br><span class="line"><span class="keyword">SELECT</span> p.pname, p.price </span><br><span class="line"><span class="keyword">FROM</span> products p </span><br><span class="line"><span class="keyword">WHERE</span> p.category_id <span class="operator">=</span> (<span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;化妆品&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询小于平均价格的商品信息</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.查询平均价格 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(price) <span class="keyword">FROM</span> products;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>查询小于平均价格的商品 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> price <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(price) <span class="keyword">FROM</span> products);</span><br></pre></td></tr></table></figure>



<p><strong>from型 子查询</strong></p>
<p> 将子查询的结果, 作为 一张表,提供给父层查询使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段 <span class="keyword">FROM</span> （子查询）表别名 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure>



<p><strong>exists型 子查询</strong></p>
<p>子查询的结果是单列多行, 父层查询使用 IN 函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段 <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 字段 <span class="keyword">IN</span> （子查询）;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询价格小于两千的商品,来自于哪些分类(名称) </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先查询价格小于2000 的商品的,分类ID </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> category_id <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> price <span class="operator">&lt;</span> <span class="number">2000</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在根据分类的id信息,查询分类名称</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cid <span class="keyword">in</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> category_id <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> price <span class="operator">&lt;</span> <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询家电类 与 鞋服类下面的全部商品信息 </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先查询出家电与鞋服类的 分类ID </span></span><br><span class="line"><span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="keyword">IN</span> (<span class="string">&#x27;家电&#x27;</span>,<span class="string">&#x27;鞋服&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 根据cid 查询分类下的商品信息 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> category_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="keyword">IN</span> (<span class="string">&#x27;家电&#x27;</span>,<span class="string">&#x27;鞋服&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<p>1，子查询如果查出的是一个字段(单列), 那就在where后面作为条件使用. </p>
<p>2，子查询如果查询出的是多个字段(多列), 就当做一张表使用(要起别名).</p>
<h1 id="数据库范式"><a href="#数据库范式" class="headerlink" title="数据库范式"></a>数据库范式</h1><p>为了建立冗余较小、结构合理的数据库，设计数据库时必须遵循一定的规则。在关系型数据库中这种规则就称为范式。</p>
<p>范式是符合某一种设计要求的总结。要想设计一个结构合理的关系型数据库，必须满足一定的范式</p>
<p><strong>第一范式 1NF</strong></p>
<ul>
<li>原子性, 做到列不可拆分</li>
<li>第一范式是最基本的范式。数据库表里面字段都是单一属性的，不可再分, 如果数据表中每个字段都是不可再分的最小数据单元，则满足第一范式。</li>
</ul>
<p><a href="https://imgtu.com/i/qMBRoT"><img src="https://s1.ax1x.com/2022/03/22/qMBRoT.png" alt="qMBRoT.png"></a></p>
<p><strong>第二范式 2NF</strong></p>
<ul>
<li>在第一范式的基础上更进一步，目标是确保表中的每列都和主键相关。</li>
<li>一张表只能描述一件事.</li>
</ul>
<p><a href="https://imgtu.com/i/qMBXFO"><img src="https://s1.ax1x.com/2022/03/22/qMBXFO.png" alt="qMBXFO.png"></a></p>
<p>学员信息表中其实在描述两个事物 , 一个是学员的信息,一个是课程信息</p>
<p>如果放在一张表中,会导致数据的冗余,如果删除学员信息, 成绩的信息也被删除了</p>
<p><strong>第三范式 3NF</strong></p>
<ul>
<li>消除传递依赖</li>
<li>表的信息，如果能够被推导出来，就不应该单独的设计一个字段来存放</li>
</ul>
<p><a href="https://imgtu.com/i/qMDAk8"><img src="https://s1.ax1x.com/2022/03/22/qMDAk8.png" alt="qMDAk8.png"></a></p>
<p>通过number 与 price字段就可以计算出总金额,不要在表中再做记录(空间最省)</p>
<p><strong>反三范式</strong></p>
<ul>
<li>反范式化指的是通过增加冗余或重复的数据来提高数据库的读性能</li>
<li>浪费存储空间,节省查询时间 (以空间换时间)</li>
</ul>
<p><strong>冗余字段</strong>：某个字段在多张表出现，且其意义相同，为冗余字段</p>
<p>反三范式案例：两张表，用户表、订单表，用户表中有字段name，而订单表中也存在字段name。</p>
<p><a href="https://imgtu.com/i/qMD79g"><img src="https://s1.ax1x.com/2022/03/22/qMD79g.png" alt="qMD79g.png"></a></p>
<p>适当冗余的好处：</p>
<p>当需要查询“订单表”所有数据并且只需要“用户表”的name字段时, 没有冗余字段 就需要去join连接用户表,假设表中数据量非常的大, 那么会这次连接查询就会非常大的消耗系统的性能.</p>
<p>这时候冗余的字段就可以派上用场了, 有冗余字段我们查一张表就可以了.</p>
<p><strong>总结</strong></p>
<p>1，尽量遵循范式理论的规约，尽可能少的冗余字段，让数据库设计看起来精致、优雅、让人心醉。</p>
<p>2，合理的加入冗余字段这个润滑剂，减少join，让数据库执行性能更高更快。</p>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>在数据库表中，对字段建立索引可以大大提高查询速度。通过善用这些索引，可以令MySQL的查询和运行更加高效。</p>
<p><strong>常见索引</strong></p>
<table>
<thead>
<tr>
<th><strong>索引名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>主键索引 (primary  key)</td>
<td>主键是主键索引，是一种唯一性索引,每个表只能有一个主键, 用于标识数据表中的每一条记录</td>
</tr>
<tr>
<td>唯一索引 (unique)</td>
<td>唯一键是唯一索引，指的是 索引列的所有值都只能出现一次, 必须唯一.</td>
</tr>
<tr>
<td>普通索引 (index)</td>
<td>最常见的索引,作用就是 加快对数据的访问速度</td>
</tr>
</tbody></table>
<p>MySql将一个表的索引都保存在同一个索引文件中, 如果对中数据进行增删改操作,MySql都会自动的更<br>新索引.</p>
<h2 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h2><p>其实主键就是主键索引。</p>
<p>创建表时添加主键索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名( </span><br><span class="line">    <span class="comment">-- 添加主键 (主键是唯一性索引,不能为null,不能重复,) </span></span><br><span class="line">    字段名 类型 <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>修改表结构添加主键索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY ( 列名 )</span><br></pre></td></tr></table></figure>

<h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>其实唯一键就是唯一索引。</p>
<p>创建表时，添加唯一索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名( </span><br><span class="line">    列名 类型(长度), </span><br><span class="line">    <span class="comment">-- 添加唯一索引 </span></span><br><span class="line">    <span class="keyword">UNIQUE</span> [索引名称] (列名) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>在已有的表上添加唯一索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index 索引名 <span class="keyword">on</span> 表名(列名(长度))</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> ( 列名 )</span><br></pre></td></tr></table></figure>

<h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><p>普通索引的唯一任务是加快对数据的访问速度。因此，应该只为那些最经常出现在查询条件（WHERE column=）或排序条件（ORDERBY column）中的数据列创建索引。</p>
<p>在已有的表上添加普通索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index 索引名 <span class="keyword">on</span> 表名(列名[长度])</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> INDEX 索引名 (列名)</span><br></pre></td></tr></table></figure>



<p><strong>删除索引</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> INDEX 索引名;</span><br></pre></td></tr></table></figure>

<h2 id="索引性能测试"><a href="#索引性能测试" class="headerlink" title="索引性能测试"></a>索引性能测试</h2><p>在数据量非常大的时候，查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 未添加索引,进行分组查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_index <span class="keyword">GROUP</span> <span class="keyword">BY</span> dname;</span><br></pre></td></tr></table></figure>

<p>速度非常慢，但是给该字段添加索引后，速度会大大提高。</p>
<p><strong>索引优缺点</strong></p>
<p>优：</p>
<ul>
<li>大大的提高查询速度</li>
<li>可以显著的减少查询中分组和排序的时间。</li>
</ul>
<p>缺：</p>
<ul>
<li> 创建索引和维护索引需要时间，而且数据量越大时间越长</li>
<li>当对表中的数据进行增加，修改，删除的时候，索引也要同时进行维护，降低了数据的维护速度</li>
</ul>
<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><ol>
<li>   视图是一种虚拟表。 </li>
<li>   视图建立在已有表的基础上, 视图赖以建立的这些表称为基表。</li>
<li>   向视图提供数据内容的语句为 SELECT 语句, 可以将视图理解为存储起来的 SELECT 语句. </li>
<li>   视图向用户提供基表数据的另一种表现形式</li>
</ol>
<p><strong>作用</strong></p>
<p>1，权限控制时可以使用</p>
<p>2，简化复杂的多表查询</p>
<p><strong>创建视图</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名 [column_list] <span class="keyword">as</span> 查询语句;</span><br></pre></td></tr></table></figure>

<p>创建了视图后，把视图当做一张只读的表操作就可以。</p>
<p><strong>删除视图</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 视图名;</span><br></pre></td></tr></table></figure>



<p><strong>视图的使用</strong></p>
<p> 需求: 查询各个分类下的商品平均价格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 通过 多表查询 </span></span><br><span class="line"><span class="keyword">SELECT</span> cname <span class="keyword">AS</span> <span class="string">&#x27;分类名称&#x27;</span>, <span class="built_in">AVG</span>(p.`price`) <span class="keyword">AS</span> <span class="string">&#x27;平均价格&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> products p <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> category c </span><br><span class="line"><span class="keyword">ON</span> p.`category_id` <span class="operator">=</span> c.`cid` </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.`cname`; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过视图查询 可以省略连表的操作 </span></span><br><span class="line"><span class="keyword">SELECT</span> cname <span class="keyword">AS</span> <span class="string">&#x27;分类名称&#x27;</span>, <span class="built_in">AVG</span>(price) <span class="keyword">AS</span> <span class="string">&#x27;平均价格&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> products_category_view </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cname;</span><br></pre></td></tr></table></figure>



<p><strong>视图与表的区别</strong></p>
<ul>
<li>视图是建立在表的基础上，表存储数据库中的数据，而视图只是做一个数据的展示</li>
<li>通过视图不能改变表中数据（一般情况下视图中的数据都是表中的列 经过计算得到的结果,不允许<br>更新）</li>
<li>删除视图，表不受影响，而删除表，视图不再起作用</li>
</ul>
<h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>MySQL 5.0 版本开始支持存储过程。</p>
<p>存储过程（Stored Procedure）是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象。<br>存储过程是为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行。</p>
<p>简单理解: 存储过程其实就是一堆 SQL 语句的合并。中间加入了一些逻辑控制。</p>
<p><strong>优</strong></p>
<ul>
<li>存储过程一旦调试完成后，就可以稳定运行，（前提是，业务需求要相对稳定，没有变化）</li>
<li>存储过程减少业务系统与数据库的交互，降低耦合，数据库交互更加快捷（应用服务器，与<br>数据库服务器不在同一个地区）</li>
</ul>
<p><strong>缺</strong></p>
<ul>
<li>在互联网行业中，大量使用MySQL，MySQL的存储过程与Oracle的相比较弱，所以较少使<br>用，并且互联网行业需求变化较快也是原因之一</li>
<li>尽量在简单的逻辑中使用，存储过程移植十分困难，数据库集群环境，保证各个库之间存储<br>过程变更一致也十分困难。</li>
<li>阿里的代码规范里也提出了禁止使用存储过程，存储过程维护起来的确麻烦；</li>
</ul>
<p><strong>创建存储过程一，无参</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$ <span class="comment">-- 声明语句结束符，可以自定义 一般使用$$ </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 过程名称() <span class="comment">-- 声明存储过程 </span></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="comment">-- 开始编写存储过程 -- 要执行的操作 </span></span><br><span class="line"><span class="keyword">END</span> $$ <span class="comment">-- 存储过程结束</span></span><br></pre></td></tr></table></figure>

<p>例子：编写存储过程, 查询所有商品数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> goods_proc() </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> goods; </span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> goods_proc;</span><br></pre></td></tr></table></figure>



<p><strong>创建存储过程二，有输入参</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称(<span class="keyword">IN</span> 参数名 参数类型)</span><br></pre></td></tr></table></figure>

<p>例子：输入一个商品id, 根据id删除数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> goods_proc02(<span class="keyword">IN</span> goods_id <span class="type">INT</span>) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">DELETE</span> <span class="keyword">FROM</span> goods <span class="keyword">WHERE</span> gid <span class="operator">=</span> goods_id ; </span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用 删除 id为2的商品 </span></span><br><span class="line"><span class="keyword">CALL</span> goods_proc02(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>



<p><strong>创建存储过程三，有输入参，有输出参</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称(<span class="keyword">IN</span> 参数名 参数类型, <span class="keyword">out</span> 参数名 参数类型)</span><br></pre></td></tr></table></figure>

<p>变量赋值操作：SET @变量名=值</p>
<p>例子：向订单表 插入一条数据, 返回1,表示插入成功</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> orders_proc(<span class="keyword">IN</span> id <span class="type">INT</span>, <span class="keyword">IN</span> price <span class="type">INT</span>, <span class="keyword">OUT</span> out_num <span class="type">INT</span>) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 执行插入操作 </span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(id, price); </span><br><span class="line">    <span class="comment">-- 设置 num的值为 1 </span></span><br><span class="line">    <span class="keyword">SET</span> <span class="variable">@out</span>_num <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line">    <span class="comment">-- 返回 out_num的值 </span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="variable">@out</span>_num; </span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">CALL</span> orders_proc(<span class="number">1</span>,<span class="number">30</span>,<span class="variable">@out</span>_num);</span><br></pre></td></tr></table></figure>

<h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>当我们执行一条sql语句的时候，这条sql语句的执行会自动去触发执行其他的sql语句。</p>
<p><strong>触发器四要素</strong></p>
<ol>
<li>监视地点（table） </li>
<li>监视事件（insert/update/delete） </li>
<li>触发时间（before/after） </li>
<li>触发事件（insert/update/delete）</li>
</ol>
<p><strong>创建语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $ <span class="comment">-- 将Mysql的结束符号从 ; 改为 $,避免执行出现错误 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> Trigger_Name <span class="comment">-- 触发器名，在一个数据库中触发器名是唯一的 </span></span><br><span class="line">(before<span class="operator">/</span>after) (<span class="keyword">insert</span><span class="operator">/</span>update<span class="operator">/</span><span class="keyword">delete</span>) <span class="comment">-- 触发的时机 和 监视的事件 </span></span><br><span class="line"><span class="keyword">on</span> table_Name <span class="comment">-- 触发器所在的表 </span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> <span class="comment">-- 固定写法 叫做行触发器, 每一行受影响，触发事件都执行 </span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="comment">-- begin和end之间写触发事件 </span></span><br><span class="line"><span class="keyword">end</span> $ <span class="comment">-- 结束标记</span></span><br></pre></td></tr></table></figure>

<p>例子：在下订单的时候，对应的商品的库存量要相应的减少</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.修改结束标识 </span></span><br><span class="line">DELIMITER $ </span><br><span class="line"><span class="comment">-- 2.创建触发器 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> t1 </span><br><span class="line"><span class="comment">-- 3.指定触发的时机,和要监听的表 </span></span><br><span class="line">AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> orders </span><br><span class="line"><span class="comment">-- 4.行触发器 固定写法 </span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br><span class="line"><span class="comment">-- 4.触发后具体要执行的事件 </span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 订单+1 库存-1 </span></span><br><span class="line">    UPDATE goods <span class="keyword">SET</span> num <span class="operator">=</span> num <span class="number">-1</span> <span class="keyword">WHERE</span> gid <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line"><span class="keyword">END</span>$</span><br></pre></td></tr></table></figure>

<h1 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h1><p>数据控制语言</p>
<h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><p>MySql默认使用的都是 root 用户，超级管理员，拥有全部的权限。除了root用户以外，我们还可以通过DCL语言来定义一些权限较小的用户, 分配不同的权限来管理和维护数据库。</p>
<p><strong>创建用户</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>主机名：指定该用户在哪个主机上可以登陆，本地用户可用 localhost，如果想让该用户可以 从任意远程主机登陆，可以使用通配符 %</p>
<p><strong>用户授权</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限 <span class="number">1</span>, 权限 <span class="number">2</span> <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>权限：授予用户的权限，如 CREATE、ALTER、SELECT、INSERT、UPDATE 等。如果要授 予所有的权限则使用 ALL</p>
<p><code>*.*</code>表示所有库所有表</p>
<p><strong>查看权限</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p><strong>删除用户</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p><strong>查询用户</strong></p>
<p>其实就是查询mysql的数据库中的user表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">USER</span>;</span><br></pre></td></tr></table></figure>

<h2 id="备份与还原"><a href="#备份与还原" class="headerlink" title="备份与还原"></a>备份与还原</h2><p><strong>SQLYog 数据备份与还原</strong></p>
<p>备份：选中要备份的数据库,右键 ”备份/导出“ —-&gt; “备份数据库,转储到SQL…”<br> —-&gt;  选择好路径后，点击“导出”</p>
<p>还原：右键，选择”执行SQL脚本…“ —-&gt; 选择好路径后，点击“执行”</p>
<p><strong>命令行备份</strong></p>
<p>打开DOS命令行</p>
<p>备份语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u 用户名 <span class="operator">-</span>p 密码 数据库 <span class="operator">&gt;</span> 文件路径</span><br></pre></td></tr></table></figure>

<p>还原，需要先创建一个库，选择该库，在库中还原</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use 库名</span><br><span class="line">source 文件路径</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>vue</title>
    <url>/2022/07/26/vue/</url>
    <content><![CDATA[<p>记录了vue的使用方法，基本语法，利用vueCli脚手架管理项目</p>
<span id="more"></span>

<p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计 为可以自底向上逐层应用.</p>
<p>Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一 方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
<p>自底向上逐层应用：作为渐进式框架要实现的目标就是方便项目增量开发(即插即用)。</p>
<p><strong>优点</strong></p>
<ul>
<li>声明式渲染: 前后端分离是未来趋势</li>
<li>渐进式框架: 适用于各种业务需求</li>
<li>简单易学: 国人开发,中文文档,不存在语言障碍,易于理解和学习</li>
</ul>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><ul>
<li>1，在html页面使用script引入vue.js的库即可使用。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//远程CDN </span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&quot;</span>&gt;&lt;/script&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">//本地</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>2，Vue-CLI脚手架:使用vue.js官方提供的CLI脚本架很方便去创建vue.js工程雏形</li>
</ul>
<h2 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h2><p>1、定义html，引入vue.js<br>2、定义id=app的div，此区域作为vue的接管区域<br>3、定义Vue实例，接管id=app的区域。<br>4、定义model（数据对象）<br>5、在app中展示数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ....省略</span><br><span class="line">    <span class="comment">&lt;!-- 1、定义html，引入vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. 定义id=app的div，此区域作为vue的接管区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 5.在app中展示数据 --&gt;</span></span><br><span class="line">        &#123;&#123;name&#125;&#125;   <span class="comment">&lt;!-- 插值表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//3. 创建vue实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//定义 Vue实例挂载的元素节点,表示vue接管该div</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//4.定义model模型数据对象</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:<span class="string">&quot;zhangfei&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>两对花括号: 插值表达式</strong><br>通常用来获取Vue实例中定义的数据(data)<br>属性节点中 不能够使用插值表达式</p>
</li>
<li><p><strong>el: 挂载点</strong><br>定义 Vue实例挂载的元素节点,表示vue接管该区域</p>
</li>
<li><p><strong>data: 数据对象</strong></p>
<p>Vue中用到的数据定义在data中 </p>
<p>data中可以写复杂类型</p>
<p>渲染复杂类型数据的时候,遵守js语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;雷霆八嘎&quot;</span>,</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//对象类型数据 </span></span><br><span class="line">    <span class="attr">school</span>:&#123; <span class="attr">name</span>:<span class="string">&quot;拉钩教育&quot;</span>, <span class="attr">mobile</span>:<span class="string">&quot;1001001&quot;</span> &#125;,</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//数组类型 </span></span><br><span class="line">    <span class="attr">names</span>:[<span class="string">&quot;小斌&quot;</span>,<span class="string">&quot;张百万&quot;</span>,<span class="string">&quot;刘能&quot;</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h2><p>作用: 获取data数据, 设置标签的内容.</p>
<p>注意: 默认写法会替换全部内容,使用插值表达式可以替换指定内容.</p>
<h2 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h2><p>作用: 设置元素的 innerHTML (可以向元素中写入新的标签)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>:<span class="string">&quot;&lt;h1&gt;你好呀！&lt;/h1&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-on-指令"><a href="#v-on-指令" class="headerlink" title="v-on 指令"></a>v-on 指令</h2><p>作用: 为元素绑定事件, 比如: v-on:事件=”方法”,可以简写为 @事件=”方法”</p>
<p>绑定的方法定义在 Vue实例的, methods属性中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;test1&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test1&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test2(123)&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">test1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;test1&quot;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">test2</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(a)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>事件修饰符</strong></p>
<p>对事件触发的方式进行限制</p>
<p>@事件.stop：阻止事件冒泡<br>@keyup.enter：键盘弹起为回车键</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;test2(&#x27;外部&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;test2(&#x27;内部&#x27;)&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;test1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="案例：计数器"><a href="#案例：计数器" class="headerlink" title="案例：计数器"></a>案例：计数器</h2><p>要求：<br>按＋按钮，数值加一，到十最大<br>按 - 按钮，数值减一，到零最小</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">num</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">add</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(<span class="built_in">this</span>.num&lt;<span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.num++</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">sub</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(<span class="built_in">this</span>.num&gt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.num--</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>作用: v-show指令, 根据真假值,切换元素的显示状态</p>
<h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p>作用: 根据表达值的真假,切换元素的显示和隐藏( 操纵dom 元素 )</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeFlag&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 存在dom，只是style=&quot;display: none;&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>v-show测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 直接不存在dom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>v-if测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">flag</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">changeFlag</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag  <span class="comment">//取反操作</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>v-show</strong> <strong>指令总结</strong></p>
<p>原理是修改元素的display,实现显示或者隐藏<br>指令后面的内容,最终会解析为 布尔值<br>值为true 显示, 为false 则隐藏<br>数据改变之后,显示的状态会同步更新</p>
<p><strong>v-if 指令总结</strong></p>
<p>v-if 指令的作用: 根据表达式的真假切换元素的显示状态<br>本质是通过操作dom元素,来切换显示状态<br>表达式为true 元素存在与dom树,为false从dom树中移除<br>频繁切换使用 v-show ,反之使用v-if</p>
<h2 id="v-bind-指令"><a href="#v-bind-指令" class="headerlink" title="v-bind 指令"></a>v-bind 指令</h2><p>作用:  为元素绑定属性 （比如:src,title,class）</p>
<p>语法格式: <code>v-bind:属性名=&quot;表达式&quot;</code>，可简写为<code>:属性名=&quot;表达式&quot;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgSrc&quot;</span> <span class="attr">:alt</span>=<span class="string">&quot;imgAlt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123; fontSize:mySize+&#x27;px&#x27; &#125;&quot;</span>&gt;</span>你好呀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">imgSrc</span>:<span class="string">&quot;./image/1.png&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">imgAlt</span>:<span class="string">&quot;高清大图&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">mySize</span>:<span class="number">300</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-for-指令"><a href="#v-for-指令" class="headerlink" title="v-for 指令"></a>v-for 指令</h2><p>作用: 根据数据生成列表结构</p>
<p>语法是: <code>v-for=&quot;(item,index) in 数据&quot;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in arr&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;index+1&#125;&#125; === &#123;&#123;item&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">arr</span>:[<span class="string">&quot;上海&quot;</span>,<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;天津&quot;</span>,<span class="string">&quot;南昌&quot;</span>]</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>数组经常和 v-for结合使用,数组有两个常用方法:<br>push() 向数组末尾添加一个或多个元素<br>shift() 把数组中的第一个元素删除<br>splice()删除数组的指定元素</p>
<p>数组的长度变化,会同步更新到页面上,是响应式的</p>
<h2 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h2><p>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式.</p>
<p>MVVM模式将页面,分层了 M 、V、和VM ,解释为：</p>
<ul>
<li>Model: 负责数据存储，即data:{}</li>
<li>View: 负责页面展示，即id=“app”的div</li>
<li>View Model: 负责业务逻辑处理（比如Ajax请求等），对数据进行加工后交给视图展示，<br>即Vue的实例，var VM = new Vue()</li>
</ul>
<p><a href="https://imgtu.com/i/jxIPkd"><img src="https://s1.ax1x.com/2022/07/26/jxIPkd.png" alt="jxIPkd.png"></a></p>
<p>首先，我们将上图中的DOM Listeners和Data Bindings看作两个工具，它们是实现双向绑定的关键。 </p>
<ul>
<li>从View侧看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据； </li>
<li>从Model侧看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。</li>
</ul>
<p>MVVM的思想,主要是为了让我们的开发更加的方便,因为MVVM提供了<strong>数据的双向绑定</strong></p>
<h2 id="v-mode-指令"><a href="#v-mode-指令" class="headerlink" title="v-mode 指令"></a>v-mode 指令</h2><p>作用: 获取和设置表单元素的值(实现双向数据绑定)</p>
<ul>
<li>单向绑定: 就是把Model绑定到View，当我们用JavaScript代码更新Model时，View就会自动更新。</li>
<li>双向绑定: 用户更新了View，Model的数据也自动被更新了，这种情况就是双向绑定。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单项绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;name1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name1&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 双向绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name1</span>:<span class="string">&quot;zhangfei&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">name2</span>:<span class="string">&quot;guanyu&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="案例：记事本"><a href="#案例：记事本" class="headerlink" title="案例：记事本"></a>案例：记事本</h2><p>要求：<br>展示事情，添加事情，删除事情</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;add&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按回车添加&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 展示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;index+1&#125;&#125;__&#123;&#123;item&#125;&#125; </span><br><span class="line">        <span class="comment">&lt;!-- 删除按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(index)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>共&#123;&#123;list.length&#125;&#125;条事情<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;delAll&quot;</span>&gt;</span>全部清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">list</span>:[<span class="string">&quot;写代码&quot;</span>, <span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">inputValue</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">add</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//添加</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.list.push(<span class="built_in">this</span>.inputValue)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.inputValue=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">del</span>:<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//删除</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.list.splice(index,<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">delAll</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.list=[]</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>Ajax回顾：Ajax 是指一种创建交互式网页应用的开发技术。Ajax = 异步 JavaScript 和 XML。</p>
<p>axios：在浏览器中可以帮助我们完成 ajax异步请求的发送. 其内部还是ajax,进行封装之后使用更加方便</p>
<p><strong>导入包</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 官网提供的 axios 在线地址 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 本地 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>GET请求</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.get</span><br><span class="line">(地址?key=value&amp;key2=value2)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;<span class="comment">/* 成功回调函数 */</span>&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;<span class="comment">/* 失败回调函数 */</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.get</span><br><span class="line">(地址,&#123;<span class="attr">params</span>:&#123;<span class="attr">key</span>:value,<span class="attr">key2</span>:value2&#125;&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;<span class="comment">/* 成功回调函数 */</span>&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;<span class="comment">/* 失败回调函数 */</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>POST请求</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.post</span><br><span class="line">(地址,&#123;<span class="attr">key</span>:value,<span class="attr">key2</span>:value2&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;<span class="comment">/* 成功回调函数 */</span>&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;<span class="comment">/* 失败回调函数 */</span>&#125;)</span><br></pre></td></tr></table></figure>



<p><strong>根据接口文档, 访问测试接口,进行测试：</strong></p>
<p>1，接口: 随机获取一条笑话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请求地址:https://autumnfish.cn/api/joke </span><br><span class="line">请求方法:get </span><br><span class="line">请求参数:无 </span><br><span class="line">响应内容:随机笑话</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getJoke&quot;</span>&gt;</span>获取笑话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;joke&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">joke</span>:<span class="string">&quot;笑口常开&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">getJoke</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> that = <span class="built_in">this</span></span></span><br><span class="line"><span class="javascript">                axios.get(<span class="string">&quot;https://autumnfish.cn/api/joke&quot;</span>)</span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(resp)</span></span></span><br><span class="line"><span class="javascript">                    that.joke = resp.data</span></span><br><span class="line"><span class="javascript">                &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(error)</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，接口：查询输入城市的天气</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请求地址:http://wthrcdn.etouch.cn/weather_mini </span><br><span class="line">请求方法:get </span><br><span class="line">请求参数:city (要查询的城市名称) </span><br><span class="line">响应内容:天气信息</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;query&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 展示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in info&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;item.date&#125;&#125;,&#123;&#123;item.high&#125;&#125;,&#123;&#123;item.low&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">city</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">info</span>:[]</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">query</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                axios.get(<span class="string">&quot;http://wthrcdn.etouch.cn/weather_mini&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">city</span>:<span class="built_in">this</span>.city</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function">(<span class="params">resp</span>)=&gt;</span>&#123;  <span class="comment">//es6新语法，可以不用that</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//console.log(resp.data.data.forecast)</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.info = resp.data.data.forecast</span></span><br><span class="line"><span class="javascript">                &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(error)</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>案例总结</strong></p>
<p>axios回调函数中this指向已经改变,无法访问data中的数据<br>解决：将this进行保存,回调函数中直接使用保存的this即可<br>解决：使用es6语法，（）=&gt; {}，可以不用担心该问题了</p>
<h2 id="页面闪烁问题"><a href="#页面闪烁问题" class="headerlink" title="页面闪烁问题"></a>页面闪烁问题</h2><p>问题：我们发现访问天气预报案例页面时, 使用插值表达式的地方出现了闪烁问题,如何解决呢?</p>
<p>原因：当网络较慢，网页还在加载 Vue.js ，而导致 Vue 来不及渲染，这时页面就会显示出 Vue 源代码。</p>
<p>解决：</p>
<ol>
<li>在id=app的div中添加 v-cloak</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置样式</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> </span></span><br><span class="line"><span class="css">    <span class="comment">/* 通过属性选择器,设置 添加了v-cloak */</span> </span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span>&#123; </span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: none; </span></span><br><span class="line"><span class="css">    &#125; </span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed 计算属性"></a>computed 计算属性</h2><p>作用: 减少运算次数, 缓存运算结果. 运用于重复相同的计算.</p>
<p>computed与method区别：</p>
<ul>
<li>定义函数也可以实现与 计算属性相同的效果,都可以简化运算。</li>
<li>不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 虽然conputed计算属性调用三次，但是结果都一样，所以sum只执行了一次 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 假如是method方法，调用三次，不管结果是不是一样，都会执行三次 --&gt;</span></span><br><span class="line">    &#123;&#123;sum&#125;&#125; <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    &#123;&#123;sum&#125;&#125; <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    &#123;&#123;sum&#125;&#125; <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">a</span>:<span class="number">10</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">b</span>:<span class="number">20</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">sum</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;执行了sum计算属性&quot;</span>)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="built_in">this</span>.b</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>过滤器是对即将显示的数据做进一步的筛选处理，然后进行显示</p>
<p>值得注意的是过滤器并没有改变原来的数据，只是在原数据的基础上产生新的数据。</p>
<p>数据加工车间,对值进行筛选加工.</p>
<p><strong>使用位置</strong></p>
<ol>
<li><p>双括号插值内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; msg | filterA &#125;&#125; </span><br><span class="line">msg是需要处理的数据, </span><br><span class="line">filterA是过滤器, </span><br><span class="line">| 这个竖线是管道,通过这个管道 将数据传输给过滤器进行过滤 加工操作</span><br></pre></td></tr></table></figure></li>
<li><p>v-bind绑定的值的地方。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 v-bind:id=&quot; msg | filterA&quot;&gt; &#123;&#123; msg &#125;&#125; &lt;/h1&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>过滤器</strong></p>
<p>1，局部过滤器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;price | addIcon&#125;&#125;</span><br><span class="line">       </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">price</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 局部过滤器</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">addIcon</span>(<span class="params">value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//给值前面加个￥符号</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="string">&quot;￥&quot;</span>+value</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，全局过滤器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123;name | changeName&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 在创建Vue实例之前 创建全局过滤器</span></span><br><span class="line">    Vue.filter(<span class="string">&quot;changeName&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    	<span class="comment">//首字母大写</span></span><br><span class="line">        <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="watch-侦听器"><a href="#watch-侦听器" class="headerlink" title="watch 侦听器"></a>watch 侦听器</h2><p>Vue.js 提供了一个方法 watch，它用于观察Vue实例上的数据变动。</p>
<p>作用: 当你有一些数据需要随着其它数据变动而变动时，可以使用侦听属性</p>
<p>案例：监听姓名变化,实时显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123;fullName&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">fullName</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//监听器，程序在运行的时候，实时监听</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//监听firstName，发生变化执行函数</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//参数说明：1、新值，2、旧值</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:<span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.lastName + newValue</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>:<span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fullName = newValue + <span class="built_in">this</span>.firstName</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul>
<li>组件（Component）是自定义封装的功能。在前端开发过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同样的功能。</li>
<li>我们将相同的功能进行抽取,封装为组件,这样，前端人员就可以在组件化开发时，只需要书写一次代码，随处引入即可使用。</li>
<li>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树</li>
</ul>
<p><strong>局部组件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标签形式引用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello-word</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-word</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 局部组件</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;hello-word&quot;</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>:<span class="string">&quot;HTML代码&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">msg</span>:<span class="string">&quot;局部组件&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>:&#123;&#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>全局组件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标签形式引用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello-word</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-word</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 全局组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;hello-word&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>:<span class="string">&quot;&lt;div&gt;&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;&lt;/div&gt;&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">msg</span>:<span class="string">&quot;全局组件&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;&#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<p>1.组件名以小写开头，采用短横线分割命名: 例如 <strong>hello-Word</strong> </p>
<p>2.组件中的data 必须是一个函数,注意与Vue实例中的data区分</p>
<p>3.在template模板中, 只能有一个根元素</p>
<p><strong>组件与模板(template)分离</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hello-word</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-word</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将模板写在HTML中, 给模板指定一个ID --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;tem1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;hello-word&quot;</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>:<span class="string">&quot;#tem1&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">msg</span>:<span class="string">&quot;组件与模板分离&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>:&#123;&#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>上面这种写法，浏览器会把 html 里的 template 标签过滤掉。所以 template 标签的内容是不会在页面中展示的。直到它被 JS 中的 Vue 调用。</li>
<li>在 html 中，template 标签一定要有一个 id，因为通过 id 是最直接被选中的。 data 和 methods等 参数，全部都要放到 Vue 实例里面写</li>
</ul>
<h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p>每个Vue实例在被<strong>创建</strong>之前都要经过一系列的初始化过程,这个过程就是vue的生命周期</p>
<p>生命周期到了某个阶段就会触发对应的钩子函数</p>
<table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>beforeCreate()</strong></td>
<td>在<strong>创建Vue实例之前</strong>,可以执行这个方法. 例如 加载动画操作</td>
</tr>
<tr>
<td><strong>created()</strong></td>
<td><strong>Vue实例创建完成</strong>,属性绑定好了,但是DOM还没有生成.</td>
</tr>
<tr>
<td><strong>beforeMount()</strong></td>
<td>模板已经在内存中编辑完成了，尚<strong>未被渲染到页面中</strong>.</td>
</tr>
<tr>
<td><strong>mounted()</strong></td>
<td>内存中的模板<strong>已经渲染到页面</strong>，用户已经可以看见内容.</td>
</tr>
<tr>
<td><strong>beforeUpdate()</strong></td>
<td><strong>数据更新的前</strong>一刻 ,  组件在发生更新之前,调用的函数</td>
</tr>
<tr>
<td><strong>updated()</strong></td>
<td>updated执行时，内存中的<strong>数据已更新</strong>，并且页面已经被渲染</td>
</tr>
<tr>
<td><strong>beforeDestroy</strong> ()</td>
<td>钩子函数在<strong>实例销毁之前</strong>调用</td>
</tr>
<tr>
<td><strong>destroyed</strong> ()</td>
<td>钩子函数在Vue  <strong>实例销毁后</strong>调用</td>
</tr>
</tbody></table>
<h2 id="Router-路由"><a href="#Router-路由" class="headerlink" title="Router 路由"></a>Router 路由</h2><ul>
<li>在Web开发中，路由是指根据URL分配到对应的处理程序。 路由允许我们通过不同的 URL 访问不同的内容。</li>
<li>通过 Vue.js 可以实现多视图单页面web应用（single page web application，SPA）</li>
</ul>
<p>单页应用：</p>
<ul>
<li>不存在页面跳转，它本身只有一个HTML页面。我们传统意义上的页面跳转在单页应用的概念下转变为了body 内某些元素的替换和更新，举个例子:</li>
<li>整个body的内容从登录组件变成了欢迎页组件, 从视觉上感受页面已经进行了跳转。但实际上，页面只是随着用户操作，实现了局部内容更新,依然还是在index.html 页面中。</li>
</ul>
<p>单页面应用的好处: </p>
<ol>
<li><p>用户操作体验好，用户不用刷新页面，整个交互过程都是通过Ajax来操作。</p>
</li>
<li><p>适合前后端分离开发，服务端提供http接口，前端请求http接口获取数据，使用JS进行客户端渲染。</p>
</li>
</ol>
<p><strong>路由相关概念</strong></p>
<ul>
<li>router :<br>是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用（SPA）变得易<br>如反掌 ,router 就相当于一个管理者，它来管理路由。</li>
<li>route:<br> router相当于路由器, route就相当于一条路由.比如: Home按钮  =&gt; home内容， 这是一条route,<br> news按钮 =&gt; news内容， 这是另一条路由。</li>
<li>routes :<br>是一组route路由，把上面的每一条路由组合起来，形成一个数组。[{home 按钮 =&gt;home内容 }， {<br>about按钮 =&gt; about 内容}]</li>
<li>router-link组件: router-link 是一个组件，是对标签的一个封装. 该组件用于设置一个导航链接，切换不同 HTML内容。 to 属性为目标地址， 即要显示的内容</li>
<li>router-view 组件:<br>路由导航到指定组件后,进行渲染显示页面.</li>
</ul>
<p><strong>路由的使用</strong></p>
<p>1）引入相关库</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//方式1: 本地导入 </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">//方式2: CDN </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>定义使用路由步骤</li>
</ol>
<ol>
<li>定义路由所需的组件</li>
<li>定义路由 每个路由都由两部分 path (路径) 和component (组件) </li>
<li>创建router路由器实例 ,管理路由</li>
<li>创建Vue实例, 注入路由对象, 使用$mount() 指定挂载点</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//1,准备组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> home = &#123; <span class="attr">template</span> : <span class="string">&quot;&lt;h1&gt;home主页面&lt;/h1&gt;&quot;</span> &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> news = &#123; <span class="attr">template</span> : <span class="string">&quot;&lt;h3&gt;news新闻页面&lt;/h3&gt;&quot;</span> &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> play = &#123; <span class="attr">template</span> : <span class="string">&quot;&lt;h3&gt;play娱乐页面&lt;/h3&gt;&quot;</span> &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2,定义routes对象，里面是一个个route对象</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//route对象有两部分，path和component，</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> routes = [</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">path</span>:<span class="string">&quot;/&quot;</span>, <span class="attr">component</span>:home&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">path</span>:<span class="string">&quot;/news&quot;</span>, <span class="attr">component</span>:news&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">path</span>:<span class="string">&quot;/play&quot;</span>, <span class="attr">component</span>:play&#125;</span></span><br><span class="line"><span class="javascript">    ]</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//3,创建router路由管理器，管理toutes对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">routes</span>:routes</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//4,创建vue实例，使用mount挂载函数，注入router</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        router,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;&#125;</span></span><br><span class="line"><span class="javascript">    &#125;).$mount(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）html区域展示效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用 router-link 组件来导航,to属性指定链接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/news&quot;</span>&gt;</span>新闻页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/play&quot;</span>&gt;</span>娱乐页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由的出口, 路由匹配到的组件(页面)将渲染在这里 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>路由总结：</p>
<ol>
<li>router是Vue中的路由管理器对象,用来管理路由. </li>
<li>route是路由对象,一个路由就对应了一条访问路径,一组路由用routes表示</li>
<li>每个路由对象都有两部分 path(路径)和component (组件) </li>
<li>router-link 是对a标签的封装,通过to属性指定连接</li>
<li>router-view 路由访问到指定组件后,进行页面展示</li>
</ol>
<h1 id="Vue-cli"><a href="#Vue-cli" class="headerlink" title="Vue-cli"></a>Vue-cli</h1><p>Vue cli是基于Vue的应用开发提供的一个标准的脚手架工具.为应用搭建基础的框架结构,提供插件、开发服务、Preset、构建打包功能</p>
<p>Vue cli 背后集成了现代化开发的诸多功能,通过简单的命令就可以完成 “零配置”的项目环境搭建</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>1）下载对应你系统的Node.js版本:<br><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>
<p>2） 测试: 在命令提示符下输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v //会显示当前node的版本</span><br></pre></td></tr></table></figure>

<h3 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h3><p>npm全称Node Package Manager，他是node包管理和分发的工具，使用NPM可以对应用的依赖进行管理，NPM 的功能和服务端项目构建工具maven的依赖管理功能差不多，我们通过npm 可以很方便地下载js库，打包js文件。</p>
<p>node.js已经集成了npm工具，自动安装好了。</p>
<p>在命令提示符下输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v //可查看当前npm版本</span><br></pre></td></tr></table></figure>



<p><strong>查看包管理路径</strong></p>
<p>包路径就是npm从远程下载的js包所存放的路径。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config ls  </span><br></pre></td></tr></table></figure>

<p> NPM默认的管理包路径在c盘下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\17536\AppData\Roaming\npm</span><br></pre></td></tr></table></figure>



<p><strong>设置包管理路径</strong></p>
<p>1）选择一个路径,专门存放这些依赖包.我选择创建一个目录: <code>.........\nodejs_package</code></p>
<p>2）在该路径下再创建 npm_modules 文件夹 和 npm_cache 文件夹 </p>
<p>3）执行以下的命令,设置为自定义的包管理路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;.......\nodejs_package\npm_modules&quot; </span><br><span class="line">npm config set cache &quot;........\nodejs_package\npm_cache&quot;</span><br></pre></td></tr></table></figure>

<p>4）此时再使用 npm config ls 查询NPM管理包路径发现路径已更改</p>
<p><strong>NPM环境变量配置</strong></p>
<ol>
<li>查看npm的全局路径是什么，即刚刚创建的<code>.....\nodejs_package\npm_modules</code>路径</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config get prefix</span><br></pre></td></tr></table></figure>

<p>2)配置PATH环境变量</p>
<ul>
<li>添加新的系统变量: key=NODE_HOME , value= …….\nodejs_package</li>
<li>path中添加 %NODE_HOME%\npm_modules</li>
</ul>
<p><strong>安装cnpm</strong></p>
<p>npm默认会去国外的镜像去下载js包，网不好很慢，在开发中通常我们使用国内镜像，这里我们使用淘宝镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//安装 </span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org </span><br><span class="line"></span><br><span class="line">//查看cnpm的版本 </span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>

<h3 id="安装Vue-cli"><a href="#安装Vue-cli" class="headerlink" title="安装Vue-cli"></a>安装Vue-cli</h3><p>目前主流版本是 2.x 和 3.x 版本,安装3.x 以上的版本是因为该版本既可以创建2.x项目与3.x 项目</p>
<p>安装命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue     //查看vue命令</span><br><span class="line"></span><br><span class="line">vue -V  //查看版本</span><br></pre></td></tr></table></figure>

<h2 id="快速构建Vue项目"><a href="#快速构建Vue项目" class="headerlink" title="快速构建Vue项目"></a>快速构建Vue项目</h2><p><strong>构建</strong></p>
<p>1）在存放Vue项目的路径下，进入cmd</p>
<p>2）执行下面的命令，创建项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//文件名 不支持驼峰（含大写字母）使用短横线方式 </span><br><span class="line">vue create my-project</span><br></pre></td></tr></table></figure>

<p>3）默认还是自定义安装，自定义</p>
<p><a href="https://imgtu.com/i/jzIjY9"><img src="https://s1.ax1x.com/2022/07/26/jzIjY9.png" alt="jzIjY9.png"></a></p>
<p>4）选择我们要安装的组件，使用空格键选择，选好后回车确认。（Babel、Router）</p>
<p><a href="https://imgtu.com/i/jzoVfA"><img src="https://s1.ax1x.com/2022/07/26/jzoVfA.png" alt="jzoVfA.png"></a></p>
<p>5）提示选择什么模式的路由,我们输入 n (表示选择hash模式) </p>
<p>6）选择项目配置文件单独存放<br><a href="https://imgtu.com/i/jzoWnK"><img src="https://s1.ax1x.com/2022/07/26/jzoWnK.png" alt="jzoWnK.png"></a></p>
<p>7）是否保存模板，保存后下次创建项目可以使用该模板。</p>
<p>8）安装完成</p>
<p>9）进入项目目录，<code>cd my-project</code></p>
<p>10）启动项目，<code>npm run serve</code></p>
<p>11）访问项目: <a href="http://localhost:8080/">http://localhost:8080/</a></p>
<p><strong>项目结构介绍</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|--- my-project 项目名称 </span><br><span class="line">    |--- node_modules 存放依赖包的目录 </span><br><span class="line">    |--- public 静态资源管理目录 </span><br><span class="line">    |--- src 组件源码目录(我们写的代码) </span><br><span class="line">        |--- assets 存放静态图片资源(CSS也可以放在这里) </span><br><span class="line">        |--- components 存放各种组件(一个页面可以看做一个组件)，各个组件联系在一起组成一个 完整的项目</span><br><span class="line">        |--- router 存放了项目路由文件 </span><br><span class="line">        |--- views 放置的为公共组件(主要还是各个主要页面) </span><br><span class="line">        |--- App.vue app.vue可以当做是网站首页，是一个vue项目的主组件，页面入口文件 </span><br><span class="line">        |--- main.js 打包运行的入口文件，引入了vue模块和app.vue组件以及路由route </span><br><span class="line">    |--- babel.config.js babel配置文件, 对源代码进行转码(把es6=&gt;es5) </span><br><span class="line">    |--- package.json 项目及工具的依赖配置文件 </span><br><span class="line">    |--- paxkage-lock.json 依赖配置文件 </span><br><span class="line">    |--- README.md 项目说明</span><br></pre></td></tr></table></figure>



<p><strong>自定义配置</strong></p>
<p>package.json 介绍：</p>
<p>每个项目的根目录下面，一般都有一个 package.json 文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。 npm install 命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。</p>
<p>注意：</p>
<p>可以在package.json中自定义配置，但是不建议<br>我们将Vue脚手架相关的配置单独定义到 自己创建的vue.config.js 配置文件中</p>
<p>vue.config.js中写内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">module.exports = &#123; </span><br><span class="line">    devServer:&#123; </span><br><span class="line">        open:<span class="literal">true</span>,	 <span class="comment">//打包完成自动打开浏览器	</span></span><br><span class="line">        port:<span class="number">8081</span>    <span class="comment">//端口</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><p>组件化是Vue的精髓，Vue项目就是由一个一个的组件构成的。 我们主要的工作就是开发的组件.</p>
<p>我们用 vue-cli 脚手架搭建的项目，里面有很多，如 index.vue 或者 App.vue 这一类的文件.</p>
<p>每一个*.vue 文件都是一个组件 ，是一个自定义的文件类型, 比如 App.vue 就是整个项目的<strong>根组件</strong>。</p>
<p>常见的组件：</p>
<ul>
<li>页面级别的组件<br>页面级别的组件，通常是 views 目录下的.vue组件，是组成整个项目的各个主要页面</li>
<li>业务上可复用的基础组件<br>这一类组件通常是在业务中被各个页面复用的组件，这一类组件通常都写到 components 目<br>录下，然后通过import在各个页面中使用</li>
</ul>
<p>组件的组成部分，即.vue文件：<br>template : 组件的HTML部分<br>script: 组件的JS脚本 (使用ES6语法编写)<br>style: 组件的CSS样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Header&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 加上scoped 表示样式就只在当前组件有效 --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="项目运行流程"><a href="#项目运行流程" class="headerlink" title="项目运行流程"></a>项目运行流程</h2><ol>
<li><p>项目运行 会加载入口文件 main.js</p>
</li>
<li><p>App.vue 是vue项目的主组件，是页面入口文件 ，所有页面都是在App.vue下进行切换的</p>
</li>
<li><p>找到路由文件,来看一下具体的路由配置</p>
</li>
<li><p>默认访问的是Home.vue 首页</p>
</li>
<li><p>HelloWorld.vue 组件页面</p>
</li>
</ol>
<h2 id="组件使用案例"><a href="#组件使用案例" class="headerlink" title="组件使用案例"></a>组件使用案例</h2><p>1，在components 目录下创建 Header.vue<br>编写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123;msg1&#125;&#125;&#123;&#123;msg2&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Header&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg1:&quot;头部分&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    props:[&quot;msg2&quot;]  //说明msg2需要传参来确定</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>2，修改About.vue，在About.vue中使用Header.vue组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;about&quot;&gt;</span><br><span class="line">    &lt;h1&gt;This is an about page&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;&lt;hr&gt;</span><br><span class="line">    &lt;!-- 3,标签形式使用组件 --&gt;</span><br><span class="line">    &lt;Header msg2=&quot;你好呀&quot;&gt;&lt;/Header&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//1,导入需要的组件</span><br><span class="line">import Header from &quot;@/components/Header.vue&quot;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;About&#x27;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    //2,再默认导出</span><br><span class="line">    Header:Header</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



<p><strong>路由方式使用组件</strong></p>
<p>1，编写一个组件，如Longin.vue</p>
<p>2，添加该组件路由，在router/index.js文件下添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1,导入Longin.vue</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;@/components/Login.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2,在const routes=[]数组下添加路由</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;login&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>:Login</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加子路由,使用 children属性 来表示子路由</span></span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">      	<span class="comment">//子路由跟路由定义差不多</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">	<span class="attr">redirect</span>:<span class="string">&quot;login&quot;</span>  <span class="comment">//重定向到login</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>3，使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1，直接访问url</span><br><span class="line">2，html中：&lt;router-link to=&quot;/login&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line">3，js代码中跳转：this.$router.push(&quot;/login&quot;)</span><br><span class="line">4，其他</span><br></pre></td></tr></table></figure>

<p>4，在<code>&lt;router-view&gt;&lt;/router-view&gt;</code>标签下展示访问的组件</p>
<h1 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h1><p>element-ui 是饿了么前端出品的基于 Vue.js的 后台组件库，方便程序员进行页面快速布局和构建<br>Element-UI官方站点：<br><a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1，当前项目下打开终端, 安装依赖包 ,执行下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>

<p>2，打开 main.js , 导入Element-UI 相关资源.<br>main.js是工程的入口文件，在此文件中加载了很多第三方组件，如：Element-UI、Base64、 VueRouter等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入组件库 </span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//导入组件相关样式 </span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//配置Vue插件 将El安装到Vue上 </span></span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure>

<p>3，从官网中复制组件相关代码，如Element 按钮样式，到vue文件中</p>
<p>4，启动项目 npm run serve, 查看页面</p>
<p>总结：</p>
<p>使用ElementUI时，主要是从官网中复制代码，粘贴过来，修改相关代码成我们需要的内容。</p>
<h2 id="用户登入界面制作"><a href="#用户登入界面制作" class="headerlink" title="用户登入界面制作"></a>用户登入界面制作</h2><p><strong>准备工作</strong></p>
<p>新建工程后，改造Vue-CLI工程，<br>1）components和views目录下的组件全删掉。<br>2）删除router文件下的路由文件 index.js的部分内容，不需要的路由删掉<br>3）删除App.vue中的部分内容，保留到id=app的div</p>
<p>安装axios：<br>1）使用npm下载axios包 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure>

<p>2）在main.js文件中导入axios 相关资源</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入axios </span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//Vue对象使用axios </span></span><br><span class="line">Vue.prototype.axios = axios;</span><br></pre></td></tr></table></figure>



<p><strong>用户登入界面制作</strong></p>
<p>1）从官网中复制一个模板，Dialog对话框组件</p>
<p>2） 在components 下创建Login.vue，并粘贴Dialog对话框组件内容</p>
<p>3）配置路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1,导入Longin.vue</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;@/components/Login.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2,在const routes=[]数组下添加一个路由</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;login&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>:Login</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）修改App.vue，在App.vue中展示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在id=app的div下添加标签 --&gt; </span><br><span class="line">&lt;!-- router-view 的作用是根据访问的路径,渲染路径匹配到的视图组件 --&gt; </span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>

<p>5）启动项目 npm run serve, 查看对话款</p>
<p>6）根据需求修改Login.vue中的对话款</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-dialog title=&quot;用户登入&quot; :show-close=false :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br><span class="line">        &lt;el-form :model=&quot;user&quot;&gt;</span><br><span class="line">          &lt;!-- 用户名 --&gt;</span><br><span class="line">          &lt;el-form-item label=&quot;用户名&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.userName&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">          &lt;!-- 密码 --&gt;</span><br><span class="line">          &lt;el-form-item label=&quot;密码&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.password&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-form&gt;</span><br><span class="line">        &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">            &lt;el-button type=&quot;primary&quot; @click=&quot;login&quot;&gt;登 入&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;/el-dialog&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        dialogFormVisible: true,</span><br><span class="line">        user: &#123;</span><br><span class="line">          userName:&quot;&quot;,</span><br><span class="line">          password:&quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        formLabelWidth: &#x27;100px&#x27;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      login:function()&#123;</span><br><span class="line">        var url = &quot;!@@#$$%%^%$%^&amp;*&amp;%^%/login&quot;</span><br><span class="line">        this.axios.get(url, &#123;</span><br><span class="line">          params:&#123;</span><br><span class="line">            userName:this.user.userName,</span><br><span class="line">            password:this.user.password</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).then((resp) =&gt; &#123;</span><br><span class="line">          console.log(resp.data)</span><br><span class="line">          this.$message(&quot;登入成功&quot;)</span><br><span class="line">          this.dialogFormVisible = false</span><br><span class="line">          //跳转到/index组件</span><br><span class="line">          this.$router.push(&quot;/index&quot;)</span><br><span class="line">        &#125;).catch((error) =&gt; &#123;</span><br><span class="line">          this.$message.error(error)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



































































































































































































































]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>前端框架</tag>
        <tag>vue</tag>
        <tag>vueCli</tag>
      </tags>
  </entry>
  <entry>
    <title>动态网页爬虫</title>
    <url>/2021/09/07/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p>动态网页：是网站在不重新加载的情况下，通过ajax技术动态更新网站中的局部数据。直接查看网页源代码是找不到数据的。</p>
<span id="more"></span>

<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>1，直接分析ajax调用的接口。然后通过代码请求这个接口。（上面的“爬虫实战1-多线程爬取王者荣耀壁纸”就是这种方案解决的）</p>
<p>2，使用Selenium+chromedriver模拟浏览器行为获取数据。</p>
<table>
<thead>
<tr>
<th align="center">方式</th>
<th align="center">优点</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">分析接口</td>
<td align="center">直接可以请求到数据。不需要做一些解析工作。代码量少，性能高</td>
<td align="center">分析接口比较复杂，特别是一些通过js混淆的接口，要有一定的js功底。容易别发现是爬虫。</td>
</tr>
<tr>
<td align="center">selenium</td>
<td align="center">直接模拟浏览器的行为。浏览器能请求到的，使用selenium也能请求到。爬虫更稳定</td>
<td align="center">代码量多。性能低。</td>
</tr>
</tbody></table>
<h2 id="selenium和chromedriver介绍："><a href="#selenium和chromedriver介绍：" class="headerlink" title="selenium和chromedriver介绍："></a>selenium和chromedriver介绍：</h2><p><strong>Selenium</strong>：相当于是一个机器人。可以模拟人类在浏览器上的一些行为，自动处理浏览器上的一些行为，比如点击，填充数据，删除cookie等。<br>Selenium官方网址(python版本)：<a href="https://selenium-python.readthedocs.io/">https://selenium-python.readthedocs.io</a></p>
<p>安装Selenium：Selenium有许多语言的版本，有java、ruby、python等。我们下载python版本就可以了。pip install selenium</p>
<p><strong>chromedriver</strong>：是一个驱动Chrome浏览器的驱动程序，使用它才可以驱动Chrome浏览器。当然针对不同的浏览器有不同的driver。下面是不同的浏览器对应driver。</p>
<ul>
<li>Chrome：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">https://sites.google.com/a/chromium.org/chromedriver/downloads</a></li>
<li>Firefox：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></li>
<li>Edge：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></li>
<li>Safari：<a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/">https://webkit.org/blog/6900/webdriver-support-in-safari-10/</a></li>
</ul>
<p><em>注</em>：下载版本和对应浏览器版本一致。保存在纯英文没有权限的路径下。</p>
<p>如果启动selenium报错如下：</p>
<p><code>selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 92</code>,</p>
<p>就是浏览器和浏览器驱动版本不一样导致的。</p>
<h2 id="selenium和chromedriver使用："><a href="#selenium和chromedriver使用：" class="headerlink" title="selenium和chromedriver使用："></a>selenium和chromedriver使用：</h2><h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#下载好的chromedriver的路径</span></span><br><span class="line">driver_path = <span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"><span class="comment">#直接用driver访问网站</span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#获取源代码</span></span><br><span class="line"><span class="built_in">print</span>(driver.page_source)  </span><br></pre></td></tr></table></figure>

<h3 id="关闭页面和浏览器："><a href="#关闭页面和浏览器：" class="headerlink" title="关闭页面和浏览器："></a>关闭页面和浏览器：</h3><ul>
<li><p>driver.close()：关闭当前页面</p>
</li>
<li><p>driver.quit()：关闭浏览器</p>
</li>
</ul>
<h3 id="定位元素："><a href="#定位元素：" class="headerlink" title="定位元素："></a>定位元素：</h3><ul>
<li>find_element_by_id(“”)：根据id查找元素</li>
<li>find_element_by_class_name(“”)：根据class名查找元素</li>
<li>find_element_by_name(“”)：根据name属性查找元素</li>
<li>find_element_by_tag_name(“”)：根据标签名查找元素</li>
<li>find_element_by_xpath(“”)：根据xpath语法查找元素</li>
<li>find_element_by_css_selector(“”)：根据css选择器查找元素</li>
</ul>
<p><strong>注</strong>：这些find_element查找元素是查找第一个满足条件的元素；如果加上s，即find_element<strong>s</strong>是获取所有满足条件的元素。</p>
<p>以上元素定位的方法外，还有另一种元素定位的写法，如下：</p>
<p>需要导入By：<code>from selenium.webdriver.common.by import By</code></p>
<ul>
<li>find_element(By.ID, “id”)</li>
<li>find_element(By.CLASS_NAME, “class_name”)</li>
<li>find_element(By.NAME, “name”)</li>
<li>find_element(By.TAG_NAME, “tag_name”)</li>
<li>find_element(By.XPATH, “xpath语法”)</li>
<li>find_element(By.CSS_SELECTOR, “css语法”)</li>
</ul>
<p><strong>注</strong>：用法和上面一样，也有element<strong>s</strong>的用法。注意大写。</p>
<h3 id="表单元素操作："><a href="#表单元素操作：" class="headerlink" title="表单元素操作："></a>表单元素操作：</h3><p>先到找该元素，再进行操作</p>
<p>1，输入文本操作，用于输入框</p>
<p>element.send_keys(“text”)：在该元素输入文本内容</p>
<p>element.clear()：清除文本内容</p>
<p>2，点击操作，用于复选框，按钮等</p>
<p>element.click()：单机该元素</p>
<p>3，选择下拉列表操作，用于select，option</p>
<ul>
<li>需要导入Select：<code>from selenium.webdriver.support.ui import Select</code></li>
<li>找到select元素后，用导入的Select包装一下：<br><code>select = Select(driver.find_element_by_xpath(&quot;//select[@name=&#39;name&#39;]&quot;))</code></li>
<li>在select标签中选择option：<br>select.select_by_index(“index”)：通过索引值选择<br>select.select_by_value(“value”)：通过value属性值选择<br>select.select_by_visible_text(“text”)：通过可视文本选择，即显示在上面的文字内容</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#表单元素操作：访问百度，在搜索框中输入‘python’，然后单击‘百度一下’按钮</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#找到搜索框</span></span><br><span class="line">inputTag = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br><span class="line"><span class="comment">#搜索框输入内容</span></span><br><span class="line">inputTag.send_keys(<span class="string">&quot;python&quot;</span>)  </span><br><span class="line"><span class="comment">#找到百度一下按钮</span></span><br><span class="line">btn = driver.find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br><span class="line"><span class="comment">#单机操作</span></span><br><span class="line">btn.click()  </span><br></pre></td></tr></table></figure>

<h3 id="行为链："><a href="#行为链：" class="headerlink" title="行为链："></a>行为链：</h3><p>更像人类的操作</p>
<p>有时候在页面中的操作可能要有很多步，那么可以使用行为链。</p>
<p>有些网站可能会在浏览器端做一些验证行为是否符合人类的行为来做反爬虫。这时候我们就可以使用行为链来模拟人的操作。行为链有更多的复杂操作，比如双击，右击。在自动化测试中非常有用。</p>
<p>使用：</p>
<ul>
<li><p>导入<code>from selenium.webdriver.common.action_chains import ActionChains</code></p>
</li>
<li><p>创建行为链<code>actions = ActionChains(driver)</code></p>
</li>
<li><p>相关操作</p>
<ul>
<li>actions.move_to_element(element)：鼠标移动到某个元素上</li>
<li>actions.send_keys_to_element(element, “text”)：在某个元素上输入文本</li>
<li>actions.click(element)：单击某元素</li>
<li>actions.context_click(element)：右击某元素</li>
<li>actions.double_click(element)：双击某元素</li>
<li>actions.click_and_hold(element)：单击但不松开，拖曳</li>
</ul>
</li>
<li><p>actions.perform()：执行行为链</p>
</li>
</ul>
<p><strong>注</strong>：创建了行为链，定义完后要提交执行，要再次使用行为链时，再重新创建一个行为链。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"><span class="comment">#访问知乎</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.zhihu.com/signin?next=%2F&#x27;</span>)</span><br><span class="line"><span class="comment">#创建行为链</span></span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line"><span class="comment">#操作：选择用户密码登入</span></span><br><span class="line">login = driver.find_elements_by_class_name(<span class="string">&quot;SignFlow-tab&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">actions.move_to_element(login)</span><br><span class="line">actions.click(login)</span><br><span class="line"><span class="comment">#执行该行为链</span></span><br><span class="line">actions.perform()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#再次创建新的行为链</span></span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line"><span class="comment">#操作：填写用户名</span></span><br><span class="line">username = driver.find_element_by_name(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">actions.move_to_element(username)</span><br><span class="line">actions.send_keys_to_element(username,<span class="string">&quot;17370466454&quot;</span>)</span><br><span class="line"><span class="comment">#操作：填写密码</span></span><br><span class="line">password = driver.find_element_by_name(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">actions.move_to_element(password)</span><br><span class="line">actions.send_keys_to_element(password,<span class="string">&quot;123456789&quot;</span>)</span><br><span class="line"><span class="comment">#操作：点击提交</span></span><br><span class="line">submit = driver.find_element_by_xpath(<span class="string">&quot;//button[@type=&#x27;submit&#x27;]&quot;</span>)</span><br><span class="line">actions.move_to_element(submit)</span><br><span class="line">actions.click(submit)</span><br><span class="line"><span class="comment">#执行该行为链</span></span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure>

<h3 id="cookie："><a href="#cookie：" class="headerlink" title="cookie："></a>cookie：</h3><ul>
<li>driver.get_cookies()：获取所有cookie</li>
<li>driver.get_cookie(“name”)：获取指定name的cookie</li>
<li>driver.delete_all_cookies()：删除所有cookie</li>
<li>driver.delete_cookie(“BA_HECTOR”)：删除指定name的cookie</li>
<li>driver.add_cookie({“name”:”abc”, “value”:”123456”})：添加cookie</li>
</ul>
<h3 id="隐式等待和显式等待："><a href="#隐式等待和显式等待：" class="headerlink" title="隐式等待和显式等待："></a>隐式等待和显式等待：</h3><p>现在的网页越来越多使用ajax技术，程序不能确定何时某个元素完全加载出来了。如果元素还没加载出来，但代码直接使用该元素，就会报错NullPointer。<br>为解决这问题，Selenium提供两种等待方式：隐式等待，显式等待。</p>
<h4 id="隐式等待："><a href="#隐式等待：" class="headerlink" title="隐式等待："></a>隐式等待：</h4><p>等待指定的秒数<br>driver.implicitly_wait()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#隐式等待</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#等待10秒</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;fjkd&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="显式等待："><a href="#显式等待：" class="headerlink" title="显式等待："></a>显式等待：</h4><p>等待，直到给定的条件成立后就不再等待，也可以指定一个最大等待时间，超过这个时间后就抛出异常。可配合try:，except:，else:，finally:。</p>
<p>需要导入：</p>
<ul>
<li><code>from selenium.webdriver.support.ui import WebDriverWait</code>  ：显式等待类</li>
<li><code>from selenium.webdriver.support import expected_conditions</code>  ：期望条件类</li>
<li><code>from selenium.webdriver.common.by import By</code>：在期望条件中查找元素，用By</li>
</ul>
<p>语法：</p>
<ul>
<li><code>WebDriverWait(driver, “最大等待时间” ).until( “期望的条件” )</code></li>
</ul>
<p>例子：访问12306铁路，等待，直到车站中选择了北京后，再查询。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait  <span class="comment">#显式等待类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC  <span class="comment">#期望的条件类,as取别名</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By   <span class="comment">#By用来查找元素的</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"><span class="comment">#访问12306铁路</span></span><br><span class="line">driver.get(<span class="string">&quot;https://kyfw.12306.cn/otn/czxx/init&quot;</span>)</span><br><span class="line"><span class="comment">#条件是本文被显示在某个元素的value属性上</span></span><br><span class="line">WebDriverWait(driver,<span class="number">1000</span>).until(</span><br><span class="line">    EC.text_to_be_present_in_element_value((By.NAME,<span class="string">&quot;train_station_name&quot;</span>),<span class="string">&quot;北京&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">btn = driver.find_element_by_id(<span class="string">&quot;_a_search_btn&quot;</span>)</span><br><span class="line">btn.click()</span><br></pre></td></tr></table></figure>

<p>显式等待预期的条件：</p>
<ul>
<li>title_is 判断title是否出现</li>
<li>title_contains 判断title页面标题是否包含某些字符</li>
<li><strong>presence_of_element_located 判断某个元素是否被加载到了dom树里，但是并不代表这个元素可见</strong></li>
<li><strong>url_contains 判断当前url是否包含某个url</strong></li>
<li>url_matches 判断当前url是否符合某种格式</li>
<li>url_to_be 判断当前url是否出现</li>
<li>url_changes 判断当前url是否已经发生了变化</li>
<li>visibility_of_element_located 判断某个元素是否被添加到了dom树里，且宽高都大于0</li>
<li>visibility_of 判断看某个元素是否可见</li>
<li>presence_of_all_elements_located 判断至少有一个元素存在于dom树中，返回所有定位到的元素</li>
<li>visibility_of_any_elements_located 判断至少有一个元素在页面中可见</li>
<li>visibility_of_all_elements_located 判断是否所有元素都在页面中可见</li>
<li>text_to_be_present_in_element 判断指定的元素中是否包含了预期的字符串</li>
<li><strong>text_to_be_present_in_element_value 判断指定的元素属性值中是否包含了预期的字符串</strong></li>
<li>frame_to_be_available_and_switch_to_it 判断iframe是否可以switch进去</li>
<li>invisibility_of_element_located 判断某个元素是否在dom中不可见</li>
<li><strong>element_to_be_clickable 判断某个元素是否可见并且是enable的，也就是说是是否可以点击</strong></li>
<li>staleness_of 等待某个元素从dom中删除</li>
<li>element_to_be_selected 判断某个元素是否被选中了，一般用于下拉列表中</li>
<li>element_located_to_be_selected 与上面的意思一样，只不过上面实例化的时候传入的是元素对象，这个传入的是定位</li>
<li>element_selection_state_to_be 判断某个元素的选中状态是否符合预期</li>
<li>element_located_selection_state_to_be 与上面一样，只不过传值不同而已</li>
<li>number_of_windows_to_be 判断当前窗口数是否等于预期</li>
<li>new_window_is_opened 判断是否有窗口增加</li>
<li>alert_is_present 判断页面是否有弹窗</li>
</ul>
<h3 id="切换窗口："><a href="#切换窗口：" class="headerlink" title="切换窗口："></a>切换窗口：</h3><p>1，<code>driver.switch_to_window()</code>：切换到指定窗口</p>
<p>2，<code>driver.window_handles</code>：返回窗口的列表</p>
<p>配合使用<code>driver.switch_to_window( driver.window_handles[0] )</code>，表示切换到第一个窗口</p>
<p>3，<code>driver.execute_script(&quot;window.open(&#39;https://douban.com&#39;)&quot;)</code>：execute_script表示执行js代码，这里用js代码打开新的窗口，execute_script（”这里写js代码，还可以写arguments[0]，arguments[1]，表示引用外面的参数”，参数1，参数2）。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#执行js代码,用js代码打开新的窗口</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;window.open(&#x27;https://douban.com&#x27;)&quot;</span>)</span><br><span class="line"><span class="comment">#切换窗口</span></span><br><span class="line">driver.switch_to_window(driver.window_handles[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#打印网页源代码</span></span><br><span class="line"><span class="built_in">print</span>(driver.page_source)</span><br></pre></td></tr></table></figure>

<h3 id="设置代理IP："><a href="#设置代理IP：" class="headerlink" title="设置代理IP："></a>设置代理IP：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment">#1，创建options</span></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment">#2，options添加代理IP</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--proxy-server=http://219.128.76.3:8080&quot;</span>)</span><br><span class="line"><span class="comment">#3，创建驱动时，把options添加进去</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>,chrome_options=options)</span><br><span class="line"><span class="comment">#该网站返回自己的ip地址</span></span><br><span class="line">driver.get(<span class="string">&quot;http://httpbin.org/ip&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>element.get_property(“属性名”)：获取元素的html官方属性。</p>
<p>element.get_attribute(“属性名”)：获取元素的属性，包括官方和自定义属性。</p>
<p>driver.save_screenshot(“path”)：保存当前页面截图，一般png类型。</p>
<h2 id="Selenium实战-12306自动抢票"><a href="#Selenium实战-12306自动抢票" class="headerlink" title="Selenium实战-12306自动抢票"></a>Selenium实战-12306自动抢票</h2><p>该程序可以自动实现抢票，虽然有点鸡肋，重在学习selenium。</p>
<p>假如9点开始抢票。提前物色好车次和席别，添加乘客信息，定好开抢时间。在9点之前打开该程序并运行，由于9点没到，会一直处于等待阶段。直到9点一到，立刻抢票。</p>
<p>简单定时器制作方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入time</span></span><br><span class="line"><span class="keyword">import</span> time   </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#获取时间戳，时间戳就是1970年一直到现在的时间秒数，所以分分秒秒时间戳都在变化</span></span><br><span class="line">    timestamp = time.time()</span><br><span class="line">    <span class="comment">#把时间戳变为本地时间</span></span><br><span class="line">    localtime = time.localtime(timestamp)</span><br><span class="line">    <span class="comment">#将本地时间格式化成我们想要的文本格式</span></span><br><span class="line">    localtime = time.strftime(<span class="string">&quot;%H:%M:%S&quot;</span>,localtime)</span><br><span class="line">    <span class="comment">#判断如果本地时间到了指定时间(文本格式要一致)就停止循环，继续往下执行代码</span></span><br><span class="line">    <span class="keyword">if</span> localtime == <span class="string">&quot;12:45:00&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;时间到了！！&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>代码实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrainSpider</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    该类用于12306铁路自动抢票功能，创建实例对象后直接调用run()方法。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    login_url = <span class="string">&quot;https://kyfw.12306.cn/otn/resources/login.html&quot;</span></span><br><span class="line">    search_url = <span class="string">&quot;https://kyfw.12306.cn/otn/leftTicket/init?linktypeid=dc&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,from_station,to_station,date,trains,passengers,snap_up</span>):</span></span><br><span class="line">        self.from_station = from_station</span><br><span class="line">        self.to_station = to_station</span><br><span class="line">        self.date = date</span><br><span class="line">        self.trains = trains</span><br><span class="line">        self.stations = &#123;&#125;  <span class="comment">#存放各个城市对应的代号词</span></span><br><span class="line">        self.get_stations_code()</span><br><span class="line">        self.driver = driver</span><br><span class="line">        self.train = <span class="literal">None</span>  <span class="comment">#存放确定好的的车次</span></span><br><span class="line">        self.seat = <span class="literal">None</span>   <span class="comment">#存放确定好的的席位</span></span><br><span class="line">        self.passengers = passengers</span><br><span class="line">        self.snap_up = snap_up</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_stations_code</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取每个城市对应的代号词&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;stations.csv&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            reader = csv.reader(fp)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> reader:</span><br><span class="line">                self.stations[i[<span class="number">0</span>]] = i[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(self.login_url)</span><br><span class="line">        <span class="comment">#等待用户手动登入</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.url_contains(<span class="string">&quot;https://kyfw.12306.cn/otn/view/index.html&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#等待“新冠疫情”的提示框弹出</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.CLASS_NAME, <span class="string">&quot;modal&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#单击确认</span></span><br><span class="line">        btn = self.driver.find_element(By.CLASS_NAME, <span class="string">&quot;modal-close&quot;</span>)</span><br><span class="line">        btn.click()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登入成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_ticket</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#相当于单击了“车票”导航栏中的“单程”命令</span></span><br><span class="line">        self.driver.get(self.search_url)</span><br><span class="line">        <span class="comment"># 等待“新冠疫情防控”的提示框弹出</span></span><br><span class="line">        WebDriverWait(self.driver, <span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.ID,<span class="string">&quot;content_defaultwarningAlert_id&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#单击确认</span></span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;qd_closeDefaultWarningWindowDialog_id&quot;</span>).click()</span><br><span class="line">        <span class="comment">#输入起始站，终点站，时间</span></span><br><span class="line">        input_from_station = self.driver.find_element_by_id(<span class="string">&quot;fromStation&quot;</span>)</span><br><span class="line">        from_station_code = self.stations[self.from_station]</span><br><span class="line">        self.driver.execute_script(<span class="string">&quot;arguments[0].value=&#x27;%s&#x27;&quot;</span>%from_station_code,input_from_station)</span><br><span class="line">        input_to_station = self.driver.find_element_by_id(<span class="string">&quot;toStation&quot;</span>)</span><br><span class="line">        to_station_code = self.stations[self.to_station]</span><br><span class="line">        self.driver.execute_script(<span class="string">&quot;arguments[0].value=&#x27;%s&#x27;&quot;</span>%to_station_code, input_to_station)</span><br><span class="line">        input_date = self.driver.find_element_by_id(<span class="string">&quot;train_date&quot;</span>)</span><br><span class="line">        self.driver.execute_script(<span class="string">&quot;arguments[0].value=&#x27;%s&#x27;&quot;</span>%self.date, input_date)</span><br><span class="line">        <span class="comment">#到达指定时间才继续执行代码，用于抢票</span></span><br><span class="line">        <span class="keyword">if</span> self.snap_up == <span class="string">&quot;无&quot;</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                timestamp = time.time()</span><br><span class="line">                localtime = time.localtime(timestamp)</span><br><span class="line">                localtime = time.strftime(<span class="string">&quot;%H:%M:%S&quot;</span>, localtime)</span><br><span class="line">                <span class="keyword">if</span> localtime == self.snap_up:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#点击查询</span></span><br><span class="line">        btn_submit = self.driver.find_element_by_id(<span class="string">&quot;query_ticket&quot;</span>)</span><br><span class="line">        btn_submit.click()</span><br><span class="line">        <span class="comment">#等待查询结果加载出来</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.XPATH,<span class="string">&quot;//tbody[@id=&#x27;queryLeftTable&#x27;]/tr&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#获取车次信息，解析车次</span></span><br><span class="line">        trs = self.driver.find_elements_by_xpath(<span class="string">&quot;//tbody[@id=&#x27;queryLeftTable&#x27;]/tr[not(@datatran)]&quot;</span>)</span><br><span class="line">        have_seat = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">            train_info = tr.text.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot; &quot;</span>).split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">            train = train_info[<span class="number">0</span>]</span><br><span class="line">            <span class="comment">#判断是不是我们想要的车次</span></span><br><span class="line">            <span class="keyword">if</span> train <span class="keyword">in</span> self.trains:</span><br><span class="line">                seats = self.trains[train]</span><br><span class="line">                <span class="keyword">for</span> seat <span class="keyword">in</span> seats:</span><br><span class="line">                    <span class="comment">#判断是什么座位，并判断该座位有无票</span></span><br><span class="line">                    <span class="comment">#一等座:M,二等座:O,硬座:1，硬卧:3，软卧:4,高级软卧:6,商务座:9</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;M&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">11</span>]</span><br><span class="line">                        <span class="comment">#票情况可以为：文本类型的数字，有，候补，无，--，*</span></span><br><span class="line">                        <span class="comment">#ticket等于‘有’或者等于文本类型的数字都代表有票，这里强行把ticket转换成int类型，</span></span><br><span class="line">                        <span class="comment">#可以转换表示ticket是文本类型的数字，转不了表示ticket是’有‘，或者其他无票的可能，那就pass</span></span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;O&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">10</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">4</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">6</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">8</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;6&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">9</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;9&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">12</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> have_seat:</span><br><span class="line">                    <span class="comment"># have_seat为真表示找到了票，然后单击‘预定’按钮</span></span><br><span class="line">                    self.train = train</span><br><span class="line">                    btn = tr.find_element_by_class_name(<span class="string">&quot;btn72&quot;</span>)</span><br><span class="line">                    btn.click()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">submit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#选择乘客</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.XPATH,<span class="string">&quot;//ul[@id=&#x27;normal_passenger_id&#x27;]/li/label&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        passengers = self.driver.find_elements_by_xpath(<span class="string">&quot;//ul[@id=&#x27;normal_passenger_id&#x27;]/li/label&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> passenger <span class="keyword">in</span> passengers:</span><br><span class="line">            <span class="keyword">if</span> passenger.text <span class="keyword">in</span> self.passengers:</span><br><span class="line">                passenger.click()</span><br><span class="line">        <span class="comment">#选择席别</span></span><br><span class="line">        selectsEle = self.driver.find_elements_by_xpath(<span class="string">&quot;//tbody[@id=&#x27;ticketInfo_id&#x27;]/tr[not(@class=&#x27;tips&#x27;)]/td[3]/select&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> selectEle <span class="keyword">in</span> selectsEle:</span><br><span class="line">            select = Select( selectEle )</span><br><span class="line">            select.select_by_value(self.seat)</span><br><span class="line">        <span class="comment">#提交订单</span></span><br><span class="line">        btn = self.driver.find_element_by_id(<span class="string">&quot;submitOrder_id&quot;</span>)</span><br><span class="line">        btn.click()</span><br><span class="line">        <span class="comment">#确认提交订单信息</span></span><br><span class="line">        WebDriverWait(self.driver, <span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.XPATH, <span class="string">&quot;//tbody[@id=&#x27;check_ticketInfo_id&#x27;]/tr/td&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.ID,<span class="string">&#x27;qr_submit_id&#x27;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                btn = self.driver.find_element_by_id(<span class="string">&quot;qr_submit_id&quot;</span>)</span><br><span class="line">                btn.click()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                passengers = <span class="string">&quot;、&quot;</span>.join(self.passengers)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;已为【%s】乘客购得【%s】车次【%s】席别票&quot;</span> % (passengers, self.train, self.seat))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#1，登入</span></span><br><span class="line">        self.login()</span><br><span class="line">        <span class="comment">#2，查询票</span></span><br><span class="line">        self.search_ticket()</span><br><span class="line">        <span class="comment">#3，提交订单</span></span><br><span class="line">        self.submit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment">#使用说明</span></span><br><span class="line">    <span class="comment">#创建类时按顺序输入参数：出发点，目的地，发车日期(&quot;****-**-**&quot;),车次座位(字典格式)，乘客(列表格式)，抢票时间(“**:**:**”)</span></span><br><span class="line">    <span class="comment">#车次座位格式：&#123;&quot;G403&quot;:[&quot;1&quot;],&quot;G505&quot;:[&quot;M&quot;,&quot;O&quot;]&#125;</span></span><br><span class="line">    <span class="comment"># 一等座:M,二等座:O,硬座:1，硬卧:3，软卧:4,高级软卧:6,商务座:9</span></span><br><span class="line">    <span class="comment">#抢票时间精确到时分秒，若填写“无”，表示当前时间直接抢票</span></span><br><span class="line">    </span><br><span class="line">    trainSpider = TrainSpider(<span class="string">&quot;万安县&quot;</span>,<span class="string">&quot;南昌&quot;</span>,<span class="string">&quot;2021-09-01&quot;</span>,&#123;<span class="string">&quot;G5022&quot;</span>:[<span class="string">&quot;O&quot;</span>]&#125;,[<span class="string">&quot;李昭德&quot;</span>,<span class="string">&quot;李昭辉&quot;</span>],<span class="string">&quot;13:11:00&quot;</span>)</span><br><span class="line">    trainSpider.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h2 id="反爬虫攻防实战"><a href="#反爬虫攻防实战" class="headerlink" title="反爬虫攻防实战"></a>反爬虫攻防实战</h2><p>上一章爬取动态网页是使用selenium。这一章用另一种方法，分析后端接口，破解js，直接访问后端接口。<br>这种方法需要有一定的js功底。</p>
<h3 id="有道翻译"><a href="#有道翻译" class="headerlink" title="有道翻译"></a>有道翻译</h3><p>通过请求有道翻译后端接口，实现翻译功能</p>
<p>网址：<a href="https://fanyi.youdao.com/">https://fanyi.youdao.com/</a></p>
<p><strong>分析及代码实现</strong>：</p>
<p>进入网站使用有道翻译发现，输入文本”world”后会自动翻译成”世界”，结论：输入文本后网页自动发送ajax请求。<br>通过抓包工具，找到相关包，包名‘translate_o?sm…..’。获取请求的url=”<a href="https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;%EF%BC%8C%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%EF%BC%9Apost%EF%BC%8C%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF%EF%BC%8C%E4%BB%A5%E5%8F%8A%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E3%80%82%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90%E5%A6%82%E4%B8%8B%EF%BC%9A">https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;，请求方式：post，请求头信息，以及请求参数。请求参数分析如下：</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">i: world          			<span class="comment">//要翻译的文本，不管</span></span><br><span class="line"><span class="attr">from</span>: AUTO		            <span class="comment">//原文本的语言，AUTO表示自动识别，不管</span></span><br><span class="line"><span class="attr">to</span>: AUTO		 		    <span class="comment">//需要翻译成的语言，AUTO表示自动识别，不管</span></span><br><span class="line"><span class="attr">smartresult</span>: dict    		<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">client</span>: fanyideskweb    	<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">salt</span>: <span class="number">16293414783192</span>    				  <span class="comment">//应该是通过某种算法或加密得到    </span></span><br><span class="line"><span class="attr">sign</span>: 530e6e5252905a4774e78e524a42fd0b    <span class="comment">//应该是通过某种算法或加密得到 </span></span><br><span class="line"><span class="attr">lts</span>: <span class="number">1629341478319</span>       				  <span class="comment">//应该是通过某种算法或加密得到 </span></span><br><span class="line"><span class="attr">bv</span>: eda468fc64295ecf2810ab8a672c2db1      <span class="comment">//应该是通过某种算法或加密得到 </span></span><br><span class="line"><span class="attr">doctype</span>: json    			<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">version</span>: <span class="number">2.1</span>     			<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">keyfrom</span>: fanyi.web    		<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">action</span>: FY_BY_REALTlME      <span class="comment">//应该是固定的，不管</span></span><br></pre></td></tr></table></figure>

<p>通过观察，很明显有些请求参数是固定的，可以不需要修改，不用管<br>但是还有些参数是应该是通过某种算法或加密得到的，而且每次请求都不一样，所以需要自己根据其后端接口的规则来模仿实现。</p>
<p>ajax请求是js文件写的，所以找到发送该ajax请求的js文件。找法：右击查看网页源代码，在网页源代码中找调用的js文件。可以打开js文件看看里面有没有相关的请求参数，如果基本都有，那就应该是该js文件。该js文件一般没有格式化，可以用js美化工具经行美化，方便阅读。</p>
<p>拿到js文件后，分析需要的请求参数在里面是怎么实现的，以有道翻译为例。<br>下面4个是我们需要自己实现的请求参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">salt: <span class="number">16293414783192</span></span><br><span class="line"><span class="attr">sign</span>: 530e6e5252905a4774e78e524a42fd0b</span><br><span class="line"><span class="attr">lts</span>: <span class="number">1629341478319</span></span><br><span class="line"><span class="attr">bv</span>: eda468fc64295ecf2810ab8a672c2db1</span><br></pre></td></tr></table></figure>

<p>然后在js文件中找这些参数实现的原理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">i: n,   <span class="comment">//n表示当前要翻译的单词</span></span><br><span class="line"><span class="attr">from</span>: C,</span><br><span class="line"><span class="attr">to</span>: S,</span><br><span class="line"><span class="attr">smartresult</span>: <span class="string">&quot;dict&quot;</span>,</span><br><span class="line"><span class="attr">client</span>: E,   </span><br><span class="line"><span class="attr">salt</span>: r.salt,    	<span class="comment">//找到这4个参数的实现原理，要找到r</span></span><br><span class="line"><span class="attr">sign</span>: r.sign,    	<span class="comment">//</span></span><br><span class="line"><span class="attr">lts</span>: r.ts,		 	<span class="comment">//</span></span><br><span class="line"><span class="attr">bv</span>: r.bv,		 	<span class="comment">//</span></span><br><span class="line"><span class="attr">doctype</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line"><span class="attr">version</span>: <span class="string">&quot;2.1&quot;</span>,</span><br><span class="line"><span class="attr">keyfrom</span>: <span class="string">&quot;fanyi.web&quot;</span>,</span><br><span class="line"><span class="attr">action</span>: e || <span class="string">&quot;FY_BY_DEFAULT&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//找到了这个</span></span><br><span class="line">r = v.generateSaltSign(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//按照逻辑一路往上找，最后找到该函数</span></span><br><span class="line"><span class="comment">//函数返回的这4个参数就是我们需要的参数，参数的实现原理也在其中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;   <span class="comment">//e就是表示上面的n</span></span><br><span class="line">			<span class="keyword">var</span> t = n.md5(navigator.appVersion),    <span class="comment">//md5加密navigator.appVersion，‘navigator.appVersion’返回浏览器版本，可以在浏览器工作台打印看看，是固定的</span></span><br><span class="line">				r = <span class="string">&quot;&quot;</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime(),   <span class="comment">//获取时间戳，然后改为文本类型</span></span><br><span class="line">				i = r + <span class="built_in">parseInt</span>(<span class="number">10</span> * <span class="built_in">Math</span>.random(), <span class="number">10</span>);  <span class="comment">//r加上随机数1到10</span></span><br><span class="line">			<span class="keyword">return</span> &#123;   </span><br><span class="line">				<span class="attr">ts</span>: r,</span><br><span class="line">				<span class="attr">bv</span>: t,</span><br><span class="line">				<span class="attr">salt</span>: i,</span><br><span class="line">				<span class="attr">sign</span>: n.md5(<span class="string">&quot;fanyideskweb&quot;</span> + e + i + <span class="string">&quot;Y2FYu%TNSbMCxc3t2u^XT&quot;</span>)  <span class="comment">//md5加密</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br></pre></td></tr></table></figure>

<p>找到了参数的实现原理后，用python代码把这些参数重新实现一遍，然后就可以发送请求：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">input</span>(<span class="string">&quot;请输入&quot;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;SESSION_FROM_COOKIE=www.baidu.com; OUTFOX_SEARCH_USER_ID=-1154821063@117.162.66.74; JSESSIONID=aaaogRJYT3CYncQm3pCTx; OUTFOX_SEARCH_USER_ID_NCOO=1780673000.2103813; ___rl__test__cookies=1629341478311&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://fanyi.youdao.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timestamp = <span class="built_in">str</span>(time.time()*<span class="number">1000</span>)  <span class="comment">#时间戳，默认秒，转换成毫秒，转换文本型</span></span><br><span class="line">salt = timestamp + <span class="built_in">str</span>(random.randint(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">text = <span class="string">&quot;fanyideskweb&quot;</span> + n + salt + <span class="string">&quot;Y2FYu%TNSbMCxc3t2u^XT&quot;</span></span><br><span class="line">sign = hashlib.md5(text.encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()   <span class="comment">#md5加密后获取值</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;i&quot;</span>: n,</span><br><span class="line">    <span class="string">&quot;from&quot;</span>: <span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;to&quot;</span>: <span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;smartresult&quot;</span>: <span class="string">&quot;dict&quot;</span>,</span><br><span class="line">    <span class="string">&quot;client&quot;</span>: <span class="string">&quot;fanyideskweb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;salt&quot;</span>: salt,             <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;sign&quot;</span>: sign,             <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;lts&quot;</span>: timestamp,         <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;bv&quot;</span>: <span class="string">&quot;eda468fc64295ecf2810ab8a672c2db1&quot;</span>,    <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;doctype&quot;</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;2.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;keyfrom&quot;</span>: <span class="string">&quot;fanyi.web&quot;</span>,</span><br><span class="line">    <span class="string">&quot;action&quot;</span>: <span class="string">&quot;FY_BY_REALTlME&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.post(url, headers=headers, data=data)</span><br><span class="line">text = resp.text</span><br><span class="line">text = json.loads(text)</span><br><span class="line">fanyi = text.get(<span class="string">&quot;translateResult&quot;</span>)[<span class="number">0</span>][<span class="number">0</span>].get(<span class="string">&quot;tgt&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fanyi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="comment"># 请输入hello world</span></span><br><span class="line"><span class="comment"># 你好世界</span></span><br></pre></td></tr></table></figure>

<h3 id="自动识别验证码"><a href="#自动识别验证码" class="headerlink" title="自动识别验证码"></a>自动识别验证码</h3><p>自动识别验证码，这里使用的是打码平台。</p>
<p>以菲菲打码平台为例，网址：<a href="http://www.fateadm.com/">http://www.fateadm.com/</a></p>
<p>1，注册登入，付款买积分（不贵，用于学习足够）<br>2，“开发文档”—–&gt;”例子参考“—–&gt;”demo下载“—–&gt;”python3“—–&gt;“下载解压得到py文件，可以直接使用”<br>3，该py文件中，定义了API接口调用类“FateadmApi”。如果不会使用，下面还定义了测试函数“TestFunc”。复制测试函数，粘贴到新的py文件，稍作修改，自己定义相关接口。如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fateadm_api <span class="keyword">import</span> FateadmApi   <span class="comment">#导入API接口调用类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestFunc</span>(<span class="params">img_path,pred_type</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    验证码图片识别</span></span><br><span class="line"><span class="string">    :param img_path: 验证码图片路径</span></span><br><span class="line"><span class="string">    :param pred_type: 验证码图片类型，下面就类型说明</span></span><br><span class="line"><span class="string">    :return: 对应的验证码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pd_id           = <span class="string">&quot;***不方便展示***&quot;</span>     <span class="comment">#用户中心页可以查询到pd信息</span></span><br><span class="line">    pd_key          = <span class="string">&quot;***不方便展示***&quot;</span></span><br><span class="line">    app_id          = <span class="string">&quot;***不方便展示***&quot;</span>     <span class="comment">#开发者分成用的账号，在开发者中心可以查询到</span></span><br><span class="line">    app_key         = <span class="string">&quot;***不方便展示***&quot;</span></span><br><span class="line">    <span class="comment">#识别类型，</span></span><br><span class="line">    <span class="comment">#具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服</span></span><br><span class="line">    pred_type       = pred_type</span><br><span class="line">    api             = FateadmApi(app_id, app_key, pd_id, pd_key)</span><br><span class="line">    <span class="comment"># 查询余额</span></span><br><span class="line">    balance 		= api.QueryBalcExtend()   <span class="comment"># 直接返余额</span></span><br><span class="line">    <span class="comment"># api.QueryBalc()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过文件形式识别：</span></span><br><span class="line">    file_name       = img_path</span><br><span class="line">    <span class="comment"># 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6</span></span><br><span class="line">    <span class="comment"># result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果</span></span><br><span class="line">    rsp             = api.PredictFromFile(pred_type, file_name)  <span class="comment"># 直接返回详细识别结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rsp.pred_rsp.value   <span class="comment">#返回识别结果</span></span><br></pre></td></tr></table></figure>

<p>pd_id、pd_key、app_id、app_key要填写自己的，在用户中可以找到。参数：pred_type是验证码类型，在“开发文档”—–&gt;”类型说明”。img_path是验证码的图片路径。</p>
<p>使用例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fateadm_api_my <span class="keyword">import</span> TestFunc   <span class="comment">#导入自己定义的接口函数</span></span><br><span class="line"></span><br><span class="line">result = TestFunc(<span class="string">&quot;image.png&quot;</span>,<span class="string">&quot;30900&quot;</span>)  <span class="comment">#调用函数，参数：验证码图片路径、验证码类型</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<p>访问要填写验证码的网站时，需要保存该验证码的图片，然后导入并调用我们定义的接口函数，传入参数：验证码图片路径、验证码类型，返回验证码识别结果。识别结果有一定的几率识别错误。</p>
<p>如果某个打码平台用不了了，属于正常现象，不必惊奇。</p>
<h3 id="字体反爬"><a href="#字体反爬" class="headerlink" title="字体反爬"></a>字体反爬</h3><p>网页开发者自己创造一种字体，因为在字体中每个文字都有其代号，那么以后再网页中不会直接显示这个文字的最终效果，而是显示他的代号。因此即使获取到了网页中的文字内容，也只是获取到文字的代号，而不是文字本身。从而达到反爬目的。</p>
<p>因为创造字体费时费力，数量多也影响网页加载。一般情况下为了反爬，仅会针对0-9以及少数汉字单独创造，其他还是使用用户系统中自带的字体。</p>
<p>这里以爬取这个网址：<a href="https://su.58.com/qztech/%E4%B8%BA%E4%BE%8B%E5%AD%90%E3%80%82">https://su.58.com/qztech/为例子。</a></p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>在网页源代码中我们可以找到@font-face属性，@font-face属性中一般有两种情况：<br>1，字体被编码成base64方式，直接获取@font-face中base64后面的内容。<br>2，字体文件放到服务器上，在@font-face中可以找到其url，直接下载。</p>
<p><strong>分析字体</strong>：</p>
<p>分析字体时，需要将字体转换成xml文件和ttf文件。<br>xml文件：可查看里的cmap和glyf内容。cmap中储存code（就是文字的代号，网页源代码显示的代号）和name的映射关系。glyf中储存name和对应的字体绘制规则。<br>ttf文件：在xml中可以得到字体绘制规则，类似坐标的形式，但是不知道字体长什么样子。有一款软件FontCreator，可以打开ttf文件，能看到最终字体的呈现效果。（软件下载地址：<a href="https://www.high-logic.com/FontCreatorSetup-x64.exe">https://www.high-logic.com/FontCreatorSetup-x64.exe</a></p>
<p>分析字体其目的是为了得到真实的字体和其字体对应的字体绘制规则</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"><span class="comment"># font_face是被经过base64解码后的字符串，其本身就是一个字体文件</span></span><br><span class="line">font_face = <span class="string">&#x27;d09GRgABAAAAACEUAAsAAAAAK....8klH9vrSy9aNNlv0CLWhrggA=&#x27;</span>  <span class="comment">#@font-face中复制的，内容太多，省略。</span></span><br><span class="line"><span class="comment">#将font_face用base64解密，放到Bytes管道中，然后创建TTFont对象。</span></span><br><span class="line">baseFont = TTFont(io.BytesIO(base64.b64decode(font_face)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># onlineFont.saveXML(&quot;58.xml&quot;)  #将字体保存成xml文件</span></span><br><span class="line"><span class="comment"># onlineFont.save(&quot;58.ttf&quot;)     #将字体保存成ttf文件</span></span><br><span class="line"></span><br><span class="line">baseGlyf = baseFont[<span class="string">&quot;glyf&quot;</span>]   <span class="comment">#获取glyg内容：name和其对应的字体绘制规则</span></span><br><span class="line"><span class="comment">#通过分析字体，得到真实字体和其对应的字体绘制规则。</span></span><br><span class="line">baseFontMap = &#123;</span><br><span class="line">    <span class="string">&quot;0&quot;</span>:baseGlyf[<span class="string">&quot;uniE3D3&quot;</span>],</span><br><span class="line">    <span class="string">&quot;1&quot;</span>:baseGlyf[<span class="string">&quot;uniF4C8&quot;</span>],</span><br><span class="line">    <span class="string">&quot;2&quot;</span>:baseGlyf[<span class="string">&quot;uniEB1C&quot;</span>],</span><br><span class="line">    <span class="string">&quot;3&quot;</span>:baseGlyf[<span class="string">&quot;uniF843&quot;</span>],</span><br><span class="line">    <span class="string">&quot;4&quot;</span>:baseGlyf[<span class="string">&quot;uniEA7C&quot;</span>],</span><br><span class="line">    <span class="string">&quot;5&quot;</span>:baseGlyf[<span class="string">&quot;uniE90E&quot;</span>],</span><br><span class="line">    <span class="string">&quot;6&quot;</span>:baseGlyf[<span class="string">&quot;uniE881&quot;</span>],</span><br><span class="line">    <span class="string">&quot;7&quot;</span>:baseGlyf[<span class="string">&quot;uniE671&quot;</span>],</span><br><span class="line">    <span class="string">&quot;8&quot;</span>:baseGlyf[<span class="string">&quot;uniEEB6&quot;</span>],</span><br><span class="line">    <span class="string">&quot;9&quot;</span>:baseGlyf[<span class="string">&quot;uniE295&quot;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>font-face的字体内容每次访问都不一样，所以上面的代码只是为了得到“baseFontMap”：真实字体和其对应的字体绘制规则的映射</p>
<p>代码实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comp</span>(<span class="params">shape_1, shape_2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    传入两个字体的绘制规则，判断这两个字体绘制的各个坐标的差异是否小于某某范围，一般40以内。匹配不到可扩大范围，出现乱匹配可缩小范围。</span></span><br><span class="line"><span class="string">    :param shape_1: 字体绘制规则1</span></span><br><span class="line"><span class="string">    :param shape_2: 字体绘制规则2</span></span><br><span class="line"><span class="string">    :return: True:各个坐标差异小于指定范围； False:各个坐标差异大于指定范围</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取字体绘制规则的坐标详情</span></span><br><span class="line">    shape_1 = shape_1.coordinates</span><br><span class="line">    shape_2 = shape_2.coordinates</span><br><span class="line">    <span class="comment"># 判断两个字体绘制规则的坐标个数是否一样</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(shape_1) == <span class="built_in">len</span>(shape_2):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(shape_1)):</span><br><span class="line">            <span class="comment"># 判断两个字体绘制规则相应的坐标，差异的范围是否在指定范围内。</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(shape_1[i][<span class="number">0</span>]-shape_2[i][<span class="number">0</span>])&gt;<span class="number">70</span> <span class="keyword">or</span> <span class="built_in">abs</span>(shape_1[i][<span class="number">1</span>]-shape_2[i][<span class="number">1</span>])&gt;<span class="number">70</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    font_face = <span class="string">&#x27;d09GRgABAAAAAC...aNNlv0CLWhrggA=&#x27;</span>   <span class="comment">##@font-face中复制的，内容太多，省略。</span></span><br><span class="line">    baseFont = TTFont(io.BytesIO(base64.b64decode(font_face)))</span><br><span class="line">    baseGlyf = baseFont[<span class="string">&quot;glyf&quot;</span>]</span><br><span class="line">    <span class="comment"># 得到真实字体和其对应的字体绘制规则的映射</span></span><br><span class="line">    baseFontMap = &#123;</span><br><span class="line">        <span class="string">&quot;0&quot;</span>:baseGlyf[<span class="string">&quot;uniE3D3&quot;</span>],</span><br><span class="line">        <span class="string">&quot;1&quot;</span>:baseGlyf[<span class="string">&quot;uniF4C8&quot;</span>],</span><br><span class="line">        <span class="string">&quot;2&quot;</span>:baseGlyf[<span class="string">&quot;uniEB1C&quot;</span>],</span><br><span class="line">        <span class="string">&quot;3&quot;</span>:baseGlyf[<span class="string">&quot;uniF843&quot;</span>],</span><br><span class="line">        <span class="string">&quot;4&quot;</span>:baseGlyf[<span class="string">&quot;uniEA7C&quot;</span>],</span><br><span class="line">        <span class="string">&quot;5&quot;</span>:baseGlyf[<span class="string">&quot;uniE90E&quot;</span>],</span><br><span class="line">        <span class="string">&quot;6&quot;</span>:baseGlyf[<span class="string">&quot;uniE881&quot;</span>],</span><br><span class="line">        <span class="string">&quot;7&quot;</span>:baseGlyf[<span class="string">&quot;uniE671&quot;</span>],</span><br><span class="line">        <span class="string">&quot;8&quot;</span>:baseGlyf[<span class="string">&quot;uniEEB6&quot;</span>],</span><br><span class="line">        <span class="string">&quot;9&quot;</span>:baseGlyf[<span class="string">&quot;uniE295&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 去爬取网页</span></span><br><span class="line">    url = <span class="string">&quot;https://su.58.com/qztech/&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;f=n; commoer=101...&#x27;</span>,   <span class="comment">#直接复制的cookie，内容太多，省略。</span></span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://passport.58.com/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resp = requests.get(url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    <span class="comment"># 获取font_face内容</span></span><br><span class="line">    font_face = re.search(<span class="string">&quot;@font-face.+?base64,(.+?)\)&quot;</span>,text,re.DOTALL).group(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 创建TTFont对象</span></span><br><span class="line">    currentFont = TTFont(io.BytesIO(base64.b64decode(font_face)))</span><br><span class="line">    <span class="comment">#获取cmap内容，即code和name的映射</span></span><br><span class="line">    currentCmap = currentFont.getBestCmap()</span><br><span class="line">    <span class="comment">#获取glyf内容，即name和字体绘制规则的映射</span></span><br><span class="line">    currentGlyf = currentFont[<span class="string">&quot;glyf&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> code,name <span class="keyword">in</span> currentCmap.items():</span><br><span class="line">        <span class="comment"># 当前网页的字体绘制规则</span></span><br><span class="line">        currentShape = currentGlyf[name]</span><br><span class="line">        <span class="keyword">for</span> font,shape <span class="keyword">in</span> baseFontMap.items():</span><br><span class="line">            <span class="comment">#1，如果字体绘制规则不变，可以这样写，直接相等。则说明code对应其font</span></span><br><span class="line">            <span class="comment">#if shape == currentShape:</span></span><br><span class="line">            <span class="comment">#2，如果字体绘制规则每次访问时都会略微改变，判断对应的坐标改变在某某范围以内，则视为同一字体。则说明code对应其font</span></span><br><span class="line">            <span class="keyword">if</span> comp(shape, currentShape):</span><br><span class="line">                <span class="comment">#把code转换成网页源代码上显示的格式，把code（十进制）转十六进制，然后把开头的“0”改为“&amp;#”，然后末尾加“;”</span></span><br><span class="line">                code = <span class="built_in">str</span>(<span class="built_in">hex</span>(code)).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&quot;&amp;#&quot;</span>,<span class="number">1</span>) + <span class="string">&quot;;&quot;</span></span><br><span class="line">                text = re.sub(code,font,text)</span><br><span class="line">    <span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>单体架构项目</title>
    <url>/2022/07/14/%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>一个javaWeb项目实战，教育课程管理系统，前后端分离开发。</p>
<span id="more"></span>

<h1 id="前后端分离开发"><a href="#前后端分离开发" class="headerlink" title="前后端分离开发"></a>前后端分离开发</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>前后端分离已成为互联网项目开发的业界标准使用方式，将前端和后端的开发进行解耦。并且前后端分离会为以后的大型分布式架构、微服务架构、多端化服务（各种客户端，比如浏览器、车载终端、安卓、IOS等）打下坚实的基础。</p>
<p><a href="https://imgtu.com/i/jWO7nK"><img src="https://s1.ax1x.com/2022/07/14/jWO7nK.jpg" alt="jWO7nK.jpg"></a></p>
<h2 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h2><p><strong>什么是接口文档</strong></p>
<p>​    在我们的项目中使用的是前后端分离开发方式，需要由前后端工程师共同定义接口，编写接口文档，之后大家都根据这个接口文档进行开发，到项目结束前都要一直进行接口文档的维护。 </p>
<p><strong>为什么要写接口文档</strong></p>
<ol>
<li>项目开发过程中前后端工程师有一个统一的文件进行沟通交流,并行开发</li>
<li>项目维护中或者项目人员更迭，方便后期人员查看、维护 </li>
</ol>
<p><strong>接口规范是什么</strong> </p>
<p>一个接口的描述至少包括下面几项:</p>
<ul>
<li><p>名称: <strong>findCourseList</strong></p>
</li>
<li><p>描述:  根据条件查询课程信息</p>
</li>
<li><p>URL: <a href="http://localhost:8080/lagou_edu_home/course/">http://localhost:8080/lagou_edu_home/course/</a></p>
</li>
<li><p>请求方式: GET</p>
</li>
<li><p>请求参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">methodName:&quot;findCourseList&quot;;</span><br></pre></td></tr></table></figure></li>
<li><p>响应结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;status&quot;: &quot;0&quot;,</span><br><span class="line">    &quot;msg&quot;: &quot;success&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p><strong>前后端耦合的开发方式</strong></p>
<p>​    这种方式中 Java程序员又当爹又当妈，又搞前端，又搞后端。 正所谓术业有专攻，一个人如果什么都会，那么他肯定也什么都不精. </p>
<p><strong>前后端分离的开发方式</strong></p>
<ol>
<li>前后端分离的模式下，如果发现Bug，可以快速定位是谁的问题，不会出现互相踢皮球的现象 </li>
<li>前后端分离可以减少后端服务器的并发/负载压力。除了接口以外的其他所有HTTP请求全部转移到前端Nginx上，接口的请求则转发调用Tomcat.</li>
<li>前后端分离的模式下，即使后端服务器暂时超时或宕机了，前端页面也会正常访问，只不过数据刷不出来而已。 </li>
<li>前后端分离会更加合理的分配团队的工作量，减轻后端团队的工作量，提高了性能和可扩展性。 </li>
</ol>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p><strong>后端</strong></p>
<table>
<thead>
<tr>
<th>后端技术</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Web层</strong></td>
<td>a) Servlet：前端控制器<br />b) Filter：过滤器 <br />c) BeanUtils：数据封装</td>
</tr>
<tr>
<td><strong>Service层</strong></td>
<td>a) 业务处理</td>
</tr>
<tr>
<td><strong>dao层</strong></td>
<td>a) Mysql：数据库<br />b) Druid：数据库连接池<br />c) DBUtils: 操作数据库</td>
</tr>
</tbody></table>
<p><strong>前端</strong></p>
<table>
<thead>
<tr>
<th>前端技术</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Vue.js</strong></td>
<td>是一套用于构建用户界面的渐进式<strong>JavaScript框架</strong></td>
</tr>
<tr>
<td><strong>Element UI库</strong></td>
<td>element-ui 是饿了么前端出品的基于 Vue.js的 后台组件库，<br>方便程序员进行页面快速布局和构建</td>
</tr>
<tr>
<td><strong>node.js</strong></td>
<td>简单的说 Node.js 就是运行在服务端的 JavaScript 运行环境 .</td>
</tr>
<tr>
<td><strong>axios</strong></td>
<td>对ajax的封装, 简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，</td>
</tr>
</tbody></table>
<h2 id="项目开发环境"><a href="#项目开发环境" class="headerlink" title="项目开发环境"></a>项目开发环境</h2><ul>
<li>开发工具<ul>
<li>后端: IDEA 2019</li>
<li>前端: VS code</li>
<li>数据库: SQLYog</li>
</ul>
</li>
<li>开发环境<ul>
<li>JDK 11</li>
<li>Maven 3.6.3</li>
<li>MySQL 5.7</li>
</ul>
</li>
</ul>
<h1 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h1><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p><strong>介绍</strong></p>
<p>​    Maven是一个跨平台的项目管理工具。作为Apache组织的一个颇为成功的开源项目，其主要服务于基于Java平台的项目创建，依赖管理和项目信息管理。maven是Apache的顶级项目，解释为“专家，内行”，它是一个项目管理的工具，maven自身是纯java开发的，可以使用maven对java项目进行构建、依赖管理。</p>
<p><strong>Maven作用</strong></p>
<ul>
<li>依赖管理<ul>
<li>依赖指的就是是 我们项目中需要使用的第三方Jar包, 一个大一点的工程往往需要几十上百个Jar包,按照我们之前的方式,每使用一种Jar,就需要导入到工程中,还要解决各种Jar冲突的问题.</li>
<li>Maven可以对Jar包进行统一的管理,包括快速引入Jar包,以及对使用的 Jar包进行统一的版本控制</li>
</ul>
</li>
<li>一键构建项目<ul>
<li>之前我们创建项目,需要确定项目的目录结构,比如<code>src</code> 存放Java源码, <code>resources</code>存放配置文件,还要配置环境比如JDK的版本等等,如果有多个项目 那么就需要每次自己搞一套配置,十分麻烦</li>
<li>Maven为我们提供了一个标准化的Java项目结构,我们可以通过Maven快速创建一个标准的Java项目.</li>
</ul>
</li>
</ul>
<h3 id="下载和配置"><a href="#下载和配置" class="headerlink" title="下载和配置"></a>下载和配置</h3><ul>
<li>下载：</li>
</ul>
<p>使用 Maven 管理工具，我们首先要到官网去下载它的安装软件。<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a> </p>
<p><a href="https://imgtu.com/i/jWXRDf"><img src="https://s1.ax1x.com/2022/07/14/jWXRDf.png" alt="jWXRDf.png"></a></p>
<ul>
<li>下载完成：</li>
</ul>
<p><a href="https://imgtu.com/i/jWXhVS"><img src="https://s1.ax1x.com/2022/07/14/jWXhVS.png" alt="jWXhVS.png"></a></p>
<ul>
<li>安装：</li>
</ul>
<p>Maven 下载后，将 Maven 解压到一个没有中文没有空格的路径下，比如D:\SoftwareStudy\maven 下面。 解压后目录结构如下：</p>
<ol>
<li>bin:存放了 maven 的命令</li>
<li>boot:存放了一些 maven 本身的引导程序，如类加载器等</li>
<li>conf:存放了 maven 的一些配置文件，如 setting.xml 文件 </li>
<li>lib:存放了 maven 本身运行所需的一些 jar 包 </li>
</ol>
<ul>
<li>配置环境变量：</li>
</ul>
<ol>
<li><p>配置 MAVEN_HOME ，变量值就是你的 maven 安装的路径（bin 目录之前一级目录） </p>
</li>
<li><p>将MAVEN_HOME 添加到Path系统变量，指定到bin目录</p>
</li>
</ol>
<ul>
<li>测试</li>
</ul>
<p>打开命令行，输入 mvn –v命令。<br>看到 maven 的版本为 3.6.3 及 java 版本为 jdk-11 即为安装 成功。 </p>
<h3 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h3><ul>
<li><strong>本地仓库</strong>:    位于自己计算机中的仓库, 用来存储从远程仓库或中央仓库下载的插件和 jar 包，</li>
<li><strong>远程仓库</strong>:    需要联网才可以使用的仓库，阿里提供了一个免费的maven 远程仓库。</li>
<li><strong>中央仓库</strong>:    在 maven 软件中内置一个远程仓库地址 <a href="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</a> ，它是中 央仓库，服务于整个互联网，它是由 Maven 团队自己维护，里面存储了非常全的 jar 包，它包 含了世界上大部分流行的开源项目构件</li>
</ul>
<p><strong>Maven 本地仓库的配置</strong> </p>
<ol>
<li><p>maven仓库默认是在 C盘  .m2 目录下,我们不要将仓库放在C盘,所以重新配置一下.</p>
</li>
<li><p>创建一个文件夹作为本地仓库，如D:\SoftwareStudy\maven\repository（注意最好放在没有中文及空格的目录下）。 </p>
</li>
<li><p>在maven安装目录中,进入 conf\settings.xml 文件中, 我们在这个文件中, 进行本地仓库的配置，如下:</p>
</li>
</ol>
<p><a href="https://imgtu.com/i/jWjodO"><img src="https://s1.ax1x.com/2022/07/14/jWjodO.png" alt="jWjodO.png"></a></p>
<p><strong>配置阿里云远程仓库</strong></p>
<p>Maven默认的远程仓库是在国外, 所以下载jar包时速度会非常慢, 这里推荐大家使用我大天朝的阿里云仓库</p>
<ol>
<li>打开 settings.xml,找到 mirrors 标签 , 下面的内容复制到  mirrors中 即可</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">        http://maven.aliyun.com/nexus/content/groups/public/</span><br><span class="line">    <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h3><h4 id="IDEA中配置Maven"><a href="#IDEA中配置Maven" class="headerlink" title="IDEA中配置Maven"></a><strong>IDEA中配置Maven</strong></h4><ol>
<li><p>打开IDEA 创建一个新的project</p>
</li>
<li><p>首先打开IDEA 选择File –&gt; Settings  –&gt; 搜素maven,就会看到如下界面，修改</p>
</li>
</ol>
<p><a href="https://imgtu.com/i/jWvEyq"><img src="https://s1.ax1x.com/2022/07/14/jWvEyq.png" alt="jWvEyq.png"></a></p>
<h4 id="创建Maven工程"><a href="#创建Maven工程" class="headerlink" title="创建Maven工程"></a><strong>创建Maven工程</strong></h4><ol>
<li>创建module，选中创建一个 maven 工程，点击 Next填写项目信息 </li>
</ol>
<p><a href="https://imgtu.com/i/jWv3lR"><img src="https://s1.ax1x.com/2022/07/14/jWv3lR.png" alt="jWv3lR.png"></a></p>
<ol start="2">
<li>创建好的工程,长这个样子</li>
</ol>
<p><a href="https://imgtu.com/i/jWvGOx"><img src="https://s1.ax1x.com/2022/07/14/jWvGOx.png" alt="jWvGOx.png"></a></p>
<p>目录说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java 		 —— 存放项目的.java 文件 </span><br><span class="line">src/main/resources 	 —— 存放项目资源文件，如数据库的配置文件 </span><br><span class="line">src/test/java 		—— 存放所有单元测试.java 文件，如 JUnit 测试类 </span><br><span class="line">target 			    —— 项目输出位置，编译后的class 文件会输出到此目录 </span><br><span class="line">pom.xml              ——maven 项目核心配置文件 </span><br></pre></td></tr></table></figure>



<h4 id="Maven工程改造"><a href="#Maven工程改造" class="headerlink" title="Maven工程改造"></a><strong>Maven工程改造</strong></h4><p>当前创建的maven项目是一个 普通的Java项目,不是web项目,我们要进行一下改造</p>
<ol>
<li><p>在main目录下创建一个webapp文件夹</p>
</li>
<li><p>选择  project Structure —&gt; facets—&gt; 点击+号 添加web —&gt; 选择当前工程hello_maven</p>
</li>
<li><p>修改路径信息，修改为 刚刚创建的webapp目录</p>
</li>
</ol>
<p><a href="https://imgtu.com/i/jWvD1A"><img src="https://s1.ax1x.com/2022/07/14/jWvD1A.png" alt="jWvD1A.png"></a></p>
<ol start="4">
<li>点击ok 后，项目就变为了web项目,webapp目录图标有个蓝色圆圈, 在webapp目录下再创建一个 index.jsp,就OK了</li>
</ol>
<h4 id="pom核心配置文件"><a href="#pom核心配置文件" class="headerlink" title="pom核心配置文件"></a><strong>pom核心配置文件</strong></h4><p>一个 maven 工程都有一个 pom.xml 文件，通过 pom.xml 文件定义项目的信息、项目依赖、引入插件等等。</p>
<p>1)坐标概念</p>
<p>一个Maven工程就是由<code>groupId</code>，<code>artifactId </code>和 <code>version</code> 作为唯一标识, 我们在引用其他第三方库的时候，也是通过这3个变量确定。</p>
<p>在maven中坐标就是为了定位一个唯一确定的jar包。</p>
<p>Maven坐标主要组成(GAV) - 确定一个jar在互联网位置 </p>
<table>
<thead>
<tr>
<th>标签</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>groupId</strong></td>
<td>定义当前Maven组织名称,通常是公司名</td>
</tr>
<tr>
<td><strong>artifactId</strong></td>
<td>定义实际项目名称</td>
</tr>
<tr>
<td><strong>version</strong></td>
<td>定义当前项目的当前版本</td>
</tr>
<tr>
<td><strong>packaging</strong></td>
<td>打包类型<br />jar：执行 package 会打成 jar 包       war：执行 package 会打成 war 包</td>
</tr>
<tr>
<td><strong>dependency</strong></td>
<td>使用 <code>&lt;dependency&gt; </code>声明一个依赖后，Maven就会自动下载这个依赖包</td>
</tr>
</tbody></table>
<ol start="2">
<li>pom.xml 文件中引入依赖包的坐标，例如servlet的jar包</li>
</ol>
<table>
<thead>
<tr>
<th>标签</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>dependencies</strong></td>
<td>表示依赖关系</td>
</tr>
<tr>
<td><strong>dependency</strong></td>
<td>使用 <code>&lt;dependency&gt; </code>声明一个依赖后，Maven就会自动下载这个依赖包</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>依赖范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>compile</td>
<td>编译范围，指 A在编译时依赖 B，此范围为默认依赖范围。编译范围的依赖会用在 编译、测试、运行，由于运行时需要所以编译范围的依赖会被打包。</td>
</tr>
<tr>
<td>provided</td>
<td>provided 依赖只有在当 JDK 或者一个容器已提供该依赖之后才使用， provided 依 赖在编译和测试时需要，在运行时不需要，比如：servlet api 被 tomcat 容器提供。</td>
</tr>
<tr>
<td>runtime</td>
<td>runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如：jdbc 的驱动包。由于运行时需要所以 runtime 范围的依赖会被打包。</td>
</tr>
<tr>
<td>test</td>
<td>test 范围依赖 在编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用， 比如：junit。由于运行时不需要所以test范围依赖不会被打包。</td>
</tr>
<tr>
<td>system</td>
<td>system 范围依赖与 provided 类似，但是你必须显式的提供一个对于本地系统中 JAR 文件的路径，需要指定 systemPath 磁盘路径，system依赖不推荐使用。</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 项目名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 模块名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 版本信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖范围 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...其他依赖包坐标</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>坐标查找：</p>
<p>输入网址,进入网址<a href="https://mvnrepository.com/">https://mvnrepository.com/</a> , 进行查询：</p>
<p><a href="https://imgtu.com/i/jWzSPg"><img src="https://s1.ax1x.com/2022/07/14/jWzSPg.png" alt="jWzSPg.png"></a></p>
<p>点击进入后,可以看到各个版本的信息,选择3.1.0</p>
<p><a href="https://imgtu.com/i/jWzCxs"><img src="https://s1.ax1x.com/2022/07/14/jWzCxs.png" alt="jWzCxs.png"></a></p>
<p>3)添加编译插件,  设置 jdk 编译版本 </p>
<p>本教程使用 jdk11，需要设置编译版本为 11，这里需要使用 maven 的插件来设置</p>
<p>在pom中加入如下配置: </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- properties 是全局设置,可以设置整个maven项目的编译器 JDK版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 重点  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在build中 我们需要指定一下项目的JDK编译版本,maven默认使用1.5版本进行编译</span></span><br><span class="line"><span class="comment">    注意 build 与 dependencies是平级关系,标签不要写错位置  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">release</span>&gt;</span>11<span class="tag">&lt;/<span class="name">release</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="运行Maven项目"><a href="#运行Maven项目" class="headerlink" title="运行Maven项目"></a><strong>运行Maven项目</strong></h4><ol>
<li><p>写项目代码</p>
</li>
<li><p>配置tomcat ,部署项目</p>
</li>
<li><p>运行项目, 默认访问 index.jsp</p>
</li>
</ol>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h4><ol>
<li>一个maven项目生命周期</li>
</ol>
<p>使用 maven 完成项目的构建，项目构建包括：清理、编译、测试、部署等过程，maven 将这些 过程规范为一个生命周期</p>
<p>maven 通过执行一些简单命令即可实现上边生命周期的各个过程</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>mvn compile</strong></td>
<td>完成编译操作 , 执行完毕后，会生成target目录，该目录中存放了编译后的字节码文件。</td>
</tr>
<tr>
<td><strong>mvn clean</strong></td>
<td>执行完毕后，会将target目录删除.</td>
</tr>
<tr>
<td><strong>mvn test</strong></td>
<td>执行完毕后，会在target目录中生成三个文件夹：<br />surefire、surefire-reports（测试报告）、test-classes（测试的字节码文件）</td>
</tr>
<tr>
<td><strong>mvn package</strong></td>
<td>完成打包操作, 执行完毕后，会在target目录中生成一个文件，该文件可能是 jar、war</td>
</tr>
<tr>
<td><strong>mvn install</strong></td>
<td>执行 mvn install命令，完成将打好的jar包安装到本地仓库的操作 ,<br /> 执行完毕后，会在本地仓库中出现安装后的jar包，方便其他工程引用</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<ol start="2">
<li>idea中安装好maven后, 在界面左侧有一个maven视图, 里面有对应的命令插件,可以执行上面表格中的命令</li>
</ol>
<p><a href="https://imgtu.com/i/jWzowV"><img src="https://s1.ax1x.com/2022/07/14/jWzowV.png" alt="jWzowV.png"></a></p>
<ol start="3">
<li>工具栏介绍</li>
</ol>
<p><a href="https://imgtu.com/i/jfSife"><img src="https://s1.ax1x.com/2022/07/14/jfSife.png" alt="jfSife.png"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.根据pom.xml文件重新导入所有Maven项目和依赖,刷新</span><br><span class="line">2.创建源码（重新编译）并更新目录</span><br><span class="line">3.下载源码或文档</span><br><span class="line">4.添加Maven项目</span><br><span class="line">5.执行生命周期中的阶段，选中lifecycle选项中生命周期中的一个阶段（phase），才能点击执行。</span><br><span class="line">6.运行Maven生命周期或插件</span><br><span class="line">7.切换离线模式，就是关闭和远程仓库的链接，从本地仓库中获取，也不能将jar包提交到远程仓库</span><br><span class="line">8.是否跳过测试，点击选中就可以跳过测试，在点击选择取消跳过测试</span><br><span class="line">9.展示当前选中的maven项目jar包的依赖，并且可以直接在图形化依赖图上进行排除依赖操作</span><br><span class="line">10.收起下面展开的视图</span><br><span class="line">11.跳转到maven的Setting页面</span><br></pre></td></tr></table></figure>

<h2 id="后端搭建"><a href="#后端搭建" class="headerlink" title="后端搭建"></a>后端搭建</h2><p><strong>创建数据库</strong></p>
<p>使用SQLYog 执行SQL脚本 ,导入数据库及表</p>
<p><a href="https://imgtu.com/i/jfS51H"><img src="https://s1.ax1x.com/2022/07/14/jfS51H.png" alt="jfS51H.png"></a></p>
<p><strong>创建项目</strong></p>
<p>1）创建maven项目</p>
<p>2）改造成web项目</p>
<p>3）添加其他目录</p>
<p><a href="https://imgtu.com/i/jfplE6"><img src="https://s1.ax1x.com/2022/07/14/jfplE6.png" alt="jfplE6.png"></a></p>
<p><strong>导入</strong></p>
<p>1）导入pom.xml（全局配置，依赖包，插件）</p>
<p>2）导入工具类及配置文件</p>
<p>3）导入表对应的实体类</p>
<p>Lombok介绍<br>在项目中使用Lombok可以减少很多重复代码的书写。比如说getter/setter/toString等方法的编写。</p>
<p>IDEA中安装 lombok插件<br>打开IDEA的Setting –&gt; 选择Plugins选项 –&gt; 搜索lombok –&gt; 点击安装 –&gt; 安装完成重启IDEA </p>
<p>在项目中添加Lombok依赖jar，在pom.xml文件中添加如下部分:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Lombok常用注解</p>
<ul>
<li><p>@Getter/@Setter:   作用类上，生成所有成员变量的getter/setter方法</p>
</li>
<li><p>@ToString :  作用于类，覆盖默认的toString()方法 ,可以通过of属性限定显示某些字段，通过exclude属性排除某些字段</p>
</li>
<li><p>@AllArgsConstructor：生成全参构造器</p>
</li>
<li><p>@NoArgsConstructor：生成无参构造器</p>
</li>
<li><p>@Data:  该注解使用在<strong>类</strong>上，该注解会提供 <code>getter</code>、<code>setter</code>、<code>equals</code>、<code>hashCode</code>、<code>toString</code> 方法。</p>
</li>
</ul>
<p><strong>添加通用的Servlet</strong></p>
<p>每个模块下都有很多的功能, 比如课程模块 的 新建课程, 上架课程,下架课程,根据课程名查询等等功能 , 每一个功能都是一个Servlet.</p>
<p>问题:<br>一个功能就是一个Servlet, 那么一个项目下有海量的Servlet, 这种方式好吗 ?<br>Servlet太多了,不好管理, 而且Servlet越多 服务器运行就越慢,资源消耗就越多.</p>
<p>解决：<br>我们使用一个Servlet对应一个模块的方式进行开发，包含多个功能</p>
<p>要求请求参数要包含methodName。表示方法名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  模拟课程模块 ,模块中有很多功能</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  doGet()方法作为调度器 控制器,根据请求的功能不同,调用对应的方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取参数</span></span><br><span class="line">        <span class="comment">//获取要调用的方法名</span></span><br><span class="line">        String methodName = req.getParameter(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.业务处理</span></span><br><span class="line">        <span class="comment">//判断 执行对应的方法</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;addCourse&quot;</span>.equals(methodName))&#123;</span><br><span class="line">            addCourse(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;findByStatus&quot;</span>.equals(methodName))&#123;</span><br><span class="line">            findByName(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;findByStatus&quot;</span>.equals(methodName))&#123;</span><br><span class="line">            findByStatus(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;访问的功能不存在!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  2.模块对应的功能部分</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCourse</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新建课程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByStatus</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;根据状态查询&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByName</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;根据课程名称查询&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：有多少功能，就要写多少个if判断，扩展性差，效率低</p>
<p>解决：可以使用反射去对代码进行优化, 提升代码的可维护性/可扩展性.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把if判断那部分，用反射代替</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取参数</span></span><br><span class="line">    <span class="comment">//获取要调用的方法名</span></span><br><span class="line">    String methodName = req.getParameter(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.业务处理</span></span><br><span class="line">    <span class="keyword">if</span>(methodName != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//通过反射优化代码,提升代码的可维护性</span></span><br><span class="line">        <span class="comment">//1.获取字节码对象  this = TestServlet对象</span></span><br><span class="line">        Class c = <span class="keyword">this</span>.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.根据传入的方法名, 获取对应方法对象,执行方法即可</span></span><br><span class="line">        Method method = c.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.调用Method对象的 invoke()方法,执行对应的功能</span></span><br><span class="line">        method.invoke(<span class="keyword">this</span>,req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请求的功能不存在! !&quot;</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：每个Servlet都需要写一份相同的反射代码，效率底</p>
<p>解决：将反射相关的代码抽取到一个类中 <strong>BaseServlet</strong>, 让BaseServlet去继承HTTPServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取参数</span></span><br><span class="line">            <span class="comment">//获取要调用的方法名</span></span><br><span class="line">            String methodName = req.getParameter(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.业务处理</span></span><br><span class="line">            <span class="keyword">if</span>(methodName != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//通过反射优化代码,提升代码的可维护性</span></span><br><span class="line">                <span class="comment">//1.获取字节码对象  this = TestServlet对象</span></span><br><span class="line">                Class c = <span class="keyword">this</span>.getClass();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.根据传入的方法名, 获取对应方法对象,执行方法即可</span></span><br><span class="line">                Method method = c.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//3.调用Method对象的 invoke()方法,执行对应的功能</span></span><br><span class="line">                method.invoke(<span class="keyword">this</span>,req,resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请求的功能不存在! !&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1）以后写的servlet类，都去继承BaseServlet。</p>
<p>2）Servlet中只保留 业务相关代码。</p>
<p>3）当有请求访问到 Servlet时, 发现没有doGet和doPost方法,就会去父类中找,从而执行BaseServlet中的<br>doGet方法。</p>
<p>例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;...添加功能执行中。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;...更新功能执行中。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;...查询功能执行中。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>添加filter</strong></p>
<p>给所有url添加请求和响应的编码设置，解决乱码问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Filter 解决乱码</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest request= (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response= (HttpServletResponse)servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决请求乱码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决响应乱码</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>目前, 前后端的ajax通讯几乎用的都是json格式的了,所以在开发的过程中,我们经常会涉及到JSON数据的转换</p>
<p>JSON的特点:</p>
<ul>
<li>JSON 是一种轻量级的数据交换格式。</li>
<li>JSON采用完全独立于语言的文本格式，就是说不同的编程语言JSON数据是一致的。</li>
<li>JSON易于人阅读和编写，同时也易于机器解析和生成(一般用于提升网络传输速率)。</li>
</ul>
<p>XML与JSON的区别：</p>
<ul>
<li><p>XML : 可扩展标记语言，是一种用于标记电子文件使其具有结构性的标记语言。 </p>
</li>
<li><p>JSON:  (JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。</p>
</li>
<li><p>相同点:  </p>
<ul>
<li>它们都可以作为一种数据交换格式。</li>
</ul>
</li>
<li><p>二者区别:</p>
<ul>
<li><p>XML是重量级的，JSON是轻量级的,XML在传输过程中比较占带宽，JSON占带宽少，易于压缩。</p>
</li>
<li><p>XML和json都用在项目交互下，XML多用于做配置文件，JSON用于数据交互</p>
</li>
<li><p>JSON独立于编程语言存在,任何编程语言都可以去解析json</p>
</li>
</ul>
</li>
</ul>
<p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;id&quot;: 110,</span><br><span class="line">	&quot;name&quot;: &quot;李会长&quot;,</span><br><span class="line">	&quot;age&quot;: 24</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//自定义JSON数据格式 (Java中的对象)</span><br><span class="line">&#123;&quot;name&quot;:&quot;tom&quot;,&quot;sex&quot;:&quot;女&quot;, &quot;age&quot;:12&#125;;</span><br><span class="line"></span><br><span class="line">//数组格式</span><br><span class="line">&#123;&quot;person&quot;:[&#123;&quot;name&quot;:&quot;tom&quot;,&quot;sex&quot;:&quot;女&quot;, &quot;age&quot;:12&#125;,&#123;&quot;name&quot;:&quot;jack&quot;,&quot;sex&quot;:&quot;男&quot;, &quot;age&quot;:22&#125;]&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//集合</span><br><span class="line">[&#123;&quot;name&quot;:&quot;老五&quot;,&quot;sex&quot;:&quot;女&quot;, &quot;age&quot;:12&#125;,&#123;&quot;name&quot;:&quot;会长&quot;,&quot;sex&quot;:&quot;男&quot;, &quot;age&quot;:12&#125;];</span><br></pre></td></tr></table></figure>



<h3 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h3><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p>
<p>FastJson特点如下：</p>
<ul>
<li> 能够支持将java bean序列化成JSON字符串，也能够将JSON字符串反序列化成Java bean。</li>
<li> 顾名思义，FastJson操作JSON的速度是非常快的。</li>
<li> 无其他包的依赖, 使用比较方便。</li>
</ul>
<p><strong>引入</strong></p>
<p>在Maven项目中使用FastJson库，需要提前在Maven的配置文件中添加此FastJson包的依赖 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.colobu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson-jaxrs-json-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>java对象转JSON格式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = JSON.toJSONString(person);</span><br><span class="line"></span><br><span class="line">String s = JSON.toJSONString(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//SimplePropertyPreFilter 可以指定要转换的JSON字段</span></span><br><span class="line">SimplePropertyPreFilter filter = </span><br><span class="line"><span class="keyword">new</span> SimplePropertyPreFilter(Person.class,<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">String s = JSON.toJSONString(person, filter);</span><br></pre></td></tr></table></figure>



<p><strong>@JSONField 注解</strong></p>
<p>通过 @JSONField 我们可以自定义字段的名称进行输出，并控制字段的排序，还可以进行序列化标记。</p>
<p>注解添加到封装对象的成员变量上</p>
<ul>
<li>指定name属性, 字段的名称     </li>
<li>使用 ordinal属性, 指定字段的顺序</li>
<li>使用 serialize属性, 指定字段是否序列化</li>
</ul>
<p><strong>JSON格式转java对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person = JSON.parseObject(jsonString, Person.class);</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; list  = JSON.parseArray(jsonString, Person.class);</span><br></pre></td></tr></table></figure>

<h2 id="课程管理模块开发"><a href="#课程管理模块开发" class="headerlink" title="课程管理模块开发"></a>课程管理模块开发</h2><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><p><strong>需求分析</strong></p>
<p><strong>数据库表分析</strong></p>
<p><strong>Dao接口及实现类编写</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程模块 DAO层接口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CourseDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程模块 DAO层实现类</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseDaoImpl</span> <span class="keyword">implements</span> <span class="title">CourseDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Service接口及实现类编写</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  课程模块 Service层 接口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CourseService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程模块Service层 实现类</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseServiceImpl</span> <span class="keyword">implements</span> <span class="title">CourseService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Servlet编写</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name=&quot;courseServlet&quot;,value=&quot;/course&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="功能一：查询课程列表信息"><a href="#功能一：查询课程列表信息" class="headerlink" title="功能一：查询课程列表信息"></a>功能一：查询课程列表信息</h3><h3 id="功能二：多条件查询课程信息"><a href="#功能二：多条件查询课程信息" class="headerlink" title="功能二：多条件查询课程信息"></a>功能二：多条件查询课程信息</h3><p>通过课程名，和状态查询课程。</p>
<p>两个条件随机出现，所以需要拼接sql语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2,存放sql</span></span><br><span class="line">StringBuffer sql = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;SELECT \n&quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;id,\n&quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;course_name,\n&quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;price,\n&quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;sort_num,\n&quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;STATUS\n&quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;FROM course\n&quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;WHERE 1=1 and is_del = ? &quot;</span>);  <span class="comment">//细节1=1</span></span><br><span class="line"><span class="comment">//存放参数</span></span><br><span class="line">List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//若有课程名，就把课程名的sql和参数添加进来</span></span><br><span class="line"><span class="keyword">if</span>(course_name != <span class="keyword">null</span>)&#123;</span><br><span class="line">    sql.append(<span class="string">&quot;and course_name LIKE ? &quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;%&quot;</span> + course_name + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//若有状态，就把状态的sql和参数添加进来</span></span><br><span class="line"><span class="keyword">if</span>(status != <span class="keyword">null</span>)&#123;</span><br><span class="line">    sql.append(<span class="string">&quot;and STATUS = ? &quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> i = Integer.parseInt(status);</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"> List&lt;Course&gt; courseList = qr.query(sql.toString(), <span class="keyword">new</span> BeanListHandler&lt;Course&gt;(Course.class), list.toArray());</span><br></pre></td></tr></table></figure>



<h3 id="功能三：新建课程营销"><a href="#功能三：新建课程营销" class="headerlink" title="功能三：新建课程营销"></a>功能三：新建课程营销</h3><p>涉及到图片文件上传。</p>
<p><strong>前端</strong></p>
<p>前端要执行的三要素</p>
<ul>
<li>1.表单提交方式: <strong>post</strong> (get方式提交有大小限制,post没有) </li>
<li>2.表单的enctype属性:必须设置为   <strong>multipart/form-data.</strong>  <ul>
<li>enctype就是encodetype就是编码类型的意思.</li>
<li>multipart/form-data是多部件文件上传 , 指表单数据有多部分构成，既有文本数据，又有文件等二进制数据的意思。</li>
</ul>
</li>
<li>3.表单必须有文件上传项: **file **,必须要有name属性和值 </li>
</ul>
<p><strong>后端</strong></p>
<p>1）将图片上传到tomcat服务器上</p>
<p>将部署方式改变为 war模式,把项目部署在tomcat的webapps下</p>
<ul>
<li>idea中部署项目两种方式<ul>
<li>war模式：将项目以war包的形式上传真实到服务器的webapps目录中；</li>
<li>war exploded模式：仅仅是目录的映射，就相当于tomcat在项目源文件夹中启动一样；</li>
</ul>
</li>
</ul>
<p>2）在webapps中创建upload目录</p>
<p>upload目录专门用来保存上传过来的图片</p>
<p>3）编写Servlet，无法直接通过request直接获取参数，所以不能继承BaseServlet</p>
<p><strong>准备工作</strong></p>
<p>FileUpload工具类，可以很容易地将文件上传到你的Web应用程序.</p>
<p>导入FileUpload依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>BeanUtils工具类，用于简化JavaBean封装数据的操作</p>
<p>导入BeanUtils依赖包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.8</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将map中的数据封装到person中</span></span><br><span class="line">BeanUtils.populate(person, map);</span><br></pre></td></tr></table></figure>

<p>编写Servlet，图片会保存到tomcat目录中webapps\upload下，数据库保存图片的路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/courseSalesInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseSalesInfoServlet</span>  <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存课程营销信息</span></span><br><span class="line"><span class="comment">     *      收集表单数据,封装到course对象中,将图片上传到tomcat服务器中</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Course对象</span></span><br><span class="line">            Course course = <span class="keyword">new</span> Course();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建Map集合,用来收集数据</span></span><br><span class="line">            Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.创建磁盘工厂对象</span></span><br><span class="line">            DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.文件上传核心对象</span></span><br><span class="line">            ServletFileUpload fileUpload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//5.解析request对象,获取表单项集合</span></span><br><span class="line">            List&lt;FileItem&gt; list = fileUpload.parseRequest(req);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//6.遍历集合 判断哪些是普通的表单项,那些是文件表单项</span></span><br><span class="line">            <span class="keyword">for</span> (FileItem item : list) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">boolean</span> formField = item.isFormField();</span><br><span class="line">                <span class="keyword">if</span>(formField)&#123;</span><br><span class="line">                    <span class="comment">//是普通表单项,获取表单项中的数据,保存到map</span></span><br><span class="line">                    String fieldName = item.getFieldName();</span><br><span class="line">                    String value = item.getString(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                    <span class="comment">//使用map收集数据</span></span><br><span class="line">                    map.put(fieldName,value);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//文件上传项</span></span><br><span class="line">                    <span class="comment">//获取文件名</span></span><br><span class="line">                    String fileName = item.getName();</span><br><span class="line">                    String newFileName = UUIDUtils.getUUID()+<span class="string">&quot;_&quot;</span>+fileName;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//获取输入流</span></span><br><span class="line">                    InputStream in = item.getInputStream();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//获取webapps的目录路径</span></span><br><span class="line">                    String realPath = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                    String wabappsPath = realPath.substring(<span class="number">0</span>, realPath.indexOf(<span class="string">&quot;lagou_edu_home&quot;</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//创建输出流</span></span><br><span class="line">                    OutputStream out = <span class="keyword">new</span> FileOutputStream(wabappsPath+<span class="string">&quot;/upload/&quot;</span> + newFileName);</span><br><span class="line"></span><br><span class="line">                    IOUtils.copy(in,out);</span><br><span class="line">                    out.close();</span><br><span class="line">                    in.close();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//将图片路径进行保存</span></span><br><span class="line">                    map.put(<span class="string">&quot;course_img_url&quot;</span>, <span class="string">&quot;http://localhost:8080&quot;</span>+<span class="string">&quot;/upload/&quot;</span>+newFileName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将map保存的数据全部封装到course中</span></span><br><span class="line">            BeanUtils.populate(course, map);</span><br><span class="line">            CourseService courseService = <span class="keyword">new</span> CourseServiceImpl();</span><br><span class="line">            String result;  <span class="comment">//存放结果</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断sourse中是否有id</span></span><br><span class="line">            <span class="keyword">if</span>(course.getId() == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//没有id，表示新建课程营销信息</span></span><br><span class="line">                result = courseService.insertCourseSalasInfo(course);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//有id，表示修改课程营销信息</span></span><br><span class="line">                result = courseService.updateCourseSalasInfo(course);</span><br><span class="line">            &#125;</span><br><span class="line">            resp.getWriter().print(result);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）将tomcat作为图片服务器使用时，存储上传的图片后,如果想要图片可以访问,需要在idea中进行配置:<br>在部署中，选择external source —&gt; 找到webapps目录下的的upload文件夹</p>
<p><strong>接口测试</strong></p>
<p>postman测试上传文件：</p>
<ol>
<li><p>接口地址填写正确</p>
</li>
<li><p>将请求方式设置为POST</p>
</li>
<li><p>需要上传文件, 设置Headers:  <strong>“key”:”Content-Type”, “value”:”multipart/form-data”</strong> </p>
</li>
<li><p>Body选择form-data</p>
</li>
<li><p>key 右侧下拉选择file；value 点击Select Files选择文件 , 按照接口文档,补全测试参数</p>
</li>
</ol>
<h3 id="功能四：修改课程营销"><a href="#功能四：修改课程营销" class="headerlink" title="功能四：修改课程营销"></a>功能四：修改课程营销</h3><p>1，数据回显</p>
<p>2，修改课程信息</p>
<p>新建营销信息和修改营销信息,访问的是同一个接口,所以在<strong>CourseSalesInfoServlet</strong>中,我们需要进行一下判断</p>
<ul>
<li>携带id 就是修改操作</li>
<li>未携带id就是新增操作</li>
</ul>
<h3 id="功能五：修改课程状态"><a href="#功能五：修改课程状态" class="headerlink" title="功能五：修改课程状态"></a>功能五：修改课程状态</h3><h2 id="课程内容管理模块开发"><a href="#课程内容管理模块开发" class="headerlink" title="课程内容管理模块开发"></a>课程内容管理模块开发</h2><h3 id="开发流程-1"><a href="#开发流程-1" class="headerlink" title="开发流程"></a>开发流程</h3><p><strong>实体类一对多关系的表述</strong></p>
<p>一个课程下对应多个章节，一个章节只属于一个课程下的。</p>
<p> 在 Course 类中定义一个List集合,并指定List的泛型是 Course_Section 类型,表示 一个课程中可以包<br>含多个章节.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Course类 </span><br><span class="line">    <span class="comment">//添加list集合 泛型是 Course_Section </span></span><br><span class="line">    List&lt;Course_Section&gt; sectionList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>

<p>在 Course_Section 类中,定义一个Course类型的属性, 用来保存章节所对应的具体的课程信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Course_Section 类 </span><br><span class="line">    <span class="comment">//添加一个Course类型的属性 </span></span><br><span class="line">    <span class="keyword">private</span> Course course;</span><br></pre></td></tr></table></figure>



<p>章节与课时关系表述也是如此。一对多关系。</p>
<h3 id="功能一：展示课程内容"><a href="#功能一：展示课程内容" class="headerlink" title="功能一：展示课程内容"></a>功能一：展示课程内容</h3><p>分析: 要展示的内容是对应课程下的 章节与课时</p>
<p>数据库中可以用连接查询找到，但是开发中尽量避免使用连接查询</p>
<p>dao层编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过 课程id 查询 章节列表信息，每个章节中又要包含课时信息列表</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Course_Section&gt; <span class="title">findSectionListByCourseId</span><span class="params">(<span class="keyword">int</span> courseId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建QueryRunner</span></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.准备sql</span></span><br><span class="line">        String sql = <span class="string">&quot;SELECT \n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;course_id,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;section_name,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;description,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;order_num,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;STATUS,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;create_time,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;update_time,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;is_del\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;FROM course_section\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;WHERE course_id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.执行sql</span></span><br><span class="line">        List&lt;Course_Section&gt; sectionList = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Course_Section&gt;(Course_Section.class), courseId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Course_Section section : sectionList)&#123;</span><br><span class="line">            <span class="comment">//通过章节id找到相关章节的课时列表信息</span></span><br><span class="line">            List&lt;Course_Lesson&gt; lessonList = findLessonListBySectionId( section.getId() );</span><br><span class="line">            <span class="comment">//章节添加相关的课时列表</span></span><br><span class="line">            section.setLessonList(lessonList);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sectionList;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 章节id 查询 课时列表信息</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Course_Lesson&gt; <span class="title">findLessonListBySectionId</span><span class="params">(<span class="keyword">int</span> sectionId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取QueryRunner</span></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.准备sql</span></span><br><span class="line">        String sql = <span class="string">&quot;SELECT \n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;course_id,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;section_id,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;theme,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;duration,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;is_free,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;order_num,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;STATUS,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;create_time,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;update_time,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;is_del\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;FROM course_lesson\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;WHERE section_id = ?;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.执行sql</span></span><br><span class="line">        List&lt;Course_Lesson&gt; lessonList = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Course_Lesson&gt;(Course_Lesson.class), sectionId);</span><br><span class="line">        <span class="keyword">return</span> lessonList;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="功能二：新建章节信息"><a href="#功能二：新建章节信息" class="headerlink" title="功能二：新建章节信息"></a>功能二：新建章节信息</h3><p>POST 请求方法常用的三种数据提交格式</p>
<table>
<thead>
<tr>
<th><strong>格式</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Content-Type : application/x-www-formurlencoded</td>
<td>请求体中的数据会以普通表单形式  （键值对）发送到后端。</td>
</tr>
<tr>
<td>Content-Type  : application/json ; charset=utf-8</td>
<td>请求体中的数据会以json字符串的形式发送到后端。</td>
</tr>
<tr>
<td>Content-Type : multipart/form-data</td>
<td>多部件上传既可以上传键值对 也可以上传文件。</td>
</tr>
</tbody></table>
<p>注意: 第二种JSON格式与第三种多部件上传,使用 getParameter() 方法都无法获取数据</p>
<p><strong>修改BaseServlet</strong></p>
<p>如果请求参数是键值对，那么还是使用getParameter() 方法获取参数。<br>如果请求参数是JSON格式的数, 我们可以通过获取一个流对象来进行读取.</p>
<p>修改后的BaseServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String methodName = <span class="keyword">null</span>;</span><br><span class="line">        String contentType = req.getHeader(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;application/json&quot;</span>.equals(contentType))&#123;</span><br><span class="line">            <span class="comment">//是json格式的请求数据</span></span><br><span class="line">            String postJSON = getPostJSON(req);</span><br><span class="line">            <span class="comment">//将JSON格式的字符串转化为map</span></span><br><span class="line">            Map&lt;String, Object&gt; map = JSON.parseObject(postJSON, Map.class);</span><br><span class="line">            <span class="comment">//从map集合中获取 methodName</span></span><br><span class="line">            methodName = (String)map.get(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">            <span class="comment">//将获取到的数据,保存到request域对象中</span></span><br><span class="line">            req.setAttribute(<span class="string">&quot;map&quot;</span>, map);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            methodName = req.getParameter(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(methodName != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//通过反射优化代码 提升代码的可维护性</span></span><br><span class="line">                Class c = <span class="keyword">this</span>.getClass();</span><br><span class="line">                Method method = c.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">                method.invoke(<span class="keyword">this</span>, req, resp);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;访问不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPostJSON</span><span class="params">(HttpServletRequest req)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.从request中获取 字符缓冲输入流对象</span></span><br><span class="line">            BufferedReader reader = req.getReader();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建 StringBuffer,用来保存读取出的数据</span></span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.循环读取</span></span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>( (line=reader.readLine()) != <span class="keyword">null</span> )&#123;</span><br><span class="line">                sb.append(line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4,返回字符串</span></span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果servlet中的请求方式是json格式，照样继承BaseServlet，可以这样获取请求参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获取参数 从域对象中获取 </span></span><br><span class="line">Map&lt;String,Object&gt; map = (Map)request.getAttribute(<span class="string">&quot;map&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建Course_Section </span></span><br><span class="line">Course_Section section = <span class="keyword">new</span> Course_Section(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//3.使用BeanUtils工具类,将map中的数据封装到 section </span></span><br><span class="line">BeanUtils.populate(section,map);</span><br></pre></td></tr></table></figure>



<p><strong>接口测试</strong></p>
<ol>
<li>选择POST请求方式,</li>
</ol>
<p>2)设置Headers为：Content-Type = application/json</p>
<p>3)在body中，选择raw</p>
<p>4)填写JSON格式数据</p>
<h3 id="功能三-章节信息修改"><a href="#功能三-章节信息修改" class="headerlink" title="功能三: 章节信息修改"></a>功能三: 章节信息修改</h3><p>新建章节信息和修改章节信息,访问的是同一个接口,所以在<strong>saveOrUpdateSection</strong>方法中中,我们要进行一下判断</p>
<ul>
<li>携带id 就是修改章节操作</li>
<li>未携带id就是新增章节操作</li>
</ul>
<h3 id="功能四-章节状态管理"><a href="#功能四-章节状态管理" class="headerlink" title="功能四: 章节状态管理"></a>功能四: 章节状态管理</h3><h1 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h1><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>可以轻松实现异步请求。即局部刷新，异步操作</p>
<p><strong>Get请求方式语法</strong></p>
<p>$.get(url, data, callback, type)</p>
<ul>
<li>参数1:  <code>url</code>     请求路径</li>
<li>参数2:  <code>data</code>     请求时携带的数据<br>格式:   <code>key=value</code>  或者  {username=’baby’,pwd:666}</li>
<li>参数3: <code>callback</code>  响应成功后的回调函数</li>
<li>参数4:  <code>type</code>     响应的数据类型 text html xml json</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.参数1 url</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;/login&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.参数2 数据</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">username</span>:<span class="string">&quot;jack&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.发送get请求</span></span><br><span class="line">$.get(url, data, <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//data响应回来的内容体</span></span><br><span class="line">    alert(<span class="string">&quot;响应成功! 响应数据: &quot;</span> + param);</span><br><span class="line">&#125;, <span class="string">&quot;text&quot;</span>);</span><br></pre></td></tr></table></figure>



<p><strong>POST请求方式</strong></p>
<p>$.post(url, data, callback, type)<br>里面的四个参数和get方式是一样, 不一样的是请求方式的不同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.参数1 url</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;/login&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.参数2 数据</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">username</span>:<span class="string">&quot;lucy&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.发送post请求</span></span><br><span class="line">$.post(url, data, <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//data响应回来的内容体</span></span><br><span class="line">    alert(<span class="string">&quot;响应成功! 响应数据: &quot;</span> + param);</span><br><span class="line">&#125;, <span class="string">&quot;text&quot;</span>);</span><br></pre></td></tr></table></figure>



<p><strong>Ajax请求方式</strong></p>
<ul>
<li>方式1:  jQuery.ajax({[settings]})</li>
<li>方式2: $.ajax({})</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">async</span>:<span class="literal">true</span>, <span class="comment">//是否异步</span></span><br><span class="line">    <span class="attr">data</span>:&#123;<span class="attr">username</span>:<span class="string">&quot;tom&quot;</span>&#125;,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>, <span class="comment">//请求方式</span></span><br><span class="line">    <span class="attr">dataType</span>:<span class="string">&quot;text&quot;</span>, <span class="comment">//返回数据的数据类型</span></span><br><span class="line">    <span class="attr">success</span>:<span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;响应成功!! &quot;</span> + param)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;响应失败!!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p><strong>案例</strong></p>
<p>用户名输入框，输入用户名后，失去焦点就立马发送请求，判断用户名是否存在。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#username&quot;</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取用户名</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> name = $(<span class="built_in">this</span>).val();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断用户名不为空</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(name != <span class="literal">null</span> &amp;&amp; name != <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>:<span class="string">&quot;/checkName&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>:<span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">data</span>:&#123;<span class="attr">username</span>:name&#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">success</span>:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(data.flag)&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//设置span内容体</span></span></span><br><span class="line"><span class="javascript">                            $(<span class="string">&quot;#spanMsg&quot;</span>).html(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;</span> + data.msg+ <span class="string">&quot;&lt;/font&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!data.flag)&#123;</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">&quot;#spanMsg&quot;</span>).html(<span class="string">&quot;&lt;font color=&#x27;green&#x27;&gt;&quot;</span>+ data.msg + <span class="string">&quot;&lt;/font&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">error</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&quot;请求处理失败!&quot;</span>)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;spanMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Postman搭建mock-server"><a href="#Postman搭建mock-server" class="headerlink" title="Postman搭建mock server"></a>Postman搭建mock server</h2><ul>
<li>Mock server就是模拟一个服务器，我们使用Mock server可以模拟后台接口,对请求进行响应.</li>
<li>在前后端分离的开发中 前端利用mockeserver模拟出对应接口，拿到返回数据来调试，无需等后端开发人员完成工作</li>
</ul>
<p>步骤：</p>
<ol>
<li>使用postman模拟出一个server：new&gt;&gt;Mock Server</li>
<li> 打开窗口中，填写请求路径，响应结果，下一步，取名，下一步</li>
<li>获取Mock Server的url<br><a href="https://imgtu.com/i/vpzdHJ"><img src="https://s1.ax1x.com/2022/07/28/vpzdHJ.png" alt="vpzdHJ.png"></a></li>
</ol>
<h2 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h2><p>当我们在前端项目中,向后端发送请求的获取课程数据的时候,出现了跨域问题:</p>
<p>已被CORS策略阻止：请求的资源上没有’ Access-Control-Allow-Origin’标头（跨域请求失败）</p>
<p><a href="https://imgtu.com/i/vpz4UA"><img src="https://s1.ax1x.com/2022/07/28/vpz4UA.png" alt="vpz4UA.png"></a></p>
<p><strong>什么是跨域</strong><br>跨域是指通过JS在不同的域之间进行数据传输或通信，比如用ajax向一个不同的域请求数据，只要协议、域名、端口有任何一个不同，都被当作是不同的域,浏览器就不允许跨域请求。</p>
<p><strong>解决</strong></p>
<ol>
<li><p>在后端的pom.xml文件中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 解决跨域问题所需依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thetransactioncompany<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cors-filter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在web.xml中 配置跨域 filter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置跨域过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>corsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.thetransactioncompany.cors.CORSFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>corsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="课程管理页面"><a href="#课程管理页面" class="headerlink" title="课程管理页面"></a>课程管理页面</h2><ol>
<li>首先导入前端项目到 VSCode</li>
<li>运行项目.</li>
</ol>
<h3 id="获取课程列表"><a href="#获取课程列表" class="headerlink" title="获取课程列表"></a>获取课程列表</h3><p>页面一打开就请求课程列表信息，可以把加载课程放在钩子函数created()中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//钩子函数 </span></span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123; </span><br><span class="line">    <span class="built_in">this</span>.loadCourses(); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="条件查询课程信息"><a href="#条件查询课程信息" class="headerlink" title="条件查询课程信息"></a>条件查询课程信息</h3><h3 id="新建课程营销"><a href="#新建课程营销" class="headerlink" title="新建课程营销"></a>新建课程营销</h3><p>js中的跳转其他组件，携带参数courseId：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(&#123; <span class="attr">name</span>: <span class="string">&quot;CourseItem&quot;</span>, <span class="attr">params</span>: &#123; <span class="attr">courseId</span>: <span class="string">&quot;new&quot;</span> &#125; &#125;);</span><br></pre></td></tr></table></figure>

<p>到了其他组件，可以接收参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获取路由传递的参数</span></span><br><span class="line"><span class="keyword">const</span> id = <span class="built_in">this</span>.$route.params.courseId;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.判断id是否有值,没有值跳转到 错误页面</span></span><br><span class="line"><span class="keyword">if</span> (!id) <span class="keyword">return</span> <span class="built_in">this</span>.redirectToError();</span><br></pre></td></tr></table></figure>

<p>图片和表单上传操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FormData存放请求参数，钩子函数中定义好</span></span><br><span class="line"><span class="built_in">this</span>.params = <span class="keyword">new</span> FormData()</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1: 保存和修改课程信息</span></span><br><span class="line"><span class="function"><span class="title">handleSave</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//验证表单是否合法</span></span><br><span class="line">    <span class="built_in">this</span>.$refs.form.validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!valid) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.设置Content-Type为 多部件上传 </span></span><br><span class="line">        <span class="keyword">let</span> config = &#123; </span><br><span class="line">            <span class="attr">headers</span>: &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data&quot;</span> &#125; </span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取表单中的数据,保存到params (params 就是 FromData对象)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> <span class="built_in">this</span>.course)&#123;</span><br><span class="line">            <span class="built_in">this</span>.params.append(key, <span class="built_in">this</span>.course[key])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.发送请求，保存或修改课程信息</span></span><br><span class="line">        <span class="keyword">return</span> axios.post(<span class="string">&quot;/courseSalesInfo&quot;</span>, <span class="built_in">this</span>.params, config)</span><br><span class="line">            .then(<span class="function">(<span class="params">resp</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(resp.data.status === <span class="string">&quot;0&quot;</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.$message(<span class="string">&quot;保存成功&quot;</span>)</span><br><span class="line">                <span class="built_in">this</span>.$router.back()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.$message.error(<span class="string">&quot;保存失败&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).catch(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.$message.error(error)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件上传</span></span><br><span class="line"><span class="function"><span class="title">onchange</span>(<span class="params">file</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(file != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.params.append(<span class="string">&quot;file&quot;</span>, file.raw, file.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="修改课程营销"><a href="#修改课程营销" class="headerlink" title="修改课程营销"></a>修改课程营销</h3><p>在钩子函数created()中可以判断有没有id，有就是修改，执行回显操作</p>
<h3 id="修改课程状态"><a href="#修改课程状态" class="headerlink" title="修改课程状态"></a>修改课程状态</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将返回的状态字段,封装到对象中 </span></span><br><span class="line"><span class="built_in">Object</span>.assign(item, res.data); </span><br><span class="line"></span><br><span class="line"><span class="comment">//重新加载页面 </span></span><br><span class="line"><span class="built_in">window</span>.location.reload;</span><br></pre></td></tr></table></figure>

<h2 id="课程内容管理页面"><a href="#课程内容管理页面" class="headerlink" title="课程内容管理页面"></a>课程内容管理页面</h2><h3 id="展示课程内容"><a href="#展示课程内容" class="headerlink" title="展示课程内容"></a>展示课程内容</h3><h3 id="新建章节信息"><a href="#新建章节信息" class="headerlink" title="新建章节信息"></a>新建章节信息</h3><h3 id="修改章节信息"><a href="#修改章节信息" class="headerlink" title="修改章节信息"></a>修改章节信息</h3><h3 id="章节状态管理"><a href="#章节状态管理" class="headerlink" title="章节状态管理"></a>章节状态管理</h3><h1 id="项目上线部署发布"><a href="#项目上线部署发布" class="headerlink" title="项目上线部署发布"></a>项目上线部署发布</h1><p>进入Linux系统，检查环境</p>
<ol>
<li><p>查看Java版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li>
<li><p>查看tomcat是否能够正常启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入到tomcat目录 </span><br><span class="line">cd /usr/tomcat/ </span><br><span class="line"></span><br><span class="line"># 启动tomcat </span><br><span class="line">./bin/startup.sh </span><br><span class="line"></span><br><span class="line"># 关闭tomcat </span><br><span class="line">./bin/shutdown.sh</span><br></pre></td></tr></table></figure></li>
<li><p>登录MySQL,检查数库连接是否正常</p>
</li>
<li><p>关闭防火墙，或者开启相关端口</p>
</li>
</ol>
<h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><p>使用SQLYog连接Linux上的MySQL, 导入SQL脚本 创建项目所需的数据库</p>
<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ol>
<li><p>修改项目的数据库配置文件, 数据库的IP ,用户名 密码都要修改.</p>
</li>
<li><p>修改后端保存图片的url</p>
</li>
<li><p>修改后启动项目,测试一下 保证数据库连接没有问题</p>
</li>
<li><p>检查POM文件,打包方式必须是war,编译版本为JDK11</p>
</li>
<li><p>执行打包命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//清除target文件夹 </span><br><span class="line">clean </span><br><span class="line">//打包 ,跳过测试 ,按那个小闪电</span><br><span class="line">package</span><br></pre></td></tr></table></figure></li>
<li><p> 复制出target目录下的 war包，修改成想要的名称</p>
</li>
<li><p>上传到Linux中tomcat中webapps目录下，启动测试（记住创建upload文件夹存放图片）</p>
</li>
<li><p>访问接口：<code>http://Liunx系统ip地址:8080/lagou_edu_home/course?methodName=findCourseList</code></p>
</li>
</ol>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>Linux系统中复制一份tomcat为tomcat2，前端项目放在tomcat2里面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//复制一份tomcat </span><br><span class="line">cp -r /usr/tomcat/ /usr/tomcat2</span><br></pre></td></tr></table></figure>

<p> 修改tomcat2的server.xml 配置文件,修改3个端口,避免与tomcat1冲突<br><a href="https://imgtu.com/i/v9FXQI"><img src="https://s1.ax1x.com/2022/07/28/v9FXQI.png" alt="v9FXQI.png"></a></p>
<p><a href="https://imgtu.com/i/v9kAln"><img src="https://s1.ax1x.com/2022/07/28/v9kAln.png" alt="v9kAln.png"></a></p>
<p>前端项目的配置文件有两个,一个是开发环境的配置文件,一个是生产环境的配置文件. </p>
<ol>
<li><p>我们先修改一下开发环境文件的 后端服务器访问地址,然后进行一下测试（测试）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">env.development 文件 </span><br><span class="line">VUE_APP_API_BASE = http://Liunx系统ip地址:8080/lagou_edu_home</span><br></pre></td></tr></table></figure></li>
<li><p>修改生产环境的配置文件（主要）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//.env.production 文件</span><br><span class="line">VUE_APP_API_BASE = http://Liunx系统ip地址:8080/lagou_edu_home</span><br></pre></td></tr></table></figure></li>
<li><p>修改 <strong>vue.confifig.js</strong> 配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123; </span><br><span class="line">    <span class="comment">// relative path for dev </span></span><br><span class="line">    <span class="attr">publicPath</span>: process.env.NODE_ENV === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;/edu-boss/&quot;</span> : <span class="string">&quot;./&quot;</span>, </span><br><span class="line">    <span class="comment">// for gh-pages </span></span><br><span class="line">    <span class="attr">indexPath</span>: <span class="string">&quot;index.html&quot;</span>, </span><br><span class="line">    <span class="attr">assetsDir</span>: <span class="string">&quot;static&quot;</span>, </span><br><span class="line">    <span class="attr">lintOnSave</span>: process.env.NODE_ENV !== <span class="string">&quot;production&quot;</span>, </span><br><span class="line">    <span class="attr">productionSourceMap</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="attr">css</span>: &#123; </span><br><span class="line">        <span class="comment">// sourceMap: process.env.NODE_ENV !== &#x27;production&#x27; </span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>: &#123; </span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="attr">port</span>: <span class="number">8081</span> </span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p> 执行下面的打包命令，在项目下会生成一个 dist 目录</p>
</li>
</ol>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>可以将生成的dist 目录，放到本地tomcat/webapps中测试一下</p>
</li>
<li><p>验证没有问题后,将list目录改名压缩,上传到Linux系统的tomcat2/webapps后，解压</p>
</li>
</ol>
<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>启动mysql服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>

<p>运行后端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//进入tomcat1,启动项目 </span><br><span class="line">./bin/startup.sh</span><br><span class="line"></span><br><span class="line">//动态查看日志 </span><br><span class="line">tail -f logs/catalina.out</span><br></pre></td></tr></table></figure>

<p>运行前端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//进入tomcat2,启动项目 </span><br><span class="line">./bin/startup.sh </span><br><span class="line"></span><br><span class="line">//动态查看日志 </span><br><span class="line">tail -f logs/catalina.out</span><br></pre></td></tr></table></figure>

<p>关闭防火墙或开启端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service </span><br><span class="line"></span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>浏览器访问前端项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.146.128:8081/edu-boss/</span><br></pre></td></tr></table></figure>

































]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>web</tag>
        <tag>实战项目</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC和XML</title>
    <url>/2022/03/27/JDBC%E5%92%8CXML/</url>
    <content><![CDATA[<p>一篇个人笔记，介绍了java怎么连接mysql数据库等知识。。</p>
<span id="more"></span>

<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p><strong>概念</strong></p>
<p>JDBC(Java Data Base Connectivity) 是 Java 访问数据库的标准规范.是一种用于执行SQL语句的Java API，可以为<br>多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。是Java访问数据库的标准规范.</p>
<p><strong>原理</strong></p>
<p> JDBC是接口，驱动是接口的实现，没有驱动将无法完成数据库连接，从而不能操作数据库！每个数据库厂商都需<br>要提供自己的驱动，用来连接自己公司的数据库，也就是说驱动一般都由数据库生成厂商提供。</p>
<p><a href="https://imgtu.com/i/q0CUNd"><img src="https://s1.ax1x.com/2022/03/27/q0CUNd.png" alt="q0CUNd.png"></a></p>
<p><strong>总结</strong></p>
<p> JDBC就是由sun公司定义的一套操作所有关系型数据库的规则(接口)，而数据库厂商需要实现这套接口,提供数据库<br>驱动jar包, 我们可以使用这套接口编程,真正执行的代码是对应驱动包中的实现类。</p>
<h2 id="JDBC开发"><a href="#JDBC开发" class="headerlink" title="JDBC开发"></a>JDBC开发</h2><p>1，将MySQL驱动包添加到jar包库文件夹中，Myjar文件夹,用于存放当前项目需要的所有jar包<br>包：mysql-connector-java-5.1.37-bin.jar</p>
<p>2，在 idea中 配置jar包库的位置</p>
<p><a href="https://imgtu.com/i/q0PcM6"><img src="https://s1.ax1x.com/2022/03/27/q0PcM6.png" alt="q0PcM6.png"></a></p>
<p>3，项目中, 配置jar包库</p>
<p><a href="https://imgtu.com/i/q0PzJs"><img src="https://s1.ax1x.com/2022/03/27/q0PzJs.png" alt="q0PzJs.png"></a></p>
<p><strong>流程</strong></p>
<p><strong>1，注册驱动（可省略）</strong></p>
<p>JDBC规范定义驱动接口： java.sql.Driver<br>MySql驱动包提供了实现类： com.mysql.jdbc.Driver</p>
<table>
<thead>
<tr>
<th>加载注册驱动的方式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Class.forName(数据库驱动实现类)</td>
<td>加载和注册数据库驱动,数据库驱动由数据库厂商MySql提供   “com.mysql.jdbc.Driver”</td>
</tr>
</tbody></table>
<p>代码：Class.forName(“com.mysql.jdbc.Driver”);</p>
<p><strong>2，获取连接</strong></p>
<p>Connection 接口，代表一个连接对象 ,具体的实现类由数据库的厂商实现<br>使用 DriverManager类的静态方法,getConnection可以获取数据库的连接</p>
<table>
<thead>
<tr>
<th>DriverManager类的静态方法获取连接</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Connection  getConnection(String url, String user, String password)</td>
<td>通过连接字符串和用户名,密码来获取数据库连接对象</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>连接参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>user</td>
<td>登录用户名</td>
</tr>
<tr>
<td>password</td>
<td>登录密码</td>
</tr>
<tr>
<td>url</td>
<td>mySql  URL的格式   jdbc:mysql://localhost:3306/db4?characterEncoding=UTF-8</td>
</tr>
</tbody></table>
<p><a href="https://imgtu.com/i/q0i4mT"><img src="https://s1.ax1x.com/2022/03/27/q0i4mT.png" alt="q0i4mT.png"></a></p>
<p><strong>3，获取语句执行平台Statement</strong></p>
<p>通过Connection 的 createStatement方法 获取sql语句执行对象</p>
<table>
<thead>
<tr>
<th>Connection接口中的方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Statement createStatement()</td>
<td>创建  SQL语句执行对象</td>
</tr>
</tbody></table>
<p><strong>4， 利用语句执行平台Statement，执行语句</strong></p>
<table>
<thead>
<tr>
<th>Statement类 常用方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int executeUpdate(String sql);</td>
<td>执行insert  update delete语句.返回int类型,代表受影响的行  数</td>
</tr>
<tr>
<td>ResultSet executeQuery(String sql);</td>
<td>执行select语句, 返回ResultSet结果集对象</td>
</tr>
</tbody></table>
<p><strong>5，如果是查询语句，需要对ResultSet结果集处理</strong></p>
<table>
<thead>
<tr>
<th>ResultSet接口方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>boolean next()</td>
<td>1) 游标向下一行   2) 返回 boolean 类型，如果还有下一条记录，返回  true，否则返回 false</td>
</tr>
<tr>
<td>xxx getXxx( String or int)</td>
<td>1) 通过列名，参数是 String 类型。返回不同的类型   2) 通过列号，参数是整数，从 1 开始。返回不同的类型</td>
</tr>
</tbody></table>
<p><strong>6，关闭资源</strong></p>
<p>先开的后关，后开的先关。ResultSet ==&gt; Statement ==&gt; Connection</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Connection con = <span class="keyword">null</span>;</span><br><span class="line">    Statement statement = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1，注册驱动（可省略）</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2，获取连接</span></span><br><span class="line">        String s = <span class="string">&quot;jdbc:mysql://localhost:3306/de?characterEncoding=UTF-8&quot;</span>;</span><br><span class="line">        con = DriverManager.getConnection(s, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3，获取语句执行平台Statement</span></span><br><span class="line">        statement = con.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4，通过Statement执行增删改sql语句</span></span><br><span class="line">        String sql = <span class="string">&quot;update account set userName = &#x27;小李&#x27; where id = 1&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> ia = statement.executeUpdate(sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + ia);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5,通过Statement执行查询sql语句，返回结果集ResultSet</span></span><br><span class="line">        sql = <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">        result = statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//处理ResultSet结果集对象</span></span><br><span class="line">        <span class="keyword">while</span>(result.next())&#123;</span><br><span class="line">            <span class="keyword">int</span> id = result.getInt(<span class="string">&quot;id&quot;</span>);     <span class="comment">//参数为字符串，表示字段名称</span></span><br><span class="line">            String bankNo = result.getString(<span class="string">&quot;bankNo&quot;</span>);</span><br><span class="line">            String userName = result.getString(<span class="number">3</span>);  <span class="comment">//参数为数字，表示字段号</span></span><br><span class="line">            <span class="keyword">int</span> money = result.getInt(<span class="number">4</span>);</span><br><span class="line">            System.out.println(id + <span class="string">&quot;:&quot;</span> + bankNo + <span class="string">&quot;:&quot;</span> + userName + <span class="string">&quot;:&quot;</span> + money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//6，关闭资源</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result.close();</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤总结</strong></p>
<ol>
<li>   获取驱动(可以省略)</li>
<li>   获取连接</li>
<li>   获取Statement对象</li>
<li>   Statement对象执行sql</li>
<li>   处理结果集(只在查询时处理)</li>
<li>   释放资源</li>
</ol>
<h2 id="JDBC工具类"><a href="#JDBC工具类" class="headerlink" title="JDBC工具类"></a>JDBC工具类</h2><p>如果一个功能经常要用到，我们建议把这个功能做成一个工具类，可以在不同的地方重用。</p>
<p>“获得数据库连接”操作，将在以后的增删改查所有功能中都存在，可以封装工具类JDBCUtils。提供获取连接对象的方法，从而达到代码的重复利用。</p>
<p>工具类包含的内容</p>
<ol>
<li>   可以把几个字符串定义成常量：用户名，密码，URL，驱动类 </li>
<li>   得到数据库的连接：getConnection() </li>
<li>   关闭所有打开的资源：close()，如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*    JDBC的工具类</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 定义字符串常量, 记录获取连接所需要的信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVERNAME = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/de?characterEncoding=UTF-8&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PWD = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2，注册驱动，static代码块随着类的加载而加载</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(DRIVERNAME);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = DriverManager.getConnection(URL, USER, PWD);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> con;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭资源2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement, ResultSet result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result.close();</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试JDBC工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtilsTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 增删改操作</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span>  <span class="comment">//@Test标注，可以直接执行该方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection con = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">//获取Statement</span></span><br><span class="line">        Statement statement = con.createStatement();</span><br><span class="line">        <span class="comment">//Statement执行sql</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into account values (null, &#x27;555&#x27;, &#x27;老丁&#x27;, 1000)&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> ia = statement.executeUpdate(sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + ia);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        JDBCUtils.close(con, statement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 查询操作</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection con = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">//获取Statement</span></span><br><span class="line">        Statement statement = con.createStatement();</span><br><span class="line">        <span class="comment">//执行sql</span></span><br><span class="line">        String sql = <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">        ResultSet result = statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//处理结果集ResultSet</span></span><br><span class="line">        <span class="keyword">while</span>(result.next())&#123;</span><br><span class="line">            <span class="keyword">int</span> id = result.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            String bankNo = result.getString(<span class="string">&quot;bankNo&quot;</span>);</span><br><span class="line">            String userName = result.getString(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">int</span> money = result.getInt(<span class="number">4</span>);</span><br><span class="line">            System.out.println(id + <span class="string">&quot;:&quot;</span> + bankNo + <span class="string">&quot;:&quot;</span> + userName + <span class="string">&quot;:&quot;</span> + money);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        JDBCUtils.close(con, statement, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><h3 id="sql注入问题"><a href="#sql注入问题" class="headerlink" title="sql注入问题"></a>sql注入问题</h3><p>假设查询用户名tom和密码123</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> jdbc_user <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;tom&#x27;</span> <span class="keyword">AND</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>用户名和密码都匹配才能查询到该用户的信息，假如代码如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> jdbc_user <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;随便填&#x27;</span> <span class="keyword">AND</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;随便填&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这样，一定能查询出结果。</p>
<p>如果这是一个登陆操作,那么用户就登陆成功了.显然这不是我们想要看到的结果</p>
<p><strong>sql注入问题案例</strong></p>
<p>需求：用户在控制台上输入用户名和卡号, 然后使用 Statement 字符串拼接的方式 实现用户的登录。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = JDBCUtils.getConnection();</span><br><span class="line">    <span class="comment">//获取Statement</span></span><br><span class="line">    Statement statement = con.createStatement();</span><br><span class="line">    <span class="comment">//输入用户名，卡号</span></span><br><span class="line">    System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    String user = sc.nextLine();</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入卡号：&quot;</span>);    <span class="comment">//1&#x27; or &#x27;1&#x27; = &#x27;1</span></span><br><span class="line">    String bankNo = sc.nextLine();</span><br><span class="line">    <span class="comment">//sql语句由字符串拼接而成，会引发注入问题</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from account where userName = &#x27;&quot;</span> + user + <span class="string">&quot;&#x27; and bankNo = &#x27;&quot;</span> + bankNo + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">    ResultSet result = statement.executeQuery(sql);</span><br><span class="line">    <span class="comment">//能否查询到</span></span><br><span class="line">    <span class="keyword">if</span>(result.next())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登入成功！欢迎使用&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登入失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    JDBCUtils.close(con, statement, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行程序，输入正确的用户名和卡号，能登入，错误的不能登入。但是用户名随便输入，卡号输入：1’ or ‘1’ = ‘1，依旧能成功登入。因为改变了原来sql的意思。</p>
<h3 id="预处理对象"><a href="#预处理对象" class="headerlink" title="预处理对象"></a>预处理对象</h3><p><strong>PreparedStatement 接口介绍</strong></p>
<ul>
<li>PreparedStatement 是 Statement 接口的子接口，继承于父接口中所有的方法。它是一个预编译的 SQL 语句对象.</li>
<li>预编译:  是指SQL 语句被预编译,并存储在 PreparedStatement 对象中。然后可以使用此对象多次高效地执行该语句</li>
</ul>
<p><strong>PreparedStatement特点</strong></p>
<p>因为有预先编译的功能，提高 SQL 的执行效率。可以有效的防止 SQL 注入的问题，安全性更高</p>
<p><strong>获取PrepareStatement对象</strong></p>
<table>
<thead>
<tr>
<th>Connection  接口中的方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>PreparedStatement  prepareStatement(String sql)</td>
<td>指定预编译的  SQL 语句，   SQL 语句中使用占位符 ? 创建一个语句对象</td>
</tr>
</tbody></table>
<p> <strong>PreparedStatement接口常用方法</strong></p>
<p>设置sql里”?“占位符的值</p>
<table>
<thead>
<tr>
<th>setXxx重载方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void setDouble(int parameterIndex, double x)</td>
<td>将指定参数设置为给定  Java double 值。</td>
</tr>
<tr>
<td>void setInt(int parameterIndex, int x)</td>
<td>将指定参数设置为给定  Java int 值。</td>
</tr>
<tr>
<td>void setString(int parameterIndex, String x)</td>
<td>将指定参数设置为给定  Java String 值。</td>
</tr>
<tr>
<td>void setObject(int parameterIndex, Object x)</td>
<td>使用给定对象设置指定参数的值。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>常用方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int executeUpdate();</td>
<td>执行insert  update delete语句.</td>
</tr>
<tr>
<td>ResultSet executeQuery();</td>
<td>执行select语句. 返回结果集对象  Resulet</td>
</tr>
</tbody></table>
<p>根据上面有sql注入问题的代码进行修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = JDBCUtils.getConnection();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取prepareStatement, ?表示占位符，预输入避免注入问题</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from account where userName = ? and bankNo = ?&quot;</span>;</span><br><span class="line">    PreparedStatement ps = con.prepareStatement(sql);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输入用户名，卡号</span></span><br><span class="line">    System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    String user = sc.nextLine();</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入卡号：&quot;</span>);</span><br><span class="line">    String bankNo = sc.nextLine();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置占位符的值</span></span><br><span class="line">    ps.setString(<span class="number">1</span>, user);</span><br><span class="line">    ps.setString(<span class="number">2</span>, bankNo);</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">    ResultSet result = ps.executeQuery();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//能否查询到</span></span><br><span class="line">    <span class="keyword">if</span>(result.next())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登入成功！欢迎使用&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登入失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    JDBCUtils.close(con, ps, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>原理</strong></p>
<p><a href="https://imgtu.com/i/q0AI78"><img src="https://s1.ax1x.com/2022/03/27/q0AI78.png" alt="q0AI78.png"></a></p>
<p><strong>区别</strong></p>
<p>1，Statement用于执行静态SQL语句，在执行时，必须指定一个事先准备好的SQL语句。</p>
<p>2，PrepareStatement是预编译的SQL语句对象，语句中可以包含动态参数“?”，在执行时可以为“?”动态设置参数值。</p>
<p>3，PrepareStatement可以减少编译次数提高数据库性能</p>
<h2 id="JDBC控制事务"><a href="#JDBC控制事务" class="headerlink" title="JDBC控制事务"></a>JDBC控制事务</h2><p>Connection中的方法实现事务管理</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void setAutoCommit(boolean autoCommit)</td>
<td>参数是  true 或 false  如果设置为 false，表示关闭自动提交，相当于开启事务</td>
</tr>
<tr>
<td>void commit()</td>
<td>提交事务</td>
</tr>
<tr>
<td>void rollback()</td>
<td>回滚事务</td>
</tr>
</tbody></table>
<p><strong>步骤</strong></p>
<ol>
<li>   获取连接 </li>
<li>   开启事务 </li>
<li>   获取到 PreparedStatement , 执行两次更新操作 </li>
<li>   正常情况下提交事务 </li>
<li>   出现异常回滚事务 </li>
<li>   最后关闭资源 </li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Connection con = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        con = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        con.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转账1：小李-500</span></span><br><span class="line">        ps = con.prepareStatement(<span class="string">&quot;update account set money=money-? where userName=?&quot;</span>);</span><br><span class="line">        ps.setInt(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">        ps.setString(<span class="number">2</span>, <span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//假设异常</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转账2：老丁+500</span></span><br><span class="line">        ps = con.prepareStatement(<span class="string">&quot;update account set money=money+? where userName=?&quot;</span>);</span><br><span class="line">        ps.setInt(<span class="number">1</span>, <span class="number">500</span>);</span><br><span class="line">        ps.setString(<span class="number">2</span>, <span class="string">&quot;老丁&quot;</span>);</span><br><span class="line">        ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        con.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//出现异常，回滚事务</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        JDBCUtils.close(con, ps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><p>实际开发中“获得连接”或“释放资源”是非常消耗系统资源的两个过程，为了解决此类性能问题，通常情况我们<br>采用连接池技术，来共享连接Connection。这样我们就不需要每次都创建连接、释放连接了，这些操作都交<br>给了连接池.</p>
<p>优点：用池来管理Connection，这样可以重复使用Connection。 当使用完Connection后，调用Connection的<br>close()方法也不会真的关闭Connection，而是把Connection“归还”给池。</p>
<p>区别：</p>
<p>JDBC方式</p>
<p><a href="https://imgtu.com/i/LPFLgU"><img src="https://s1.ax1x.com/2022/04/09/LPFLgU.png" alt="LPFLgU.png"></a></p>
<p>连接池方式</p>
<p><a href="https://imgtu.com/i/LPFxb9"><img src="https://s1.ax1x.com/2022/04/09/LPFxb9.png" alt="LPFxb9.png"></a></p>
<p>Java为数据库连接池提供了公共的接口：<strong>javax.sql.DataSource</strong>，各个厂商需要让自己的连接池实现这个接口。</p>
<p>这样应用程序可以方便的切换不同厂商的连接池！</p>
<p>常见的连接池有 DBCP连接池, C3P0连接池, Druid连接池。</p>
<h2 id="DBCP连接池"><a href="#DBCP连接池" class="headerlink" title="DBCP连接池"></a>DBCP连接池</h2><p> DBCP也是一个开源的连接池，是Apache成员之一，在企业开发中也比较常见，tomcat内置的连接池。</p>
<p><strong>创建项目，导入jar包</strong></p>
<p><a href="https://imgtu.com/i/LPku5t"><img src="https://s1.ax1x.com/2022/04/09/LPku5t.png" alt="LPku5t.png"></a></p>
<p><strong>编写工具类</strong></p>
<p>Java中提供了一个连接池的规则接口 ： DataSource , 它是java中提供的连接池</p>
<p>在DBCP包中提供了DataSource接口的实现类，我们要用的具体的连接池 BasicDataSource 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  DBCP数据库连接池的工具类</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBCPUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.定义常量 保存数据库连接的相关信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVERNAME = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/de?characterEncoding=UTF-8&amp;rewriteBatchedStatements=true&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PWD = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建连接池对象 (有DBCP提供的实现类)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BasicDataSource dataSource = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.使用静态代码块进行配置</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        dataSource.setDriverClassName(DRIVERNAME);</span><br><span class="line">        dataSource.setUrl(URL);</span><br><span class="line">        dataSource.setUsername(USER);</span><br><span class="line">        dataSource.setPassword(PWD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.获取连接的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.释放资源方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement, ResultSet result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result.close();</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接池对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSources</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = DBCPUtils.getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Statement,并执行sql</span></span><br><span class="line">    PreparedStatement ps = con.prepareStatement(<span class="string">&quot;select * from account where id = ?&quot;</span>);</span><br><span class="line">    ps.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">    ResultSet resultSet = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理结果集</span></span><br><span class="line">    <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">        String userName = resultSet.getString(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    DBCPUtils.close(con, ps, resultSet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>常见的配置项</strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>driverClassName</td>
<td>数据库驱动名称</td>
</tr>
<tr>
<td>url</td>
<td>数据库地址</td>
</tr>
<tr>
<td>username</td>
<td>用户名</td>
</tr>
<tr>
<td>password</td>
<td>密码</td>
</tr>
<tr>
<td>maxActive</td>
<td>最大连接数量</td>
</tr>
<tr>
<td>maxIdle</td>
<td>最大空闲连接</td>
</tr>
<tr>
<td>minIdle</td>
<td>最小空闲连接</td>
</tr>
<tr>
<td>initialSize</td>
<td>初始化连接</td>
</tr>
</tbody></table>
<h2 id="C3P0连接池"><a href="#C3P0连接池" class="headerlink" title="C3P0连接池"></a>C3P0连接池</h2><p>C3P0是一个开源的JDBC连接池,支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate、Spring等。</p>
<p><strong>导入jar包</strong></p>
<p><a href="https://imgtu.com/i/LPkbdA"><img src="https://s1.ax1x.com/2022/04/09/LPkbdA.png" alt="LPkbdA.png"></a></p>
<p><strong>导入配置文件 c3p0-confifig.xml</strong></p>
<p>c3p0-config.xml 文件名不可更改</p>
<p>直接放到src下,也可以放到到资源文件夹中，这里我们 在项目下创建一个resource文件夹(专门存放资源文件)，选择文件夹,右键 将resource文件夹指定为资源文件夹，将文件放在resource目录下即可,创建连接池对象的时候会去加载这个配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--默认配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span>  </span><br><span class="line">	</span><br><span class="line">		<span class="comment">&lt;!-- initialPoolSize：初始化时获取三个连接，</span></span><br><span class="line"><span class="comment">			  取值应在minPoolSize与maxPoolSize之间。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- maxIdleTime：最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdleTime&quot;</span>&gt;</span>60<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- maxPoolSize：连接池中保留的最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">		<span class="comment">&lt;!-- minPoolSize: 连接池中保留的最小连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">		</span><br><span class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">   <span class="comment">&lt;!--配置连接池mysql--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/de?characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>rewriteBatchedStatements=true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdleTime&quot;</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接池2,可以配置多个--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>编写C3P0工具类</strong></p>
<p>C3P0提供的核心工具类ComboPooledDataSource , 如果想使用连接池,就必须创建该类的对象</p>
<p>new ComboPooledDataSource(); 使用 默认配置<br>new ComboPooledDataSource(“mysql”); 使用命名配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建连接池对象 C3P0对DataSource接口的实现类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement, ResultSet resultSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resultSet.close();</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接池对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSources</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = C3P0Utils.getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Statement,并执行sql</span></span><br><span class="line">    PreparedStatement ps = con.prepareStatement(<span class="string">&quot;select * from account where id = ?&quot;</span>);</span><br><span class="line">    ps.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">    ResultSet resultSet = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理结果集</span></span><br><span class="line">    <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">        String userName = resultSet.getString(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    C3P0Utils.close(con, ps, resultSet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常见配置</p>
<p><a href="https://imgtu.com/i/LPAYQO"><img src="https://s1.ax1x.com/2022/04/09/LPAYQO.png" alt="LPAYQO.png"></a></p>
<h2 id="Druid连接池"><a href="#Druid连接池" class="headerlink" title="Druid连接池"></a>Druid连接池</h2><p> Druid（德鲁伊）是阿里巴巴开发的号称为监控而生的数据库连接池，Druid是目前最好的数据库连接池。在功<br>能、性能、扩展性方面，都超过其他数据库连接池，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行<br>情况。</p>
<p><strong>导入jar包</strong></p>
<p><a href="https://imgtu.com/i/LPABFI"><img src="https://s1.ax1x.com/2022/04/09/LPABFI.png" alt="LPABFI.png"></a></p>
<p><strong>导入配置文件</strong></p>
<p>是properties形式的<br>可以叫任意名称，可以放在任意目录下,我们统一放到 resources资源目录</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/de?characterEncoding=UTF-8&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure>

<p><strong>编写Druid工具类</strong></p>
<p>获取数据库连接池对象：</p>
<p>​        通过工厂类来获取, DruidDataSourceFactory类的createDataSource方法<br>​        createDataSource(Properties p) 方法参数可以是一个属性集对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.定义成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//3.创建属性集对象</span></span><br><span class="line">            Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//4.加载配置文件 Druid 连接池不能够主动加载配置文件 ,需要指定文件</span></span><br><span class="line">            InputStream inputStream = DruidUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">            <span class="comment">//5. 使用Properties对象的 load方法 从字节流中读取配置信息</span></span><br><span class="line">            p.load(inputStream);</span><br><span class="line">            <span class="comment">//6. 通过工厂类获取连接池对象</span></span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(p);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement, ResultSet resultSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resultSet.close();</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接池对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSources</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = DruidUtils.getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Statement,并执行sql</span></span><br><span class="line">    PreparedStatement ps = con.prepareStatement(<span class="string">&quot;select * from account where id = ?&quot;</span>);</span><br><span class="line">    ps.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">    ResultSet resultSet = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理结果集</span></span><br><span class="line">    <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">        String userName = resultSet.getString(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    DruidUtils.close(con, ps, resultSet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h1><p>使用JDBC我们发现冗余的代码太多了,为了简化开发 我们选择使用 DbUtils</p>
<p> Commons DbUtils是Apache组织提供的一个对JDBC进行简单封装的开源工具类库，使用它能够简化JDBC应用程<br>序的开发，同时也不会影响程序的性能。</p>
<p>导入jara包：DBUtils就是JDBC的简化开发工具包。需要项目导入commons-dbutils-1.6.jar。</p>
<p><strong>核心功能</strong></p>
<ol>
<li>QueryRunner 中提供对sql语句操作的API.</li>
<li>ResultSetHandler接口，用于定义select操作后，怎样封装结果集. </li>
<li>DbUtils类,他就是一个工具类,定义了关闭资源与事务处理相关方法.</li>
</ol>
<p><strong>相关知识介绍</strong></p>
<p><strong>表和类之间的关系：</strong></p>
<ul>
<li>整个表可以看做是一个类</li>
<li>表中的一列,对应类中的一个成员属性</li>
<li>表中的一行记录,对应一个类的实例(对象)</li>
</ul>
<p><a href="https://imgtu.com/i/LPEGAs"><img src="https://s1.ax1x.com/2022/04/09/LPEGAs.png" alt="LPEGAs.png"></a></p>
<p><strong>JavaBean组件</strong></p>
<p>JavaBean 就是一个类, 开发中通常用于封装数据,有一下特点</p>
<ol>
<li>需要实现 序列化接口, Serializable (暂时可以省略)</li>
<li> 提供私有字段: private 类型 变量名; </li>
<li>提供共有的 getter 和 setter</li>
<li>提供 空参构造</li>
</ol>
<p>创建Account类和数据库的Account表对应，我们可以创建一个 entity包,专门用来存放 JavaBean类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * account表对应的JavaBean类</span></span><br><span class="line"><span class="comment"> * 规则：</span></span><br><span class="line"><span class="comment"> * 1. 需要实现 序列化接口, Serializable (暂时可以省略) </span></span><br><span class="line"><span class="comment"> * 2. 提供私有字段: private 类型 变量名; </span></span><br><span class="line"><span class="comment"> * 3. 提供 getter 和 setter</span></span><br><span class="line"><span class="comment"> * 4. 提供 空参构造</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供私有字段: private 类型 变量名;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String bankNo;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供 getter 和 setter</span></span><br><span class="line">	<span class="comment">// ...............</span></span><br><span class="line">    <span class="comment">//...... </span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, bankNo=&#x27;&quot;</span> + bankNo + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h2><p><strong>QueryRunner核心类</strong></p>
<p>构造方法：</p>
<p>QueryRunner()，手动模式<br>QueryRunner(DataSource ds) ,参数：数据源（连接池对象），DBUtils底层自动维护连接connection，自动模式</p>
<p>常用方法：</p>
<p>update(Connection con, String sql, Object… params) ，用来完成表数据的增加、删除、更新操作</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Connection con</td>
<td>数据库连接对象, 自动模式创建QueryRun  可以不传 ,手动模式必须传递</td>
</tr>
<tr>
<td>String sql</td>
<td>占位符形式的SQL ,使用 ?  号占位符</td>
</tr>
<tr>
<td>Object… param</td>
<td>Object类型的 可变参,用来设置占位符上的参数</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 增</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1，获取QueryRunner对象，手动模式，无参构造方法</span></span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2，QureyRunner对象的update方法执行增删改sql</span></span><br><span class="line">    <span class="comment">//参数：连接对象</span></span><br><span class="line">    Connection con = DruidUtils.getConnection();</span><br><span class="line">    <span class="comment">//参数：sql语句</span></span><br><span class="line">    String sql = <span class="string">&quot;insert into account values (?, ?, ?, ?)&quot;</span>;</span><br><span class="line">    <span class="comment">//参数：设置sql占位符的参数</span></span><br><span class="line">    Object[] param = &#123;<span class="number">10</span>, <span class="string">&quot;1515&quot;</span>, <span class="string">&quot;老丁&quot;</span>, <span class="number">1500</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    qr.update(con, sql, param);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 删</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1，获取QueryRunner对象，自动模式，有参构造方法，参数:数据库连接池对象</span></span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSources());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2，QureyRunner对象的update方法执行增删改sql</span></span><br><span class="line">    <span class="comment">//参数：sql语句</span></span><br><span class="line">    String sql = <span class="string">&quot;delete from account where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    qr.update(sql, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 改</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1，获取QueryRunner对象，自动模式，有参构造方法，参数:数据库连接池对象</span></span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSources());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2，QureyRunner对象的update方法执行增删改sql</span></span><br><span class="line">    <span class="comment">//参数：sql语句</span></span><br><span class="line">    String sql = <span class="string">&quot;update account set userName = ? where id = ?&quot;</span>;</span><br><span class="line">    <span class="comment">//参数：设置sql占位符的参数</span></span><br><span class="line">    Object[] param = &#123;<span class="string">&quot;老鸟&quot;</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    qr.update(sql, param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><p>QueryRunner核心类的query(Connection con, String sql, ResultSetHandler<T> rsh, Object… params) 方法，用来完成表数据的查询操作</p>
<p><strong>ResultSetHandler接口</strong></p>
<p>ResultSetHandler可以对查询出来的ResultSet结果集进行处理，达到一些业务上的需求。</p>
<p><strong>ResultSetHandler 结果集处理类</strong></p>
<table>
<thead>
<tr>
<th>ResultSetHandler  实现类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>ArrayHandler</strong></td>
<td>将结果集中的第一条记录封装到一个Object[]数组中，数组中的每一个元素就是这条记录中的每一个字段的值</td>
</tr>
<tr>
<td><strong>ArrayListHandler</strong></td>
<td>将结果集中的每一条记录都封装到一个Object[]数组中，将这些数组在封装到List集合中。</td>
</tr>
<tr>
<td><strong>BeanHandler</strong></td>
<td>将结果集中第一条记录封装到一个指定的javaBean中.</td>
</tr>
<tr>
<td><strong>BeanListHandler</strong></td>
<td>将结果集中每一条记录封装到指定的javaBean中，再将这些javaBean在封装到List  集合中</td>
</tr>
<tr>
<td>ColumnListHandler</td>
<td>将结果集中指定的列的字段值，封装到一个List集合中</td>
</tr>
<tr>
<td>KeyedHandler</td>
<td>将结果集中每一条记录封装到Map&lt;String,Object&gt;,在将这个map集合做为另一个  Map的value,另一个Map集合的key是指定的字段的值。</td>
</tr>
<tr>
<td><strong>MapHandler</strong></td>
<td>将结果集中第一条记录封装到了Map&lt;String,Object&gt;集合中，key就是字段名称，  value就是字段值</td>
</tr>
<tr>
<td>MapListHandler</td>
<td>将结果集中每一条记录封装到了Map&lt;String,Object&gt;集合中，key就是字段名称，  value就是字段值，在将这些Map封装到List集合中。</td>
</tr>
<tr>
<td><strong>ScalarHandler</strong></td>
<td>它是用于封装单个数据。例如  select count(*) from 表操作。</td>
</tr>
</tbody></table>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动模式创建QueryRunner对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSources());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//查询id为5的记录,封装到数组中</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from account where id = ?&quot;</span>;</span><br><span class="line">    Object[] array = qr.query(sql, <span class="keyword">new</span> ArrayHandler(), <span class="number">5</span>);</span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    System.out.println(Arrays.toString(array)); <span class="comment">//[5, 119, 李四(买家), 1100]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有数据,封装到List集合中</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">    List&lt;Object[]&gt; list = qr.query(sql, <span class="keyword">new</span> ArrayListHandler());</span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    <span class="keyword">for</span>(Object[] array : list)&#123;</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//查询id为5的记录,封装到指定JavaBean中</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from account where id = ?&quot;</span>;</span><br><span class="line">    Account account = qr.query(sql, <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account.class), <span class="number">5</span>);</span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    System.out.println(account);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有数据,封装到JavaBean中再封装到List集合中</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">    List&lt;Account&gt; list = qr.query(sql,<span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account.class));</span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    <span class="keyword">for</span>(Account account:list)&#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">// 查询姓名是 小李的信息,将结果封装到Map集合中</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from account where userName = ?&quot;</span>;</span><br><span class="line">    Map&lt;String, Object&gt; map = qr.query(sql, <span class="keyword">new</span> MapHandler(), <span class="string">&quot;小李&quot;</span>);</span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有用户的money总合</span></span><br><span class="line">    String sql = <span class="string">&quot;select SUM(money) from account&quot;</span>;</span><br><span class="line">    Object obj = qr.query(sql, <span class="keyword">new</span> ScalarHandler());</span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    <span class="keyword">int</span> money = Integer.parseInt(obj.toString());</span><br><span class="line">    System.out.println(money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h1><p>批处理指的是一次操作中执行多条SQL语句，批处理相比于一次一次执行效率会提高很多。</p>
<p>当向数据库中添加大量的数据时，需要用到批处理。</p>
<p><strong>实现批处理</strong></p>
<p>Statement和PreparedStatement都支持批处理操作，这里我们介绍一下PreparedStatement的批处理方式：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void addBatch()</td>
<td>将给定的 SQL 命令添加到此  Statement 对象的当前命令列表中。   通过调用方法 executeBatch  可以批量执行此列表中的命令。</td>
</tr>
<tr>
<td>int[] executeBatch()</td>
<td>每次提交一批命令到数据库中执行，如果所有的命令都成功执行了，那么返回一个数组，这个数组是说明每条命令所影响的行数</td>
</tr>
</tbody></table>
<p>mysql 批处理是默认关闭的，所以需要加一个参数才打开mysql 数据库批处理，在url中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rewriteBatchedStatements=true </span><br><span class="line">例如: url=jdbc:mysql://127.0.0.1:3306/db5?characterEncoding=UTF-8&amp;rewriteBatchedStatements=true</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = DruidUtils.getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取prepareStatement</span></span><br><span class="line">    PreparedStatement ps = con.prepareStatement(<span class="string">&quot;insert into testbatch (uname) values (?)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置占位符，并添加到批处理</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i&lt;=<span class="number">10000</span>; i++)&#123;</span><br><span class="line">        ps.setString(<span class="number">1</span>, <span class="string">&quot;小强&quot;</span>+i);</span><br><span class="line">        ps.addBatch();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行批处理</span></span><br><span class="line">    ps.executeBatch();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(end-start);    <span class="comment">//103</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><p>除了表之外的数据都是元数据,可以分为三类</p>
<ul>
<li>查询结果信息： UPDATE 或 DELETE语句 受影响的记录数。</li>
<li>数据库和数据表的信息： 包含了数据库及数据表的结构信息。</li>
<li>MySQL服务器信息： 包含了数据库服务器的当前状态，版本号等。</li>
</ul>
<p><strong>获取mysql元数据相关命令</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 元数据相关的命令介绍 </span></span><br><span class="line"><span class="keyword">select</span> version(); 获取mysql服务器的版本信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> status; 查看服务器的状态信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> columns <span class="keyword">from</span> table_name; 显示表的字段信息等，和<span class="keyword">desc</span> table_name一样</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> table_name; 显示数据表的详细索引信息，包括<span class="keyword">PRIMARY</span> KEY（主键）</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> databases:列出所有数据库</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables : 显示当前数据库的所有表</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> database(): 获取当前的数据库名</span><br></pre></td></tr></table></figure>

<h2 id="使用JDBC获取元数据"><a href="#使用JDBC获取元数据" class="headerlink" title="使用JDBC获取元数据"></a>使用JDBC获取元数据</h2><p>通过JDBC 也可以获取到元数据,比如数据库的相关信息,或者当我们使用程序查询一个不熟悉的表时, 我们可以通过<br>获取元素据信息,了解表中有多少个字段,字段的名称 和 字段的类型.</p>
<p><strong>JDBC中描述元数据的类</strong></p>
<table>
<thead>
<tr>
<th>元数据类</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>DatabaseMetaData</td>
<td>描述数据库的元数据对象</td>
</tr>
<tr>
<td>ResultSetMetaData</td>
<td>描述结果集的元数据对象</td>
</tr>
</tbody></table>
<p><strong>获取元数据类对象的方法</strong></p>
<p>getMetaData ()</p>
<p>connection 连接对象, 调用 getMetaData () 方法,获取的是DatabaseMetaData 数据库元数据对象<br>PrepareStatement 预处理对象调用 getMetaData () , 获取的是ResultSetMetaData , 结果集元数据对象</p>
<h2 id="DatabaseMetaData"><a href="#DatabaseMetaData" class="headerlink" title="DatabaseMetaData"></a>DatabaseMetaData</h2><table>
<thead>
<tr>
<th>方法说明</th>
</tr>
</thead>
<tbody><tr>
<td>getURL() : 获取数据库的URL</td>
</tr>
<tr>
<td>getUserName(): 获取当前数据库的用户名</td>
</tr>
<tr>
<td>getDatabaseProductName(): 获取数据库的产品名称</td>
</tr>
<tr>
<td>getDatabaseProductVersion(): 获取数据的版本号</td>
</tr>
<tr>
<td>getDriverName():  返回驱动程序的名称</td>
</tr>
<tr>
<td>isReadOnly():  判断数据库是否只允许只读 true 代表只读</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDatabaseMetaData</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = DruidUtils.getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接对象获取数据元getMetaData()，将会是DatabaseMetaData对象</span></span><br><span class="line">    DatabaseMetaData metaData = con.getMetaData();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取元数据相关信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;数据库的url: &quot;</span> + metaData.getURL());</span><br><span class="line">    System.out.println(<span class="string">&quot;数据库用户名：&quot;</span> + metaData.getUserName());</span><br><span class="line">    System.out.println(<span class="string">&quot;数据库版本好：&quot;</span> + metaData.getDatabaseProductVersion());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ResultSetMetaData"><a href="#ResultSetMetaData" class="headerlink" title="ResultSetMetaData"></a>ResultSetMetaData</h2><table>
<thead>
<tr>
<th>方法说明</th>
</tr>
</thead>
<tbody><tr>
<td>getColumnCount()  : 当前结果集共有多少列</td>
</tr>
<tr>
<td>getColumnName(int  i) : 获取指定列号的列名, 参数是整数 从1开始</td>
</tr>
<tr>
<td>getColumnTypeName(int  i): 获取指定列号列的类型, 参数是整数 从1开始</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testResultSetMetaData</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = DruidUtils.getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取prepareStatement预处理</span></span><br><span class="line">    PreparedStatement ps = con.prepareStatement(<span class="string">&quot;select * from account&quot;</span>);</span><br><span class="line">    ps.executeQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//PrepaerdStatement对象获取的元数据getMetaData()，将是ResultSetMetaData对象</span></span><br><span class="line">    ResultSetMetaData metaData = ps.getMetaData();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取元数据相关信息</span></span><br><span class="line">    <span class="keyword">int</span> count = metaData.getColumnCount();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=count; i++)&#123;</span><br><span class="line">        String name = metaData.getColumnName(i);</span><br><span class="line">        String nameType = metaData.getColumnTypeName(i);</span><br><span class="line">        System.out.println(<span class="string">&quot;列名：&quot;</span> + name + <span class="string">&quot;，类型：&quot;</span> + nameType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>XML即可扩展标记语言（Extensible Markup Language）</p>
<p>W3C在1998年2月发布1.0版本，2004年2月又发布1.1版本，但因为1.1版本不能向下兼容1.0版<br>本，所以1.1没有人用。同时，在2004年2月W3C又发布了1.0版本的第三版。我们要学习的还是<br>1.0版本 !</p>
<p><strong>特点</strong>：</p>
<p>可扩展的, 标签都是自定义的<br>语法十分严格</p>
<p><strong>作用：</strong></p>
<table>
<thead>
<tr>
<th><strong>功能</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>存储数据</td>
<td>通常，我们在数据库中存储数据。不过，如果希望数据的可移植性更强，我们可以把数据存储  XML 文件中</td>
</tr>
<tr>
<td><strong>配置文件</strong></td>
<td>作为各种技术框架的配置文件使用 (多)</td>
</tr>
<tr>
<td>在网络中传输</td>
<td>客户端可以使用XML格式向服务器端发送数据,服务器接收到xml格式数据,进行解析</td>
</tr>
</tbody></table>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><strong>XML文档声明格式</strong></p>
<p>文档声明必写在第一行；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br></pre></td></tr></table></figure>

<p>versioin：指定XML文档版本。必须属性，因为我们不会选择1.1，只会选择1.0；<br>encoding：指定当前文档的编码。可选属性，默认值是utf-8；</p>
<p><strong>元素</strong></p>
<p>Element 元素: 是XML文档中最重要的组成部分</p>
<p>元素的命名规则</p>
<ul>
<li>不能使用空格，不能使用冒号</li>
<li>xml 标签名称区分大小写</li>
<li>XML 必须有且只有一个根元素</li>
</ul>
<p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;users&gt;&lt;/users&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;close/&gt;</span><br></pre></td></tr></table></figure>

<p>元素体内部可以是元素，也可以是文本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;hello&gt; </span><br><span class="line">	&lt;a&gt;你好&lt;/a&gt; </span><br><span class="line">&lt;/hello&gt;</span><br></pre></td></tr></table></figure>



<p><strong>属性</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;&quot; class=&quot;&quot;&gt; &lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>属性是元素的一部分，它必须出现在元素的开始标签中</li>
<li>属性的定义格式：属性名=属性值，其中属性值必须使用单引或双引</li>
<li>一个元素可以有0~N个属性，但一个元素中不能出现同名属性</li>
<li>属性名不能使用空格、冒号等特殊字符，且必须以字母开头</li>
</ol>
<p><strong>注释</strong></p>
<p>XML的注释，以<code>&lt;!--</code>开始，以<code>--&gt;</code>结束。注释内容会被XML解析器忽略！</p>
<p><strong>例如使用xml描述表中的数据</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>15<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>老六<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>60<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="XML约束"><a href="#XML约束" class="headerlink" title="XML约束"></a>XML约束</h2><p>在XML技术里，可以编写一个文档来约束一个XML文档的书写规范，这称之为XML约束。</p>
<p>常见的xml约束：</p>
<ul>
<li><p>DTD</p>
</li>
<li><p>Schema</p>
</li>
</ul>
<p>作为程序员只要掌握两点：</p>
<ul>
<li>会阅读约束文档</li>
<li>会引入约束文档</li>
<li>根据约束文档规范编写xml</li>
<li>不用自己编写约束文档</li>
</ul>
<p><a href="https://imgtu.com/i/LIsre1"><img src="https://s1.ax1x.com/2022/04/25/LIsre1.png" alt="LIsre1.png"></a></p>
<h3 id="DTD约束"><a href="#DTD约束" class="headerlink" title="DTD约束"></a>DTD约束</h3><p>DTD（Document Type Defifinition），文档类型定义，用来约束XML文档。规定XML文档中元素的名<br>称，子元素的名称及顺序，元素的属性等。</p>
<p>开发中，我们不会自己编写DTD约束文档。<br>常情况我们都是通过框架提供的DTD约束文档，编写对应的XML文档。常见框架使用DTD约束有：<br>Struts2、hibernate等。</p>
<p>例子：</p>
<p>DTD约束student1.dtd如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT students (student+) &gt;</span><br><span class="line">        &lt;!ELEMENT student (name,age,sex)&gt;</span><br><span class="line">        &lt;!ELEMENT name (#PCDATA)&gt;</span><br><span class="line">        &lt;!ELEMENT age (#PCDATA)&gt;</span><br><span class="line">        &lt;!ELEMENT sex (#PCDATA)&gt;</span><br><span class="line">        &lt;!ATTLIST student number ID #REQUIRED&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">    1，ELEMENT: 用来定义元素</span><br><span class="line">    students (student+):表示根元素是students，并且有多个student子元素</span><br><span class="line">    student (name,age,sex):表示student元素的子元素有name,age,sex</span><br><span class="line">    name (#PCDATA):name元素的内容是文本</span><br><span class="line"></span><br><span class="line">    2，ATTLIST：用来定义属性</span><br><span class="line">    student number ID #REQUIRED：student元素有number属性，</span><br><span class="line">    ID：唯一 值只能是字母或者下划线开头</span><br><span class="line">    #REQUIRED：非空</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<p>本地引入DTD约束并编写XML</p>
<p>引入语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名 SYSTEM &quot;约束文档路径&quot;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">students</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;student1.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>老王<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>老李<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>60<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Schema约束"><a href="#Schema约束" class="headerlink" title="Schema约束"></a>Schema约束</h3><ul>
<li>Schema是新的XML文档约束, 比DTD强大很多，是DTD 替代者；</li>
<li>Schema本身也是XML文档，但Schema文档的扩展名为xsd，而不是xml。 </li>
<li> Schema 功能更强大，内置多种简单和复杂的数据类型</li>
<li>Schema 支持命名空间 (一个XML中可以引入多个约束文档)</li>
</ul>
<p>例子：</p>
<p>Schema约束文档 ”student2.xsd“ 如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.de.com/xml&quot;</span>                    </span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.de.com/xml&quot;</span> <span class="attr">elementFormDefault</span>=<span class="string">&quot;qualified&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span> <span class="attr">type</span>=<span class="string">&quot;studentsType&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">&quot;studentsType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">type</span>=<span class="string">&quot;studentType&quot;</span> <span class="attr">minOccurs</span>=<span class="string">&quot;0&quot;</span> <span class="attr">maxOccurs</span>=<span class="string">&quot;unbounded&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">&quot;studentType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;ageType&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;sexType&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">type</span>=<span class="string">&quot;numberType&quot;</span> <span class="attr">use</span>=<span class="string">&quot;required&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">&quot;sexType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">&quot;ageType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:integer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:minInclusive</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:maxInclusive</span> <span class="attr">value</span>=<span class="string">&quot;200&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">&quot;numberType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">&quot;hehe_\d&#123;4&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/LIccF0"><img src="https://s1.ax1x.com/2022/04/25/LIccF0.png" alt="LIccF0.png"></a></p>
<p><strong>XML引入Schema约束步骤：</strong></p>
<p>1，查看schema文档，找到根元素，在xml中写出来</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，根元素来自哪个命名空间。使用<strong>xmlns</strong>指令来声明，引入 w3c的标准命名空间, 复制即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">students</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://www.de.com/xml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>完整代码如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://www.de.com/xml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;hehe_0001&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>老李<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>50<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>female<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;hehe_0002&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>老六<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>200<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h2><p>当将数据存储在XML后，我们就希望通过程序获得XML的内容。如果我们使用Java基础所学习的IO知<br>识是可以完成的，不过你需要非常繁琐的操作才可以完成，且开发中会遇到不同问题（只读、读写）。<br>人们为不同问题提供不同的解析方式，并提交对应的解析器，方便开发人员操作XML。</p>
<p><strong>XML解析方式</strong></p>
<ul>
<li>DOM：要求解析器把整个XML文档装载到内存，并解析成一个Document对象。<ul>
<li>优点：元素与元素之间保留结构关系，故可以进行增删改查操作。</li>
<li>缺点：XML文档过大，可能出现内存溢出显现。</li>
</ul>
</li>
<li>SAX：是一种速度更快，更有效的方法。它逐行扫描文档，一边扫描一边解析。并以事件驱动的方<br>式进行具体解析，每执行一行，都将触发对应的事件。（了解）<ul>
<li>优点：占用内存少 处理速度快，可以处理大文件</li>
<li>缺点：只能读，逐行后将释放资源。</li>
</ul>
</li>
</ul>
<p><a href="https://imgtu.com/i/LI2Z8K"><img src="https://s1.ax1x.com/2022/04/25/LI2Z8K.png" alt="LI2Z8K.png"></a></p>
<p><strong>常见的解析器</strong></p>
<p>解析器：就是根据不同的解析方式提供的具体实现。有的解析器操作过于繁琐，为了方便开发人员，<br>有提供易于操作的解析开发包</p>
<ul>
<li>JAXP：sun公司提供的解析器，支持DOM和SAX两种思想</li>
<li><strong>DOM4J</strong>：一款非常优秀的解析器 , Dom4j是一个易用的、开源的库，用于XML，XPath和XSLT。<br>它应用于Java平台，采用了Java集合框架并完全支持DOM，SAX和JAXP。</li>
<li>Jsoup：jsoup 是一款Java 的HTML解析器 ,也可以解析XML</li>
<li>PULL：Android内置的XML解析方式，类似SAX。</li>
</ul>
<h3 id="DOM4J的使用"><a href="#DOM4J的使用" class="headerlink" title="DOM4J的使用"></a>DOM4J的使用</h3><p><strong>导入包</strong></p>
<p>dom4j-1.6.1.jar</p>
<p><strong>API的使用</strong></p>
<p>使用核心类SaxReader加载xml文档获得Document，通过Document 对象获得文档的根元素，然后就<br>可以操作了</p>
<ul>
<li>SaxReader对象：<br>read(…) 加载执行xml文档</li>
<li>Document对象：<br>getRootElement() 获得根元素</li>
<li>Element对象：<br>elements(…) 获得指定名称的所有子元素。可以不指定名称<br>element(…) 获得指定名称的第一个子元素。可以不指定名称<br>getName() 获得当前元素的元素名<br>attributeValue(…) 获得指定属性名的属性值<br>elementText(…) 获得指定名称子元素的文本值<br>getText() 获得当前元素的文本内容</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取XML解析对象</span></span><br><span class="line">    SAXReader sr = <span class="keyword">new</span> SAXReader();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.解析XML 获取 文档对象 document</span></span><br><span class="line">    Document document = sr.read(<span class="string">&quot;D:\\projects\\JDBC_work\\src\\org\\de\\Test4\\student2.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取根元素</span></span><br><span class="line">    Element rootElement = document.getRootElement();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取元素名</span></span><br><span class="line">    System.out.println(rootElement.getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有子元素</span></span><br><span class="line">    List&lt;Element&gt; elements = rootElement.elements();</span><br><span class="line">    <span class="keyword">for</span>(Element element : elements)&#123;</span><br><span class="line">        System.out.println(element.getName());</span><br><span class="line">        System.out.println(element.attributeValue(<span class="string">&quot;number&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="xpath读取xml"><a href="#xpath读取xml" class="headerlink" title="xpath读取xml"></a>xpath读取xml</h3><p>XPath 是一门在 XML 文档中查找信息的语言。 可以是使用xpath查找xml中的内容。</p>
<p>优点：</p>
<p>由于DOM4J在解析XML时只能一层一层解析，所以当XML文件层数过多时使用会很不方便，结合<br>XPATH就可以直接获取到某个元素</p>
<p><strong>导入包</strong><br>jaxen-1.1-beta-6.jar</p>
<p><strong>基本语法，路径表达式</strong></p>
<table>
<thead>
<tr>
<th><strong>语法</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>/AAA/DDD/BBB</td>
<td>表示一层一层的，AAA下面  DDD下面的BBB</td>
</tr>
<tr>
<td>//BBB</td>
<td>表示和这个名称相同，表示只要名称是BBB，都得到</td>
</tr>
<tr>
<td>//*</td>
<td>所有元素</td>
</tr>
<tr>
<td>BBB[1] ,  BBB[last()]</td>
<td>第一种表示第一个BBB元素, 第二种表示  后一个BBB元素</td>
</tr>
<tr>
<td>//BBB[@id]</td>
<td>表示只要BBB元素上面有id属性，都得到</td>
</tr>
<tr>
<td>//BBB[@id=’b1’]</td>
<td>表示元素名称是BBB,在BBB上面有id属性，并且id的属性值是b1</td>
</tr>
</tbody></table>
<p><strong>API介绍</strong></p>
<ul>
<li>selectSingleNode(query): 查找和 XPath 查询匹配的一个节点。<br>参数是Xpath 查询串。</li>
<li>selectNodes(query): 得到的是xml根节点下的所有满足 xpath 的节点；<br>参数是Xpath 查询串。</li>
<li>Node: 节点对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取XML解析对象</span></span><br><span class="line">    SAXReader sr = <span class="keyword">new</span> SAXReader();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.解析XML 获取 文档对象 document</span></span><br><span class="line">    Document document = sr.read(<span class="string">&quot;D:\\projects\\JDBC_work\\src\\org\\de\\Test4\\student1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取单个节点，第二个学生的信息</span></span><br><span class="line">    Node nodeNumber = document.selectSingleNode(<span class="string">&quot;/students/student[2]/attribute::number&quot;</span>);</span><br><span class="line">    System.out.println(nodeNumber.getText());</span><br><span class="line">    </span><br><span class="line">    Node nodeName = document.selectSingleNode(<span class="string">&quot;/students/student[2]/name&quot;</span>);</span><br><span class="line">    System.out.println(nodeName.getText());</span><br><span class="line">    </span><br><span class="line">    Node nodeAge = document.selectSingleNode(<span class="string">&quot;/students/student[2]/age&quot;</span>);</span><br><span class="line">    System.out.println(nodeAge.getText());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取XML解析对象</span></span><br><span class="line">    SAXReader sr = <span class="keyword">new</span> SAXReader();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.解析XML 获取 文档对象 document</span></span><br><span class="line">    Document document = sr.read(<span class="string">&quot;D:\\projects\\JDBC_work\\src\\org\\de\\Test4\\student1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取多个节点,第一个学生的信息</span></span><br><span class="line">    List&lt;Node&gt; nodes = document.selectNodes(<span class="string">&quot;/students/student[1]/*&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(Node node : nodes)&#123;</span><br><span class="line">        System.out.println(node.getName() + <span class="string">&quot; = &quot;</span> + node.getText());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JDBC自定义XML"><a href="#JDBC自定义XML" class="headerlink" title="JDBC自定义XML"></a>JDBC自定义XML</h2><p>原来我们写JDBCUtils工具类时，数据库的配置信息是直接保存在工具类中，现在我们将数据库的配置信息保存在xml文件中。</p>
<p>1，创建自定义xml 文件, 保存 数据库连接信息，jdbc-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdbc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DRIVERNAME&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;URL&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/de?characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>rewriteBatchedStatements=true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;USER&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;PASSWORD&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbc</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，编写工具类 ,使用xpath 读取xml文件中的数据库配置信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1,定义成员变量存放配置信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String DRIVERNAME;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String URL;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String USER;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String PASSWORD;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2，在静态代码块中，解析xml文件的配置信息</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1,解析xml文件</span></span><br><span class="line">            SAXReader sr = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            Document document = sr.read(<span class="string">&quot;D:\\projects\\JDBC_work\\resources\\jdbc-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Node node = document.selectSingleNode(<span class="string">&quot;/jdbc/property[@name=&#x27;DRIVERNAME&#x27;]&quot;</span>);</span><br><span class="line">            DRIVERNAME = node.getText();</span><br><span class="line">            node = document.selectSingleNode(<span class="string">&quot;/jdbc/property[@name=&#x27;URL&#x27;]&quot;</span>);</span><br><span class="line">            URL = node.getText();</span><br><span class="line">            node = document.selectSingleNode(<span class="string">&quot;/jdbc/property[@name=&#x27;USER&#x27;]&quot;</span>);</span><br><span class="line">            USER = node.getText();</span><br><span class="line">            node = document.selectSingleNode(<span class="string">&quot;/jdbc/property[@name=&#x27;PASSWORD&#x27;]&quot;</span>);</span><br><span class="line">            PASSWORD = node.getText();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2，注册驱动</span></span><br><span class="line">            Class.forName(DRIVERNAME);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接的方法</span></span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源的方法</span></span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1><h2 id="商城案例表设计"><a href="#商城案例表设计" class="headerlink" title="商城案例表设计"></a>商城案例表设计</h2><p>通过对商城项目的部分表关系进行分析,完成数据库表的设计</p>
<p><a href="https://imgtu.com/i/L7RS3t"><img src="https://s1.ax1x.com/2022/04/26/L7RS3t.png" alt="L7RS3t.png"></a></p>
<p><strong>建库,建表</strong></p>
<ol>
<li>创建名为 store的数据库, 对应商城项目</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database db6 character set utf8;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建用户表</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE user (</span><br><span class="line">  uid varchar(32) PRIMARY KEY,	-- 用户ID</span><br><span class="line">  username varchar(20) , -- 用户名</span><br><span class="line">  password varchar(20) , -- 密码</span><br><span class="line">  telephone varchar(20) , -- 电话</span><br><span class="line">  birthday date , -- 生日</span><br><span class="line">  sex varchar(10) -- 性别</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO USER VALUES </span><br><span class="line">(&#x27;001&#x27;,&#x27;渣渣辉&#x27;,&#x27;123456&#x27;,&#x27;13511112222&#x27;,&#x27;2015-11-04&#x27;,&#x27;男&#x27;),</span><br><span class="line">(&#x27;002&#x27;,&#x27;药水哥&#x27;,&#x27;123456&#x27;,&#x27;13533334444&#x27;,&#x27;1990-02-01&#x27;,&#x27;男&#x27;),</span><br><span class="line">(&#x27;003&#x27;,&#x27;大明白&#x27;,&#x27;123456&#x27;,&#x27;13544445555&#x27;,&#x27;2015-11-03&#x27;,&#x27;男&#x27;),</span><br><span class="line">(&#x27;004&#x27;,&#x27;长海&#x27;,&#x27;123456&#x27;,&#x27;13566667777&#x27;,&#x27;2000-02-01&#x27;,&#x27;男&#x27;),</span><br><span class="line">(&#x27;005&#x27;,&#x27;乔杉&#x27;,&#x27;123456&#x27;,&#x27;13588889999&#x27;,&#x27;2000-02-01&#x27;,&#x27;男&#x27;);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建订单表</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE orders (</span><br><span class="line">  oid varchar(32)   PRIMARY KEY, -- 订单id</span><br><span class="line">  ordertime datetime ,	-- 下单时间 </span><br><span class="line">  total double , -- 总金额</span><br><span class="line">  name varchar(20), -- 收货人姓名</span><br><span class="line">  telephone varchar(20) , -- 电话</span><br><span class="line">  address varchar(30) , -- 地址</span><br><span class="line">  state int(11) ,  -- 订单状态</span><br><span class="line">  uid varchar(32), -- 外键字段 对应用户表id</span><br><span class="line">  CONSTRAINT ofk_0001 FOREIGN KEY (uid) REFERENCES user (uid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 插入一条订单数据</span><br><span class="line">INSERT INTO orders </span><br><span class="line">VALUES(&#x27;order001&#x27;,&#x27;2019-10-11&#x27;,5500,&#x27;乔杉&#x27;,&#x27;15512342345&#x27;,&#x27;皇家洗浴&#x27;,0,&#x27;001&#x27;);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建商品分类表</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE category (</span><br><span class="line">  cid varchar(32) PRIMARY KEY,</span><br><span class="line">  cname varchar(20)</span><br><span class="line">); </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO `category` VALUES (&#x27;1&#x27;,&#x27;手机数码&#x27;),(&#x27;2&#x27;,&#x27;电脑办公&#x27;),(&#x27;3&#x27;,&#x27;运动鞋服&#x27;),(&#x27;4&#x27;,&#x27;图书音像&#x27;);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>创建商品表</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE product (</span><br><span class="line">  pid varchar(32)  PRIMARY KEY,	-- 商品id</span><br><span class="line">  pname varchar(50) , -- 商品名称 </span><br><span class="line">  price double, -- 商品价格</span><br><span class="line">  pdesc varchar(255), -- 商品描述</span><br><span class="line">  pflag int(11) , -- 商品状态 1 上架 ,0 下架</span><br><span class="line">  cid varchar(32) , -- 外键对应 分类表id</span><br><span class="line">  KEY sfk_0001 (cid), </span><br><span class="line">  CONSTRAINT sfk_0001 FOREIGN KEY (cid) REFERENCES category (cid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO `product` VALUES </span><br><span class="line">(&#x27;1&#x27;,&#x27;小米6&#x27;,2200,&#x27;小米 移动联通电信4G手机 双卡双待&#x27;,0,&#x27;1&#x27;),</span><br><span class="line">(&#x27;2&#x27;,&#x27;华为Mate9&#x27;,2599,&#x27;华为 双卡双待 高清大屏&#x27;,0,&#x27;1&#x27;),</span><br><span class="line">(&#x27;3&#x27;,&#x27;OPPO11&#x27;,3000,&#x27;移动联通 双4G手机&#x27;,0,&#x27;1&#x27;),</span><br><span class="line">(&#x27;4&#x27;,&#x27;华为荣耀&#x27;,1499,&#x27;3GB内存标准版 黑色 移动4G手机&#x27;,0,&#x27;1&#x27;),</span><br><span class="line">(&#x27;5&#x27;,&#x27;华硕台式电脑&#x27;,5000,&#x27;爆款直降，满千减百&#x27;,0,&#x27;2&#x27;),</span><br><span class="line">(&#x27;6&#x27;,&#x27;MacBook&#x27;,6688,&#x27;128GB 闪存&#x27;,0,&#x27;2&#x27;),</span><br><span class="line">(&#x27;7&#x27;,&#x27;ThinkPad&#x27;,4199,&#x27;轻薄系列1)&#x27;,0,&#x27;2&#x27;),</span><br><span class="line">(&#x27;8&#x27;,&#x27;联想小新&#x27;,4499,&#x27;14英寸超薄笔记本电脑&#x27;,0,&#x27;2&#x27;),</span><br><span class="line">(&#x27;9&#x27;,&#x27;李宁音速6&#x27;,500,&#x27;实战篮球鞋&#x27;,0,&#x27;3&#x27;),</span><br><span class="line">(&#x27;10&#x27;,&#x27;AJ11&#x27;,3300,&#x27;乔丹实战系列&#x27;,0,&#x27;3&#x27;),</span><br><span class="line">(&#x27;11&#x27;,&#x27;AJ1&#x27;,5800,&#x27;精神小伙系列&#x27;,0,&#x27;3&#x27;);</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>订单项表 (中间表)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 订单项表</span><br><span class="line">CREATE TABLE orderitem (</span><br><span class="line">  itemid VARCHAR(32) PRIMARY KEY, -- 订单项ID</span><br><span class="line">  pid VARCHAR(32),  -- 外键 对应商品表 id</span><br><span class="line">  oid VARCHAR(32), -- 外键 对应订单表 id</span><br><span class="line">  KEY fk_0001 (pid),</span><br><span class="line">  KEY fk_0002 (oid),</span><br><span class="line">  CONSTRAINT fk_0001 FOREIGN KEY (pid) REFERENCES product (pid),</span><br><span class="line">  CONSTRAINT fk_0002 FOREIGN KEY (oid) REFERENCES orders (oid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 向中间表中插入两条数据</span><br><span class="line">INSERT INTO orderitem VALUES(&#x27;item001&#x27;,&#x27;1&#x27;,&#x27;order001&#x27;);</span><br><span class="line">INSERT INTO orderitem VALUES(&#x27;item002&#x27;,&#x27;11&#x27;,&#x27;order001&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app, 测试包 用于对DAO代码进行测试</span><br><span class="line">dao, dao包  数据访问层,包含所有对数据库的相关操作的类</span><br><span class="line">entity, 实体包 保存根据数据库表 对应创建的JavaBean类</span><br><span class="line">utils, 工具包</span><br></pre></td></tr></table></figure>

<h2 id="JavaBean类创建"><a href="#JavaBean类创建" class="headerlink" title="JavaBean类创建"></a>JavaBean类创建</h2><h3 id="3-1-设计用户与订单"><a href="#3-1-设计用户与订单" class="headerlink" title="3.1 设计用户与订单"></a>3.1 设计用户与订单</h3><h4 id="3-1-1-一对多关系分析"><a href="#3-1-1-一对多关系分析" class="headerlink" title="3.1.1 一对多关系分析"></a>3.1.1 一对多关系分析</h4><ul>
<li>在Java一对多的数据关系中，需要遵循以下设计原则：</li>
<li><ol>
<li>Java类的名称 = 实体表的名称</li>
<li>Java类的属性 = 实体表的字段</li>
<li>Java类的一个对象 = 表的一行记录</li>
<li>外键关系 = 引用配置</li>
</ol>
</li>
<li>一个用户拥有多个订单,所以 用户是一的一方, 订单是多的一方</li>
</ul>
<p><a href="https://imgtu.com/i/L7WWWR"><img src="https://s1.ax1x.com/2022/04/26/L7WWWR.png" alt="L7WWWR.png"></a></p>
<h4 id="3-1-2-User类"><a href="#3-1-2-User类" class="headerlink" title="3.1.2 User类"></a>3.1.2 User类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    用户表 对应 User类</span></span><br><span class="line"><span class="comment"> *   `uid` VARCHAR(32) NOT NULL,</span></span><br><span class="line"><span class="comment"> *   `username` VARCHAR(20) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `password` VARCHAR(20) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `telephone` VARCHAR(20) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `birthday` DATE DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `sex` VARCHAR(10) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String telephone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//提供 get set toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-1-3-Orders类"><a href="#3-1-3-Orders类" class="headerlink" title="3.1.3 Orders类"></a>3.1.3 Orders类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   订单表</span></span><br><span class="line"><span class="comment"> *   `oid` VARCHAR(32) NOT NULL,</span></span><br><span class="line"><span class="comment"> *   `ordertime` DATETIME DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `total` DOUBLE DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `name` VARCHAR(20) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `telephone` VARCHAR(20) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `address` VARCHAR(30) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `state` INT(11) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `uid` VARCHAR(32) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String oid; <span class="comment">//订单号</span></span><br><span class="line">    <span class="keyword">private</span> String ordertime; <span class="comment">//下单时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total; <span class="comment">//订单的总金额</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//收货人姓名</span></span><br><span class="line">    <span class="keyword">private</span> String telephone; <span class="comment">//收货人电话</span></span><br><span class="line">    <span class="keyword">private</span> String address;  <span class="comment">//收货人地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state; <span class="comment">//订单状态 1 代表已支付 , 0 代表未支付</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单属于哪个用户呢 ?</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提供 get set toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-1-4-Orders类设计分析"><a href="#3-1-4-Orders类设计分析" class="headerlink" title="3.1.4 Orders类设计分析"></a>3.1.4 Orders类设计分析</h4><ul>
<li><p>第一种方式</p>
<ul>
<li><p>根据两张表关系的描述  我们可以在 订单类中 添加一个uid 成员变量,表示订单属于哪个用户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String uid;</span><br></pre></td></tr></table></figure></li>
<li><p>但是这样设计会存在一些问题,比如 我要查询的是订单是属于哪个用户的用户名 ? 但是我们只有一个uid</p>
</li>
</ul>
</li>
<li><p>第二种方式</p>
<ul>
<li><p>Java类表示一对多关系,可以在多的一方添加一个成员变量,这个成员变量的类型 就是一的一方的类型.</p>
</li>
<li><p>再在订单表中 添加一个 User对象,User对象中 ,保存该订单关联的用户的所有信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String uid;</span><br><span class="line"><span class="keyword">private</span> User user;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="3-1-4-修改Orders类"><a href="#3-1-4-修改Orders类" class="headerlink" title="3.1.4 修改Orders类"></a>3.1.4 修改Orders类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String oid; <span class="comment">//订单号</span></span><br><span class="line">    <span class="keyword">private</span> String ordertime; <span class="comment">//下单时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total; <span class="comment">//订单的总金额</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//收货人姓名</span></span><br><span class="line">    <span class="keyword">private</span> String telephone; <span class="comment">//收货人电话</span></span><br><span class="line">    <span class="keyword">private</span> String address;  <span class="comment">//收货人地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state; <span class="comment">//订单状态 1 代表已支付 , 0 代表未支付</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单属于哪个用户呢 ?</span></span><br><span class="line">    <span class="keyword">private</span> String uid; <span class="comment">//表示外键</span></span><br><span class="line">    <span class="keyword">private</span> User user; <span class="comment">//用来保存订单对应的详细的用户信息</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提供 get set toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-设计商品与分类"><a href="#3-2-设计商品与分类" class="headerlink" title="3.2 设计商品与分类"></a>3.2 设计商品与分类</h3><p>分类与商品 同样是一对多关系,  我们可以在多的一方进行操作 添加一个成员变量 类型是一的一方的类型</p>
<p><a href="https://imgtu.com/i/L7fQk4"><img src="https://s1.ax1x.com/2022/04/26/L7fQk4.png" alt="L7fQk4.png"></a></p>
<h4 id="3-2-1-Category类"><a href="#3-2-1-Category类" class="headerlink" title="3.2.1 Category类"></a>3.2.1 Category类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cid;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提供 get set toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-2-Product类"><a href="#3-2-2-Product类" class="headerlink" title="3.2.2 Product类"></a>3.2.2 Product类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pdesc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pflag; <span class="comment">//是否上架 1 上架 ,0 下架</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cid; <span class="comment">//外键 对应分类表主键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Category category; <span class="comment">//用于保存Category的详细数据</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">//提供 get set toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-设计订单项"><a href="#3-3-设计订单项" class="headerlink" title="3.3 设计订单项"></a>3.3 设计订单项</h3><h4 id="3-3-1-多对多关系分析"><a href="#3-3-1-多对多关系分析" class="headerlink" title="3.3.1 多对多关系分析"></a>3.3.1 多对多关系分析</h4><p>商品与订单是多对多关系, 一个订单上可以有多个商品, 一个商品可以出现在多个订单中.</p>
<p>多对多建表原则 需要一张中间表,中间表中至少有两个字段,作为中间表的外键分别指向另外两张表的主键</p>
<p><a href="https://imgtu.com/i/L7f1h9"><img src="https://s1.ax1x.com/2022/04/26/L7f1h9.png" alt="L7f1h9.png"></a></p>
<h4 id="3-3-2-创建OrderItem"><a href="#3-3-2-创建OrderItem" class="headerlink" title="3.3.2 创建OrderItem"></a>3.3.2 创建OrderItem</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   订单项表(中间表)</span></span><br><span class="line"><span class="comment"> *   `itemid` VARCHAR(32) NOT NULL,</span></span><br><span class="line"><span class="comment"> *   `pid` VARCHAR(32) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `oid` VARCHAR(32) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderItem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单项 指的是中间表中的一条数据</span></span><br><span class="line">    <span class="keyword">private</span> String itemid; <span class="comment">//订单项的id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pid; <span class="comment">//外键 指向商品表主键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String oid; <span class="comment">//外键 指向订单表的主键</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Product product;<span class="comment">//订单项内部的商品详细信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Orders orders;<span class="comment">//订单项属于哪个订单</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-编写DAO类"><a href="#4-编写DAO类" class="headerlink" title="4.编写DAO类"></a>4.编写DAO类</h2><h3 id="4-1-UserDao"><a href="#4-1-UserDao" class="headerlink" title="4.1 UserDao"></a>4.1 UserDao</h3><ul>
<li>需求一: 编写一个注册用户的方法,接收的参数是一个User对象</li>
<li>需求二: 编写一个 用户登录的方法,接收的参数是 用户名 和密码, 返回值是User对象</li>
</ul>
<h4 id="4-1-1-编写UserDao"><a href="#4-1-1-编写UserDao" class="headerlink" title="4.1.1 编写UserDao"></a>4.1.1 编写UserDao</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册用户</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">register</span><span class="params">(User user)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取QueryRunner</span></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.编写SQL</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into user values(?,?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Object[] param = &#123;user.getUid(), user.getUsername(), user.getPassword(),</span><br><span class="line">                user.getTelephone(), user.getBirthday(), user.getSex()&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.执行插入操作</span></span><br><span class="line">        <span class="keyword">int</span> update = qr.update(sql,param);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.返回受影响的行数</span></span><br><span class="line">        <span class="keyword">return</span> update;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username , String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select * from user where username = ? and password = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回的是一个User对象 使用BeanHandler将结果集的第一条和数据封装到一个Javabean中</span></span><br><span class="line">        User user = qr.query(sql, <span class="keyword">new</span> BeanHandler&lt;User&gt;(User.class), username, password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-1-2-测试注册与登录功能"><a href="#4-1-2-测试注册与登录功能" class="headerlink" title="4.1.2 测试注册与登录功能"></a>4.1.2 测试注册与登录功能</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建UserDao</span></span><br><span class="line">    UserDao userDao = <span class="keyword">new</span> UserDao();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试注册功能</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRegister</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建User对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对User对象进行赋值</span></span><br><span class="line">        user.setUid(UUIDUtils.getUUID());</span><br><span class="line">        user.setUsername(<span class="string">&quot;大郎&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;654321&quot;</span>);</span><br><span class="line">        user.setTelephone(<span class="string">&quot;15052005200&quot;</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        user.setBirthday(DateUtils.getDateFormart());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.执行注册</span></span><br><span class="line">        <span class="keyword">int</span> register = userDao.register(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.判断注册是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(register &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;注册成功,欢迎您: &quot;</span> + user.getUsername());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;注册失败! !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试登录功能</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLogin</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用UserDao的 login方法,传入用户名密码</span></span><br><span class="line">        User user = userDao.login(<span class="string">&quot;大郎&quot;</span>, <span class="string">&quot;654321&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断user不为空 登录成功</span></span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(user.getUsername() +<span class="string">&quot; 欢迎您!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或者密码错误! !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其他工具类如下</strong></p>
<p>UUIDUtils工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.de.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UUID是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * UUID由以下几部分的组合：</span></span><br><span class="line"><span class="comment"> *  1.当前日期和时间，UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同。</span></span><br><span class="line"><span class="comment"> *  2.时钟序列。</span></span><br><span class="line"><span class="comment"> *  3.全局唯一的IEEE机器识别号，如果有网卡，从网卡MAC地址获得，没有网卡以其他方式获得。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UUIDUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取UUID的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUUID</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DateUtils工具类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.de.utils;</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取日期对象 格式化后的字符串</span><br><span class="line"> */</span><br><span class="line">public class DateUtils &#123;</span><br><span class="line"></span><br><span class="line">    public static String getDateFormat()&#123;</span><br><span class="line"></span><br><span class="line">        Date date = new Date();</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line"></span><br><span class="line">        String s = sdf.format(date);</span><br><span class="line"></span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-ProductDao"><a href="#4-2-ProductDao" class="headerlink" title="4.2 ProductDao"></a>4.2 ProductDao</h3><ul>
<li><p>需求1: 根据商品ID 获取商品名称 ,商品价格 以及商品所属分类的名称</p>
<ul>
<li>参数 pid, 返回值 product对象</li>
</ul>
</li>
<li><p>需求2: 根据分类ID 获取商品分类信息</p>
<ul>
<li>参数 cid , 返回值 category对象</li>
</ul>
</li>
<li><p>需求3: 查询指定分类ID 下的商品个数</p>
<ul>
<li>参数 cid , 返回值 int类型 商品个数</li>
</ul>
</li>
<li><p>需求4: 查询指定分类ID 下的所有商品信息</p>
<ul>
<li>参数分类ID ,返回值 List集合 集合中保存商品对象</li>
</ul>
</li>
</ul>
<h4 id="4-2-1-编写-ProductDao"><a href="#4-2-1-编写-ProductDao" class="headerlink" title="4.2.1 编写 ProductDao"></a>4.2.1 编写 ProductDao</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.根据商品ID 获取商品名称 ,商品价格 以及商品所属分类的名称</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findProductById</span><span class="params">(String pid)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select * from product where pid = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Product product = qr.query(sql, <span class="keyword">new</span> BeanHandler&lt;Product&gt;(Product.class), pid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用 findCategoryById()方法, 传递外键cid 获取商品对应 的分类信息</span></span><br><span class="line">        Category category = findCategoryById(product.getCid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将category保存到商品对象中</span></span><br><span class="line">        product.setCategory(category);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.根据分类ID 获取商品分类信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">findCategoryById</span><span class="params">(String cid)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select * from category where cid = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Category category = qr.query(sql, <span class="keyword">new</span> BeanHandler&lt;Category&gt;(Category.class),cid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> category;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.查询指定分类ID 下的商品个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">(String cid)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select count(*) from product where cid = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取的单列数据 ,使用ScalarHandler 封装</span></span><br><span class="line">        Long count = (Long)qr.query(sql,<span class="keyword">new</span> ScalarHandler&lt;&gt;(),cid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将Lang类型转换为 int 类型,并返回</span></span><br><span class="line">        <span class="keyword">return</span> count.intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.查询指定分类下的所有商品信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">findProductByCid</span><span class="params">(String cid)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line">        </span><br><span class="line">        String sql = <span class="string">&quot;select * from product where cid = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询结果是一个List集合, 使用BeanListHandler 封装结果集</span></span><br><span class="line">        List&lt;Product&gt; list = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Product&gt;(Product.class), cid);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-测试-ProductDao"><a href="#4-2-2-测试-ProductDao" class="headerlink" title="4.2.2 测试 ProductDao"></a>4.2.2 测试 ProductDao</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProductDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ProductDao productDao = <span class="keyword">new</span> ProductDao();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.测试 根据商品ID 获取商品名称 ,商品价格 以及商品所属分类的名称</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindProductById</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Product product = productDao.findProductById(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;商品名称: &quot;</span>+product.getPname()+ <span class="string">&quot;, 商品价格: &quot;</span> + product.getPrice() +</span><br><span class="line">                <span class="string">&quot;, 商品所属分类: &quot;</span>+ product.getCategory().getCname());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.测试 查询指定分类ID下的商品数</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetCount</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//查询 cid为3的分类下有多少个商品</span></span><br><span class="line">        <span class="keyword">int</span> count = productDao.getCount(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;分类ID为3的分类下商品个数: &quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.测试 查询指定分类下的所有商品信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindProductByCid</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询cid为 2的分类下 所有的商品信息</span></span><br><span class="line">        List&lt;Product&gt; list = productDao.findProductByCid(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Product product : list) &#123;</span><br><span class="line">            System.out.println(product);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-OrdersDao"><a href="#4-3-OrdersDao" class="headerlink" title="4.3 OrdersDao"></a>4.3 OrdersDao</h3><h4 id="4-3-1-多对一分析"><a href="#4-3-1-多对一分析" class="headerlink" title="4.3.1 多对一分析"></a>4.3.1 多对一分析</h4><p>OrderItem表与Orders表的关系是 多对一</p>
<p>之前我们一直是在描述一对多,那么我们再反向描述一下 多对一</p>
<p>方式是在Orders中应该有一个 集合用来保存订单中的订单项信息</p>
<p>在Orders类中添加 订单项的集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该订单中有多少订单项</span></span><br><span class="line">  List&lt;OrderItem&gt; orderItems = <span class="keyword">new</span> ArrayList&lt;OrderItem&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;OrderItem&gt; <span class="title">getOrderItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> orderItems;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderItems</span><span class="params">(List&lt;OrderItem&gt; orderItems)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.orderItems = orderItems;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-3-2-创建OrdersDao"><a href="#4-3-2-创建OrdersDao" class="headerlink" title="4.3.2 创建OrdersDao"></a>4.3.2 创建OrdersDao</h4><ul>
<li><p>需求1: 获取 uid为 001 的用户的所有订单信息</p>
</li>
<li><p>参数 uid, 返回值 LIst<Orders> 订单集合 </p>
</li>
<li><p>需求2: 获取订单编号为 order001的订单中的所有商品信息</p>
<ul>
<li>参数 oid, 返回值List<Product> 商品集合</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 获取订单编号为: order001的订单中的所有商品信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.查询订单项表中 oid是order001的 所有商品信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	oi.pid</span><br><span class="line"><span class="keyword">FROM</span> orderitem oi <span class="keyword">WHERE</span> oid <span class="operator">=</span> <span class="string">&#x27;order001&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.将上面的查询语句作为in函数的条件, 查询product表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pid <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> </span><br><span class="line">	oi.pid</span><br><span class="line"><span class="keyword">FROM</span> orderitem oi <span class="keyword">WHERE</span> oid <span class="operator">=</span> <span class="string">&#x27;order001&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrdersDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求1: 获取 uid为 001 的用户的所有订单信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Orders&gt;  <span class="title">findAllOrders</span><span class="params">(String uid)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select * from orders where uid = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个用户所有的订单信息</span></span><br><span class="line">        List&lt;Orders&gt; ordersList = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Orders&gt;(Orders.class), uid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ordersList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求2: 获取订单编号为 order001的订单中的所有商品信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">findOrderById</span><span class="params">(String oid)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.查询订单项表 获取订单项表中 订单ID为order001的数据</span></span><br><span class="line">        String sql = <span class="string">&quot;SELECT * FROM orderitem WHERE oid = ? &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.查询的结果是 多条订单项数据</span></span><br><span class="line">        List&lt;OrderItem&gt; list = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;OrderItem&gt;(OrderItem.class), oid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建集合保存商品信息</span></span><br><span class="line">        List&lt;Product&gt; productList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        ProductDao productDao = <span class="keyword">new</span> ProductDao();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.遍历订单项集合 获取Pid</span></span><br><span class="line">        <span class="keyword">for</span> (OrderItem orderItem : list) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.1从orderitem中获取 pid</span></span><br><span class="line">            String pid = orderItem.getPid();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.2 调用productDao</span></span><br><span class="line">            Product product = productDao.findProductById(pid);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.3 保存到集合</span></span><br><span class="line">            productList.add(product);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回 订单中对应的商品信息</span></span><br><span class="line">        <span class="keyword">return</span> productList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-3-测试OrdersDao"><a href="#4-3-3-测试OrdersDao" class="headerlink" title="4.3.3 测试OrdersDao"></a>4.3.3 测试OrdersDao</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOrderDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    OrdersDao ordersDao = <span class="keyword">new</span> OrdersDao();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取 uid为 001 的用户的所有订单信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllOrders</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Orders&gt; allOrders = ordersDao.findAllOrders(<span class="string">&quot;001&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历打印订单信息</span></span><br><span class="line">        <span class="keyword">for</span> (Orders order : allOrders) &#123;</span><br><span class="line">            System.out.println(order);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试 获取订单编号为: order001的订单中的所有商品信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOrderById</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Product&gt; list = ordersDao.findOrderById(<span class="string">&quot;order001&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;订单编号为order001中的商品有: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Product product : list) &#123;</span><br><span class="line">            System.out.println(product);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>































































]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫基础</title>
    <url>/2021/07/24/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>python网络爬虫</p>
<p>这是一篇文章关于python网络爬虫的个人笔记，</p>
<p>包括请求网站，解析数据，保存数据，多线程爬虫</p>
<span id="more"></span>

<h1 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h1><h2 id="urllib库-—内置"><a href="#urllib库-—内置" class="headerlink" title="urllib库  —内置"></a>urllib库  —内置</h2><h3 id="urlopen函数"><a href="#urlopen函数" class="headerlink" title="urlopen函数"></a>urlopen函数</h3><p>创建一个表示远程url的类文件对象，然后像本地文件一样操作这类文件对象来获取远程数据。在urllib.request模块中</p>
<p>url: 请求的url<br>data: 请求的data，如果设置了该参数，为post请求<br>返回值: 返回值是一个http.client.HTTPResponse对象，<br>该对象是一个类文件句柄对象。有read(size),readline,readlines,getcode等方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">resp = request.urlopen(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.read())</span><br><span class="line"><span class="built_in">print</span>(resp.getcode())</span><br></pre></td></tr></table></figure>

<h3 id="urlretrieve函数"><a href="#urlretrieve函数" class="headerlink" title="urlretrieve函数"></a>urlretrieve函数</h3><p>将网页上的某个文件保存到本地,在urllib.request模块中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">request.urlretrieve(url, file_name)</span><br></pre></td></tr></table></figure>

<h3 id="urlencode函数：编码"><a href="#urlencode函数：编码" class="headerlink" title="urlencode函数：编码"></a>urlencode函数：编码</h3><p>urlencode可以把字典数据转化成url<em><strong>编码</strong></em>的数据，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">18</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>( parse.urlencode(data) )</span><br><span class="line"></span><br><span class="line"><span class="comment">#name=%E7%8C%AA%E5%85%AB%E6%88%92&amp;age=18&amp;gender=%E7%94%B7       打印结果</span></span><br></pre></td></tr></table></figure>

<p><em>注</em>：urlencode对字典编码；quote对字符串编码。</p>
<h3 id="parse-qs函数：解码"><a href="#parse-qs函数：解码" class="headerlink" title="parse_qs函数：解码"></a>parse_qs函数：解码</h3><p>可以将经过编码后的url参数进行<em><strong>解码</strong></em>，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;name=%E7%8C%AA%E5%85%AB%E6%88%92&amp;age=18&amp;gender=%E7%94%B7&quot;</span></span><br><span class="line"><span class="built_in">print</span>( parse.parse_qs(data) )</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;&#x27;name&#x27;: [&#x27;猪八戒&#x27;], &#x27;age&#x27;: [&#x27;18&#x27;], &#x27;gender&#x27;: [&#x27;男&#x27;]&#125;           打印结果</span></span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：parse_qs解码成字典；unquote解码成字符串。</p>
<h3 id="urlparse和urlsplit函数：解析url"><a href="#urlparse和urlsplit函数：解析url" class="headerlink" title="urlparse和urlsplit函数：解析url"></a>urlparse和urlsplit函数：解析url</h3><p>对url各个组成部分进行分割，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com/index.html;user?id=S#comment&quot;</span></span><br><span class="line">result = parse.urlparse(url)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment">#打印结果:</span></span><br><span class="line"><span class="comment">#ParseResult(scheme=&#x27;http&#x27;, netloc=&#x27;www.baidu.com&#x27;, path=&#x27;/index.html&#x27;, params=&#x27;user&#x27;, query=&#x27;id=S&#x27;, fragment=&#x27;comment&#x27;)</span></span><br><span class="line">result2 = parse.urlsplit(url)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line"><span class="comment">#打印结果:</span></span><br><span class="line"><span class="comment">#SplitResult(scheme=&#x27;http&#x27;, netloc=&#x27;www.baidu.com&#x27;, path=&#x27;/index.html;user&#x27;, query=&#x27;id=S&#x27;, fragment=&#x27;comment&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(result.scheme)      <span class="comment">#http</span></span><br><span class="line"><span class="built_in">print</span>(result.netloc)      <span class="comment">#www.baidu.com</span></span><br></pre></td></tr></table></figure>

<p><em>注</em>：urlparse函数和urlsplit函数用法基本一样，唯一的区别是urlparse有params属性，而urlsplit没有。</p>
<h3 id="request-Request类：网络请求，可添加请求头，请求参数"><a href="#request-Request类：网络请求，可添加请求头，请求参数" class="headerlink" title="request.Request类：网络请求，可添加请求头，请求参数"></a>request.Request类：网络请求，可添加请求头，请求参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like    Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)   <span class="comment">#重点，添加请求头信息，User-Agent</span></span><br><span class="line">resp = request.urlopen(rq)</span><br><span class="line"><span class="built_in">print</span>(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="ProxyHandler处理器（代理设置）：封ip问题"><a href="#ProxyHandler处理器（代理设置）：封ip问题" class="headerlink" title="ProxyHandler处理器（代理设置）：封ip问题"></a>ProxyHandler处理器（代理设置）：封ip问题</h3><p>代理原理：在请求网站之前，先请求代理服务器，然后让代理服务器去请求目标网站，代理服务器拿到目标网站数据后，再转发给我们的代码。</p>
<p><a href="http://httpbin.org/">http://httpbin.org</a>  —这个网站方便查看http请求的一些参数</p>
<p>常用的代理有：</p>
<ul>
<li>快代理：<a href="https://www.kuaidaili.com/">https://www.kuaidaili.com/</a></li>
<li>代理云</li>
</ul>
<p>在代码中使用代理：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/ip&quot;</span></span><br><span class="line"><span class="comment">#创建handler</span></span><br><span class="line">handler = request.ProxyHandler(&#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;58.56.149.198:53281&quot;</span>&#125;)</span><br><span class="line"><span class="comment">#创建opener</span></span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"><span class="comment">#使用opener发送请求</span></span><br><span class="line">resp = opener.<span class="built_in">open</span>(url)</span><br><span class="line"><span class="built_in">print</span>( resp.read() )</span><br></pre></td></tr></table></figure>

<h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies:"></a>cookies:</h3><p>某些网站为了辨别用户身份，进行session跟踪而存储在用户本地终端上的数据</p>
<h4 id="模拟cookies访问网站方法一："><a href="#模拟cookies访问网站方法一：" class="headerlink" title="模拟cookies访问网站方法一："></a>模拟cookies访问网站方法一：</h4><p>用浏览器访问网站后，手动抓包，将cookie信息复制，放到代码的请求头上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.zhihu.com/&quot;</span></span><br><span class="line">headers = &#123;  </span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like    Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span>,</span><br><span class="line"><span class="string">&quot;cookie&quot;</span>: <span class="string">&#x27;_zap=5b69d7ff-9b3f-468b-b891-103b2029d8a3;..#复制的cookie内容太多，省略不写</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">rq = request.Request(url, headers=headers)</span></span><br><span class="line"><span class="string">resp = request.urlopen(rq)</span></span><br><span class="line"><span class="string">print(resp.read().decode(&quot;utf-8&quot;))</span></span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法二："><a href="#模拟cookies访问网站方法二：" class="headerlink" title="模拟cookies访问网站方法二："></a>模拟cookies访问网站方法二：</h4><p>http.cookiejar模块，主要有CookieJar，FileCookieJar，MozillaCookieJar，LWPCookieJar四个类</p>
<p>CookieJar：将cookie保存在内存中</p>
<p>FileCookieJar，MozillaCookieJar，LWPCookieJar：将cookie保存在文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> CookieJar</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="comment">#1，登入</span></span><br><span class="line">cookiejar = CookieJar()</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)  <span class="comment">#创建handler</span></span><br><span class="line">opener = request.build_opener(handler)            <span class="comment">#创建opener</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#opener发送请求前，准备登入的url,请求头,请求参数(需要编码)</span></span><br><span class="line">post_url = <span class="string">&quot;https://i.meishi.cc/login_t.php?username=17370466454&amp;login_type=1&amp;password=575389&quot;</span></span><br><span class="line">post_headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">post_data = parse.urlencode(&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;17370466454&quot;</span>,</span><br><span class="line">    <span class="string">&quot;login_type&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;575389&quot;</span></span><br><span class="line">&#125;)    </span><br><span class="line"><span class="comment">#request.Request()里的data只能接收字节，所以data=post_data.encode(&quot;utf-8&quot;)</span></span><br><span class="line">post_rq = request.Request(url=post_url, headers=post_headers, data=post_data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="comment">#opener访问网站后，网站的cookie暂时保存在内存opener中</span></span><br><span class="line">opener.<span class="built_in">open</span>(post_rq)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2，访问，opener已经带有cookie访问网站</span></span><br><span class="line">url = <span class="string">&quot;https://meishij.net/&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)</span><br><span class="line">resp = opener.<span class="built_in">open</span>(rq)</span><br><span class="line"><span class="built_in">print</span>(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="cookies的保存"><a href="#cookies的保存" class="headerlink" title="cookies的保存"></a>cookies的保存</h4><p>以MozillaCookieJar类为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookies = MozillaCookieJar(<span class="string">&quot;cookies.txt&quot;</span>)  <span class="comment">#保存cookies的文件</span></span><br><span class="line">handler = request.HTTPCookieProcessor(cookies)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)</span><br><span class="line">opener.<span class="built_in">open</span>(rq)</span><br><span class="line">cookies.save()   <span class="comment">#保存cookies</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#cookies.save( ignore_discard=False, ignore_expires=False )  默认</span></span><br><span class="line"><span class="comment">#ignore_discard=True       即使cookies即将被丢失也要保存起来</span></span><br><span class="line"><span class="comment">#ignore_expires=True	   如果cookies已经过期也将它保存，并且文件已存在时将覆盖</span></span><br></pre></td></tr></table></figure>



<h2 id="requests库-—第三方库"><a href="#requests库-—第三方库" class="headerlink" title="requests库  —第三方库"></a>requests库  —第三方库</h2><p>让HTTP服务人类</p>
<h3 id="安装和文档地址"><a href="#安装和文档地址" class="headerlink" title="安装和文档地址:"></a>安装和文档地址:</h3><ul>
<li><p>pip安装：pip install requests</p>
</li>
<li><p>中文文档：<a href="https://docs.python-requests.org/zh_CN/latest/index.html">https://docs.python-requests.org/zh_CN/latest/index.html</a></p>
</li>
<li><p>github地址：<a href="https://github.com/requests/requests">https://github.com/requests/requests</a></p>
</li>
</ul>
<h3 id="发送get请求："><a href="#发送get请求：" class="headerlink" title="发送get请求："></a>发送get请求：</h3><p>response = requests.get(url, headers=headers, params=params)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;wd&quot;</span>:<span class="string">&quot;中国&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url, headers=headers, params=params)  <span class="comment">#发送get请求</span></span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line"><span class="built_in">print</span>(response.content.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(response.json())  <span class="comment">#如果响应的是json格式字符串，直接将JSON转换成python数据，相当于json.loads(json)</span></span><br></pre></td></tr></table></figure>

<h3 id="发送post请求："><a href="#发送post请求：" class="headerlink" title="发送post请求："></a>发送post请求：</h3><p>方法与上面的<em><strong>发送get请求</strong></em>用法差不多：</p>
<p>response = requests.post(url, headers=headers, data=data)</p>
<h3 id="response-content和response-text区别："><a href="#response-content和response-text区别：" class="headerlink" title="response.content和response.text区别："></a>response.content和response.text区别：</h3><p>1，response.content：直接从网站上抓取数据，没有经过解码，所以是bytes类型，其实硬盘和网络上传输的字符串类型都是bytes类型。</p>
<p>2，response.text：是str数据类型，把response.content经行自动解码的结果，自动解码可能会出现乱码的情况，所以需要自己手动解码：response.content.decode(“utf-8”)。</p>
<h3 id="使用代理："><a href="#使用代理：" class="headerlink" title="使用代理："></a>使用代理：</h3><p>resp = requests.get(url, proxies=代理信息)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;116.196.88.86:3128&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/ip&quot;</span></span><br><span class="line">resp = requests.get(url, proxies=proxy)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<h3 id="处理cookie"><a href="#处理cookie" class="headerlink" title="处理cookie:"></a>处理cookie:</h3><h4 id="查看cookies"><a href="#查看cookies" class="headerlink" title="查看cookies"></a>查看cookies</h4><p>响应中如果包含cookie，可以通过cookies属性查看cookie：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(resp.cookies)</span><br><span class="line"><span class="built_in">print</span>(resp.cookies.get_dict())   <span class="comment">#字典型的coookie</span></span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法一：-1"><a href="#模拟cookies访问网站方法一：-1" class="headerlink" title="模拟cookies访问网站方法一："></a>模拟cookies访问网站方法一：</h4><p>用浏览器访问网站后，手动抓包，将cookie信息复制，放到代码的请求头上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.zhihu.com/&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span>,</span><br><span class="line"><span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;_zap=5b69d7ff-9b3f-468b-b891-103b2029d8&#x27;</span>   <span class="comment">#复制的cookie内容太多，省略</span></span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法二：使用session，共享cookie"><a href="#模拟cookies访问网站方法二：使用session，共享cookie" class="headerlink" title="模拟cookies访问网站方法二：使用session，共享cookie"></a>模拟cookies访问网站方法二：使用session，共享cookie</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#登入,准备好需要登入的网站，参数，请求头</span></span><br><span class="line">post_url = <span class="string">&quot;&quot;</span>      <span class="comment">#登入的网站</span></span><br><span class="line">post_data = &#123;&#125;     <span class="comment">#登入的参数，账号密码</span></span><br><span class="line">post_headers = &#123;&#125;  <span class="comment">#登入需要的请求头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1，创建session</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="comment">#2，用session发送请求，然后session会自动保存cookie信息</span></span><br><span class="line">session.post(url=post_url, data=post_data, headers=post_headers)</span><br><span class="line"><span class="comment">#3，session中已带有cookie信息，继续用session访问网站，实现cookie共享</span></span><br><span class="line">url = <span class="string">&quot;https://m.meishij.net/&quot;</span></span><br><span class="line">resp = session.get(url)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在session中添加代理IP</span></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;116.196.88.86:3128&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">session.proxies = proxy</span><br></pre></td></tr></table></figure>

<h3 id="处理不信任的ssl证书："><a href="#处理不信任的ssl证书：" class="headerlink" title="处理不信任的ssl证书："></a>处理不信任的ssl证书：</h3><p>对于哪些被信任的SSL证书的网站，如<a href="https://www.baidu.com/%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%E3%80%82">https://www.baidu.com/，直接访问可以正常返回响应。</a></p>
<p>而不被信任的SSL证书的网站无法正常返回响应。requests请求时需要把verify=False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://inv-veri.chinatax.gov.cn/&quot;</span></span><br><span class="line">resp = requests.get(url, verify=<span class="literal">False</span>)   <span class="comment">#verify=False</span></span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>



<h1 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h1><p>数据解析，即数据提取，爬取的所有信息中将需要的信息提取出来。</p>
<h2 id="XPath语法和lxml模块"><a href="#XPath语法和lxml模块" class="headerlink" title="XPath语法和lxml模块"></a>XPath语法和lxml模块</h2><h3 id="什么是XPath"><a href="#什么是XPath" class="headerlink" title="什么是XPath"></a>什么是XPath</h3><p>xpath（XML Path Language）是一门在xml和html文档中查找信息的语言，可用来在XML和HTML文档中对元素和属性经行遍历</p>
<h3 id="XPath开发工具"><a href="#XPath开发工具" class="headerlink" title="XPath开发工具"></a>XPath开发工具</h3><p>Chrome插件XPath Helper</p>
<p>Firefox插件Try XPath</p>
<h3 id="XPath节点"><a href="#XPath节点" class="headerlink" title="XPath节点"></a>XPath节点</h3><p>在XPath中，有七类类型的节点：元素，属性，文本，命名空间，处理指令，注释，文档(根)节点。XML文档是被作为节点树来对待的。树的根被称为文档节点或者根节点。</p>
<h3 id="XPath基本语法："><a href="#XPath基本语法：" class="headerlink" title="XPath基本语法："></a>XPath基本语法：</h3><h4 id="路径表达式："><a href="#路径表达式：" class="headerlink" title="路径表达式："></a>路径表达式：</h4><table>
<thead>
<tr>
<th align="left">表达式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">nodename</td>
<td align="left">选取此节点的所有子节点。</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">从根节点选取（取子节点）。</td>
</tr>
<tr>
<td align="left">//</td>
<td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置（取子孙节点）。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">选取当前节点。</td>
</tr>
<tr>
<td align="left">..</td>
<td align="left">选取当前节点的父节点。</td>
</tr>
<tr>
<td align="left">@</td>
<td align="left">选取属性。</td>
</tr>
</tbody></table>
<h4 id="谓语："><a href="#谓语：" class="headerlink" title="谓语："></a>谓语：</h4><table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">/bookstore/book[1]</td>
<td align="left">选取属于 bookstore 子元素的第一个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[last()]</td>
<td align="left">选取属于 bookstore 子元素的最后一个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[last()-1]</td>
<td align="left">选取属于 bookstore 子元素的倒数第二个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[position()&lt;3]</td>
<td align="left">选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td>
</tr>
<tr>
<td align="left">//title[@lang]</td>
<td align="left">选取所有拥有名为 lang 的属性的 title 元素。</td>
</tr>
<tr>
<td align="left">//title[@lang=’eng’]</td>
<td align="left">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>
</tr>
<tr>
<td align="left">/bookstore/book[price&gt;35.00]</td>
<td align="left">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
<tr>
<td align="left">/bookstore/book[price&gt;35.00]//title</td>
<td align="left">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
</tbody></table>
<h4 id="通配符："><a href="#通配符：" class="headerlink" title="通配符："></a>通配符：</h4><table>
<thead>
<tr>
<th align="left">通配符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配任何元素节点。</td>
</tr>
<tr>
<td align="left">@*</td>
<td align="left">匹配任何属性节点。</td>
</tr>
<tr>
<td align="left">node()</td>
<td align="left">匹配任何类型的节点。</td>
</tr>
</tbody></table>
<h4 id="选取若干路径："><a href="#选取若干路径：" class="headerlink" title="选取若干路径："></a>选取若干路径：</h4><table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">//book/title | //book/price</td>
<td align="left">选取 book 元素的所有 title 和 price 元素。</td>
</tr>
<tr>
<td align="left">//title | //price</td>
<td align="left">选取文档中的所有 title 和 price 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book/title | //price</td>
<td align="left">选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td>
</tr>
</tbody></table>
<h3 id="lxml库："><a href="#lxml库：" class="headerlink" title="lxml库："></a>lxml库：</h3><p>安装：pip install lxml</p>
<p>lxml python 官方文档：<a href="https://lxml.de/index.html">https://lxml.de/index.html</a></p>
<p>基本使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#随便定义的html文本举例</span></span><br><span class="line">text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">	&lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">	&lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">	&lt;script type=&quot;text/javascript&quot; src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">	&lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">		&lt;input type=&quot;text&quot;&gt;</span></span><br><span class="line"><span class="string">		&lt;p&gt;&lt;a href=&#x27;www.baidu.com&#x27;&gt;hello&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">	&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment">#将字符串解析为html文档树</span></span><br><span class="line">html= etree.HTML(text)</span><br><span class="line"><span class="built_in">print</span>(html)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将html列化为字符串,即获取元素的源代码</span></span><br><span class="line">result = etree.tostring(html).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#element.get(&quot;属性&quot;)  获取元素的某个属性的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从文件中读取html代码</span></span><br><span class="line">html = etree.parse(<span class="string">&quot;hello.html&quot;</span>)</span><br><span class="line">result = etree.tostring(html).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h3 id="在lxml中使用xpath语法："><a href="#在lxml中使用xpath语法：" class="headerlink" title="在lxml中使用xpath语法："></a>在lxml中使用xpath语法：</h3><p>文件路径：hello.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link0.html&quot;</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link1.html&quot;</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-inactive&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link2.html&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link3.html&quot;</span>&gt;</span>forth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link4.html&quot;</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>练习语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在lxml中使用xpath</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">html = etree.parse(<span class="string">&quot;hello.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1,获取所有li标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(etree.tostring(i))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#2，获取所有li标签下的class属性值</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/@class&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3,获取li标签下href为&quot;link0.html&quot;的a标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/a[@href=&#x27;link0.html&#x27;]&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4,获取li标签下所有span标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li//span&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5,获取li标签下的a标签的所有class属性</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/a//@class&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6,获取最后一个li的a的href属性对应的值</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()]/a/@href&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7,获取倒数第二个li元素的内容</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()-1]/a&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result[<span class="number">0</span>].text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8,获取倒是第二个li元素的内容的第二种方式</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()-1]/a/text()&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="xpath实战-爬取笑话网站："><a href="#xpath实战-爬取笑话网站：" class="headerlink" title="xpath实战-爬取笑话网站："></a>xpath实战-爬取笑话网站：</h3><p>网站：<a href="https://xiaohua.zol.com.cn/new/">https://xiaohua.zol.com.cn/new/</a></p>
<p>详情：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;https://xiaohua.zol.com.cn/&quot;</span>   </span><br><span class="line">joke = []     <span class="comment">#存放joke的容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解析每一页笑话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    detail_url_list = html.xpath(<span class="string">&quot;//ul[@class=&#x27;article-list&#x27;]/li[@class=&#x27;article-summary&#x27;]//a[@class=&#x27;all-read&#x27;]/@href&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_url_list:</span><br><span class="line">        detail_url = url+detail_url</span><br><span class="line">        parse_detail(detail_url)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#解析详情页笑话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>(<span class="params">detail_url</span>):</span></span><br><span class="line">    resp = requests.get(detail_url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    joke_title = html.xpath(<span class="string">&quot;//h1[@class=&#x27;article-title&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    joke_content = <span class="string">&#x27;&#x27;</span>.join(html.xpath(<span class="string">&quot;//div[@class=&#x27;article-text&#x27;]//text()&quot;</span>)).strip()</span><br><span class="line">    joke.append(&#123;</span><br><span class="line">        <span class="string">&quot;joke_title&quot;</span>: joke_title,</span><br><span class="line">        <span class="string">&quot;joke_content&quot;</span>: joke_content</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;joke_title&#125;</span>笑话下载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#主流程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):      <span class="comment">##1，2，3页笑话</span></span><br><span class="line">        page_url = <span class="string">f&quot;https://xiaohua.zol.com.cn/new/<span class="subst">&#123;i&#125;</span>.html&quot;</span>    </span><br><span class="line">        parse_page(page_url)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;joke.json&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="comment">#json.dump函数，将内存的数据保存到文件中</span></span><br><span class="line">        <span class="comment">#如果ensure_ascii没有设置为False，那么保存到json文件中文会存储为Unicode字符串</span></span><br><span class="line">        json.dump(joke, fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;所有笑话加载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p><em><strong>注</strong></em>：测试时，for循环中应添加break终止循环。代码运行时，添加time.sleep(2)，避免数据抓取过于频繁。</p>
<h2 id="BeautifulSoup4库"><a href="#BeautifulSoup4库" class="headerlink" title="BeautifulSoup4库"></a>BeautifulSoup4库</h2><p>和lxml一样，BeautifulSoup也是一个HTML/XML的解析器，主要功能也是解析和提取HTML/XML数据。</p>
<h3 id="安装和文档"><a href="#安装和文档" class="headerlink" title="安装和文档:"></a>安装和文档:</h3><p>安装：</p>
<p>pip install bs4</p>
<p>中文文档：</p>
<p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p>
<h3 id="几大解析工具对比："><a href="#几大解析工具对比：" class="headerlink" title="几大解析工具对比："></a>几大解析工具对比：</h3><table>
<thead>
<tr>
<th>解析工具</th>
<th>解析速度</th>
<th>解析难度</th>
</tr>
</thead>
<tbody><tr>
<td>BeautifulSoup</td>
<td>最慢</td>
<td>最简单</td>
</tr>
<tr>
<td>lxml</td>
<td>快</td>
<td>简单</td>
</tr>
<tr>
<td>正则</td>
<td>最快</td>
<td>最难</td>
</tr>
</tbody></table>
<h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">	&lt;a href=&quot;link.html&quot;&gt;hello word!!&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#第二个参数选择解析器，这里使用的是lxml解析器，已下载过。</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(soup)  	<span class="comment">#输html文档树</span></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())  <span class="comment">#输出格式有自动缩进</span></span><br><span class="line"><span class="built_in">print</span>(soup.a)   <span class="comment">#获取a标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.name)   <span class="comment">#获取a标签的标签名，就是a</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.attrs)  <span class="comment">#获取a标签的所有属性，返回字典</span></span><br><span class="line"><span class="built_in">print</span>(soup.a[<span class="string">&quot;href&quot;</span>]) <span class="comment">#a的href属性值</span></span><br></pre></td></tr></table></figure>

<h3 id="常见的四种对象："><a href="#常见的四种对象：" class="headerlink" title="常见的四种对象："></a>常见的四种对象：</h3><p>1，Tag：BeautifulSoup种所有标签都是Tag类型</p>
<p>2，NavigableString：标签的文本内容，继承python中的str，用法也是和str一样的</p>
<p>3，BeautifulSoup：继承Tag，用来生成BeautifulSoup树的，用法和Tag差不多</p>
<p>3，Comment：继承NavigableString，是注解内容</p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;hello word!!&lt;/p&gt;</span></span><br><span class="line"><span class="string">	&lt;!-- &lt;a href=&quot;link1&quot;&gt;hello word&lt;/a&gt; --&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.p)     <span class="comment">#Tag类型</span></span><br><span class="line"><span class="built_in">print</span>(soup.p.string)  <span class="comment">#NavigableString类型</span></span><br><span class="line"><span class="built_in">print</span>(soup)		  <span class="comment">#BeautifulSoup类型</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.string)  <span class="comment">#Comment类型</span></span><br></pre></td></tr></table></figure>

<h3 id="contents和children："><a href="#contents和children：" class="headerlink" title="contents和children："></a>contents和children：</h3><p><em>用法</em>：</p>
<p>Tag对象.contents     </p>
<p>Tag对象.children</p>
<p><em>返回</em>：</p>
<p>返回某个标签下的直接子元素，其中也包括字符串。</p>
<p><em>区别</em>：</p>
<p>contents返回的是list列表</p>
<p>children返回的是一个迭代器</p>
<h3 id="string和strings，stripped-strings属性和get-text-方法："><a href="#string和strings，stripped-strings属性和get-text-方法：" class="headerlink" title="string和strings，stripped_strings属性和get_text()方法："></a>string和strings，stripped_strings属性和get_text()方法：</h3><p><em>string</em>:获取某个标签下的文本内容，返回的是字符串。如果有多行，就无法获取。</p>
<p><em>strings</em>:获取某个标签下的文本内容，可以是多行，返回的是生成器。</p>
<p><em>stripped_strings</em>:用法和strings差不多可以是多行，放回生成器，区别是该属性会去除空白字符，如空格换行符。</p>
<p><em>get_text()</em>:获取某个标签下的文本内容，可以是多行，返回字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"></span><br><span class="line">string = soup.li.string</span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line">strings = soup.ul.strings</span><br><span class="line"><span class="built_in">print</span>(strings)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strings:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">stripped_strings = soup.ul.stripped_strings</span><br><span class="line"><span class="built_in">print</span>(stripped_strings)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> stripped_strings:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h3 id="find-和find-all-方法"><a href="#find-和find-all-方法" class="headerlink" title="find()和find_all()方法:"></a>find()和find_all()方法:</h3><p>搜索文档树使用的方法。</p>
<p>find方法是找到第一个满足条件的标签返回，返回一个元素。</p>
<p>find_all方法是把所有满足条件的标签都返回，返回的是一个list列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-0&quot; id=&#x27;hello&#x27;&gt;&lt;a href=&quot;link0.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;forth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取第一个li标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.li)</span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&quot;li&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有的li标签</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&quot;li&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取第二个li标签</span></span><br><span class="line">li = soup.find_all(<span class="string">&quot;li&quot;</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="comment">#获取class等于item-inactive的li标签，注：由于属性class有重名，用class_</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>, class_=<span class="string">&#x27;item-inactive&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"><span class="comment">#获取所有a标签href值</span></span><br><span class="line">a_list = soup.find_all(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> a_list:</span><br><span class="line">    <span class="built_in">print</span>(a[<span class="string">&quot;href&quot;</span>])</span><br><span class="line"><span class="comment">#获取所有li标签的文本内容</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    <span class="built_in">print</span>(li.string)</span><br><span class="line"><span class="comment">#只获取前两个li标签，limit限制个数</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>, limit=<span class="number">2</span>) </span><br></pre></td></tr></table></figure>

<h3 id="select-方法："><a href="#select-方法：" class="headerlink" title="select()方法："></a>select()方法：</h3><p>有时候使用css选择器的方式更加方便，需要使用css选择器时，用select方法。返回list列表。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#通过标签名查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line"><span class="comment">#通过class查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;.item-inactive&#x27;</span>))</span><br><span class="line"><span class="comment">#通过id查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;#hello&#x27;</span>))</span><br><span class="line"><span class="comment">#组合查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li a&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li &gt; a&#x27;</span>))</span><br><span class="line"><span class="comment">#通过属性查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a[href=&quot;link0.html&quot;]&#x27;</span>))</span><br><span class="line"><span class="comment">#获取内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a&#x27;</span>)[<span class="number">0</span>].get_text())</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战1-豆瓣Top250爬取："><a href="#爬虫实战1-豆瓣Top250爬取：" class="headerlink" title="爬虫实战1-豆瓣Top250爬取："></a>爬虫实战1-豆瓣Top250爬取：</h3><p>网站：<a href="https://movie.douban.com/top250">https://movie.douban.com/top250</a></p>
<p>爬取：爬取top250的电影的信息，这里只爬取了电影名，演员，上映时间，评分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#访问页，获取每一页里的所有详情页url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_urls</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    html = resp.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    li_list = soup.find(<span class="string">&quot;ol&quot;</span>, class_=<span class="string">&quot;grid_view&quot;</span>).find_all(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">    detail_urls = []</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        detail_url = li.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&quot;href&quot;</span>]</span><br><span class="line">        detail_urls.append(detail_url)</span><br><span class="line">    <span class="keyword">return</span> detail_urls</span><br><span class="line"><span class="comment">#解析详情页：访问详情页，解析电影信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>(<span class="params">detail_url, fp</span>):</span></span><br><span class="line">    resp = requests.get(detail_url, headers=headers)</span><br><span class="line">    html = resp.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(soup.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span>=<span class="string">&quot;wrapper&quot;</span>).find(<span class="string">&quot;h1&quot;</span>).stripped_strings))</span><br><span class="line">    actor_exist = soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;actor&quot;</span>)</span><br><span class="line">    actor = <span class="string">&quot;暂无数据&quot;</span></span><br><span class="line">    <span class="comment">#由于有的电影没有演员信息，所有这里if判断</span></span><br><span class="line">    <span class="keyword">if</span> actor_exist:</span><br><span class="line">        actor = <span class="string">&#x27; &#x27;</span>.join(<span class="built_in">list</span>(soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;actor&quot;</span>).find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;attrs&quot;</span>).stripped_strings))</span><br><span class="line">    date = soup.find(<span class="string">&quot;div&quot;</span>, <span class="built_in">id</span>=<span class="string">&quot;info&quot;</span>).find_all(<span class="string">&quot;span&quot;</span>, <span class="built_in">property</span>=<span class="string">&quot;v:initialReleaseDate&quot;</span>)[<span class="number">0</span>].string</span><br><span class="line">    score = soup.find(<span class="string">&quot;strong&quot;</span>, class_=<span class="string">&quot;ll rating_num&quot;</span>).string</span><br><span class="line">    num = soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;top250-no&quot;</span>).string</span><br><span class="line">    fp.write(<span class="string">&quot;电影名：&#123;&#125;，演员：&#123;&#125;，上映时间：&#123;&#125;，评分：&#123;&#125;\n\n&quot;</span>.<span class="built_in">format</span>(name, actor, date, score))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num&#125;</span>-<span class="subst">&#123;name&#125;</span>,电影信息加载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    base_url = <span class="string">&quot;https://movie.douban.com/top250?start=&#123;&#125;&amp;filter=&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;movieTop250.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">250</span>,<span class="number">25</span>):</span><br><span class="line">            page_url = base_url.<span class="built_in">format</span>(i)</span><br><span class="line">            detail_urls = get_detail_urls(page_url)</span><br><span class="line">            <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">                parse_detail(detail_url, fp)</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;top250部电影信息加载完毕！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战2-快代理ip爬取："><a href="#爬虫实战2-快代理ip爬取：" class="headerlink" title="爬虫实战2-快代理ip爬取："></a>爬虫实战2-快代理ip爬取：</h3><p>网站：<a href="https://www.kuaidaili.com/free/">https://www.kuaidaili.com/free/</a></p>
<p>爬取：IP信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpSpider</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;准备10页的url&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.page_urls = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">            page_url = <span class="string">&quot;https://www.kuaidaili.com/free/inha/&#123;&#125;/&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">            self.page_urls.append(page_url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page_infos</span>(<span class="params">self,page_url</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;解析每一页的代理ip信息，并返回&#x27;&#x27;&#x27;</span></span><br><span class="line">        resp = requests.get(page_url, headers=headers)</span><br><span class="line">        html = resp.text</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        trs = soup.find(<span class="string">&quot;table&quot;</span>, class_=<span class="string">&quot;table table-bordered table-striped&quot;</span>).find(<span class="string">&quot;tbody&quot;</span>).find_all(<span class="string">&quot;tr&quot;</span>)</span><br><span class="line">        infos = []</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">            info = <span class="built_in">list</span>(tr.stripped_strings)</span><br><span class="line">            infos.append(info)</span><br><span class="line">        <span class="keyword">return</span> infos</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;主程序&#x27;&#x27;&#x27;</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ipSpider.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;IP&quot;</span>,<span class="string">&quot;PORT&quot;</span>,<span class="string">&quot;匿名度&quot;</span>,<span class="string">&quot;类型&quot;</span>,<span class="string">&quot;位置&quot;</span>,<span class="string">&quot;响应速度&quot;</span>,<span class="string">&quot;最后验证时间&quot;</span>))</span><br><span class="line">            <span class="keyword">for</span> page_url <span class="keyword">in</span> self.page_urls:</span><br><span class="line">                infos = self.parse_page_infos(page_url)</span><br><span class="line">                <span class="keyword">for</span> info <span class="keyword">in</span> infos:</span><br><span class="line">                    fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(info[<span class="number">0</span>],info[<span class="number">1</span>],info[<span class="number">2</span>],info[<span class="number">3</span>],info[<span class="number">4</span>],info[<span class="number">5</span>],info[<span class="number">6</span>]))</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;count&#125;</span>页解析完成！&quot;</span>)</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ipSpider = IpSpider()</span><br><span class="line">    ipSpider.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h2 id="正则表达式和re模块"><a href="#正则表达式和re模块" class="headerlink" title="正则表达式和re模块"></a>正则表达式和re模块</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;abc&quot;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;a&#x27;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h3 id="使用规则："><a href="#使用规则：" class="headerlink" title="使用规则："></a>使用规则：</h3><h4 id="匹配单个字符："><a href="#匹配单个字符：" class="headerlink" title="匹配单个字符："></a>匹配单个字符：</h4><ul>
<li><p>点(.)：匹配任意字符(除了\n)</p>
</li>
<li><p>\d：匹配任意数字</p>
</li>
<li><p>\D：匹配任意非数字</p>
</li>
<li><p>\s：匹配任意空白字符(\n,\t,\r)</p>
</li>
<li><p>\S：非空白字符</p>
</li>
<li><p>\w：匹配大小写英文字母，数字以及下划线</p>
</li>
<li><p>\W