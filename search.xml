<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><span id="more"></span>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>数据分析与挖掘(数据分析三剑客)</title>
    <url>/2021/11/25/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%89%E5%89%91%E5%AE%A2/</url>
    <content><![CDATA[<p>介绍了python中用于数据分析的三个模块，numpy，Pandas，Matplotlib。</p>
<span id="more"></span>

<h1 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h1><p>本次学习我们使用的是Anaconda数据科学平台</p>
<p>Anaconda是Python的一个发行版，里面内置了很多常用的库，例如Pandas、NumPy，Matplotlib，这些都不用自己再安装（pip）了。</p>
<p>下载一个Anaconda就自带了Python和常用的工具，Python本身也不需要再单独下载了。</p>
<p><em><strong>注：</strong></em>如果自己已经安装了python，并且需要再安装Anaconda的话，就把之前安装的python的环境变量删除掉。安装时记得勾选添加环境变量。</p>
<p><strong>jupyter notebook</strong>  </p>
<p>它是一个交互式记事本（Anaconda自带），里面可以写Python代码，还可以插入文字和图片（markdown模式）。</p>
<p>使用方法：</p>
<p>在cmd中打开需要目录后，输入jupyter notebook即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#jupyter notebook 快捷键</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行：Ctrl + Enter 或 Shift + Enter</span></span><br><span class="line"><span class="comment">#注释：Ctrl + /</span></span><br><span class="line"><span class="comment">#帮助：Shift + Tab(按一到四次)</span></span><br></pre></td></tr></table></figure>

<p>在jupyter notebook中安装包：<code>! pip install 库名 -i https://pypi.douban.com/simple</code></p>
<h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><h2 id="数组array"><a href="#数组array" class="headerlink" title="数组array"></a>数组array</h2><p><strong>运算快，效率高</strong></p>
<p>列表list在进行数学运算时，列表不能直接参与运算，需要借助for循环、列表表达式等。而numpy提供的数组可以直接参与运算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment"># list + 5    会报错</span></span><br><span class="line">array1 = np.array(<span class="built_in">list</span>)</span><br><span class="line">array1 + <span class="number">5</span>     </span><br><span class="line"><span class="comment">#结果：array([6, 7, 8, 9])</span></span><br></pre></td></tr></table></figure>

<p>列表的索引方法可以在数组中使用，而且数组还有间断索引和逻辑索引。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([<span class="number">11</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">18</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#数组和列表一样可以索引，切片索引</span></span><br><span class="line">array[-<span class="number">1</span>]     </span><br><span class="line">array[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment">#间隔索引</span></span><br><span class="line">array[[<span class="number">0</span>,<span class="number">2</span>]]    <span class="comment">#结果：array([11, 15])</span></span><br><span class="line"><span class="comment">#逻辑索引，即布尔索引</span></span><br><span class="line">array&lt;<span class="number">10</span>        <span class="comment">#结果：array([False,  True, False,  True, False,  True])</span></span><br><span class="line">array[array&lt;<span class="number">10</span>]   <span class="comment">#结果：array([8, 6, 1])</span></span><br></pre></td></tr></table></figure>

<p><strong>二维数组</strong>，索引时采用  [行下标,列下标]  即  [rows,cols] ，下标都是从0开始。使用 ：符号表示任意。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array2 = np.array([</span><br><span class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">        [<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>],</span><br><span class="line">        [<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>]</span><br><span class="line">    ])</span><br><span class="line">array2[<span class="number">1</span>,<span class="number">1</span>]        <span class="comment">#结果：6</span></span><br><span class="line">array2[<span class="number">1</span>,:]        <span class="comment">#结果：array([2, 6, 9, 1])</span></span><br><span class="line">array2[:,<span class="number">2</span>]        <span class="comment">#结果：array([3, 9, 7])</span></span><br></pre></td></tr></table></figure>

<h2 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h2><p><strong>数学运算符</strong></p>
<ul>
<li><p>+：数组对应元素的和</p>
</li>
<li><p>-：数组对应元素的差</p>
</li>
<li><p>*：数组对应元素的乘积</p>
</li>
<li><p>/：数组对应元素的商</p>
</li>
<li><p>%：数组对应元素商的余数</p>
</li>
<li><p>//：数组对应元素的整除数</p>
</li>
<li><p>**：数组对应元素的幂指数</p>
</li>
</ul>
<p><strong>比较运算符</strong></p>
<ul>
<li>&gt; 或 np.greater(arr1,arr2)：判断arr1的元素是否大于arr2的元素</li>
<li>&gt;= 或 np.greater_equal(arr1,arr2)：判断arr1的元素是否大于等于arr2的元素</li>
<li>&lt; 或 np.less(arr1,arr2)：判断arr1的元素是否小于arr2的元素</li>
<li>&lt;= 或 np.less_equal(arr1,arr2)：判断arr1的元素是否小于等于arr2的元素</li>
<li>== 或 np.equal(arr1,arr2)：判断arr1的元素是否等于arr2的元素</li>
<li>!= 或 np.not_equal(arr1,arr2)：判断arr1的元素是否不等于arr2的元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>])</span><br><span class="line">arr2 = np.array([<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">9</span>])</span><br><span class="line">arr1+arr2           <span class="comment">#结果：array([ 3,  9,  6, 15])</span></span><br><span class="line">arr1&lt;arr2           <span class="comment">#结果：array([ True, False, False,  True])</span></span><br><span class="line">np.less(arr1,arr2)  <span class="comment">#结果：array([ True, False, False,  True])</span></span><br></pre></td></tr></table></figure>

<p><strong>常用的数学函数</strong></p>
<ul>
<li>np.round(arr)：对各元素四舍五入</li>
<li>np.sqrt(arr)：计算各元素的算术平方根</li>
<li>np.square(arr)：计算各元素的平方值</li>
<li>np.exp(arr)：计算以e为底的指数</li>
<li>np.power(arr, a)：计算各元素的指数</li>
<li>np.log2(arr)：计算以2为底各元素的对数</li>
<li>np.log10(arr)：计算以10为底各元素的对数</li>
<li>np.log(arr)：计算以e为底各元素的对数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>])</span><br><span class="line">np.square(arr1)</span><br><span class="line"><span class="comment">#结果：array([ 1, 25,  9, 36], dtype=int32)</span></span><br><span class="line">np.sqrt(arr1)</span><br><span class="line"><span class="comment">#结果：array([1.        , 2.23606798, 1.73205081, 2.44948974])</span></span><br></pre></td></tr></table></figure>

<p><strong>常用的统计函数</strong></p>
<ul>
<li>np.min(arr,axis)：按照轴的方向计算最小值</li>
<li>np.max(arr,axis)：按照轴的方向计算最大值</li>
<li>np.mean(arr,axis)：按照轴的方向计算平均值</li>
<li>np.median(arr,axis)：按照轴的方向计算中位数</li>
<li>np.sum(arr,axis)：按照轴的方向计算求和</li>
<li>np.std(arr,axis)：按照轴的方向计算标准差</li>
<li>np.var(arr,axis)：按照轴的方向计算方差</li>
</ul>
<p><em>注意</em>：axis=0 时，计算数组各列的统计值，形象记忆变成胖子；axis=1时，计算数组各行的统计值，形象记忆变成瘦子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</span><br><span class="line">    [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">#对每行计算求和,三种写法</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(np.<span class="built_in">sum</span>(arr[i,:]))</span><br><span class="line">np.<span class="built_in">sum</span>(arr, axis=<span class="number">1</span>)</span><br><span class="line">arr.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对每列计算求和，三种写法</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(np.<span class="built_in">sum</span>(arr[:,i]))</span><br><span class="line">np.<span class="built_in">sum</span>(arr, axis=<span class="number">0</span>)</span><br><span class="line">arr.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="random随机数"><a href="#random随机数" class="headerlink" title="random随机数"></a>random随机数</h2><p>import numpy as np</p>
<ul>
<li>np.random.randint()：随机整数</li>
<li>np.random.uniform()：随机均匀分布</li>
<li>np.random.normal()：随机正态分布</li>
</ul>
<p><strong>案例</strong>：有100钱去理想状态下赌博，赢了加1钱，输了扣1钱。模拟赌1000次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">money = <span class="number">100</span></span><br><span class="line">P = [<span class="number">100</span>]  <span class="comment">#用于记录每次的钱</span></span><br><span class="line">R = np.random.uniform(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> R:</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">0.5</span>:</span><br><span class="line">        money -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">0.5</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        money += <span class="number">1</span></span><br><span class="line">    P.append(money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1001</span>), P)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><a href="https://imgtu.com/i/oM0B9I"><img src="https://z3.ax1x.com/2021/11/29/oM0B9I.png" alt="oM0B9I.png" border="0" /></a></p>
<h1 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h1><h2 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h2><p><strong>文本文件</strong></p>
<p>pandas.read_csv(filepath_or_buffer, sep=”,”)<br><em>参数</em>：</p>
<ul>
<li>filepath_or_buffer：指定txt或csv文件所在的路径</li>
<li>sep：指定原数据集中各字段之间的分隔符，默认为逗号” , “。</li>
<li>header：是否将原数据集中第一行作为表头，默认是，赋值None不是</li>
<li>names：如果原数据集中没有表头，该参数添加表头</li>
<li>usecols：指定需要读取原数据集中的那些字段</li>
<li>skiprows：数据读取时，指定需要跳过原数据集开头的行数（空白行不计入）</li>
<li>skipfooter：数据读取时，指定需要跳过原数据集末尾的行数</li>
<li>converters：将字段的类型转换（以字典的形式）</li>
<li>encoding：指定字符编码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&quot;D:\tempFile(2)&quot;</span></span><br><span class="line">pn.read_csv(path+<span class="string">&quot;/test_1.txt&quot;</span>, sep=<span class="string">&quot; &quot;</span>, skiprows=<span class="number">1</span>, skipfooter=<span class="number">1</span>, </span><br><span class="line">            header=<span class="literal">None</span>, names=[<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>], </span><br><span class="line">            usecols=[<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>], converters=&#123;<span class="string">&quot;id&quot;</span>:<span class="built_in">str</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>excel表</strong></p>
<p>pandas.read_excel(io, sheetname=0)</p>
<p><em>参数</em>：</p>
<ul>
<li>io：工作蒲的路径</li>
<li>sheetname：哪张表，默认第一张</li>
<li>header，skiprows，skip_footer等等参数同上。</li>
</ul>
<p><strong>sql</strong></p>
<p>pandas.read_sql(“sql语句”, con=连接)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"><span class="comment">#利用pymysql创建连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;root&quot;</span>, </span><br><span class="line">                      database=<span class="string">&quot;studentv2db&quot;</span>, port=<span class="number">3306</span>, charset=<span class="string">&quot;utf8&quot;</span>, )</span><br><span class="line"></span><br><span class="line">df = pn.read_sql(<span class="string">&quot;select * from student&quot;</span>, con=con)</span><br><span class="line"><span class="comment">#关闭资源</span></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure>

<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><strong>数据的概览</strong>（df表示数据集）</p>
<ul>
<li>df.head()：浏览前5条数据</li>
<li>df.shape：查看数据量，几行几列</li>
<li>df.size：查看数据量，行*列</li>
<li>df.columns：查看所有字段</li>
<li>df.dtypes：查看字段类型，在pandas中，非数值型就是object类型</li>
<li>df.describe()：数据描述，默认对数值型字段经行数学统计。df.describe(include=”object”)对非数值型字段数学统计。</li>
</ul>
<p><strong>数据筛选</strong></p>
<ul>
<li>df.字段名：选取某一字段</li>
<li>df[“字段名”]：选取某一字段，可以多个字段，平时推荐该方法</li>
<li>df.loc[行条件，列名称]：选取某子表，用冒号” : “ 表示任意行或列。如<code>df.loc[ df[&quot;Gender&quot;]==&quot;男&quot;, [&quot;Name&quot;, &quot;Gender&quot;] ]</code>，表示选取“Gender”条件为男的”Name“和”Gender“字段。</li>
</ul>
<p><strong>补充</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#简单构造数据集df</span></span><br><span class="line">df = pn.DataFrame(&#123;<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;bob&quot;</span>,<span class="string">&quot;jake&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">18</span>,<span class="number">20</span>]&#125;)</span><br><span class="line"><span class="comment">#对df数据集重新定义字段顺序</span></span><br><span class="line">df = pn.DataFrame(df, columns=[<span class="string">&quot;age&quot;</span>, <span class="string">&quot;name&quot;</span>])</span><br><span class="line"><span class="comment">#对df数据集的字段重命名</span></span><br><span class="line">df = df.rename(columns=&#123;<span class="string">&quot;age&quot;</span>:<span class="string">&quot;年龄&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;姓名&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><p><strong>数据类型的修改</strong></p>
<ul>
<li><p>pandas.to_datetime(columns,format=)：转换成时间类型</p>
</li>
<li><p>columns.astype()：转换从其他类型</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将df的&quot;Birthday&quot;字段转换成时间类型</span></span><br><span class="line">df[<span class="string">&quot;Birthday&quot;</span>] = pn.to_datetime(df[<span class="string">&quot;Birthday&quot;</span>], <span class="built_in">format</span>=<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"><span class="comment">#将df的&quot;SNo&quot;字段转换成str类型</span></span><br><span class="line">df[<span class="string">&quot;SNo&quot;</span>] = df[<span class="string">&quot;SNo&quot;</span>].astype(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>

<p><strong>数据冗余</strong></p>
<ul>
<li>df.duplicated()：查看数据冗余（所有字段都一致），subset参数指定某一字段</li>
<li>df.drop_duplicates()：删除冗余的记录，inplace参数为True表示同步原数据集df</li>
</ul>
<p><strong>异常值识别和处理</strong></p>
<p>无</p>
<p><strong>缺省值</strong></p>
<ul>
<li>df.isnull()：查看缺省值</li>
<li>df.dropna()：删除缺省值</li>
<li>df.fillna()：填充缺省值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看,可借助any()和sum()</span></span><br><span class="line">df.isnull()</span><br><span class="line">df.isnull().<span class="built_in">any</span>(axis=<span class="number">0</span>)</span><br><span class="line">df.isnull().<span class="built_in">sum</span>(axis=<span class="number">0</span>)                 <span class="comment">#计算每个字段的缺省值数量</span></span><br><span class="line">df.isnull().<span class="built_in">sum</span>(axis=<span class="number">0</span>) / df.shape[<span class="number">0</span>]   <span class="comment">#计算每个字段的缺省值率</span></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">df.dropna(axis=<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#填充</span></span><br><span class="line">df.fillna(value=<span class="number">0</span>, inplace=<span class="literal">True</span>)      <span class="comment">#所有缺省值填充0</span></span><br><span class="line">df.fillna(value=&#123;<span class="string">&quot;Birthday&quot;</span>:df[<span class="string">&quot;Birthday&quot;</span>].mode()[<span class="number">0</span>],<span class="string">&quot;Image&quot;</span>:<span class="string">&quot;无&quot;</span>&#125;)   <span class="comment">#不同字段填充不同数据</span></span><br><span class="line"><span class="comment">#补充要点</span></span><br><span class="line">df[<span class="string">&quot;Birthday&quot;</span>].mode()  <span class="comment">#某字段众数</span></span><br><span class="line">df[<span class="string">&quot;SNo&quot;</span>].median()     <span class="comment">#某字段中位数</span></span><br></pre></td></tr></table></figure>

<h2 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h2><p><strong>透视表功能</strong></p>
<p>pandas.pivot_table(data, index=None, columns=None, values=None, aggfunc=”mean”)</p>
<p><em>参数</em>：</p>
<ul>
<li>data：原数据集</li>
<li>index：需要拉入”行标签“的字段列表</li>
<li>columns：需要拉入”列标签“的字段列表</li>
<li>values：需要计算的字段</li>
<li>aggfunc：指定统计函数，也可以指定numpy模块中的其他统计函数</li>
<li>fill_value：指定一个标量，用于填充缺失值</li>
<li>margins：bool类型参数，是否显示行或列的总计数，默认为False</li>
<li>droopan：bool类型参数，是否删除整列为缺失的字段，默认为True</li>
<li>margins_name：指定行或列的总计名称，默认为All</li>
</ul>
<p>数据集如下：表3-1</p>
<table>
<thead>
<tr>
<th>id</th>
<th>姓名</th>
<th>性别</th>
<th>部门</th>
<th>年龄</th>
<th>薪水</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>李</td>
<td>男</td>
<td>开发部</td>
<td>23</td>
<td>12000</td>
</tr>
<tr>
<td>2</td>
<td>王</td>
<td>女</td>
<td>UI部</td>
<td>33</td>
<td>8000</td>
</tr>
<tr>
<td>3</td>
<td>刘</td>
<td>女</td>
<td>开发部</td>
<td>34</td>
<td>15000</td>
</tr>
<tr>
<td>4</td>
<td>赵</td>
<td>女</td>
<td>UI部</td>
<td>45</td>
<td>9000</td>
</tr>
<tr>
<td>5</td>
<td>江</td>
<td>男</td>
<td>测试部</td>
<td>26</td>
<td>23000</td>
</tr>
<tr>
<td>6</td>
<td>陈</td>
<td>女</td>
<td>测试部</td>
<td>28</td>
<td>18000</td>
</tr>
<tr>
<td>7</td>
<td>阮</td>
<td>女</td>
<td>开发部</td>
<td>29</td>
<td>15000</td>
</tr>
<tr>
<td>8</td>
<td>莫</td>
<td>男</td>
<td>UI部</td>
<td>27</td>
<td>10000</td>
</tr>
<tr>
<td>9</td>
<td>金</td>
<td>男</td>
<td>开发部</td>
<td>18</td>
<td>8000</td>
</tr>
<tr>
<td>10</td>
<td>曹</td>
<td>男</td>
<td>开发部</td>
<td>36</td>
<td>10000</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"><span class="comment">#df数据集如上表3-1</span></span><br><span class="line">df = pn.read_excel(<span class="string">r&quot;D:\tempFile(2)\test_2.xlsx&quot;</span>)</span><br><span class="line"><span class="comment">#男女性别薪水的平均值</span></span><br><span class="line">pn.pivot_table(df, index=<span class="string">&quot;性别&quot;</span>, values=<span class="string">&quot;薪水&quot;</span>, aggfunc=<span class="string">&quot;mean&quot;</span>)</span><br><span class="line"><span class="comment">#不同部门，男女性别薪水平均值</span></span><br><span class="line">pn.pivot_table(df, index=<span class="string">&quot;部门&quot;</span>, columns=<span class="string">&quot;性别&quot;</span>, values=<span class="string">&quot;薪水&quot;</span>, aggfunc=<span class="string">&quot;mean&quot;</span>)</span><br><span class="line"><span class="comment"># 不同部门，男女性别数量</span></span><br><span class="line">pn.pivot_table(df, index=<span class="string">&quot;部门&quot;</span>, columns=<span class="string">&quot;性别&quot;</span>, aggfunc=<span class="string">&quot;size&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>分组汇总</strong></p>
<ul>
<li>df.groupby(by=”字段”)：在汇总前，设定需要分组的字段</li>
<li>grouped.aggregate()：基于上面的groupby方法分组后的结果，做进一步的统计汇总。需以字典的形式传参，选择统计的字段和对应的统计方法。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#df数据集如上表3-1</span></span><br><span class="line">df = pn.read_excel(<span class="string">r&quot;D:\tempFile(2)\test_2.xlsx&quot;</span>)</span><br><span class="line"><span class="comment">#对部门，性别进行分组</span></span><br><span class="line">grouped = df.groupby(by = [<span class="string">&quot;部门&quot;</span>, <span class="string">&quot;性别&quot;</span>])</span><br><span class="line"><span class="comment">#对分组后的结果做统计计算：年龄的最小值，薪水平均值</span></span><br><span class="line">result = grouped.aggregate(&#123;<span class="string">&quot;年龄&quot;</span>:np.<span class="built_in">min</span>, <span class="string">&quot;薪水&quot;</span>:np.mean&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>合并表</strong></p>
<p>pandas.concat(objs)</p>
<p><em>参数</em></p>
<ul>
<li>objs：指定需要合并的对象</li>
<li>axis：合并的轴，默认为0，合并行；为1，合并列。</li>
<li>join：合并的方式，默认为outer，表示合并所有数据；为inner，表示合并公共部分数据</li>
<li>join_axes：合并数据后，指定保留的数据轴</li>
<li>ignore_index：bool类型参数，是否忽略原数据集的索引，默认False。如果为True，则重新生成新索引。</li>
<li>keys：为合并后的数据添加新的索引，用于区分各个数据源于哪张表。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"></span><br><span class="line">df1 = pn.DataFrame(&#123;<span class="string">&quot;id&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;Jake&quot;</span>,<span class="string">&quot;Alice&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">18</span>,<span class="number">16</span>,<span class="number">10</span>]&#125;)</span><br><span class="line">df2 = pn.DataFrame(&#123;<span class="string">&quot;id&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;Jeff&quot;</span>,<span class="string">&quot;Jamse&quot;</span>,<span class="string">&quot;Alice&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">11</span>,<span class="number">25</span>,<span class="number">10</span>]&#125;)</span><br><span class="line">pn.concat([df1,df2],keys=[<span class="string">&quot;表1&quot;</span>,<span class="string">&quot;表2&quot;</span>])</span><br></pre></td></tr></table></figure>

<p><strong>连接表</strong></p>
<p>pandas.merge(left, right, how=”inner”, on=None)</p>
<p><em>参数</em></p>
<ul>
<li>left：连接的左表（主表）</li>
<li>right：连接的右表（辅表）</li>
<li>how：连接方式，默认inner内连接。left左连接，right右链接，outer外连接</li>
<li>on：指定连接的两张表共同的字段。如果没有共同的字段，则使用下面两个参数</li>
<li>left_on：指定左表需要连接的共同字段</li>
<li>rigth_on：指定右表需要连接的共同字段</li>
<li>left_index：bool类型参数，是否将左表的行索引作为连接的共同字段，默认False</li>
<li>right_index：bool类型参数，是否将右表的行索引作为连接的共同字段，默认False</li>
<li>sort：bool类型参数，是否对连接后的数据按照共同字段排序，默认False</li>
<li>suffixes：如果数据连接中存在相同的字段名，则使用前缀经行区分。传列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line">df1 = pn.DataFrame(&#123;<span class="string">&quot;id&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;Jake&quot;</span>,<span class="string">&quot;Alice&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">18</span>,<span class="number">16</span>,<span class="number">10</span>]&#125;)</span><br><span class="line">df2 = pn.DataFrame(&#123;<span class="string">&quot;ID&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;score&quot;</span>:[<span class="number">99</span>,<span class="number">83</span>,<span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line">pn.merge(df1,df2,left_on=<span class="string">&quot;id&quot;</span>,right_on=<span class="string">&quot;ID&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1>]]></content>
      <categories>
        <category>数据分析与挖掘</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy框架</title>
    <url>/2021/09/07/Scrapy%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>写一个爬虫，需要做很多事情。比如：发送网络请求、数据解析、数据存储、反反爬虫机制（更换IP代理、设置请求头等）、异步请求等。这些工作如果每次都要写的话，比较浪费时间。因此Scrapy把一些基础东西封装好了，提高爬取效率和开发效率。</p>
<span id="more"></span>



<p>Scrapy官方文档：<a href="http://doc.scrapy.org/en/latest">http://doc.scrapy.org/en/latest</a></p>
<p>Scrapy中文文档：<a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html">http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html</a></p>
<p><strong>安装</strong>:</p>
<p>pip install scrapy</p>
<p>可能会出现的问题：</p>
<p>1,在windos系统下，提示错误ModuleNotFoundError:No module nmed ‘win32api’，那么先使用命令安装：pip install pypiwin32</p>
<p>2,如果安装时提示twisted安装有问题，那么先到这个网站下载twisted的whl文件：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/%EF%BC%8C%E6%A0%B9%E6%8D%AE%E8%87%AA%E5%B7%B1%E7%9A%84python%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E3%80%82%E4%B8%8B%E8%BD%BD%E5%AE%8C%E5%90%8E%EF%BC%8C%E5%86%8D%E4%BD%BF%E7%94%A8pip">https://www.lfd.uci.edu/~gohlke/pythonlibs/，根据自己的python版本下载。下载完后，再使用pip</a> install xxx.whl安装刚刚下载的文件。</p>
<h1 id="Scrapy框架架构介绍："><a href="#Scrapy框架架构介绍：" class="headerlink" title="Scrapy框架架构介绍："></a>Scrapy框架架构介绍：</h1><ol>
<li>Scrapy Engine（引擎）：Scrapy框架的核心部分。负责在Spider和ItemPipeline、Downloader、Scheduler中间通信、传递数据等。</li>
<li>Spider（爬虫）：发送需要爬取的链接给引擎，最后引擎把其他模块请求回来的数据再发送给爬虫，爬虫就去解析想要的数据。这个部分是我们开发者自己写的，因为要爬取哪些链接，页面中的哪些数据是需要的，都是由程序员自己决定。</li>
<li>Scheduler（调度器）：负责接收引擎发送过来的请求，并按照一定的方式进行排列和整理，负责调度请求的顺序等。</li>
<li>Downloader（下载器）：负责接收引擎传过来的下载请求，然后去网络上下载对应的数据再交还给引擎。</li>
<li>Item Pipeline（管道）：负责将Spider（爬虫）传递过来的数据进行保存。具体保存在哪里，应该看开发者自己的需求。</li>
<li>Downloader Middlewares（下载中间件）：可以扩展下载器和引擎之间通信功能的中间件。</li>
<li>Spider Middlewares（Spider中间件）：可以扩展引擎和爬虫之间通信功能的中间件。</li>
</ol>
<p><strong>工作流程：</strong></p>
<p><a href="https://imgtu.com/i/hIxYRI"><img src="https://z3.ax1x.com/2021/09/07/hIxYRI.png" alt="hIxYRI.png"></a></p>
<h1 id="创建项目："><a href="#创建项目：" class="headerlink" title="创建项目："></a>创建项目：</h1><p>用cmd创建项目，先进入到项目存放的目录。</p>
<p>1，创建项目：<br>scrapy startproject [项目名称]</p>
<p>2，进入项目，然后创建爬虫：<br>scrapy genspider [爬虫名称] [爬虫的作用域名]</p>
<p><strong>目录结构介绍</strong>：</p>
<p>items.py：用来存放爬虫爬取下来的数据的模型</p>
<p>middlewares.py：用来存放各种中间件的文件</p>
<p>pipelines.py：用来将items的模型存储到本地磁盘中</p>
<p>settings.py：本爬虫的一些配置信息（比如请求头、多久发送一次请求、ip代理池等）</p>
<p>scrapy.cfg：项目的配置文件</p>
<p>spiders包：以后所有的爬虫，对是存放到这个里面</p>
<h1 id="实战-古诗文网爬虫实战："><a href="#实战-古诗文网爬虫实战：" class="headerlink" title="实战-古诗文网爬虫实战："></a>实战-古诗文网爬虫实战：</h1><p>先在settings.py文件中配置：</p>
<ul>
<li><p>将ROBOTSTXT_OBEY改为False，表示不遵守机器人协议</p>
</li>
<li><p>在DEFAULT_REQUEST_HEADERS里添加请求头信息</p>
</li>
<li><p>ITEM_PIPELINES设置pipelines.py的优先级</p>
</li>
</ul>
<p>在cmd中输入命令：scrapy crawl [爬虫名称]，运行指定爬虫。每次都cmd手动输入会很麻烦，所以在项目中新建一个py文件，内容如下。运行该文件就相当于在cmd中输入了相关命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行该文件，相当于运行爬虫</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line">cmds = [<span class="string">&quot;scrapy&quot;</span>, <span class="string">&quot;crawl&quot;</span>, <span class="string">&quot;gsww_spider&quot;</span>]</span><br><span class="line">cmdline.execute(cmds)</span><br></pre></td></tr></table></figure>

<p>编写代码时，每次print打印时，会有大量其他不相关内容，因此分辨不清，所以自己定义了一个myprint方法，用myprint打印内容方便观察，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<h2 id="各文件代码如下："><a href="#各文件代码如下：" class="headerlink" title="各文件代码如下："></a>各文件代码如下：</h2><p>爬虫文件代码(gsww_spider)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> GswwItem  <span class="comment">#导入item模型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GswwSpiderSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;gsww_spider&#x27;</span>  <span class="comment">#爬虫名称</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;gushiwen.cn&#x27;</span>]   <span class="comment">#爬虫的作用域名</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.gushiwen.cn/default_1.aspx&#x27;</span>]   <span class="comment">#爬虫爬取的初始url</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span>   <span class="comment">#主要内容在这里面编写</span></span><br><span class="line">        bList = response.xpath(<span class="string">&quot;//div[@class=&#x27;left&#x27;]/div[@class=&#x27;sons&#x27;]/div[@class=&#x27;cont&#x27;]//b&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> bList:</span><br><span class="line">            title = b.xpath(<span class="string">&quot;./text()&quot;</span>).get()   <span class="comment">#标题</span></span><br><span class="line">            cont = b.xpath(<span class="string">&quot;..&quot;</span>).xpath(<span class="string">&quot;..&quot;</span>).xpath(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">            source = cont.xpath(<span class="string">&quot;./p[@class=&#x27;source&#x27;]/a/text()&quot;</span>).getall()</span><br><span class="line">            author = source[<span class="number">0</span>]   <span class="comment">#作者</span></span><br><span class="line">            dynasty = source[<span class="number">1</span>]  <span class="comment">#朝代</span></span><br><span class="line">            content = cont.xpath(<span class="string">&quot;./div[@class=&#x27;contson&#x27;]//text()&quot;</span>).getall()</span><br><span class="line">            content = <span class="string">&quot;&quot;</span>.join(content).strip()   <span class="comment">#内容</span></span><br><span class="line">            item = GswwItem(title=title, author=author, dynasty=dynasty, content=content)</span><br><span class="line">            <span class="keyword">yield</span> item    <span class="comment">#每次yield item，将item传入pipelines.py文件并调用,表示存储数据</span></span><br><span class="line">            </span><br><span class="line">        url = response.xpath(<span class="string">&quot;//a[@id=&#x27;amore&#x27;]/@href&quot;</span>).get()</span><br><span class="line">        <span class="comment">#response.urljoin(url)  域名+指定的url</span></span><br><span class="line">        <span class="keyword">if</span> url:</span><br><span class="line">            request = scrapy.Request(url)</span><br><span class="line">            <span class="keyword">yield</span> request   <span class="comment">#每次yield request，会重新调用所在的parse方法，表示发送请求</span></span><br></pre></td></tr></table></figure>

<p>items.py文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://docs.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GswwItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    dynasty = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br></pre></td></tr></table></figure>

<p>pipelines.py文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># useful for handling different item types with a single interface</span></span><br><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GswwPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span>   <span class="comment">#爬虫开始时调用，用于打开文件</span></span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&quot;古诗文.csv&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        self.writer = csv.writer(self.fp)</span><br><span class="line">        self.writer.writerow([<span class="string">&quot;title&quot;</span>, <span class="string">&quot;author&quot;</span>, <span class="string">&quot;dynasty&quot;</span>, <span class="string">&quot;content&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span>  <span class="comment">#存储数据操作放在该方法中</span></span><br><span class="line">        item_dict = <span class="built_in">dict</span>(item)</span><br><span class="line">        title = item_dict[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">        author = item_dict[<span class="string">&quot;author&quot;</span>]</span><br><span class="line">        dynasty = item_dict[<span class="string">&quot;dynasty&quot;</span>]</span><br><span class="line">        content = item_dict[<span class="string">&quot;content&quot;</span>]</span><br><span class="line">        self.writer.writerow([title, author, dynasty, content])</span><br><span class="line">        <span class="keyword">return</span> item   <span class="comment">#必须要</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span>   <span class="comment">#爬虫结束时调用，用于关闭文件</span></span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong><br> .xpath()，返回的都是SelectorList对象<br>SelectorList.getall()，直接获取里面指定的值，是个列表<br>SelectorList.get()，直接获取里面指定的第一个的值</p>
<h1 id="CrawlSpider爬虫"><a href="#CrawlSpider爬虫" class="headerlink" title="CrawlSpider爬虫"></a>CrawlSpider爬虫</h1><p>之前使用的spider，请求完url后，想要继续请求url需要自己手动yield request。创建方法：scrapy genspider [爬虫名称] [爬虫的作用域名]。</p>
<p>CrawlSpider继承spider，但是有新的功能。可以自己定义url规则，当scrapy碰到满足规则的url时，自动去访问该url，而不需要手动yield request。创建方法：scrapy genspider -t crawl  [爬虫名称] [爬虫的作用域名]。</p>
<h2 id="定义url规则"><a href="#定义url规则" class="headerlink" title="定义url规则"></a>定义url规则</h2><p>在rules中写规则。</p>
<h3 id="Rule规则类："><a href="#Rule规则类：" class="headerlink" title="Rule规则类："></a>Rule规则类：</h3><p>Rule(link_extractor, callback=None, follow=None, process_links=None)</p>
<p>主要参数讲解：</p>
<p>1，link_extractor： 一个LinkExtractor对象，用于定义爬取规则。</p>
<p>2，callback：满足规则的url，需要执行哪个回调函数。</p>
<p>3，follow：在访问的url中，如果还有符合规则的url，需不需要跟进（即继续访问）</p>
<p>4，process_links：从link_extractor中获取到链接后会传递给这个函数，用来过滤不需要访问的链接。</p>
<h3 id="LinkExtractors链接提取器："><a href="#LinkExtractors链接提取器：" class="headerlink" title="LinkExtractors链接提取器："></a>LinkExtractors链接提取器：</h3><p>主要参数讲解：</p>
<p>allow：允许的url，所有满足该正则表达式的url都会被提取。</p>
<p>deny：禁止的url，所有满足该正则表达式的url都不会被提取。</p>
<p>allow_domains：允许的域名，只有在该域名下的url才会被提取。</p>
<p>deny_domains：禁止的域名，在该域名下的url都不会被提取。</p>
<p>restrict_xpaths：严格的xpath。和allow共同过滤链接。指定某个xpath规定的范围内的url。</p>
<h2 id="实战-猎云网爬虫："><a href="#实战-猎云网爬虫：" class="headerlink" title="实战-猎云网爬虫："></a>实战-猎云网爬虫：</h2><p>要求：使用CrawlSpider爬虫爬取，然后异步保存到mysql数据库</p>
<p>网站：<a href="https://www.lieyunwang.com/">https://www.lieyunwang.com/</a></p>
<p>步骤：</p>
<p>创建项目，创建CrawlSpider，在settings.py文件中更改配置信息</p>
<ul>
<li>将ROBOTSTXT_OBEY改为False，表示不遵守机器人协议</li>
<li>在DEFAULT_REQUEST_HEADERS里添加请求头信息</li>
<li>ITEM_PIPELINES设置pipelines.py的优先级</li>
</ul>
<p>爬虫文件(gsww_spider)代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> LywItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;lyw_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;lieyunwang.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.lieyunwang.com/&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">	<span class="comment">#定义的规则</span></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;latest/p\d+\.html&#x27;</span>), follow=<span class="literal">True</span>),</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;archives/\d+&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">False</span>),</span><br><span class="line">        <span class="comment"># Rule(LinkExtractor(allow=r&#x27;latest/p1\.html&#x27;), follow=True),</span></span><br><span class="line">        <span class="comment"># Rule(LinkExtractor(allow=r&#x27;archives/477777&#x27;), callback=&#x27;parse_item&#x27;, follow=False),</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        title = response.xpath(<span class="string">&quot;//h1[@class=&#x27;lyw-article-title-inner&#x27;]/text()&quot;</span>).getall()</span><br><span class="line">        title = <span class="string">&#x27;&#x27;</span>.join(title).strip()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            date = response.xpath(<span class="string">&quot;//div[@id=&#x27;main-text-id&#x27;]/p[1]//text()&quot;</span>).getall()[<span class="number">2</span>]</span><br><span class="line">            date = re.search(<span class="string">&#x27;】(.+)报道&#x27;</span>, date).group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            date = <span class="string">&quot;NULL&quot;</span></span><br><span class="line">        content = response.xpath(<span class="string">&quot;//div[@id=&#x27;main-text-id&#x27;]//text()&quot;</span>).getall()</span><br><span class="line">        content = <span class="string">&#x27;&#x27;</span>.join(content).strip()</span><br><span class="line">        origin = response.url</span><br><span class="line"></span><br><span class="line">        item = LywItem(title=title, date=date, content=content, origin=origin)</span><br><span class="line">        <span class="keyword">return</span> item   <span class="comment">#这里可以不使用yield item.</span></span><br></pre></td></tr></table></figure>

<p>item.py 文件代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    date = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br><span class="line">    origin = scrapy.Field()</span><br></pre></td></tr></table></figure>

<p>1，正常保存到mysql数据库，没有使用异步</p>
<p>pipelines.py文件代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#正常不使用异步保存到mysql数据库</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.con = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;root&quot;</span>, database=<span class="string">&quot;de&quot;</span>, charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">        self.cursor = self.con.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        insert into lyw_info (title, the_date, content, origin) value (%s, %s, %s, %s)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        args = (item[<span class="string">&quot;title&quot;</span>], item[<span class="string">&quot;date&quot;</span>], item[<span class="string">&quot;content&quot;</span>], item[<span class="string">&quot;origin&quot;</span>])</span><br><span class="line">        self.cursor.execute(sql, args)</span><br><span class="line">        self.con.commit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.con.close()</span><br></pre></td></tr></table></figure>

<p>2，使用异步，保存到mysql数据库</p>
<p><strong>异步操作数据库的方法</strong>：</p>
<ul>
<li>使用<code>twisted.enterprise.adbapi</code>来创建连接池ConnectionPool。</li>
<li>连接池使用<code>runInteraction</code>函数来运行执行sql语句的函数。</li>
<li>执行sql语句的函数中，第一个非self参数是cursor对象，使用该对象的execute执行sql语句。</li>
</ul>
<p><strong>实际步骤</strong>：</p>
<p>先在settings.py文件中配置数据库信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MYSQL_CONFIG = &#123;</span><br><span class="line">    <span class="string">&#x27;DRIVER&#x27;</span>: <span class="string">&#x27;pymysql&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DATABASE&#x27;</span>: <span class="string">&#x27;de&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CHARSET&#x27;</span>: <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后pipelines.py文件代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.enterprise <span class="keyword">import</span> adbapi</span><br><span class="line"></span><br><span class="line"><span class="comment">##异步保存到mysql数据库</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, mysql_config</span>):</span></span><br><span class="line">        <span class="comment"># 1,创建连接池，配置好数据库。</span></span><br><span class="line">        self.dbPoll = adbapi.ConnectionPool(</span><br><span class="line">            mysql_config[<span class="string">&quot;DRIVER&quot;</span>],</span><br><span class="line">            host=mysql_config[<span class="string">&#x27;HOST&#x27;</span>],</span><br><span class="line">            port=mysql_config[<span class="string">&#x27;PORT&#x27;</span>],</span><br><span class="line">            user=mysql_config[<span class="string">&quot;USER&quot;</span>],</span><br><span class="line">            password=mysql_config[<span class="string">&quot;PASSWORD&quot;</span>],</span><br><span class="line">            database=mysql_config[<span class="string">&#x27;DATABASE&#x27;</span>],</span><br><span class="line">            charset=mysql_config[<span class="string">&#x27;CHARSET&#x27;</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="comment">#只要重写了该from_crawler类方法，创建对象的时候，会自动掉用该方法获取pipeline对象。</span></span><br><span class="line">    <span class="comment">#这里用来获取保存在settings.py中的数据库配置信息,mysql_config。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls,crawler</span>):</span></span><br><span class="line">        mysql_config = crawler.settings[<span class="string">&quot;MYSQL_CONFIG&quot;</span>]</span><br><span class="line">        <span class="keyword">return</span> cls(mysql_config)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="comment">#2，使用`runInteraction`函数来运行执行sql语句的函数，还可以传递参数给执行sql语句的函数，比如item</span></span><br><span class="line">        self.dbPoll.runInteraction(self.inset_item, item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inset_item</span>(<span class="params">self,cursor,item</span>):</span></span><br><span class="line">        <span class="comment">#3，该函数为执行sql语句的函数。第一个非self参数是cursor对象，item参数是`runInteraction`函数传递过来的。</span></span><br><span class="line">        sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        insert into lyw_info (title, the_date, content, origin) value (%s,%s,%s,%s)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        args = (item[<span class="string">&#x27;title&#x27;</span>], item[<span class="string">&#x27;date&#x27;</span>], item[<span class="string">&#x27;content&#x27;</span>], item[<span class="string">&#x27;origin&#x27;</span>])</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        <span class="comment">#关闭连接池</span></span><br><span class="line">        self.dbPoll.close()</span><br></pre></td></tr></table></figure>



<p>出现的问题点：scrapy运行正常，pipeline管道经过测试是没有运行的。判断已经主要是并没有创建设置的IMAGES_STORE<br>提前指出解决的办法，主要是没有依赖处理图片的第三库pillow</p>
<p>pip install -i <a href="https://pypi.doubanio.com/simple/">https://pypi.doubanio.com/simple/</a> –trusted-host pypi.doubanio.com pillow</p>
<h1 id="scrapy下载图片"><a href="#scrapy下载图片" class="headerlink" title="scrapy下载图片"></a>scrapy下载图片</h1><p><strong>流程：</strong></p>
<p>1，解析图片的url</p>
<p>2，定义item。item中必须要有image_urls和images两个字段。image_urls中存放图片的url。</p>
<p>3，在settings.py中，使用scrapy.pipelines.images.ImagesPipeline来作为数据保存的pipeline。</p>
<p>4，在settings.py中，设置IMAGE_STORE来定义图片下载的路径。</p>
<p>此时，只操作以上步骤的话。指定的IMAGE_STORE路径中会自动生成full文件夹，所有图片保存在里面。</p>
<p>5，如果想要有更复杂的图片保存路径的需求。先在settings.py中，关掉第2步的‘scrapy.pipelines.images.ImagesPipeline’，打开‘zcool.pipelines.ZcoolPipeline’。然后在pipelines.py中重写ImagePipiline类的file_path方法。该方法用来返回每个图片的保存路径。</p>
<p>6，但是file_path方法中没有item对象。如果想要item对象的话，我们还需要重写ImagePipline类的get_media_requests方法,来把item绑定到request上。</p>
<h2 id="实战-zcool网站下载图片"><a href="#实战-zcool网站下载图片" class="headerlink" title="实战-zcool网站下载图片"></a>实战-zcool网站下载图片</h2><p>网站：<a href="https://www.zcool.com.cn/">https://www.zcool.com.cn/</a></p>
<p>把相同作品的图片下载到用一个文件夹，文件夹名就为作品名称</p>
<p><strong>实际步骤如下：</strong>（对照上面的流程）</p>
<p>创建scrapy项目，创建crawlSpider，在settings.py中更改配置，如不遵守机器人协议，请求头</p>
<p>流程一，zcool_spider.py文件代码：(访问网站，解析图片url)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> ZcoolItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZcoolSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;zcool_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;zcool.com.cn&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.zcool.com.cn/home?p=1#tab_anchor&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;home\?p=\d+#tab_anchor&#x27;</span>), follow=<span class="literal">True</span>),</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;work/.+=\.html&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">40</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        title = response.xpath(<span class="string">&quot;//div[@class=&#x27;details-contitle-box&#x27;]/h2/text()&quot;</span>).getall()</span><br><span class="line">        title = <span class="string">&#x27;&#x27;</span>.join(title).strip()</span><br><span class="line">        image_urls = response.xpath(<span class="string">&quot;//div[@class=&#x27;reveal-work-wrap js-sdata-box text-center&#x27;]//img/@src&quot;</span>).getall()</span><br><span class="line"></span><br><span class="line">        item = ZcoolItem(title=title, image_urls=image_urls)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<p>流程二，item.py文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZcoolItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment">#image_urls 和 images必须要有。</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    image_urls = scrapy.Field()</span><br><span class="line">    images = scrapy.Field()</span><br></pre></td></tr></table></figure>

<p>流程三四，配置settings.py文件：<br>1，设置ITEM_PIPELINES，如果图片放在一起就开启scrapy.pipelines.images.ImagesPipeline；如果有其他存放路径需求，就开启zcool.pipelines.ZcoolPipeline，并接着下一步在pipelines.py文件中重写方法</p>
<p>2，添加IMAGES_STORE，是图片的保存目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   &#x27;zcool.pipelines.ZcoolPipeline&#x27;: 300,</span><br><span class="line">   #  &#x27;scrapy.pipelines.images.ImagesPipeline&#x27;: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IMAGES_STORE = os.path.join(os.path.dirname(os.path.dirname(__file__)),&#x27;images&#x27;)</span><br></pre></td></tr></table></figure>

<p>流程五六，在pipelines.py文件中，重写ImagePipiline类的file_path方法和get_media_requests方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"><span class="keyword">from</span> scrapy.pipelines.images <span class="keyword">import</span> ImagesPipeline</span><br><span class="line"><span class="keyword">from</span> zcool <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZcoolPipeline</span>(<span class="params">ImagesPipeline</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span>(<span class="params">self, item, info</span>):</span></span><br><span class="line">        <span class="comment">#重写该方法的目的是，把item绑定在request上面，然后下面的file_path方法可以访问到item</span></span><br><span class="line">        media_requests = <span class="built_in">super</span>(ZcoolPipeline, self).get_media_requests(item, info)</span><br><span class="line">        <span class="keyword">for</span> media_request <span class="keyword">in</span> media_requests:</span><br><span class="line">            media_request.item = item</span><br><span class="line">        <span class="keyword">return</span> media_requests</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_path</span>(<span class="params">self, request, response=<span class="literal">None</span>, info=<span class="literal">None</span></span>):</span></span><br><span class="line">        orige_path = <span class="built_in">super</span>(ZcoolPipeline, self).file_path(request, response, info)</span><br><span class="line"></span><br><span class="line">        title = request.item[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">        title = re.sub(<span class="string">r&#x27;[/\\:\*\?&quot;&lt;&gt;\|]&#x27;</span>,<span class="string">&quot;_&quot;</span>,title)</span><br><span class="line">        image_path = os.path.join(settings.IMAGES_STORE,title)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(image_path):</span><br><span class="line">            os.mkdir(image_path)</span><br><span class="line">        image_name = orige_path.replace(<span class="string">&quot;full/&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">		<span class="comment">#返回值就是每个图片的保存路径</span></span><br><span class="line">        <span class="keyword">return</span> os.path.join(image_path, image_name)</span><br></pre></td></tr></table></figure>

<p>注意：创建文件夹时，名称不可用包含九种特殊符号。<br>我们的处理方式：<code>title = re.sub(r&#39;[/\\:\*\?&quot;&lt;&gt;\|]&#39;,&quot;_&quot;,title)</code></p>
<h1 id="下载器中间件："><a href="#下载器中间件：" class="headerlink" title="下载器中间件："></a>下载器中间件：</h1><p>Downloader Middlewares（下载中间件）是：引擎和下载器通信的中间件。在这个中间件里，可以设置ip代理、更换请求头等。主要有两个方法：</p>
<p>process_request(self, request, spider)：发送请求前调用</p>
<p>process_response(self, request, response, spider)：数据下载到引擎前调用</p>
<p><a href="https://imgtu.com/i/5At6je"><img src="https://z3.ax1x.com/2021/10/10/5At6je.png" alt="5At6je.png"></a></p>
<h2 id="process-request-self-request-spider"><a href="#process-request-self-request-spider" class="headerlink" title="process_request(self, request, spider)"></a>process_request(self, request, spider)</h2><p>下载器发送请求前调用，这里可以设置IP代理、请求头等</p>
<p>返回值：</p>
<p>1，None：scrapy继续处理request，直到下载器被调用。</p>
<p>2，Request对象：不再使用之前的request对象，而是使用新的request对象。</p>
<p>3，Response对象：scrapy不再调用process_request方法，直接返回response，调用已激活的中间件的process_response方法。</p>
<p>4，如果方法抛出异常，会调用process_exception方法。</p>
<h2 id="process-response-self-request-response-spider"><a href="#process-response-self-request-response-spider" class="headerlink" title="process_response(self, request, response, spider)"></a>process_response(self, request, response, spider)</h2><p>下载器下载的数据到引擎中间会执行的方法。</p>
<p>返回值：</p>
<p>1，Response对象：会将这个新的response对象返回给其他中间件，直到引擎。</p>
<p>2，Request对象：下载器被切断，返回的request会重新被下载器调度下载。</p>
<p>3，如果抛出异常，会调用requst的errback方法。</p>
<h2 id="随机更换请求头User-Agent"><a href="#随机更换请求头User-Agent" class="headerlink" title="随机更换请求头User-Agent"></a>随机更换请求头User-Agent</h2><p>介绍fake_useragent包：</p>
<p><strong>fake_useragent</strong>模块用来伪造User-Agent的。下载：<code>pip install fake_useragent</code></p>
<p>用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line">ua = UserAgent()</span><br><span class="line">ua.ie       //ie浏览器的user-agent</span><br><span class="line">ua.chrome	//谷歌浏览器的user-agent</span><br><span class="line">ua.firefox  //火狐浏览器的user-agent</span><br><span class="line">ur.random   //任意浏览器的user-agent</span><br></pre></td></tr></table></figure>

<p>如果使用时报错：fake_useragent.errors.FakeUserAgentError: Maximum amount of retries reached。解决方法：</p>
<p>1，找到python》Lib》site-packages》fake_useragent》settings.py</p>
<p>2，打开后，把16行附近的’CACHE_SERVER’属性中的’https‘改成’http‘</p>
<p>3，然后运行程序，依旧会报错，但是出现了一个结果。然后再次运行程序，运行正常。</p>
<p><strong>更换请求头User-Agent步骤：</strong></p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UseragentSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;userAgent&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;httpbin.org&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://httpbin.org/user-agent&#x27;</span>]   <span class="comment">#该网址直接返回请求的user-agent</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(self.start_urls[<span class="number">0</span>], dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>middlewares.py文件代码：(重点)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAgentDownloadmiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        ua = UserAgent()</span><br><span class="line">        request.headers[<span class="string">&quot;User-Agent&quot;</span>] = ua.random</span><br></pre></td></tr></table></figure>

<p>开启这个中间件，在settings.py中设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">&#x27;downloadmiddleware.middlewares.UserAgentDownloadmiddleware&#x27;</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置IP代理："><a href="#设置IP代理：" class="headerlink" title="设置IP代理："></a>设置IP代理：</h2><p>芝麻代理：<a href="http://www.zhimaruanjian.com/">http://www.zhimaruanjian.com</a></p>
<p>流程：</p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpproxySpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;ipProxy&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;httpbin.org&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://httpbin.org/ip&#x27;</span>]  //该网址直接返回请求的ip</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(self.start_urls[<span class="number">0</span>], dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>middlewares.py文件代码：（重点）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpProxyDownloadmiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    proxies = [   //购买的代理</span><br><span class="line">        &#123;<span class="string">&quot;ip&quot;</span>:<span class="string">&quot;223.242.9.160&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="number">4245</span>,<span class="string">&quot;expire_time&quot;</span>:<span class="string">&quot;2021-10-10 13:40:46&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;ip&quot;</span>:<span class="string">&quot;124.94.187.11&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="number">4224</span>,<span class="string">&quot;expire_time&quot;</span>:<span class="string">&quot;2021-10-10 13:40:46&quot;</span>&#125;,</span><br><span class="line">               ]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        proxy = random.choice(self.proxies)   //随机选择一个代理</span><br><span class="line">        <span class="comment"># 格式  http://223.242.9.160:4245</span></span><br><span class="line">        proxy_url = <span class="string">&quot;http://&quot;</span> + proxy[<span class="string">&quot;ip&quot;</span>] + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(proxy[<span class="string">&quot;port&quot;</span>])</span><br><span class="line">        request.meta[<span class="string">&quot;proxy&quot;</span>] = proxy_url</span><br></pre></td></tr></table></figure>

<p>开启这个中间件，在settings.py中设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">&#x27;downloadmiddleware.middlewares.IpProxyDownloadmiddleware&#x27;</span>: <span class="number">200</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开放代理池：上面这种购买的代理ip属于开放代理池，就是一下买多个代理ip，这些ip随便使用，时间比较短。</p>
<p>独享代理：只买一个代理，这个代理ip时间会比较长，而且还有密码。</p>
<p>独享代理的使用例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpProxyDownloadmiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        proxy = <span class="string">&#x27;121.99.4.124:16816&#x27;</span>  //代理ip</span><br><span class="line">        pwd = <span class="string">&quot;156486:fjkdf4s&quot;</span>		  //密码</span><br><span class="line">        request.meta[<span class="string">&quot;proxy&quot;</span>] = proxy</span><br><span class="line">        <span class="comment">#密码要base64加密</span></span><br><span class="line">        pwd_b64 = base64.b64encode(pwd.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="comment">#代理授权</span></span><br><span class="line">        request.headers[<span class="string">&#x27;Proxy-Authorization&#x27;</span>] = <span class="string">&#x27;Basic &#x27;</span> + paw_b64.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="实战-更换代理爬取猎聘网："><a href="#实战-更换代理爬取猎聘网：" class="headerlink" title="实战-更换代理爬取猎聘网："></a>实战-更换代理爬取猎聘网：</h1><p>网址：<a href="https://www.liepin.com/">https://www.liepin.com/</a></p>
<p>要求：搜索python，把有关python的职位信息爬取下来，爬取时需要自动更换代理。</p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> LiepinItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiepinSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;liepin_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;liepin.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.liepin.com/zhaopin/?headId=5299daf02f40ea2f23991628fa127774&amp;ckId=5299daf02f40ea2f23991628fa127774&amp;key=python&amp;currentPage=0&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;job/\d+\.shtml.*&#x27;</span>, restrict_xpaths=[<span class="string">&quot;//div[@class=&#x27;left-list-box&#x27;]/ul/li//div[@class=&#x27;job-detail-box&#x27;]/a[1]&quot;</span>]),callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">40</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        title = response.xpath(<span class="string">&quot;//span[@class=&#x27;name ellipsis-1&#x27;]/text()&quot;</span>).get()</span><br><span class="line">        company_1 = response.xpath(<span class="string">&quot;//div[@class=&#x27;title-box&#x27;]/span[1]//text()&quot;</span>).getall()</span><br><span class="line">        company_1 = <span class="string">&quot;&quot;</span>.join(company_1).strip()</span><br><span class="line">        company_2 = response.xpath(<span class="string">&quot;//div[@class=&#x27;title-box&#x27;]/span[2]//text()&quot;</span>).getall()</span><br><span class="line">        company_2 = <span class="string">&quot;&quot;</span>.join(company_2).strip()</span><br><span class="line">        company = company_1 + company_2</span><br><span class="line">        city = response.css(<span class="string">&quot;.job-properties&gt;span:nth-child(1)::text&quot;</span>).get()</span><br><span class="line">        experience = response.css(<span class="string">&quot;.job-properties&gt;span:nth-child(3)::text&quot;</span>).get()</span><br><span class="line">        edu = response.css(<span class="string">&quot;.job-properties&gt;span:nth-child(5)::text&quot;</span>).get()</span><br><span class="line">        salary = response.css(<span class="string">&quot;.salary::text&quot;</span>).get()</span><br><span class="line">        desc_list = response.css(<span class="string">&quot;.paragraph&gt;dd::text&quot;</span>).getall()</span><br><span class="line">        desc = <span class="string">&quot;&quot;</span>.join(desc_list).strip()</span><br><span class="line"></span><br><span class="line">        item = LiepinItem(title=title, company=company, city=city, experience=experience, edu=edu, salary=salary, desc=desc)</span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">        current_page = response.request.headers[<span class="string">&quot;Referer&quot;</span>].decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        page_num = <span class="built_in">int</span>( re.search(<span class="string">&quot;.*currentPage=(\d+)&quot;</span>,current_page).group(<span class="number">1</span>) )</span><br><span class="line">        next_page = <span class="string">&quot;https://www.liepin.com/zhaopin/?headId=5299daf02f40ea2f23991628fa127774&amp;ckId=5299daf02f40ea2f23991628fa127774&amp;key=python&amp;currentPage=&quot;</span> + <span class="built_in">str</span>( page_num+<span class="number">1</span> )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=next_page)</span><br></pre></td></tr></table></figure>

<p>items.py文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiepinItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    company = scrapy.Field()</span><br><span class="line">    city = scrapy.Field()</span><br><span class="line">    experience = scrapy.Field()</span><br><span class="line">    edu = scrapy.Field()</span><br><span class="line">    salary = scrapy.Field()</span><br><span class="line">    desc = scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>pipelines.py文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiepinPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&quot;zhaopin.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        self.fp.write( json.dumps(<span class="built_in">dict</span>(item), ensure_ascii=<span class="literal">False</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure>

<p>middlewares.py文件代码：（重点，这里设置代理）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json, requests</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Proxy</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyDownloadMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.current_proxy = <span class="literal">None</span></span><br><span class="line">        self.update_proxy()</span><br><span class="line">        self.lock = threading.Lock</span><br><span class="line">        <span class="comment">#创建一个线程，每60秒自动更换ip，或者ip被黑名单更换ip</span></span><br><span class="line">        th1 = threading.Thread(target=self.update_proxy_in_threading)</span><br><span class="line">        th1.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        request.meta[<span class="string">&quot;proxy&quot;</span>] = self.current_proxy.proxy_url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response, spider</span>):</span></span><br><span class="line">        <span class="keyword">if</span> response.status != <span class="number">200</span>:   <span class="comment">#状态码不等于200就当作ip被黑名单了</span></span><br><span class="line">            self.lock.acquire()</span><br><span class="line">            self.current_proxy.is_blacked = <span class="literal">True</span></span><br><span class="line">            self.lock.release()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;IP代理被禁用了&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">            <span class="keyword">return</span> request</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_proxy</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#获取IP代理，自己去买</span></span><br><span class="line">        resp = requests.get(<span class="string">&quot;购买的直连ip网址&quot;</span>)</span><br><span class="line">        proxy_dict = json.loads(resp.text)</span><br><span class="line">        proxy = Proxy(proxy_dict)    <span class="comment">#自己定义的Proxy模型类，下面有</span></span><br><span class="line">        self.current_proxy = proxy</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;更换了一次IP代理&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_proxy_in_threading</span>(<span class="params">self</span>):</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> count&gt;=<span class="number">6</span> <span class="keyword">or</span> self.current_proxy.is_blacked:</span><br><span class="line">                self.update_proxy()</span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>Proxy模型类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span>():</span></span><br><span class="line">    <span class="comment"># proxy的模型，方便管理</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, proxy_dict</span>):</span></span><br><span class="line">        data = proxy_dict[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>]</span><br><span class="line">        self.proxy_url = <span class="string">&quot;https://&quot;</span> + data[<span class="string">&quot;ip&quot;</span>] + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(data[<span class="string">&quot;port&quot;</span>])</span><br><span class="line">        self.is_blacked = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>最后在settings.py中将该下载器中间件启用。</p>
<h1 id="scrapy集成selenium爬取网页"><a href="#scrapy集成selenium爬取网页" class="headerlink" title="scrapy集成selenium爬取网页"></a>scrapy集成selenium爬取网页</h1><p>在scrapy爬取网址时，有时因为需要加载ajax或者需要点击某个按钮后，需要的数据才能完整展示出来，可以在scrapy中写selenium解决这个问题。</p>
<p><strong>流程：</strong>下载器中间件的process_request(self, request, spider)方法，发送请求时调用，即发送请求前截拦，然后执行该方法。所以在该方法内，用selenium发送请求，处理，再封装成response对象返回。</p>
<p>1，截拦原始请求。<br>2，用selenium请求。<br>3，将selenium请求的数据封装成response对象并返回。</p>
<p><em><strong>案例：</strong></em></p>
<p>爬取简书网站：<a href="http://jianshu.com/%EF%BC%8C%E7%AE%80%E4%B9%A6%E5%8F%91%E8%A1%A8%E7%9A%84%E6%96%87%E7%AB%A0%E4%B8%8B%E9%9D%A2%E6%9C%89%E6%98%BE%E7%A4%BA%E8%A2%AB%E6%9F%90%E6%9F%90%E4%B8%93%E9%A2%98%E6%94%B6%E5%85%A5%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%B8%93%E9%A2%98%E5%A4%9A%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%8F%AA%E4%BC%9A%E6%98%BE%E7%A4%BA%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%8C%E9%9C%80%E8%A6%81%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E2%80%9C%E5%B1%95%E5%BC%80%E6%9B%B4%E5%A4%9A%E2%80%9D%E6%89%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%85%A8%E9%83%A8%E3%80%82">http://jianshu.com/，简书发表的文章下面有显示被某某专题收入，如果专题多的话，只会显示一部分，需要点击按钮“展开更多”才能显示全部。</a></p>
<p>爬取简书，然后用selenium执行点击“展开更多”按钮后，把数据返回。</p>
<p><strong>代码如下：</strong></p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JianshuSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;jianshu_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;jianshu.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://jianshu.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;p/[0-9a-z]&#123;12&#125;&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>),</span><br><span class="line">        <span class="comment"># Rule(LinkExtractor(allow=r&#x27;p/dbc69681575f&#x27;), callback=&#x27;parse_item&#x27;, follow=True),</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">40</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        zhuantis = response.xpath(<span class="string">&quot;//div[@class=&#x27;_21bLU4 _3kbg6I&#x27;]/div[1]/div[1]/section[position()=3]/div[1]//text()&quot;</span>).getall()</span><br><span class="line">        self.myprint(zhuantis)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>middlewares.py文件：（<strong>重点</strong>）（记得在settings.py中开启）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> scrapy.http.response.html <span class="keyword">import</span> HtmlResponse   <span class="comment">#封装response对象用的。</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JianshuDownloaderMiddleware</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver_path = <span class="string">&quot;D:/webDriver/chromedriver_win32_95.exe&quot;</span></span><br><span class="line">        self.driver = webdriver.Chrome(executable_path=self.driver_path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="comment">#1,只要写了该方法就相当于截拦了原始请求</span></span><br><span class="line">        <span class="comment">#2，用selenium请求，并处理，点击“展开更多”按钮</span></span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">r&quot;.*?\.com/p/[0-9a-z]&#123;12&#125;&quot;</span>, request.url):</span><br><span class="line">            self.driver.get(request.url)</span><br><span class="line"></span><br><span class="line">            btn_path = <span class="string">&quot;//div[@class=&#x27;_21bLU4 _3kbg6I&#x27;]/div[1]/div[1]/section[position()=3]/div[1]/div[1]&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                WebDriverWait(self.driver, <span class="number">10</span>).until(</span><br><span class="line">                    EC.element_to_be_clickable((By.XPATH, btn_path))</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                response = HtmlResponse(request.url, body=self.driver.page_source, request=request, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    btn = self.driver.find_element_by_xpath(btn_path)</span><br><span class="line">                    self.driver.execute_script(<span class="string">&quot;arguments[0].click()&quot;</span>, btn)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="comment">#3，最后把selenium访问的网页数据，封装成response对象并返回</span></span><br><span class="line">            response = HtmlResponse(request.url, body=self.driver.page_source, request=request, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> response    <span class="comment">#这个返回的response给爬虫文件中的response对象。</span></span><br></pre></td></tr></table></figure>










































]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习</title>
    <url>/2022/04/29/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>前端学习的笔记</p>
<p>包含html，css，javaScript， Qjuery，ES6，和Bootstrap……</p>
<span id="more"></span>

<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HTML 指的是超文本标记/标签语言 (Hyper Text Markup Language)<br>专门制作网页的计算机语言</p>
<p>超文本的意思是有一些单词或字母，在网页浏览器的世界中被赋予了特殊的权利。<br>例如：字母img只是普通的字母，没什么特殊的含义。而<code>&lt;img&gt;</code>被加上尖括号后，在网页的世界中，就具备了<br>显示图片的作用。</p>
<p><strong>使用记事本写第一个页面，hello word</strong></p>
<p>创建一个空白的记事本，文件的后缀名必须是 “htm” 或 “html”，然后编辑内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        hello word</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>保存文件，双击文件会以计算机默认的浏览器运行，你的第一个网页就制作完成了！</p>
<p><strong>使用其他软件编写网页</strong></p>
<p>之后的前端学习用的网页编辑器是VSCode，下载地址：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a><br>1，汉化：安装插件Chinese<br>2，运行：安装插件open in browser</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>标签一般都是双标签，有开始有结束，语法<code>&lt;标签名&gt; &lt;/标签名&gt;</code>，<br>少数标签的单标签，语法<code>&lt;标签名/&gt;</code></p>
<h3 id="文件标签"><a href="#文件标签" class="headerlink" title="文件标签"></a>文件标签</h3><p><code>&lt;html&gt;</code> 标签：代表当前书写的是一个HTML文档</p>
<p><code>&lt;head&gt;</code>标签：存储的本页面的一些重要的信息，它不会显示</p>
<p><code>&lt;title&gt;</code>标签：<code>&lt;head&gt;</code>里的一个子标签，它是用于定义页面的标题的</p>
<p><code>&lt;body&gt;</code>标签：书写的内容会显示出来<br><code>&lt;body&gt;</code>标签的属性<br>text 用于设置文字颜色<br>bgcolor 用于设置页面的背景色<br>background 用于设置页面的背景图片</p>
<h3 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h3><p><strong>注释</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释内容 --&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>换行标签</strong></p>
<p><code>&lt;br/&gt;</code> 标签就是一个换行（回车）功能标签，标签中的 / 可有可无的。</p>
<p>有/是html语言的标准化，但是html语言是一门不那么严谨的语言</p>
<p><strong>段落标签</strong></p>
<p>在<code>&lt;p&gt; &lt;/p&gt;</code>标签中的内容,会在开始与结束之间产生一个空白行，并且它会自动换行.</p>
<p>常用属性 align 它的作用是设置段落中的内容对齐方式 可取值有 left, right, center</p>
<p><strong>水平线标签</strong></p>
<p><code>&lt;hr/&gt;</code>标签会在页面上产生一个水平线</p>
<p>对于hr标签它有常用属性:</p>
<p>align：可取值有left right center 代表水平线位置</p>
<p>size：代表水平线厚度（粗细）</p>
<p>width：代表水平线宽度，单位是xp或%</p>
<p>color：水平线的颜色</p>
<h3 id="分区标签"><a href="#分区标签" class="headerlink" title="分区标签"></a>分区标签</h3><p><code>&lt;div&gt; &lt;/div&gt;</code>是一个<strong>块</strong>标签，用来进行布局的</p>
<p>普通的div并没有什么效果，肉眼也看不见，但div与CSS结合，就会更好对页面进行排版</p>
<p>div与span都是“容器”的作用，具体区别:</p>
<p>div会自动换行，我们也叫这样的标签为块级元素</p>
<p>span标签它不会自动换行，我们也叫它为行内元素</p>
<p>div：整体划分区块</p>
<p>span：局部划分</p>
<h3 id="字体标签"><a href="#字体标签" class="headerlink" title="字体标签"></a>字体标签</h3><p><code>&lt;font&gt; &lt;/font&gt;</code>标签可以设置字体，字的大小及颜色，常用属性：</p>
<p>face:用于设置字体，例如 宋体 隶书 楷体</p>
<p>size:用于设置字的大小（大小默认设置1-7，7最大，想更大，往后学css即可）</p>
<p>color:用于设置字的颜色，’’#cc3300” 或 单词”red”<br>(在线颜色选择器： <a href="http://www.86y.org/code/colorpicker/color.html">http://www.86y.org/code/colorpicker/color.html</a> )</p>
<h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><p><code>&lt;h1&gt;内容&lt;/h1&gt;</code>，有h1 到 h6</p>
<p>h1最大 h6最小，它们代表的是标题，</p>
<p>自动换行，字体加粗，标题与标题之间产生一定的距离</p>
<h3 id="格式化标签"><a href="#格式化标签" class="headerlink" title="格式化标签"></a>格式化标签</h3><p><code>&lt;b&gt;</code>：字体加粗</p>
<p><code>&lt;i&gt;</code>：字体倾斜</p>
<p><code>&lt;del&gt;</code>：删除线</p>
<p><code>&lt;u&gt;</code>：下划线</p>
<h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><p><strong>有序列表</strong>，ol&gt;li，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性：<br>type=’A’：字母排序<br>type=’I’：罗马排序<br>start=“3” 序列从几开始</p>
<p><strong>无序列表</strong>，ul&gt;li</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性：<br>type=”disc”：默认，实心圆<br>type=”square”：方块<br>type=”circle”：空心圆</p>
<h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h3><p><code>&lt;img/&gt;</code>它可以让我们在网页引入一张图片，常用属性：</p>
<ul>
<li>src 代表的图片的路径</li>
<li>width 图片的宽度</li>
<li>height 图片的高度</li>
<li>border 用于设置图片的边框</li>
<li>alt 如果图片不可以显示时，默认显示的文本信息</li>
<li>title鼠标悬停图片上，默认显示的文本信息</li>
<li>align 图片附件文字的对齐方式，可取值有:<br>left：把图像对齐到左边<br>right：把图像对齐到右边<br>middle：把图像与中央对齐<br>top：把图像与顶部对齐<br>bottom：把图像与底部对齐（默认）</li>
</ul>
<h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><p><code>&lt;a&gt;</code>标签,可以实现跳转到其它页面操作。超链接内容不仅可以是文本，也可以是图片等信息</p>
<p>常用属性: </p>
<ul>
<li><p>href，代表的我们要跳转的路径，如果是网络资源，要加上协议https://</p>
</li>
<li><p>target，这个属性规定在何处打开这个链接文档，可取值：<br>“_ blank” 在<strong>新窗口</strong>中打开页面<br>“_ self” 默认，在<strong>本窗口</strong>打开页面</p>
</li>
</ul>
<p>功能性连接：</p>
<p>1.发邮件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:1753645532@qq.com&quot;</span>&gt;</span>联系站长<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.QQ聊天窗口</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tencent://message/?uin=2049556177&amp;Menu=yes&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://wpa.qq.com/pa?p=1:615050000:7&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><code>&lt;table&gt;</code>：定义一个表格，属性</p>
<ul>
<li><p>border：边框，取值是像素为单位</p>
</li>
<li><p>width 代表的表格的宽度</p>
</li>
<li><p>align 代表表格的对齐方式；取值<br>left 左对齐表格<br>right 右对齐表格<br>center 居中对齐表格</p>
</li>
<li><p>cellspacing：单元格间距（通常设置0表示单线表格）</p>
</li>
</ul>
<p><code>&lt;tr&gt;</code>：定义表格中的行 （Table Row），属性</p>
<ul>
<li>align 代表表格的对齐方式；取值<br>left 左对齐内容（默认值）<br>right 右对齐内容<br>center 居中对齐内容（th 元素的默认值）</li>
</ul>
<p><code>&lt;td&gt;</code>：定义表格中的数据单元格 （Table DataCell），属性</p>
<ul>
<li>colspan 指示列的合并</li>
<li>rowspan 指示行的合并</li>
</ul>
<p>例如，定义三行四列的表格，第一行全部单元格合并，第二行和第三行的第一个单元格合并</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        &lt;td&gt;2&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;3&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;4&lt;/td&gt; </span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;td&gt;9&lt;/td&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><p>表单可以让我们将录入信息携带到服务器端。<br>简单说，通过表单可以将要提交的数据提交到指定的位置。<br>但一个一个的提交，不方便。表单正好解决了这个问题，将所有的数据形成一个整体，一起提交给服务<br>器。<br>常见的 登录页面、注册页面 都离不开表单的应用</p>
<p><a href="https://imgtu.com/i/Lv4f7d"><img src="https://s1.ax1x.com/2022/04/29/Lv4f7d.png" alt="Lv4f7d.png"></a></p>
<p><code>&lt;from&gt;</code>是表单标签，属性：</p>
<ul>
<li>action：整个表单提交的目的地。</li>
<li>method：表单提交的方式，有get和post两种提交方式。</li>
</ul>
<p>get：提交时，传输数据量少（传递普通文字信息，传递照片会失败），明文提交（在浏览器的url后面会显示提交的数据，不适合用于登录）</p>
<p>post：提交时，传输数据量大（传递文字和图片都行），密文提交（浏览器的url后面看不到提交的数据）</p>
<p><strong>表单中的元素(控件)</strong></p>
<p><code>&lt;input/&gt;</code>元素的type属性:</p>
<ul>
<li>text：默认值，普通的文本输入框<br>placeholder属性：提示文本<br>maxlength属性：最多能输入字符数量</li>
<li>password：密码输入框</li>
<li>checkbox：多选框/复选框<br>checked：被选中</li>
<li>radio：单选按钮，一组单选钮需要相同的name属性</li>
<li>file：上传文件</li>
<li>reset：重置按钮</li>
<li>submit：提交按钮</li>
<li>button：普通按钮</li>
</ul>
<p><code>&lt;select&gt;</code>：下拉列表/下拉框，<code>&lt;option&gt;</code>：列表中的项，属性selected：被选中</p>
<p><code>&lt;textarea&gt;</code>：文本域(多行文本框)：可以通过 cols 和 rows 属性来规定 textarea 的尺寸，不过更好的办法是使用 CSS 的height和 width 属性。</p>
<p><code>&lt;button&gt;</code>：按钮<br>在form表单中，作用和submit一样<br>不在form表单中，就是普通按钮（配合后期的javascript，可扩展性更高）</p>
<p><strong>注意事项：</strong></p>
<p>1，所有表单中的元素都要具有name属性（否则提交到服务器之后，服务器无法区识别多个元素之间的不同）</p>
<p>2，单选框要想可以一次只选择一个，要具有相同的name值 </p>
<p>3，所有的复选框以组为单位，组内的每个复选框都应该具有相同的name值</p>
<h3 id="框架标签"><a href="#框架标签" class="headerlink" title="框架标签"></a>框架标签</h3><p>通过<code>&lt;frameset&gt;</code>和<code>&lt;frame&gt;</code>框架标签可以定制HTML页面布局。可以理解为：用多个页面拼装成一个页面。</p>
<p>注意，框架标签和body标签不共存。“有你没我，有我没你” </p>
<p><a href="https://imgtu.com/i/Lv4c6O"><img src="https://s1.ax1x.com/2022/04/29/Lv4c6O.png" alt="Lv4c6O.png"></a></p>
<p>完成以上布局</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--body和frame不能共存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">&quot;20%, *, 15%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;top.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">frame</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">&quot;30%, *&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;left.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">frame</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;right.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">frame</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;foot.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">frame</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>top.html、left.html、right.html、foot.html 就是4个页面</p>
<h3 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h3><p><strong><code>&lt;meta/&gt;</code>标签</strong>：</p>
<p>meta标签必须写在head标签之间. </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1，当前页面的字符编码 UTF-8</p>
<p>2，这里 的 名字 是 viewport （显示窗口）数据 是 文本 内容 content=”width=device-width, initial-scale=1.0”也就是 显示窗口 宽度 是 客户端的 屏幕 宽度 （就是 满屏 ！），显示的文字和图形的初始比例 是1.0</p>
<p>3，每个电脑内置的IE版本是不一样的，为了兼容所有的版本以最高级模式渲染文档，也就是任何IE版本都以当前版本所支持的最高级标准模式渲染</p>
<p>通过meta标签来设置页面加载后在指定的时间后跳转到指定的页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5; url=http://www.baidu.com&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong><code>&lt;link/&gt;</code>标签</strong></p>
<p>后面我们会使用link标签来导入css</p>
<p>注意:link标签也必须写在head标签中。</p>
<h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p><a href="https://imgtu.com/i/LvIxS0"><img src="https://s1.ax1x.com/2022/04/29/LvIxS0.png" alt="LvIxS0.png"></a></p>
<p><a href="https://imgtu.com/i/LvoPw4"><img src="https://s1.ax1x.com/2022/04/29/LvoPw4.png" alt="LvoPw4.png"></a></p>
<h2 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>1，不区分大小写，包括：标签，属性，属性的值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">inPUT</span> <span class="attr">tYPe</span>=<span class="string">&quot;pasSWord&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，引号可省略</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3，可省略结尾标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈哈哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈哈哈哈哈哈</span><br></pre></td></tr></table></figure>

<p>说是省略，其实运行起来，查看源代码，html是自动帮我们补全了（真鸡肋）</p>
<h3 id="新增语义化标签"><a href="#新增语义化标签" class="headerlink" title="新增语义化标签"></a>新增语义化标签</h3><p>在html4中，所有的容器标签95%都会使用div，div过多的话，很难区分彼此。<br>新增许多语义化标签，其实就是给div标签取了许多别名，让div“见名知意”</p>
<ul>
<li>section标签：表示页面中的内容区域，部分，页面的主体部分</li>
<li>article标签：文章</li>
<li>aside标签：文章内容之外的，标题</li>
<li>header标签：头部，页眉，页面的顶部</li>
<li>hgroup标签：内容与标题的组合</li>
<li>nav标签：导航</li>
<li>figure标签：图文并茂</li>
<li>foot：页脚，页面的底部</li>
</ul>
<h3 id="媒体标签"><a href="#媒体标签" class="headerlink" title="媒体标签"></a>媒体标签</h3><p>想在网页上播放视频，就要使用<code>&lt;video&gt;</code>标签，属性有：<br>src：媒体资源文件的位置<br>controls：控制面板<br>autoplay：自动播放（谷歌失效，360浏览器可以）<br>loop：循环播放</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;img/html-css-js之间的关系.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">loop</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="新增表单控件"><a href="#新增表单控件" class="headerlink" title="新增表单控件"></a>新增表单控件</h3><p>表单的控件更加丰富了</p>
<p><code>&lt;input/&gt;</code>，新增type属性：</p>
<ul>
<li>color：调色板</li>
<li>date：日历</li>
<li>month：月历</li>
<li>week：周历</li>
<li>number：数值域<br>min：最小值（默认值是1）<br>max：最大值（默认值无上限）<br>step：递增量</li>
<li>range：滑块</li>
<li>search：搜索框（带×号，可一键删除框中内容）</li>
</ul>
<p>进度条<code>&lt;progress&gt;</code></p>
<p>高亮<code>&lt;mark&gt;</code></p>
<p>联想输入框<code>&lt;datalist&gt;</code> （模糊查询)，选项<code>&lt;option&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 联想输入框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;citys&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;citys&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;南京&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;上海&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><ul>
<li>CSS是指层叠样式表 cascading style sheets</li>
<li>通过CSS可以让我们定义HTML元素如何显示。</li>
<li>CSS可以让我们原本HTML不能描述的效果，通过CSS描述出来。</li>
<li>通过CSS描述我们的html页面，可以让我们的页面更加漂亮，可以提高工作效率。</li>
</ul>
<h2 id="引入css"><a href="#引入css" class="headerlink" title="引入css"></a>引入css</h2><p><strong>方式一：</strong>内联/行内样式</p>
<p>就是在我们的HTML标签上通过style属性来引用CSS代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>大家好！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>方式二：</strong>内部样式表</p>
<p>我们通过<code>&lt;style&gt;</code>标签来声明我们的CSS. 通常style标签我们推荐写在head和body之间，也就是“脖子”<br>的位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>方式三：</strong>外部样式表</p>
<p>我们需要单独定义一个CSS文件,注意CSS文件的后缀名就是.css</p>
<p>在<code>&lt;head&gt;</code>标签中使用<code>&lt;link/&gt;</code>标签引用外部的css文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/01test.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<p>三种样式表的优先级：满足就近原则</p>
<p>内联 &gt; 内部 &gt; 外部</p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p><strong>标签选择器</strong></p>
<p>它可以对页面上相同的标签进行统一的设置，它描述的就是标签的名称.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><strong>类选择器</strong></p>
<p>类选择器在使用时使用”.”来描述，它描述的是元素上的class属性值</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.b</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>id选择器</strong></p>
<p>使用 “#” 引入，引用的是元素的id属性值。id选择器，比类选择器更具有唯一性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>选择器组</strong></p>
<p>逗号表示，谁和谁。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#c</span>, <span class="selector-id">#d</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>派生选择器</strong></p>
<p>“&gt;”表示所有子标签，空格表示所有子孙后代标签</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* div标签下的所有子标签p */</span></span><br><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* div标签下的所有子孙后代标签p */</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:blanchedalmond;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CSS伪类</strong></p>
<p>CSS伪类可对css的选择器添加一些特殊效果</p>
<p>伪类属性列表：<br>:link 向未被访问的链接添加样式。<br>:visited 向已被访问的链接添加样式。<br>:hover 当鼠标悬浮在元素上方时，向元素添加样式。<br>:active 向被激活的元素添加样式。<br>:first-child 向元素的第一个子元素添加样式。</p>
<p>超链接的伪类：要遵守使用顺序，lvha</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;<span class="attribute">color</span>:yellow;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:black;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;<span class="attribute">color</span>:green;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><ul>
<li>指定字体：font-family : value;</li>
<li>字体大小：font-size : value;<br>px：像素<br>em：倍数</li>
<li>字体加粗：font-weight : normal/bold;</li>
<li>文本颜色：color : value;</li>
<li>文本排列：text-align : left/right/center;</li>
<li>文字修饰：text-decoration : none/underline;</li>
<li>行高：line-height : value;（会自动垂直居中）</li>
<li>首行文本缩进：text-indent : value （2em）;</li>
</ul>
<h3 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h3><ul>
<li>background-color:value， 设置元素的背景颜色。</li>
<li>background-image:url(”路径“)， 把图像设置为背景。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;img/1.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>background-repeat:value， 设置背景图像的墙纸效果，是否及如何重复<br>repeat：在垂直方向和水平方向重复，默认<br>repeat-x：仅在水平方向重复<br>repeat-y：仅在垂直方向重复<br>no-repeat：仅显示一次</p>
</li>
<li><p>background-position:1 2， 设置背景图像的起始位置<br>1：控制水平方向 x轴 px<br>2：控制垂直方向 y轴</p>
</li>
<li><p>background-attachment 背景图像是否固定或者随着页面的其余部分滚动<br>默认值是 scroll：默认情况下，背景会随文档滚动<br>可取值为 fixed：背景图像固定，并不会随着页面的其余部分滚动，常用于实现称为水印的图像</p>
</li>
</ul>
<h3 id="列表属性"><a href="#列表属性" class="headerlink" title="列表属性"></a>列表属性</h3><ul>
<li><p>list-style-type:value;  设置列表项标记<br>none：无标记。（去除标记）<br>disc：默认。标记是实心圆。<br>circle：标记是空心圆。<br>square：标记是实心方块。<br>decimal：标记是数字。<br>decimal-leading-zero：0开头的数字标记。(01, 02, 03, 等。)<br>lower-roman：小写罗马数字(i, ii, iii, iv, v, 等。)<br>upper-roman：大写罗马数字(I, II, III, IV, V, 等。)<br>lower-alpha：小写英文字母The marker is lower-alpha (a, b, c, d, e,等。)<br>upper-alpha：大写英文字母The marker is upper-alpha (A, B, C, D, E,等。) </p>
</li>
<li><p> list-style-image:url(“路径”);  设置列表项标记为图片</p>
</li>
</ul>
<p>定义一个列表如下效果</p>
<p><a href="https://imgtu.com/i/O95OBV"><img src="https://s1.ax1x.com/2022/05/01/O95OBV.png" alt="O95OBV.png"></a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#a</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">list-style-type</span>:none;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>:black;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">217px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>:<span class="number">57px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#a</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>:<span class="number">#ffa500</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>:<span class="number">70px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-weight</span>:bold;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>斗罗大陆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>凡人修仙传<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>拉钩教育<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="边框属性"><a href="#边框属性" class="headerlink" title="边框属性"></a>边框属性</h3><p>CSS边框属性允许你指定一个元素边框的宽度，样式和颜色。</p>
<ul>
<li>border-width: 20px; 边框宽度 </li>
<li>border-color: green; 边框颜色 </li>
<li>border-style: solid;    边框样式 </li>
</ul>
<p>border-style取值如下：</p>
<p><a href="https://imgtu.com/i/O9IsET"><img src="https://s1.ax1x.com/2022/05/01/O9IsET.png" alt="O9IsET.png"></a></p>
<p>其他书写方式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*正常写法*/</span></span><br><span class="line"><span class="attribute">border-width</span>:<span class="number">2px</span>;</span><br><span class="line"><span class="attribute">border-color</span>:red;</span><br><span class="line"><span class="attribute">border-style</span>:solid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义一条边，top，bottom,left,right*/</span> </span><br><span class="line"><span class="attribute">border-top-width</span>:<span class="number">2px</span>;</span><br><span class="line"><span class="attribute">border-top-color</span>:red;</span><br><span class="line"><span class="attribute">border-top-style</span>:solid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*简写*/</span></span><br><span class="line"><span class="attribute">border</span>:<span class="number">3px</span> solid yellow;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*简写，一条边*/</span></span><br><span class="line"><span class="attribute">border-top</span>:<span class="number">5px</span> solid red;</span><br></pre></td></tr></table></figure>

<h3 id="轮廓属性"><a href="#轮廓属性" class="headerlink" title="轮廓属性"></a>轮廓属性</h3><p>轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p>
<p>轮廓就是边框的外边缘，语法和边框border差不多</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">outline</span>:<span class="number">2px</span> solid black;</span><br></pre></td></tr></table></figure>

<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。</p>
<p>CSS盒子模型本质上是一个盒子，封装周围的HTML元素，它包括：外边距margin，边框border，内边距padding，实际内容content。</p>
<p>盒子模型允许我们在其它元素和周围元素边框之间的空间放置元素。</p>
<p><a href="https://imgtu.com/i/O9T4AK"><img src="https://s1.ax1x.com/2022/05/01/O9T4AK.png" alt="O9T4AK.png"></a></p>
<ul>
<li>margin(外边距) - 盒子与盒子之间的距离</li>
<li>border(边框) - 盒子的保护壳</li>
<li>padding(内边距/填充) - 内填充，盒子边与内容之间的距离</li>
<li>content(内容) - 盒子的内容，显示的文本或图像</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">3px</span> solid red;  <span class="comment">/*设置边框*/</span></span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">40px</span>;		<span class="comment">/*设置外边距*/</span>			</span><br><span class="line">    <span class="attribute">padding-top</span>:<span class="number">20px</span>;   <span class="comment">/*设置顶部内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="默认定位"><a href="#默认定位" class="headerlink" title="默认定位"></a>默认定位</h3><ul>
<li>块级元素block：h1~h6，p, div 等，独占一行；可以改变宽高</li>
<li>行内元素inline：a,b,span,等，从左向右，水平排列（不会换行）；不能改变宽高</li>
<li>行内块元素inline-block：input,img等，从左向右，水平排列（自动换行）；可以改变宽高</li>
</ul>
<p>元素类型切换：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>:block/inline/inline-block;</span><br></pre></td></tr></table></figure>

<h3 id="浮动定位"><a href="#浮动定位" class="headerlink" title="浮动定位"></a>浮动定位</h3><p>让元素“飞”起来。不仅可以靠着左边或右边。还可以消除“块级”的霸道特性（独自占一行）。</p>
<p>float取值：<br>none ：不浮动<br>left：贴着左边 浮动<br>right：贴着右边 浮动</p>
<h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>和原来的位置进行比较，进行移动定位（偏移）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*元素在由来位置，顶部偏移20px,左侧偏移50px*/</span></span><br><span class="line"><span class="attribute">position</span>:relative;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">20px</span>;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">50px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>本元素与已定位的祖先元素的距离</p>
<ul>
<li>如果父级元素定位了，就以父级为参照物；</li>
<li>如果父级没定位，找爷爷级，爷爷定位了，以爷爷为参照物。</li>
<li>如果爷爷没定位，继续向上找，都没定位的话，body是最终选择。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*与已定位的祖先元素的位置，顶部偏移20px,左侧偏移50px*/</span></span><br><span class="line"><span class="attribute">position</span>:absolute;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">20px</span>;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">50px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>将元素的内容固定在页面的某个位置，当用户向下滚动页面时元素框并不随着移动</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*即使滚动页面，该元素依然固定，比如烦人的广告*/</span></span><br><span class="line"><span class="attribute">position</span>:fixed;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">200px</span>;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">250px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><p>如果有重叠元素，使用z轴属性，定义上下层次。</p>
<p>注意：<br>z轴属性，要配合相对或绝对定位来使用。<br>z值没有额定数值（整型就可以，具体用数字几，悉听尊便）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#a</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>:<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#b</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">z-index</span>:<span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><h3 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h3><p>border-radius：左上 右上 右下 左下;</p>
<p>border-radius：四个角;</p>
<p>单位：px 或 %</p>
<p>圆形：border-radius:50%</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">3px</span> solid red;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><p>box-shadow：1 2 3 4 5;<br>1：水平偏移 px<br>2：垂直偏移 px<br>3：模糊半径 px<br>4：扩张半径 px<br>5：颜色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">20px</span> <span class="number">50px</span> <span class="number">20px</span> <span class="number">20px</span> blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="渐变色"><a href="#渐变色" class="headerlink" title="渐变色"></a>渐变色</h3><p><strong>线性渐变</strong></p>
<p>background:linear-gradient([方向/角度]，颜色列表)；</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#a</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(to right, red, yellow, blue);   <span class="comment">/*方向*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#b</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(<span class="number">270deg</span>, red, yellow, blue);     <span class="comment">/*角度*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>径向渐变</strong></p>
<p>background: radial-gradient(颜色列表);<br>以圆心向外发散</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#c</span>&#123; </span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">radial-gradient</span>(red, yellow, blue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><strong>背景图位置</strong></p>
<p>background-origin：指定了背景图像的位置区域</p>
<ul>
<li>border-box : 背景图贴边框的外边缘</li>
<li>padding-box : 背景图贴内边距，即边框的内边缘</li>
<li>content-box : 背景图贴内容区域的边</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#a</span>,<span class="selector-id">#b</span>,<span class="selector-id">#c</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">img/a.gif</span>) no-repeat;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">10px</span> dashed red;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#a</span>&#123;</span><br><span class="line">    <span class="attribute">background-origin</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#b</span>&#123;</span><br><span class="line">    <span class="attribute">background-origin</span>: padding-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#c</span>&#123;</span><br><span class="line">    <span class="attribute">background-origin</span>: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/O9LMi6"><img src="https://s1.ax1x.com/2022/05/01/O9LMi6.png" alt="O9LMi6.png"></a></p>
<p><strong>背景色位置</strong></p>
<p>background-clip: 指定了背景色的位置区域，与上面差不多</p>
<ul>
<li>border-box 背景色在边框外边缘</li>
<li>padding-box 背景色在内边距，即边框内边缘</li>
<li>content-box 背景色在内容</li>
</ul>
<p><a href="https://imgtu.com/i/O9Lgwn"><img src="https://s1.ax1x.com/2022/05/01/O9Lgwn.png" alt="O9Lgwn.png"></a></p>
<p><strong>背景大小</strong></p>
<p>由于盒子小，背景图大，缩放图片</p>
<p>background-size:  value</p>
<ul>
<li>cover 缩放成盒子被铺满</li>
<li>contain 缩放成图片完全显示出来</li>
</ul>
<p><a href="https://imgtu.com/i/O9ONX4"><img src="https://s1.ax1x.com/2022/05/01/O9ONX4.png" alt="O9ONX4.png"></a></p>
<h3 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h3><p><strong>过渡</strong></p>
<p>从一个状态到另一个状态，中间的“缓慢”过程；<br>缺点是，控制不了中间某个时间点。</p>
<p>transition：1 2 3 4 ; </p>
<p>1：过渡或动画模拟的css属性</p>
<p>2：完成过渡所使用的时间（如2s内完成）</p>
<p>3：过渡函数。<br>linear:均速。ease:主键慢下来。ease:加速。ease-out:减速。ease-in-out:先加速后减速。</p>
<p>4：过渡开始出现的延迟时间</p>
<p>目前，css3只开发出部分的过渡属性，下图所示：</p>
<p><a href="https://imgtu.com/i/O9Xvse"><img src="https://s1.ax1x.com/2022/05/01/O9Xvse.png" alt="O9Xvse.png"></a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*鼠标悬浮到盒子上，盒子从宽度200px到600px</span><br><span class="line">  过程：延迟一秒后两秒内匀速完成动画。</span><br><span class="line">*/</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>:<span class="number">3px</span> solid red;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>:width <span class="number">2s</span> linear <span class="number">1s</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">600px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>动画</strong></p>
<p>从一个状态到另一个状态，过程中每个时间点都可以控制。</p>
<ul>
<li><p>关键帧：@keyframes 动画帧名 { from{} to{} } 或者{ 0%{} 20%{}… }</p>
</li>
<li><p>动画属性：animation：1  2   3   4   5;<br>1：动画帧名<br>2：执行时间<br>3：过渡函数，linear:均速。ease:主键慢下来。ease:加速。ease-out:减速。ease-in-out:先加速后减速。<br>4：动画执行的延迟（可省略）<br>5：动画执行的次数</p>
</li>
</ul>
<p>需求1：一个 元素从左向右移动，3秒内执行2次 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-id">#a</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">600px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>:<span class="number">3px</span> solid black;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#b</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>:red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 定义关键帧，命名动画为x */</span></span></span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> x&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">from</span>&#123;<span class="attribute">margin-left</span>:<span class="number">0px</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">to</span>&#123;<span class="attribute">margin-left</span>:<span class="number">550px</span>;&#125;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 执行自定义的x动画，3秒内完成，匀速，1秒延迟，执行2次 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-id">#b</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">animation</span>: x <span class="number">3s</span> linear <span class="number">1s</span> <span class="number">2</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需求2：一个 元素从左向右移动，3秒内执行完成。无限次交替执行，中途变换颜色<br>infinite：无限次<br>alternate：来回执行（交替，一去一回）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#a</span>&#123; </span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">600px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>:<span class="number">3px</span> solid blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#b</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>:red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 定义关键帧，命名动画为y */</span></span></span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> y&#123;</span></span><br><span class="line"><span class="css">        <span class="number">0%</span>&#123;<span class="attribute">background-color</span>:blue;<span class="attribute">margin-left</span>:<span class="number">0px</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="number">25%</span>&#123;<span class="attribute">background-color</span>:yellow;&#125;</span></span><br><span class="line"><span class="css">        <span class="number">50%</span>&#123;<span class="attribute">background-color</span>:green;&#125;</span></span><br><span class="line"><span class="css">        <span class="number">75%</span>&#123;<span class="attribute">background-color</span>:black;&#125;</span></span><br><span class="line"><span class="css">        <span class="number">100%</span>&#123;<span class="attribute">background-color</span>:fuchsia;<span class="attribute">margin-left</span>:<span class="number">550px</span>;&#125;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 执行自定义的y动画，3秒内完成，匀速，1秒延迟，执行无限交替 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-id">#b</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">animation</span>: y <span class="number">3s</span> linear <span class="number">1s</span> infinite alternate;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="javaScript"><a href="#javaScript" class="headerlink" title="javaScript"></a>javaScript</h1><p><strong>js介绍</strong></p>
<p>虽然是java作为前缀，但java和javascript的关系，就像老婆和老婆饼之间的关系，没有一毛钱关系！</p>
<p>网景公司在Netscape2.0首先推出了JavaScript</p>
<p>JavaScript 的正式名称是 “ECMAScript”，此标准由 ECMA 组织发展和维护，简称“js”</p>
<p>JavaScript 是一种网页编程技术，用来向 HTML 页面添加交互行为</p>
<p>JavaScript 是一种基于对象和事件驱动的解释性脚本语言，直接嵌入 HTML 页面，由浏览器解释执行代码，不进行预编译。</p>
<p><strong>js特点</strong></p>
<p>可以使用任何文本编辑工具编写，只需要浏览器就可以执行程序 （后面会学习不用浏览器也能运行）</p>
<p>解释执行：事先不编译，逐行执行</p>
<p>基于对象：内置大量现成对象</p>
<ul>
<li>适宜：<br>客户端数据计算<br>客户端表单合法性验证<br>浏览器事件的触发<br>网页特殊显示效果制作</li>
</ul>
<p><strong>js组成</strong></p>
<ul>
<li><strong>ECMAScript</strong>：定义<strong>核心</strong>语法，关键字，运算符，数据类型等系列标准</li>
<li><strong>DOM</strong>：<strong>文档对象模型</strong>，将一个html页面的所有节点看成是一个一个的对象。更有层次感的管理每一个节点。</li>
<li><strong>BOM</strong>：<strong>浏览器对象模型</strong>，是对浏览器窗口进行访问和操作。使用 BOM，开发者可以移动窗口、改变状态栏中的文本以及执行其他与页面内容不直接相关的动作。使 BOM 独树一帜且又常常令人怀疑的地方在于，它只是 JavaScript 的一个部分，没有任何相关的准。<ul>
<li>弹出新的浏览器窗口移动、关闭浏览器窗口以及调整窗口大小</li>
<li>提供 Web 浏览器详细信息的定位对象</li>
<li>提供用户屏幕分辨率详细信息的屏幕对象</li>
<li>对 cookie 的支持</li>
<li>IE 扩展了 BOM，加入了 ActiveXObject 类，可以通过 JavaScript 实例化 ActiveX对象，进而实现ajax局部刷新技术</li>
</ul>
</li>
</ul>
<p><strong>html中引入js</strong></p>
<p>使用js的三种方式</p>
<p>1，行内脚本，写在元素中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;弹框测试&#x27;)&quot;</span>&gt;</span>点我一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，内部脚本，只要写在html文件内部就可以，无论什么位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> </span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;弹框&quot;</span>); </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3，外部脚本，创建一个文件，后缀名是.js，在html页面中，使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/xx.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>以上使用脚本的三种方式的优先级，谁在上，谁先执行。因为是解释性语言。</p>
<h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>因为js是弱类型语言，所以，在定义变量的时候，所有的数据类型都是var</p>
<p>声明变量： var x ; var x,y;</p>
<ul>
<li>数值类型：number<br>不区分整型数值和浮点型数值<br>所有数字都采用 64 位浮点格式存储，类似于double 格式</li>
<li>字符串：string<br>首尾由单引号或双引号括起</li>
<li>布尔类型：<br>仅有两个值：true和false也代表1和0<br>实际运算中true=1,false=0</li>
</ul>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自动转换:</span><br><span class="line">数字 + 字符串：数字转换为字符串 10+’a’ -&gt; 10a </span><br><span class="line">字符串 + 布尔值：布尔值转换为字符串true或false true+’a’-&gt;truea </span><br><span class="line">数字 + 布尔值：true转换为1，false转换为0 true+5-&gt;6 </span><br><span class="line">布尔值 + 布尔值：布尔值转换为数值1或0 true+true-&gt;2</span><br></pre></td></tr></table></figure>

<p><strong>相关函数</strong></p>
<ul>
<li>parseInt：强制转换成整数<br>如果不能转换，则返回 NaN （NaN 属性是代表非数字值的特殊值。该属性用于指示某个值不是数字）<br>例如：parseInt(“6.32”)=6</li>
<li>parseFloat：强制转换成浮点数<br>如果不能转换，则返回 NaN<br>例如：parseFloat(“6.32”)=6.32</li>
<li>typeof：查询数值当前类型，返回 string / number / boolean / object<br>例如：typeof(“test”+3)==”string”</li>
</ul>
<h3 id="null-与-undefined"><a href="#null-与-undefined" class="headerlink" title="null 与 undefined"></a>null 与 undefined</h3><ul>
<li>null 在程序中代表“无值”或者“无对象”<br>可以通过给一个变量赋值 null 来清除变量的内容</li>
<li>undefined<br>声明了变量但从未赋值或者对象属性不存在</li>
</ul>
<h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><ul>
<li>加(＋)、 减(－)、 乘( * ) 、除( / ) 、余数( % )<br>- 可以表示减号，也可以表示负号，如：x = -y<br>+可以表示加法，也可以用于字符串的连接</li>
<li>递增( ++ ) 、递减( – )<br>i++ 相当于 i=i+1<br>i– 相当于 i=i-1</li>
</ul>
<h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><ul>
<li><p>相等：==<br>值相同</p>
</li>
<li><p>严格相等：===<br>类型相同<br>数值相同</p>
</li>
<li><p>非严格相等：!==</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;10&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a == b);  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(a === b)  <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>逻辑非（!）、逻辑与（&amp;&amp;）、逻辑或（||）</p>
<p>逻辑运算的操作数均为 boolean 表达式</p>
<h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（关系表达式） &#123; </span><br><span class="line">    <span class="comment">// 语句块 1 </span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (表达式<span class="number">2</span>)&#123; </span><br><span class="line">    <span class="comment">// 语句块 2; </span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="comment">// 语句块 3 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123; </span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>: </span><br><span class="line">        <span class="comment">// 语句1; </span></span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>: </span><br><span class="line">        <span class="comment">// 语句2; </span></span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">// 语句4; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span> ; i&lt;=<span class="number">5</span> ; i++)&#123; </span><br><span class="line">    alert(i); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件)&#123; </span><br><span class="line">    <span class="comment">// 语句1; </span></span><br><span class="line">    ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串API"><a href="#字符串API" class="headerlink" title="字符串API"></a>字符串API</h3><ul>
<li>length:获取字符串的长度（字符串中字符的个数） 属性，没有小括号</li>
<li>toUpperCase/toLowerCase :转大小写</li>
<li>charAt(下标) ： 返回某个下标上的字符</li>
<li>indexof(字符)：查找字符串中字符出现的首次下标</li>
<li>lastIndexof(字符)：查找字符串中字符最后一次出现的下标</li>
<li>substring(开始,结束)：截取字符串中一部分（结束是不包含的）</li>
<li>replace(旧的,新的)：将字符串中的旧字符替换成新字符</li>
<li>split(分割的节点)：一个字符串切割成N个小字符串，所以返回的是数组类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;HelloWord!&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.length);        <span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase());  <span class="comment">//HELLOWORD!</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase());  <span class="comment">//helloword!</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1</span>));      <span class="comment">//e</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">1</span>));  <span class="comment">//101</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;o&quot;</span>));   <span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&quot;o&quot;</span>)); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">1</span>,<span class="number">3</span>))  <span class="comment">//el</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">&quot;l&quot;</span>, <span class="string">&quot;*&quot;</span>)); <span class="comment">//He*loWord!</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot;o&quot;</span>))   <span class="comment">//[&quot;hell&quot;, &quot;W&quot;, &quot;rd!&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>初始化三种方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr1[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">arr1[<span class="number">1</span>] = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">arr1[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>, <span class="string">&quot;b&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3 </span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="string">&quot;c&quot;</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br></pre></td></tr></table></figure>

<p>常用方法：</p>
<ul>
<li>tostring()：将数组转换成字符串</li>
<li>join(连接符号)：将数组中的每个元素用连接符号连接成一个新的字符串。</li>
<li>concat(新元素)：将原来的数组连接新元素，原数组不变。</li>
<li>slice(开始，结束)：在数组中提取一部分，形成新的数组。不包含结束</li>
<li>reverse()：数组的反转（倒序）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">10</span>, <span class="string">&quot;a&quot;</span>, <span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1.toString());  <span class="comment">//10,a,true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.join(<span class="string">&quot;||&quot;</span>));  <span class="comment">//10||a||true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr1 = arr1.concat(<span class="number">4</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);      <span class="comment">//[10, &#x27;a&#x27;, true]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr1);   <span class="comment">//[10, &#x27;a&#x27;, true, 4, &#x27;d&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr2 = arr1.slice(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newArr2);  <span class="comment">//[10, &#x27;a&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( arr1.reverse() );  <span class="comment">//[true, &#x27;a&#x27;, 10]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>sort()：数组排序</p>
<ul>
<li><p>arr.sort() 字符排序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">123</span>,<span class="number">3</span>,<span class="number">11</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.sort();  <span class="comment">//字符排序（不会按照字面量的大小）</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);   <span class="comment">//[1, 11, 123, 2, 3]</span></span><br></pre></td></tr></table></figure></li>
<li><p>arr.sort(func) 数值排序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">123</span>,<span class="number">3</span>,<span class="number">11</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.sort(de);  <span class="comment">//自定义规则排序</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);   <span class="comment">//[1, 2, 3, 11, 123]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">de</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Math数学对象"><a href="#Math数学对象" class="headerlink" title="Math数学对象"></a>Math数学对象</h3><p>Math 对象用于执行数学任务</p>
<p>没有构造函数 Math()</p>
<p>无需创建，直接把 Math 作为对象使用就可以调用其所有属性和方法</p>
<p><a href="https://imgtu.com/i/OWEhKs"><img src="https://s1.ax1x.com/2022/05/16/OWEhKs.png" alt="OWEhKs.png"></a></p>
<p><a href="https://imgtu.com/i/OWE4rn"><img src="https://s1.ax1x.com/2022/05/16/OWE4rn.png" alt="OWE4rn.png"></a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回0-9之间任意一个随机数字 </span></span><br><span class="line"><span class="keyword">var</span> i = <span class="built_in">Math</span>.random() * <span class="number">10</span>; </span><br><span class="line"><span class="keyword">var</span> j = <span class="built_in">Math</span>.floor(i); </span><br><span class="line"><span class="built_in">console</span>.log(j);</span><br></pre></td></tr></table></figure>

<h3 id="Number对象"><a href="#Number对象" class="headerlink" title="Number对象"></a>Number对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="keyword">new</span> <span class="built_in">Number</span>( <span class="number">12.345</span> ); </span><br><span class="line"><span class="keyword">var</span> n1 = n.toFixed(<span class="number">2</span>); <span class="comment">// 12.35，固定两位小数，第三位小数四舍五入 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Number</span>( <span class="number">12.3</span> ); </span><br><span class="line"><span class="keyword">var</span> n2 = x.toFixed(<span class="number">2</span>); <span class="comment">// 12.30，固定两位小数，位数不够，0来补齐 </span></span><br></pre></td></tr></table></figure>

<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>对字符串执行模式匹配的强大工具</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配纯数字3-6个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^\d&#123;3,6&#125;$/</span>;  </span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(“^\\d&#123;<span class="number">3</span>,<span class="number">6</span>&#125;$<span class="string">&quot;);</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;22&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(reg2.test(a))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;正确&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="built_in">console</span>.log( time ); <span class="comment">// Tue Jul 14 2020 11:09:46 GMT+0800 (中国标准时间) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> year = time.getFullYear(); <span class="comment">// 年份 </span></span><br><span class="line"><span class="keyword">var</span> month = time.getMonth() + <span class="number">1</span>; <span class="comment">//月份从0开始，11结束，所以国内习惯要+1 </span></span><br><span class="line"><span class="keyword">var</span> day = time.getDate(); <span class="comment">// 几号 </span></span><br><span class="line"><span class="keyword">var</span> hour = time.getHours(); <span class="comment">// 几点 </span></span><br><span class="line"><span class="keyword">var</span> mm = time.getMinutes(); <span class="comment">// 分钟 </span></span><br><span class="line"><span class="keyword">var</span> s = time.getSeconds(); <span class="comment">//秒 </span></span><br><span class="line"><span class="keyword">var</span> ms = time.getMilliseconds(); <span class="comment">// 毫秒， 1000毫秒 = 1秒 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timestr = year+<span class="string">&quot;年&quot;</span>+month+<span class="string">&quot;月&quot;</span>+day+<span class="string">&quot;号 &quot;</span>+hour+<span class="string">&quot;点&quot;</span>+mm+<span class="string">&quot;分&quot;</span>+s+<span class="string">&quot;秒&quot;</span>+ms+<span class="string">&quot;毫秒&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log( timestr );</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"> 形参列表 </span>)</span>&#123;    </span><br><span class="line">    <span class="comment">// 函数体    //arguments是形参对象</span></span><br><span class="line">    <span class="keyword">return</span> 返回值; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：形参一定不要带数据类型</p>
<p><strong>构造函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;return a * b&quot;</span>); </span><br><span class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>); </span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure>

<p><strong>匿名函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;<span class="comment">// 没有名字的函数，应该用一个变量来接收 </span></span><br><span class="line">    <span class="keyword">return</span> a * <span class="number">10</span> + b; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( fn(<span class="number">3</span>, <span class="number">4</span>) );</span><br></pre></td></tr></table></figure>

<p><strong>全局函数</strong></p>
<p>isNaN()：检查其参数是否是<strong>非数字值</strong></p>
<p>eval()：用来转换字符串中的运算</p>
<p>encodeURI() 与 decodeURI()：编码和解码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//isNaN判断是否非数字</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">isNaN</span>(<span class="number">1213</span>) );   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">isNaN</span>(<span class="string">&quot;asc&quot;</span>) );  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//eval转换字符串中的运算</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;1+2&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);  <span class="comment">//1+2</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">eval</span>(str) ); <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//encodeURL 和 decodeURL</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;你好！&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = <span class="built_in">encodeURI</span>(str2);</span><br><span class="line"><span class="built_in">console</span>.log(str3);   <span class="comment">//%E4%BD%A0%E5%A5%BD%EF%BC%81</span></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="built_in">decodeURI</span>(str3);</span><br><span class="line"><span class="built_in">console</span>.log(str4);   <span class="comment">//你好！</span></span><br></pre></td></tr></table></figure>

<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>1、闭包的概念：指有权访问另一个函数作用域中的变量的函数，一般情况就是在一个函数中包含另一个函数。</p>
<p>2、闭包的作用：访问函数内部变量、保持函数在环境中一直存在，不会被垃圾回收机制处理；</p>
<p>简单地说：就是在函数的局部范围内声明一个封闭的环境，此环境不会被垃圾回收探测到。保证了数据的安全唯一性</p>
<p>全局变量：在外面声明，或者不用var声明的变量 </p>
<p>局部变量：用var声明，并且在函数的内部。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 统计方法用了多少次</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = test1();  <span class="comment">//fn  ---&gt;  function fn()&#123;return ++count;&#125;</span></span><br><span class="line">fn();</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log( fn() );  <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<p>闭包是一种保护私有变量的机制，在函数执行时形成私有的作用域，保护里面的私有变量不 受外界干扰。</p>
<p>直观的说就是形成一个不销毁的栈环境。</p>
<p>闭包的优点：<br>方便调用上下文中声明的局部变量 逻辑紧密，可以在一个函数中再创建个函数，避免了传参的问题</p>
<p>闭包的缺点：<br>因为使用闭包，可以使函数在执行完后不被销毁，保留在内存中，如果大量使用闭包就会造 成内存泄露，内存消耗很大</p>
<h3 id="弹框输出"><a href="#弹框输出" class="headerlink" title="弹框输出"></a>弹框输出</h3><ul>
<li>普通弹框 alert(“hello，拉勾”);</li>
<li>控制台日志输出 console.log(“谷歌浏览器按F12进入控制台”);</li>
<li>页面输出 document.write(“<code>&lt;h2&gt;</code>我爱你中国<code>&lt;/h2&gt;</code>“);  将<code>&lt;h2&gt;</code>元素输出到<code>&lt;body&gt;</code>中</li>
<li>确认框 confirm(“确定删除吗？”);</li>
<li>输入框 prompt(“请输入姓名：”);</li>
</ul>
<h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><p>文档对象模型，就是将页面中所有的标签元素都看成是一个对象（一片叶子），主树干定义为根节点（根元素），所有的标签都是从根元素延伸出去的，摸清结构，找到某个标签就不再困难了。</p>
<p>js为我们提供了很多种方法来实现在页面找查找某个元素节点，并且修改修改属性，或者增删改节点。</p>
<h3 id="DOM访问"><a href="#DOM访问" class="headerlink" title="DOM访问"></a>DOM访问</h3><p>getElementById：通过id属性获得元素节点对象</p>
<p>getElementsByName：通过name属性获得元素节点对象集</p>
<p>getElementsByTagName：通过标签名称获得元素节点对象集</p>
<p>等等。。。</p>
<h3 id="DOM修改"><a href="#DOM修改" class="headerlink" title="DOM修改"></a>DOM修改</h3><p>修改 HTML DOM 意味着许多不同的方面：</p>
<ul>
<li><p>改变 HTML 内容<br><code>document.getElementById(&quot;hello&quot;).innerHTML = &quot;走哇，喝点去~！&quot;;</code></p>
</li>
<li><p>改变 CSS 样式<br><code>document.getElementById(&quot;hello&quot;).style.fontFamily = &quot;华文彩云&quot;;</code></p>
</li>
<li><p>改变 HTML 属性<br><code>document.getElementById(&quot;hello&quot;).setAttribute(&quot;align&quot;,&quot;center&quot;);</code></p>
</li>
<li><p>创建新的 HTML 元素</p>
</li>
<li><p>删除已有的 HTML 元素</p>
</li>
<li><p>改变事件（处理程序）</p>
</li>
</ul>
<p><strong>添加节点</strong></p>
<p>document.createElement(“标签名”);</p>
<p>父元素.appendChild(子元素); </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建新节点</span></span><br><span class="line"><span class="keyword">var</span> newNode = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="comment">//对新节点设置属性，内容等等</span></span><br><span class="line">newNode.style.backgroundColor = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">newNode.innerHTML = <span class="string">&quot;你好呀！&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到父节点，并添加新节点</span></span><br><span class="line"><span class="keyword">var</span> parentNode = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">parentNode.appendChild(newNode);</span><br></pre></td></tr></table></figure>



<p><strong>删除节点</strong></p>
<p>父元素.removeChild(子元素);</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找到要删除的节点</span></span><br><span class="line"><span class="keyword">var</span> xiao = <span class="built_in">document</span>.getElementById(<span class="string">&quot;xiao&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到要删除节点的父节点，并删除</span></span><br><span class="line">xiao.parentNode.removeChild(xiao);</span><br></pre></td></tr></table></figure>



<p><strong>替换节点</strong></p>
<p>父元素.replaceChild(新元素, 旧元素);</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建新节点并设置</span></span><br><span class="line"><span class="keyword">var</span> newNode = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">newNode.style.width = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">newNode.style.height = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">newNode.style.backgroundColor = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要被替换的节点</span></span><br><span class="line"><span class="keyword">var</span> xiao = <span class="built_in">document</span>.getElementById(<span class="string">&quot;xiao&quot;</span>);</span><br><span class="line"></span><br><span class="line">xiao.parentNode.replaceChild(newNode, xiao);</span><br></pre></td></tr></table></figure>

<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>js捕获某个动作而做出的反馈</p>
<p>HTML 事件的例子：</p>
<ul>
<li>当用户点击鼠标时</li>
<li>当网页已加载时</li>
<li>当图片已加载时</li>
<li>当鼠标移动到元素上时</li>
<li>当输入字段被改变时</li>
<li>当 HTML 表单被提交时</li>
<li>当用户触发按键时</li>
</ul>
<p><strong>窗口事件(Window Events)</strong></p>
<p>仅在 body 和 frameset 元素中有效。</p>
<p>onload 当文档被载入时执行脚本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;test1()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>表单元素事件(Form Element Events)</strong></p>
<p>仅在表单元素中有效。</p>
<ul>
<li>onblur 当元素<strong>失去焦点</strong>时执行脚本</li>
<li>onfocus 当元素<strong>获得焦点</strong>时执行脚本</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;test2()&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;test3()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>鼠标事件 (Mouse Events)</strong></p>
<ul>
<li>onclick 当鼠标被<strong>单击</strong>时执行脚本</li>
<li>ondblclick 当鼠标被<strong>双击</strong>时执行脚本</li>
<li>onmouseout 当鼠标指针<strong>移出</strong>某元素时执行脚本</li>
<li>onmouseover 当鼠标指针<strong>悬停</strong>于某元素之上时执行脚本</li>
</ul>
<p><strong>键盘事件</strong></p>
<ul>
<li>onkeydown 按下去</li>
<li>onkeyup 弹上来</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event.keyCode == <span class="number">13</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;俺下了回车键&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>事件冒泡</strong></p>
<p>div中创建一个小div</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;da&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;xiao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//先子，后父。事件的触发顺序*自内向外*，这就是事件冒泡；</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;da&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;大盒子&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;xiao&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//e.stopPropagation()    //取消事件的冒泡机制</span></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;小盒子&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>先子，后父。事件的触发顺序<em><strong><strong>自内向外</strong></strong></em>，这就是事件冒泡；</p>
<p><strong>事件捕获</strong></p>
<p>div中创建一个小div</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;da&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;xiao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//先父,后子。事件触发顺序变更为*自外向内*，这就是事件捕获；</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;da&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;大盒子&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;xiao&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;小盒子&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>先父,后子。事件触发顺序变更为<em><strong><strong>自外向内</strong></strong></em>，这就是事件捕获；</p>
<h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><ul>
<li>大家在互联网上来回传递数据，如果没有一个统一的格式，解析起来的难度很大（每个人的编码喜好不一样）</li>
<li>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。</li>
<li>易于人阅读和编写，同时也易于机器解析和生成</li>
</ul>
<p>{<br>属性1：值1，<br>属性2：值2，<br>。。。。<br>}</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> json1 = &#123; <span class="attr">username</span>:<span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>:<span class="number">31</span>&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(json1.username);  <span class="comment">//李四</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> json2 = [&#123; <span class="attr">username</span>:<span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>:<span class="number">11</span>&#125;, &#123; <span class="attr">username</span>:<span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>:<span class="number">31</span>&#125;];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(json2[<span class="number">0</span>].username);  <span class="comment">//张三</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> json3 = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">username</span>:<span class="string">&quot;赵六&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">hobby</span>:[<span class="string">&quot;篮球&quot;</span>, <span class="string">&quot;羽毛球&quot;</span>, <span class="string">&quot;足球&quot;</span>]</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(json3.hobby[<span class="number">1</span>]);   <span class="comment">//羽毛球</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="BOM操作"><a href="#BOM操作" class="headerlink" title="BOM操作"></a>BOM操作</h2><p>就是javascript对浏览器的一些常规操作的方法</p>
<h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test()&quot;</span>&gt;</span>打开<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.open(<span class="string">&quot;https://baidu.com&quot;</span>, <span class="string">&quot;百度&quot;</span>, <span class="string">&quot;width=400px,height=400px,left=200px&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/O497s1"><img src="https://s1.ax1x.com/2022/05/17/O497s1.png" alt="O497s1.png"></a></p>
<h3 id="screen屏幕对象"><a href="#screen屏幕对象" class="headerlink" title="screen屏幕对象"></a>screen屏幕对象</h3><p>我想知道我的电脑屏幕多大？实际上，得到的就是分辨率</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test()&quot;</span>&gt;</span>屏幕信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> width = <span class="built_in">window</span>.screen.width;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> height = <span class="built_in">window</span>.screen.height;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;宽:&quot;</span> + width + <span class="string">&quot;，高:&quot;</span> + height);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="location定位"><a href="#location定位" class="headerlink" title="location定位"></a>location定位</h3><p>包含有关当前 URL 的信息，通常用来做页面跳转</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test()&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        location.reload();    <span class="comment">//重新加载页面</span></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;当前页面url：&quot;</span> + location.href);</span></span><br><span class="line"><span class="javascript">        location.href = <span class="string">&quot;https://baidu.com&quot;</span>;  <span class="comment">//跳转页面</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="history浏览器历史"><a href="#history浏览器历史" class="headerlink" title="history浏览器历史"></a>history浏览器历史</h3><p>history对象会记录浏览器的痕迹</p>
<p>history.go();    前进<br>history.go(-1);  后退<br>history.back();</p>
<h3 id="navigator-导航"><a href="#navigator-导航" class="headerlink" title="navigator 导航"></a><strong>navigator</strong> 导航</h3><p>window.navigator 对象包含有关访问者浏览器的信息;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>; </span></span><br><span class="line"><span class="javascript">    str += <span class="string">&quot;&lt;p&gt;浏览器的代号：&quot;</span>+ navigator.appCodeName +<span class="string">&quot;&lt;/p&gt;&quot;</span>; </span></span><br><span class="line"><span class="javascript">    str += <span class="string">&quot;&lt;p&gt;浏览器的名称：&quot;</span>+ navigator.appName+<span class="string">&quot;&lt;/p&gt;&quot;</span>; </span></span><br><span class="line"><span class="javascript">    str += <span class="string">&quot;&lt;p&gt;浏览器的版本：&quot;</span>+ navigator.appVersion+<span class="string">&quot;&lt;/p&gt;&quot;</span>; </span></span><br><span class="line"><span class="javascript">    str += <span class="string">&quot;&lt;p&gt;硬件平台：&quot;</span>+ navigator.platform+<span class="string">&quot;&lt;/p&gt;&quot;</span>; </span></span><br><span class="line"><span class="javascript">    str += <span class="string">&quot;&lt;p&gt;用户代理：&quot;</span>+ navigator.userAgent +<span class="string">&quot;&lt;/p&gt;&quot;</span>; </span></span><br><span class="line"><span class="javascript">    str += <span class="string">&quot;&lt;p&gt;启用Cookies：&quot;</span>+navigator.cookieEnabled+<span class="string">&quot;&lt;/p&gt;&quot;</span>; </span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(str); </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="存储对象"><a href="#存储对象" class="headerlink" title="存储对象"></a><strong>存储对象</strong></h3><p>用起来和我们在java中map很相似，都是键值对的方式存数据</p>
<p><strong>本地存储</strong> <strong>localStorage</strong></p>
<p>在关闭窗口或标签页之后将会删除这些数据</p>
<ul>
<li>保存数据<br>localStorage.setItem(“name”,”curry”); </li>
<li>提取数据<br>localStorage.getItem(“name”); </li>
<li>删除数据<br>localStorage.removeItem(“name”); </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存数据三种方法</span></span><br><span class="line"><span class="built_in">localStorage</span>.a = <span class="string">&quot;nihao&quot;</span>;</span><br><span class="line"><span class="built_in">localStorage</span>[<span class="string">&quot;b&quot;</span>] = <span class="string">&quot;word&quot;</span>;</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;asddvv&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取的三种方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>[<span class="string">&quot;b&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;c&quot;</span>));</span><br></pre></td></tr></table></figure>



<p><strong>会话存储</strong> <strong>sessionStorage</strong></p>
<p>会话，就是保持浏览器别关闭。</p>
<p>关闭浏览就等于结束了一次会话。</p>
<p>开启浏览器就意味着创建了一次会话</p>
<ul>
<li>保存数据<br>sessionStorage.setItem(“name”, “klay”); </li>
<li>提取数据<br>sessionStorage.getItem(“name”); </li>
<li>删除数据<br>sessionStorage.removeItem(“name”);</li>
<li>删除所有数据<br>sessionStorage.clear();</li>
</ul>
<p>案例：记录点击了几下按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test()&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>( sessionStorage.getItem(<span class="string">&quot;count&quot;</span>) )&#123;</span></span><br><span class="line"><span class="javascript">            sessionStorage.setItem(<span class="string">&quot;count&quot;</span>, <span class="built_in">Number</span>(sessionStorage.getItem(<span class="string">&quot;count&quot;</span>)) + <span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            sessionStorage.setItem(<span class="string">&quot;count&quot;</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;result&quot;</span>).innerText = </span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;点击了&quot;</span>+ sessionStorage.getItem(<span class="string">&quot;count&quot;</span>) +<span class="string">&quot;次&quot;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="计时操作"><a href="#计时操作" class="headerlink" title="计时操作"></a>计时操作</h3><p><strong>周期性定时器</strong> <strong>setInterval</strong></p>
<p>setInterval(1,2)<br>1：执行语句<br>2：时间周期，单位为毫秒</p>
<p>案例：闪烁的电子时钟</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> colors = [<span class="string">&quot;red&quot;</span>,<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;pink&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;black&quot;</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> i = <span class="number">0</span>;   <span class="comment">//记录颜色及颜色下标</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">bian</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;title&quot;</span>).style.color = colors[i];</span></span><br><span class="line"><span class="javascript">        i++;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>( i == colors.length )&#123;</span></span><br><span class="line"><span class="javascript">            i=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setInterval</span>(bian, <span class="number">100</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">time</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> str = d.getFullYear() + <span class="string">&quot;年&quot;</span> + (d.getMonth()+<span class="number">1</span>) + <span class="string">&quot;月&quot;</span> + </span></span><br><span class="line"><span class="javascript">                  d.getDate() + <span class="string">&quot;日&quot;</span> + d.getHours() + <span class="string">&quot;时&quot;</span> + </span></span><br><span class="line"><span class="javascript">                  d.getMinutes() + <span class="string">&quot;分&quot;</span> + d.getSeconds() + <span class="string">&quot;秒&quot;</span>; </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;title&quot;</span>).innerText = str;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setInterval</span>(time, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>停止定时器</strong> <strong>clearInterval</strong></p>
<p>clearInterval(定时器名);</p>
<p>案例：模拟年会抽奖</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;tu&quot;</span> <span class="attr">src</span>=<span class="string">&quot;image/1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;begin()&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;stop()&quot;</span> &gt;</span>停止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> imgArr = [<span class="string">&quot;1.jpg&quot;</span>, <span class="string">&quot;2.jpg&quot;</span>, <span class="string">&quot;3.jpg&quot;</span>, <span class="string">&quot;4.jpg&quot;</span>, <span class="string">&quot;5.jpg&quot;</span>, <span class="string">&quot;6.jpg&quot;</span>, <span class="string">&quot;7.jpg&quot;</span>]</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">bian</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> i = <span class="built_in">Math</span>.floor( <span class="built_in">Math</span>.random() * imgArr.length );   <span class="comment">//0~6</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;tu&quot;</span>).setAttribute(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;image/&quot;</span> + imgArr[i]);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">begin</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        myInterval = <span class="built_in">setInterval</span>(bian, <span class="number">100</span>);   <span class="comment">//没加var，表示全局变量</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">stop</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearInterval</span>(myInterval);   <span class="comment">//停止定时器</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>一次性定时器</strong> <strong>setTimeout</strong></p>
<p>相当于延迟的效果，只执行一次</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">bian</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;title&quot;</span>).style.color = <span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">	</span></span><br><span class="line"><span class="javascript">    <span class="comment">//延迟3秒之后调用，仅一次</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(bian, <span class="number">3000</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><p><strong>介绍</strong></p>
<ul>
<li><p>jQuery由美国人John Resig（约翰·莱西格）于2006年创建</p>
</li>
<li><p>jQuery是目前最流行的JavaScript程序库，它是对JavaScript对象和函数的封装</p>
</li>
<li><p>它的设计思想是write less,do more</p>
</li>
<li><p>实现隔行变色效果，JavaScript要循环加判断，而jQuery只需一句关键代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;tr:even&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#ccc&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>作用</strong></p>
<ul>
<li>访问和操作DOM元素</li>
<li>控制页面样式</li>
<li>对页面事件进行处理</li>
<li>扩展新的jQuery插件</li>
<li>与Ajax技术完美结合</li>
</ul>
<p><strong>优点</strong></p>
<ul>
<li>体积小，压缩后只有100KB左右</li>
<li>强大的选择器</li>
<li>出色的DOM封装</li>
<li>可靠的事件处理机制</li>
<li>出色的浏览器兼容性</li>
</ul>
<p>jQuery官网：<a href="http://jquery.com/">http://jQuery.com</a></p>
<h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p>jQuery作为一个单独存在的js文件，并不会与其他的js文件发生冲突</p>
<p>在页面中使用传统引入js文件的方式引入即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="基本语法介绍"><a href="#基本语法介绍" class="headerlink" title="基本语法介绍"></a>基本语法介绍</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	$(selector).action();</span></span><br><span class="line"><span class="javascript">    <span class="comment">//例如：$(&quot;p&quot;).text()</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>工厂函数 $() ：将DOM对象转化为jQuery对象</p>
</li>
<li><p>选择器 selector：获取需要操作的DOM 元素（没错，用法基本上和css一致 ）</p>
</li>
<li><p>方法action()：jQuery中提供的方法，其中包括绑定事件处理的方法“$”等同于“ jQuery ”</p>
</li>
</ul>
<h2 id="jQuery对象与DOM对象"><a href="#jQuery对象与DOM对象" class="headerlink" title="jQuery对象与DOM对象"></a>jQuery对象与DOM对象</h2><p>DOM对象和jQuery对象分别拥有一套独立的方法，不能混用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#title&quot;</span>).html();</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">document</span>.getELementById(<span class="string">&quot;title&quot;</span>).innerHTML;</span><br></pre></td></tr></table></figure>

<p>要混用，需要转换</p>
<ul>
<li>DOM对象转jQuery对象<br><code>$(DOM对象);</code></li>
<li>jQuery对象转DOM对象<br><code>jQuery对象.get(0);</code></li>
</ul>
<h2 id="选择器-1"><a href="#选择器-1" class="headerlink" title="选择器"></a>选择器</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><p>基本选择器包括标签选择器、类选择器、ID选择器、并集选择器、交集选择器和全局选择器</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>语法构成</strong></th>
<th><strong>描述</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>标签选择器</td>
<td>element</td>
<td>根据给定的标签名匹配元素</td>
<td>$(“h2” )选取所有h2元素</td>
</tr>
<tr>
<td>类选择器</td>
<td>.class</td>
<td>根据给定的class匹配元素</td>
<td>$(“ .title”)选取所有class为title的元素</td>
</tr>
<tr>
<td>ID选择器</td>
<td>#id</td>
<td>根据给定的id匹配元素</td>
<td>$(“ #title”)选取id为title的元素</td>
</tr>
<tr>
<td>并集选择器</td>
<td>selector1,selector2,…,selectorN</td>
<td>将每一个选择器匹配的元素合并后一起返回</td>
<td>$(“div,p,.title” )选取所有div、p和拥有class为title的元素</td>
</tr>
<tr>
<td>交集选择器</td>
<td>element.class或element#id</td>
<td>匹配指定class或id的某元素或元素集合</td>
<td>$(“h2.title”)选取所有拥有class为title的h2元素</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span>南昌<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//$(&quot;h1&quot;).css(&quot;color&quot;, &quot;red&quot;);  </span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//$(&quot;#a&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//$(&quot;.b&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//$(&quot;p,#a&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//$( 1.b&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>语法构成</strong></th>
<th><strong>描述</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>后代选择器</td>
<td>ancestor空格descendant</td>
<td>选取ancestor元素里的所有descendant（后代）元素</td>
<td>$(“#menu span” )选取#menu下的span元素</td>
</tr>
<tr>
<td>子选择器</td>
<td>parent&gt;child</td>
<td>选取parent元素下的child（子）元素</td>
<td>$(“ #menu&gt;span” )选取#menu的子元素span</td>
</tr>
<tr>
<td>相邻元素选择器</td>
<td>prev+next</td>
<td>选取紧邻prev元素之后的next元素</td>
<td>$(“ h2+dl “ )选取紧邻h2元素之后的同辈元素dl</td>
</tr>
<tr>
<td>同辈元素选择器</td>
<td>prev~sibings</td>
<td>选取prev元素之后的所有siblings元素</td>
<td>$(“ h2~dl “ )选取h2元素之后所有的同辈元素dl</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>孙权<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>曹操<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>刘备<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>马超<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>工鹏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// $(&quot;div p&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// $(&quot;div&gt;p&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// $(&quot;div+p&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// $(&quot;div~p&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>语法构成</strong></th>
<th><strong>描述</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>属性选择器</td>
<td>[attribute]</td>
<td>选取包含给定属性的元素</td>
<td>$(“ [href]” )选取含有href属性的元素</td>
</tr>
<tr>
<td></td>
<td>[attribute=value]</td>
<td>选取等于给定属性是某个特定值的元素</td>
<td>$(“ [href =’#’]” )选取href属性值为“#”的元素</td>
</tr>
<tr>
<td></td>
<td>[attribute !=value]</td>
<td>选取不等于给定属性是某个特定值的元素</td>
<td>$(“ [href !=’#’]” )选取href属性值不为“#”的元素</td>
</tr>
<tr>
<td></td>
<td>[attribute^=value]</td>
<td>选取给定属性是以某些特定值开始的元素</td>
<td>$(“ [href^=’en’]” )选取href属性值以en开头的元素</td>
</tr>
<tr>
<td></td>
<td>[attribute$=value]</td>
<td>选取给定属性是以某些特定值结尾的元素</td>
<td>$(“ [href$=’.jpg’]” )选取href属性值以.jpg结尾的元素</td>
</tr>
<tr>
<td></td>
<td>[attribute*=value]</td>
<td>选取给定属性是以包含某些值的元素</td>
<td>$(“ [href* =’txt’]” )选取href属性值中含有txt的元素</td>
</tr>
<tr>
<td></td>
<td>[s1] [s2] [sN]</td>
<td>选取满足多个条件的复合属性的元素</td>
<td>$(“li[id][title=新闻]” )选取含有id和title属性为新闻的&lt;li&gt;元素</td>
</tr>
</tbody></table>
<h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><table>
<thead>
<tr>
<th><strong>语法构成</strong></th>
<th><strong>描述</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>:first</td>
<td>选取第一个元素</td>
<td>$(“ li:first” )选取所有li元素中的第一个li元素</td>
</tr>
<tr>
<td>:last</td>
<td>选取最后一个元素</td>
<td>$(“ li:last” )选取所有li元素中的最后一个li元素</td>
</tr>
<tr>
<td>:even</td>
<td>选取索引是偶数的所有元素（index从0开始）</td>
<td>$(“ li:even” )选取索引是偶数的所有li元素</td>
</tr>
<tr>
<td>:odd</td>
<td>选取索引是奇数的所有元素（index从0开始）</td>
<td>$(“ li:odd” )选取索引是奇数的所有li元素</td>
</tr>
<tr>
<td>:eq(index)</td>
<td>选取索引等于index的元素（index从0开始）</td>
<td>$(“li:eq(1)” )选取索引等于1的li元素</td>
</tr>
<tr>
<td>:gt(index)</td>
<td>选取索引大于index的元素（index从0开始）</td>
<td>$(“ li:gt(1)” )选取索引大于1的li元素（注：大于1，不包括1）</td>
</tr>
<tr>
<td>:lt(index)</td>
<td>选取索引小于index的元素（index从0开始）</td>
<td>$(“li:lt(1)” )选取索引小于1的li元素（注：小于1，不包括1）</td>
</tr>
<tr>
<td>:not(select)</td>
<td>除了select中的元素</td>
<td>$(“li:not(‘#a’)”)选取li元素，除了id为a的元素</td>
</tr>
</tbody></table>
<h2 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h2><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
<th><strong>执行时机</strong></th>
</tr>
</thead>
<tbody><tr>
<td>click( )</td>
<td>触发或将函数绑定到指定元素的click事件</td>
<td>单击鼠标时</td>
</tr>
<tr>
<td>mouseover( )</td>
<td>触发或将函数绑定到指定元素的mouse over事件</td>
<td>鼠标移过时</td>
</tr>
<tr>
<td>mouseout( )</td>
<td>触发或将函数绑定到指定元素的mouse out事件</td>
<td>鼠标移出时</td>
</tr>
</tbody></table>
<p>复合事件：hover()方法相当于mouseover与mouseout事件的组合</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;div&quot;</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">this</span>).css(<span class="string">&quot;border-color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;div&quot;</span>).mouseout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">this</span>).css(<span class="string">&quot;border-color&quot;</span>, <span class="string">&quot;black&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//等同于复合事件</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;div&quot;</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">this</span>).css(<span class="string">&quot;border-color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">this</span>).css(<span class="string">&quot;border-color&quot;</span>, <span class="string">&quot;black&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
<th><strong>执行时机</strong></th>
</tr>
</thead>
<tbody><tr>
<td>keydown( )</td>
<td>触发或将函数绑定到指定元素的keydown事件</td>
<td>按下键盘时</td>
</tr>
<tr>
<td>keyup( )</td>
<td>触发或将函数绑定到指定元素的keyup事件</td>
<td>释放按键时</td>
</tr>
</tbody></table>
<h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
<th><strong>执行时机</strong></th>
</tr>
</thead>
<tbody><tr>
<td>focus( )</td>
<td>触发或将函数绑定到指定元素的focus事件</td>
<td>获得焦点</td>
</tr>
<tr>
<td>blur( )</td>
<td>触发或将函数绑定到指定元素的blur事件</td>
<td>失去焦点</td>
</tr>
</tbody></table>
<h3 id="事件的动态绑定"><a href="#事件的动态绑定" class="headerlink" title="事件的动态绑定"></a>事件的动态绑定</h3><p>对dom元素绑定事件的另一种写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可绑定一到多个事件</span></span><br><span class="line">$(select).on(<span class="string">&#x27;click mouseover&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">//alert(&#x27;hello&#x27;);</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="显示和隐藏"><a href="#显示和隐藏" class="headerlink" title="显示和隐藏"></a>显示和隐藏</h2><p><strong>改变元素的宽和高（带动画效果）</strong></p>
<ul>
<li>show( speed )：显示</li>
<li>hide( speed )：隐藏</li>
<li>toggle( speed )等价于show+hide  : 显示的隐藏，隐藏的显示</li>
</ul>
<p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒</p>
<p> <strong>改变元素的高（拉伸效果）</strong></p>
<ul>
<li>slideDown( speed  ) ：显示，向下伸展</li>
<li>slideUp( speed  )：隐藏，向上收缩</li>
<li>slideToggle( speed  )等价于slideDown+slideUp</li>
</ul>
<p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒</p>
<p><strong>不改变元素的大小（淡入淡出效果）</strong></p>
<ul>
<li>fadeIn( speed  ) 显示，映入眼帘</li>
<li>fadeOut( speed  )  隐藏，淡出视线</li>
<li>fadeToggle( speed  ) 等价于fadeIn+fadeOut动画</li>
<li>fadeTo( speed , 透明度 ) 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）</li>
</ul>
<p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;div&quot;</span>).fadeOut(<span class="number">2000</span>);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;div&quot;</span>).fadeIn(<span class="number">2000</span>);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#btn3&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// $(&quot;div&quot;).fadeToggle(2000);</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;div&quot;</span>).fadeTo(<span class="number">2000</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="链"><a href="#链" class="headerlink" title="链"></a>链</h2><p>链是允许我们在同一个元素上在一条语句中运行多个jQuery方法，可以把动作/方法链接在一起 ；</p>
<p>例如：点击一次按钮，让div完成4个指定动作：背景变粉，字体变绿，收缩，拉伸</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="javascript">        	.css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;pink&quot;</span>)</span></span><br><span class="line"><span class="javascript">            .css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>)</span></span><br><span class="line"><span class="javascript">            .slideUp(<span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">            .slideDown(<span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="DOM和CSS操作"><a href="#DOM和CSS操作" class="headerlink" title="DOM和CSS操作"></a>DOM和CSS操作</h2><h3 id="属性函数"><a href="#属性函数" class="headerlink" title="属性函数"></a>属性函数</h3><ul>
<li><p>attr()</p>
<ul>
<li>attr( “属性” ); <strong>获得</strong>元素的属性值</li>
<li>attr( “属性”  , “新值” ); <strong>修改</strong>元素的属性值</li>
<li>attr(  {json}  ) </li>
</ul>
</li>
<li><p>val() ; 获得或修改表单元素中的value值</p>
</li>
<li><p>html(); 获得或修改元素中的内容（标签+文本）</p>
</li>
<li><p>text(); 获得或修改元素中的文本</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> src = $(<span class="string">&quot;img&quot;</span>).attr(<span class="string">&quot;src&quot;</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(src);</span><br><span class="line">$(<span class="string">&quot;img&quot;</span>).attr(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;image/2.jpg&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;img&quot;</span>).attr( &#123;<span class="string">&quot;width&quot;</span>:<span class="string">&quot;100px&quot;</span>,<span class="string">&quot;height&quot;</span>:<span class="string">&quot;100px&quot;</span>&#125; )</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).val(<span class="string">&quot;你好呀&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( $(<span class="string">&quot;h2&quot;</span>).text() );</span><br><span class="line"><span class="built_in">console</span>.log( $(<span class="string">&quot;h2&quot;</span>).html() );</span><br></pre></td></tr></table></figure>

<h3 id="CSS样式函数"><a href="#CSS样式函数" class="headerlink" title="CSS样式函数"></a>CSS样式函数</h3><ul>
<li><p>css()</p>
<ul>
<li>css( “属性”); 获得该属性值</li>
<li>css( “属性”,”值”); 设置属性的值</li>
<li>css( { json} ); 设置多个属性的值</li>
</ul>
</li>
<li><p>width();  获得或修改元素的宽度</p>
</li>
<li><p>height(); 获得或修改元素的高度</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( $(<span class="string">&quot;div&quot;</span>).css(<span class="string">&quot;width&quot;</span>) );</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).css(<span class="string">&quot;backgroun&quot;</span>, <span class="string">&quot;bule&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).css( &#123;<span class="string">&quot;width&quot;</span>:<span class="string">&quot;100px&quot;</span>,<span class="string">&quot;height&quot;</span>:<span class="string">&quot;100px&quot;</span>&#125; );</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( $(<span class="string">&quot;div&quot;</span>).width() );</span><br><span class="line"><span class="built_in">console</span>.log( $(<span class="string">&quot;div&quot;</span>).height() );</span><br></pre></td></tr></table></figure>

<h3 id="类样式函数"><a href="#类样式函数" class="headerlink" title="类样式函数"></a>类样式函数</h3><ul>
<li>addClass(); 为元素添加类样式</li>
<li>removeClass(); 将元素的类样式移除</li>
<li>toggleClass(); 样式的切换（有-&gt;无，无-&gt;有）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>:red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.a</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>:<span class="number">5px</span> solid black;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.b</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>添加类<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>移除类<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>切换类<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// $(&quot;div&quot;).addClass(&quot;a&quot;);</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;div&quot;</span>).addClass(<span class="string">&quot;a b&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;div&quot;</span>).removeClass(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#btn3&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;div&quot;</span>).toggleClass(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><p><strong>创建节点</strong></p>
<p>工厂函数$()，用于获取或创建节点</p>
<p><code>$(&quot;&lt;li&gt;关羽&lt;/li&gt;&quot;);</code></p>
<p><strong>插入节点</strong></p>
<p>插入子节点</p>
<table>
<thead>
<tr>
<th><strong>语法</strong></th>
<th><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td>append(content)</td>
<td>$(A).append(B)表示将B追加到A中，如：$(“ul”).append($newNode1);</td>
</tr>
<tr>
<td>appendTo(content)</td>
<td>$(A).appendTo(B)表示把A追加到B中，如：$newNode1.appendTo(“ul”);</td>
</tr>
<tr>
<td>prepend(content)</td>
<td>$(A). prepend (B)表示将B前置插入到A中，如：$(“ul”). prepend ($newNode1);</td>
</tr>
<tr>
<td>prependTo(content)</td>
<td>$(A). prependTo (B)表示将A前置插入到B中，如：$newNode1. prependTo (“ul”);</td>
</tr>
</tbody></table>
<p>插入同辈节点</p>
<table>
<thead>
<tr>
<th><strong>语法</strong></th>
<th><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td>after(content)</td>
<td>$(A).after (B)表示将B插入到A之后，如：$(“ul”).after($newNode1);</td>
</tr>
<tr>
<td>insertAfter(content)</td>
<td>$(A). insertAfter (B)表示将A插入到B之后，如：$newNode1.insertAfter(“ul”);</td>
</tr>
<tr>
<td>before(content)</td>
<td>$(A). before (B)表示将B插入至A之前，如：$(“ul”).before($newNode1);</td>
</tr>
<tr>
<td>insertBefore(content)</td>
<td>$(A). insertBefore (B)表示将A插入到B之前，如：$newNode1.insertBefore(“ul”);</td>
</tr>
</tbody></table>
<p><strong>替换节点</strong></p>
<p>replaceWith() ：<code>oldNode.replaceWith(newNode);</code></p>
<p>replaceAll() ：<code>newNode.replaceAll(oldNode);</code></p>
<p><strong>复制节点</strong></p>
<p>clone()</p>
<p><strong>删除节点</strong></p>
<p>remove()删除整个节点</p>
<p>empty()清空节点内容</p>
<h2 id="节点遍历"><a href="#节点遍历" class="headerlink" title="节点遍历"></a>节点遍历</h2><h3 id="祖先元素"><a href="#祖先元素" class="headerlink" title="祖先元素"></a>祖先元素</h3><p>用于向上遍历 DOM 树的方法</p>
<ul>
<li>parent() 返回被选元素的直接父元素，仅仅是上一级 （找爸爸）</li>
<li>parents(select) 返回被选元素的所有祖先元素，它一路向上直到文档的根元素，可以选择辈分</li>
</ul>
<h3 id="同辈元素"><a href="#同辈元素" class="headerlink" title="同辈元素"></a>同辈元素</h3><ul>
<li>next() 获取紧邻匹配元素之后的元素</li>
<li>prev() 获取紧邻匹配元素之前的元素</li>
<li>siblings( [selector] ) 获取位于匹配元素前面和后面的所有同辈元素</li>
</ul>
<h3 id="后代元素"><a href="#后代元素" class="headerlink" title="后代元素"></a>后代元素</h3><p>后代是子、孙、曾孙等等</p>
<ul>
<li>children( [selector] ) 方法返回被选元素的所有直接子元素，“孩子”</li>
<li>find( 选择器 ) 方法返回被选元素的后代元素，一路向下直到最后一个后代。</li>
</ul>
<h3 id="元素的过滤"><a href="#元素的过滤" class="headerlink" title="元素的过滤"></a>元素的过滤</h3><ul>
<li>first()：过滤第一个元素</li>
<li>last()：过滤最后一个元素</li>
<li>eq(index)：过滤到下标为index的元素</li>
<li>not()：除了什么之外的元素</li>
<li>is()：返回布尔，判断是不是这种元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父辈</span></span><br><span class="line"><span class="keyword">var</span> node = $(<span class="string">&quot;#a&quot;</span>).parent();</span><br><span class="line"><span class="keyword">var</span> node = $(<span class="string">&quot;#a&quot;</span>).parents(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//同辈</span></span><br><span class="line"><span class="keyword">var</span> node = $(<span class="string">&quot;ul&quot;</span>).next();</span><br><span class="line"><span class="keyword">var</span> node = $(<span class="string">&quot;ul&quot;</span>).prev();</span><br><span class="line"><span class="keyword">var</span> nodeArr = $(<span class="string">&quot;ul&quot;</span>).siblings(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;nodeArr.length; i++)&#123;</span><br><span class="line">    alert(nodeArr[i].innerHTML);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后代</span></span><br><span class="line"><span class="keyword">var</span> node = $(<span class="string">&quot;ul&quot;</span>).children(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> node = $(<span class="string">&quot;ul&quot;</span>).find(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//过滤</span></span><br><span class="line"><span class="keyword">var</span> node = $(<span class="string">&quot;ul&gt;li&quot;</span>).first();</span><br><span class="line"><span class="keyword">var</span> node = $(<span class="string">&quot;ul&gt;li&quot;</span>).last();</span><br><span class="line"><span class="keyword">var</span> node = $(<span class="string">&quot;ul&gt;li&quot;</span>).eq(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> node = $(<span class="string">&quot;ul&gt;li&quot;</span>).not(<span class="string">&quot;#a&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> result = $(<span class="string">&quot;ul&gt;li&quot;</span>).is(<span class="string">&quot;li&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="手风琴特效"><a href="#手风琴特效" class="headerlink" title="手风琴特效"></a>手风琴特效</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.a</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>运动<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>乒乓球<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>情歌王<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>生日快乐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>国歌<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>教育<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;ul&gt;li&gt;span&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//关闭除自己以外的ul元素</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;.a&quot;</span>).not( $(<span class="built_in">this</span>).next(<span class="string">&quot;ul&quot;</span>) ).css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;none&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//显示和隐藏切换</span></span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">this</span>).next(<span class="string">&quot;ul&quot;</span>).toggle();</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>商品编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单价<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>总价<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>炸香肠<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;jian&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;jia&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1002<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>王八<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;jian&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;jia&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1003<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>恐龙<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;jian&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;jia&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;width:400px; text-align:right&quot;</span>&gt;</span></span><br><span class="line">        总价：<span class="tag">&lt;<span class="name">b</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>###<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交订单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;.jian&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//数量减一</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> num = $(<span class="built_in">this</span>).next().text()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>( confirm(<span class="string">&quot;是否删除该商品！&quot;</span>) )&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="built_in">this</span>).parents(<span class="string">&quot;tr&quot;</span>).remove();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                sum();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> newNum = <span class="built_in">Number</span>(num) - <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).next().text(newNum);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//该商品总价</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> price = $(<span class="built_in">this</span>).parent().prev().text();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> zongPrice = <span class="built_in">Number</span>(price) * newNum;</span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).parent().next().text(zongPrice);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//计算购物车总价</span></span></span><br><span class="line"><span class="javascript">            sum();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;.jia&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//数量加一</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> num = $(<span class="built_in">this</span>).prev().text();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> newNum = <span class="built_in">Number</span>(num) + <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">this</span>).prev().text(newNum);</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="comment">//该商品总价</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> price = $(<span class="built_in">this</span>).parent().prev().text();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> zongPrice = <span class="built_in">Number</span>(price) * newNum;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">this</span>).parent().next().text(zongPrice);</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="comment">//计算购物车总价</span></span></span><br><span class="line"><span class="javascript">        sum();</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//计算购物车商品总价</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr = $(<span class="string">&quot;tr:not(&#x27;tr:first&#x27;)&quot;</span>).find(<span class="string">&quot;td:last&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">            sum += <span class="built_in">Number</span>( arr[i].innerText );</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;b&quot;</span>).text(sum);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。</p>
<p>它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言</p>
<p><strong>ES6 与 ECMAScript 2015 的关系</strong></p>
<ul>
<li>2011 年，ECMAScript 5.1 版发布后，就开始制定 6.0 版了。因此，ES6 这个词的原意，就是指 JavaScript 语言的下一个版本。</li>
<li>ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等</li>
</ul>
<h2 id="搭建前端环境"><a href="#搭建前端环境" class="headerlink" title="搭建前端环境"></a>搭建前端环境</h2><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p>
<p>JavaScript程序，必须要依赖浏览器才能运行！没有浏览器怎么办？OK，nodejs帮你解决</p>
<p>Node.js是脱离浏览器环境运行的JavaScript程序，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p>
<p>如果你是前端程序员，你不懂得像PHP、Python或Ruby等动态编程语言，然后你想创建自己的服务，那Node.js是一个非常好的选择。</p>
<p><strong>安装</strong></p>
<p>官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p>中文网：<a href="http://nodejs.cn/">http://nodejs.cn/</a></p>
<p><strong>查看版本号</strong></p>
<p><code>node -v</code></p>
<p><strong>用nodejs运行js代码</strong></p>
<p>创建 hello.js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello,nodejs&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>打开命令行终端：Ctrl + Shift + y，输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node hello.js</span><br></pre></td></tr></table></figure>

<p>这样，没有使用浏览器，我们也可以运行js程序了</p>
<p><strong>服务器端应用开发（了解）</strong></p>
<p>创建 node-server.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>); <span class="comment">// node中自带的require引入方法，http也是node中自带的服务对象</span></span><br><span class="line">http.createServer( <span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发出http请求的头部信息</span></span><br><span class="line">    <span class="comment">// http的状态码：200；OK</span></span><br><span class="line">    <span class="comment">// 请求的内容类型：text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//响应的数据 &quot;hello,welcome！&quot; ,此时，并不支持中文（以后一定会解决！）</span></span><br><span class="line">    response.end(<span class="string">&quot;hello,welcome!&quot;</span>);</span><br><span class="line">&#125; ).listen(<span class="number">8888</span>); <span class="comment">// 监听端口</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;服务器已启动，请访问 http://127.0.0.1:8888&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>服务器启动成功后，在浏览器中输入：<a href="http://localhost:8888/">http://localhost:8888/</a> 查看webserver成功运行，并输出html页面</li>
<li>停止服务：ctrl + c</li>
</ul>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>NPM全称Node Package Manager，是Node.js包管理工具</p>
<p>node的环境在安装的过程中，npm工具就已经安装好了。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在命令提示符输入 npm -v 可查看当前npm版本</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure>



<p><strong>项目初始化</strong></p>
<p>全新创建一个目录，作为项目目录，使用dos命令进入此目录，输入命令</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">init</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 接下来是一堆项目信息等待着你输入，如果使用默认值或你不知道怎么填写，则直接回车即可。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># package name:  你的项目名字叫啥</span></span><br><span class="line"><span class="comment"># version: 版本号</span></span><br><span class="line"><span class="comment"># description: 对项目的描述</span></span><br><span class="line"><span class="comment"># entry point: 项目的入口文件（一般你要用那个js文件作为node服务，就填写那个文件）</span></span><br><span class="line"><span class="comment"># test command: 项目启动的时候要用什么命令来执行脚本文件（默认为node app.js）</span></span><br><span class="line"><span class="comment"># git repository: 如果你要将项目上传到git中的话，那么就需要填写git的仓库地址（这里就不写地址了）</span></span><br><span class="line"><span class="comment"># keywirds： 项目关键字（我也不知道有啥用，所以我就不写了）</span></span><br><span class="line"><span class="comment"># author: 作者的名字（也就是你叫啥名字）</span></span><br><span class="line"><span class="comment"># license: 发行项目需要的证书（这里也就自己玩玩，就不写了）</span></span><br></pre></td></tr></table></figure>

<p>最后会生成package.json文件，这个是包的配置文件，相当于maven的pom.xml</p>
<p>我们之后也可以根据需要进行修改。</p>
<p>上述初始化一个项目也太麻烦了，要那么多输入和回车。想简单点，一切都按照默认值初始化即可，ok，安排</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">init -y</span></span><br></pre></td></tr></table></figure>



<p><strong>修改npm镜像 和 存储地址</strong></p>
<p>NPM官方的管理的包都是从 <a href="http://npmjs.com下载的,但是这个网站在国内速度很慢./">http://npmjs.com下载的，但是这个网站在国内速度很慢。</a></p>
<p>这里推荐使用淘宝 NPM 镜像 <a href="http://npm.taobao.org/">http://npm.taobao.org/</a> ，淘宝 NPM 镜像是一个完整npmjs.com 镜像，同步频率目前为 10分钟一次，以保证尽量与官方服务同步。</p>
<p>设置镜像和存储地址：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#经过下面的配置，以后所有的 npm install 都会经过淘宝的镜像地址下载</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">config set registry https://registry.npm.taobao.org</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置npm下载包时保存在本地的地址（建议英文目录）</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">config set prefix &quot;D:\\Software\\npmPackge&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#查看npm配置信息</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">config list</span></span><br></pre></td></tr></table></figure>



<p><strong>npm下载包</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载最新版本</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install jquery  </span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载指定版本</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install jquery@1.9.1</span></span><br></pre></td></tr></table></figure>

<h2 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h2><p>ES标准中不包含 DOM 和 BOM的定义，只涵盖基本数据类型、关键字、语句、运算符、内建对象、内建函数等通用语法。</p>
<h3 id="let声明变量"><a href="#let声明变量" class="headerlink" title="let声明变量"></a>let声明变量</h3><p>与我们的JavaScript中var声明变量有什么区别？</p>
<p>1、作用域不同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;  <span class="comment">//全局</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">2</span>;  <span class="comment">//局部</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);    <span class="comment">//错误：ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure>

<p>2、声明次数不同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">4</span>;    <span class="comment">//错误：SyntaxError: Identifier &#x27;b&#x27; has already been declared</span></span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure>

<p>3、声明与使用顺序不同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">//错误：ReferenceError: Cannot access &#x27;b&#x27; before initialization</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h3 id="const声明常量"><a href="#const声明常量" class="headerlink" title="const声明常量"></a>const声明常量</h3><p>const 声明常量,为只读变量</p>
<ol>
<li>一旦声明之后，其值是不允许改变的</li>
<li>一但声明必须初始化</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">console</span>.log(PI);</span><br></pre></td></tr></table></figure>

<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>解构赋值是对赋值运算符的扩展</p>
<p><strong>数组的解构</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统js</span></span><br><span class="line"><span class="keyword">let</span> a = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> b = arr[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> c = arr[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//解构赋值</span></span><br><span class="line"><span class="keyword">let</span> [d,e,f] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c,d,e,f);</span><br></pre></td></tr></table></figure>

<p><strong>对象的解构</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;zhang&quot;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统js</span></span><br><span class="line"><span class="keyword">let</span> g = stu.name;</span><br><span class="line"><span class="keyword">let</span> h = stu.age;</span><br><span class="line"><span class="built_in">console</span>.log(g,h);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123;age,name&#125; = stu;</span><br><span class="line"><span class="built_in">console</span>.log(name, age);</span><br></pre></td></tr></table></figure>

<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><ul>
<li>模板字符串相当于加强版的字符串</li>
<li>用反引号 `,除了作为普通字符串，还可以用来定义多行字符串</li>
<li>还可以在字符串中加入变量和表达式。</li>
</ul>
<p><strong>定义多行字符串</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;你\n好\n呀&quot;</span></span><br><span class="line"><span class="comment">//同等与</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">`你</span></span><br><span class="line"><span class="string">好</span></span><br><span class="line"><span class="string">呀`</span>;</span><br></pre></td></tr></table></figure>

<p><strong>字符串中插入变量和表达式</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&quot;你好呀&quot;</span> + a + <span class="string">&quot;,你好呀&quot;</span> + (a+<span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">`你好呀<span class="subst">$&#123;a&#125;</span>,你好呀<span class="subst">$&#123;a+<span class="number">10</span>&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>

<p><strong>字符串中调用函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;大家好！&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str5 = <span class="string">`你好呀<span class="subst">$&#123;test()&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>

<h3 id="声明对象简写"><a href="#声明对象简写" class="headerlink" title="声明对象简写"></a>声明对象简写</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user1 = &#123;</span><br><span class="line">    <span class="attr">name</span> : name,</span><br><span class="line">    <span class="attr">age</span> : age</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user2 = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="定义方法简写"><a href="#定义方法简写" class="headerlink" title="定义方法简写"></a>定义方法简写</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user1 = &#123;</span><br><span class="line">    <span class="attr">say</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="string">&quot;大家好&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user2 = &#123;</span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="string">&quot;大家好&quot;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象拓展运算符"><a href="#对象拓展运算符" class="headerlink" title="对象拓展运算符"></a>对象拓展运算符</h3><p>拓展运算符 {…} 将参数对象中所有可以遍历的属性拿出来，然后拷贝给新对象</p>
<p><strong>拷贝对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user1 = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&quot;关羽&quot;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">35</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user2 = &#123;...user1&#125;   <span class="comment">//深拷贝</span></span><br></pre></td></tr></table></figure>

<p><strong>合并对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu2 = &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="string">&quot;0012&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu3 = &#123;...stu1, ...stu2&#125;;  <span class="comment">//合并拷贝</span></span><br></pre></td></tr></table></figure>

<h3 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b=<span class="number">10</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( test(<span class="number">1</span>,<span class="number">2</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( test(<span class="number">1</span>) );</span><br></pre></td></tr></table></figure>

<h3 id="函数的不定参数"><a href="#函数的不定参数" class="headerlink" title="函数的不定参数"></a>函数的不定参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">...arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr.length);</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">test(<span class="number">1</span>,<span class="string">&quot;fds&quot;</span>,<span class="string">&quot;aa&quot;</span>,<span class="number">66</span>);</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数提供了一种更加简洁的函数书写方式。基本语法是：（参数） =&gt;  { 函数体 }</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传统js</span></span><br><span class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( f1(<span class="number">1</span>,<span class="number">2</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;<span class="keyword">return</span> a+b&#125;</span><br><span class="line"><span class="built_in">console</span>.log( f2(<span class="number">1</span>,<span class="number">2</span>) );</span><br></pre></td></tr></table></figure>

<ul>
<li>当箭头函数一个参数时，（）可以省略</li>
<li>当只有一条语句，并且需要返回时，可以省略｛｝，结果会自动返回</li>
</ul>
<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p><strong>传统模块化</strong></p>
<p>user.js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addUser</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`添加<span class="subst">$&#123;name&#125;</span>成功！`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeUser</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`删除<span class="subst">$&#123;name&#125;</span>成功！`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明模块并导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">add</span> : addUser,</span><br><span class="line">    <span class="attr">remove</span> : removeUser</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>test.js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">var</span> user = <span class="built_in">require</span>(<span class="string">&quot;./user.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br><span class="line"></span><br><span class="line">user.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">user.remove(<span class="string">&quot;张三&quot;</span>);</span><br></pre></td></tr></table></figure>



<p><strong>ES6模块化</strong></p>
<p>user.js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;老孙&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">66</span>;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span> <span class="string">`我是<span class="subst">$&#123;name&#125;</span>!我今年<span class="subst">$&#123;age&#125;</span>岁了！`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明模块并导出</span></span><br><span class="line"><span class="built_in">exports</span> = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>test.js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age, fn&#125; <span class="keyword">from</span> <span class="string">&quot;./user.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>



<p><strong>as取别名</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明并导出模块时as取别名</span></span><br><span class="line"><span class="keyword">export</span>&#123;</span><br><span class="line">    name <span class="keyword">as</span> a,</span><br><span class="line">    age <span class="keyword">as</span> b,</span><br><span class="line">    fn <span class="keyword">as</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入模块时as取别名</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> info <span class="keyword">from</span> <span class="string">&quot;./user.js&quot;</span>;   </span><br><span class="line"><span class="keyword">import</span> &#123;name <span class="keyword">as</span> name1&#125; <span class="keyword">from</span> <span class="string">&#x27;./student1.js&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p><strong>默认导出</strong></p>
<p>可以将所有需要导出的变量放入一个对象中，然后通过default export进行导出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************导出****************************/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;老孙&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;吃点啥！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************导入****************************/</span></span><br><span class="line"><span class="keyword">import</span> p <span class="keyword">from</span> <span class="string">&quot;./person.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log( p.name, p.eat() );</span><br></pre></td></tr></table></figure>

<p>使用ES6模块化时，运行test.js，</p>
<p>报错：SyntaxError: Unexpected token {   （语法错误，在标记{的位置 ）</p>
<p>原因是node.js并不支持es6的import语法，我们需要将es6转换降级为es5！</p>
<h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><p>babel是一个广泛使用的<strong>转码器</strong>，可以将ES6代码转为ES5代码，从而在现有的环境中执行。</p>
<p>这意味着，你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持</p>
<p><strong>安装babel客户端环境</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install --global babel-cli</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line"><span class="attr">babel</span> <span class="string">--version</span></span><br></pre></td></tr></table></figure>

<p>如果报错1：babel命令在当前系统中不被认可等，可能没添加环境变量。解决：系统环境变量中 path中加入包的安装位置</p>
<p>如果报错2：windows10默认禁止运行有危险的脚本，修改一下系统策略就好了。<br>开始菜单-&gt; Windows PowerShell (切记要以管理员身份运行)，输入代码</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">set-ExecutionPolicy</span> <span class="string">RemoteSigned</span></span><br></pre></td></tr></table></figure>



<p><strong>安装转码器</strong></p>
<p>创建babel专属目录，在其中初始化项目</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">init -y</span></span><br></pre></td></tr></table></figure>

<p>创建babel配置文件 .babelrc ，并输入代码配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;presets&quot;</span>: <span class="string">[&quot;es2015&quot;],</span></span><br><span class="line">  <span class="meta">&quot;plugins&quot;</span>: <span class="string">[]</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>安装转码器</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install --save-dev babel-preset-es2015</span></span><br></pre></td></tr></table></figure>

<p>转码，创建dist目录，用来存放转码后的文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">babel</span> <span class="string">test.js --out-file .\dist\test.js</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="attr">babel</span> <span class="string">test.js -o .\dist\test.js</span></span><br></pre></td></tr></table></figure>

<p>运行转码后的文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">node</span> <span class="string">.\dist\test.js</span></span><br></pre></td></tr></table></figure>

<h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h1><p>Bootstrap来自 Twitter，是目前最受欢迎的<strong>响应式</strong>前端框架。</p>
<p>Bootstrap是基于 HTML、CSS、JavaScript的，它简洁灵活，使得 Web 开发更加快捷。</p>
<p><strong>安装与基本使用</strong></p>
<p>中文官网：<a href="https://www.bootcss.com/">https://www.bootcss.com/</a> </p>
<p>英文官网：<a href="http://getbootstrap.com/">http://getbootstrap.com</a></p>
<p>下载好的压缩包解压出来。就得到了bootstrap的资源文件了。<br>分别是css、js、font文件，全部放在项目的根目录即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello word!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表格-1"><a href="#表格-1" class="headerlink" title="表格"></a>表格</h2><p>和之前的表格相比，标签更丰富更加语义化，效果更佳美观</p>
<p><strong>丰富的标签</strong></p>
<ul>
<li>&lt;table&gt; 为表格添加基础样式</li>
<li>&lt;caption&gt; 关于表格存储内容的描述或<strong>总结</strong>。</li>
<li>&lt;thead&gt; 表格<strong>标题行</strong>的容器元素（&lt;tr&gt;）</li>
<li>&lt;tbody&gt; 表格<strong>主体</strong>中的表格行的容器元素（&lt;tr&gt;）</li>
<li>&lt;tr&gt; 表格行</li>
<li>&lt;td&gt; 默认的表格单元格。</li>
<li>&lt;th&gt; 特殊的表格单元格，（居中和加粗的效果）。必须在&lt;thead&gt; 内使用。</li>
</ul>
<p><strong>好看的类样式</strong></p>
<ul>
<li><p>.table 为任意 &lt;table&gt; 添加基本样式 (只有横向分隔线)</p>
</li>
<li><p>.table-striped 在 &lt;tbody&gt; 内添加斑马线形式的条纹 ( IE8 不支持) ，<strong>隔行变色</strong></p>
</li>
<li><p>.table-bordered 为所有表格的单元格添加边框</p>
</li>
<li><p>.table-hover 在 &lt;tbody&gt; 内的任一行启用鼠标悬停状态，鼠标悬停高亮突出显示</p>
</li>
<li><p>.table-condensed 让表格更加紧凑</p>
</li>
</ul>
<p><strong>情景色类样式</strong><br>适合应用在&lt;th&gt;、&lt;tr&gt;，&lt;td&gt;</p>
<ul>
<li><p>.active 激活效果（悬停颜色）</p>
</li>
<li><p>.success 表示成功或积极的动作</p>
</li>
<li><p>.info 表示普通的提示信息或动作</p>
</li>
<li><p>.warning 表示警告或需要用户注意</p>
</li>
<li><p>.danger 表示危险或潜在的带来的负面影响的动作</p>
</li>
</ul>
<p><strong>响应式表格</strong></p>
<ul>
<li>.table-responsive  表格元素设置响应式，小于768px，表格出现边框</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;padding:50px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-hover table-responsive&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表格描述 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>商品表格<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 表头 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 表身体 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>书包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>100.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;success&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>002<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>铅笔<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>003<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>橡皮<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3.50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="表单布局"><a href="#表单布局" class="headerlink" title="表单布局"></a>表单布局</h3><p><strong>默认布局</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>内联布局</strong></p>
<p>让所有表单控件元素居于一行</p>
<p><strong>注意</strong>：当小于768px时,会自动还原成多行.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h3><p><strong>输入框</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>文本框</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>评价<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>复选框</strong></p>
<p>.checkbox 默认<br>.checkbox-inline 内联</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-inline&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> 篮球</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-inline&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> 足球</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>按钮式复选框</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> 音乐</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> 美术</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> 体育</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>单选钮</strong></p>
<p>.radio 默认<br>.radio-inline 内联</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;radio-inline&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;radio-inline&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>按钮式单选钮</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 男</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p><strong>按钮样式</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-link&quot;</span>&gt;</span>连接按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>按钮大小</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span>&gt;</span>大按钮（高清大屏台式机）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>正常按钮（笔记本屏幕）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-sm&quot;</span>&gt;</span>小按钮（平板电脑）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-xs&quot;</span>&gt;</span>超小按钮（手机）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>按钮状态</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary active&quot;</span>&gt;</span>激活按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">disabled</span>&gt;</span>禁用按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ul>
<li>.img-rounded：添加 border-radius:6px 来获得图片圆角。</li>
<li>.img-circle：添加 border-radius:50% 来让整个图片变成圆形。</li>
<li>.img-thumbnail：添加一些内边距（padding）和一个灰色的边框</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-rounded&quot;</span> <span class="attr">width</span>=<span class="string">&quot;33%&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-circle&quot;</span> <span class="attr">width</span>=<span class="string">&quot;33%&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-thumbnail&quot;</span> <span class="attr">width</span>=<span class="string">&quot;33%&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>响应式图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-responsive&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="下拉菜单组件"><a href="#下拉菜单组件" class="headerlink" title="下拉菜单组件"></a>下拉菜单组件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">        教育<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>在线教育<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前沿技术<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>名师制作<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>外围容器使用 class=”dropdown”包裹</li>
<li>内部点击按钮事件绑定 data-toggle=”dropdown”</li>
<li>ul菜单元素使用 class=”dropdown-menu”</li>
</ol>
<h2 id="分页组件"><a href="#分页组件" class="headerlink" title="分页组件"></a>分页组件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;previous&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span> 上一页 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span> 下一页 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="栅栏系统"><a href="#栅栏系统" class="headerlink" title="栅栏系统"></a>栅栏系统</h2><p>bootstrap的栅格系统会将整个页面水平方向上平均分成12个小格子</p>
<p>当浏览器大小发生变化的时候，我们可以控制每行的元素占用几个格子，从而达到响应式的效果</p>
<p>栅栏参数表</p>
<table>
<thead>
<tr>
<th>大屏幕</th>
<th>中等屏幕</th>
<th>小屏幕</th>
<th>超小屏幕</th>
</tr>
</thead>
<tbody><tr>
<td>pc高清分辨率（&gt;=1200px）</td>
<td>pc显示器（&gt;=992px）</td>
<td>平板（&gt;=768px）</td>
<td>手机（&lt;768px）</td>
</tr>
<tr>
<td>.col-lg-数字</td>
<td>.col-md-数字</td>
<td>.col-sm-数字</td>
<td>.col-xs-数字</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.a</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>:<span class="number">3px</span> solid red;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- col-lg-3 当大屏幕时，一个div占3份，一行显示4个div --&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- col-md-4 当中屏幕时，一个div占4份，一行显示3个div --&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- col-sm-6 当小屏幕时，一个div占6份，一行显示2个div --&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- col-xs-12超小屏幕时，一个div占12份，一行显示1个div，默认 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a col-lg-3 col-md-4 col-sm-6 col-xs-12&quot;</span>&gt;</span>x<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a col-lg-3 col-md-4 col-sm-6 col-xs-12&quot;</span>&gt;</span>x<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a col-lg-3 col-md-4 col-sm-6 col-xs-12&quot;</span>&gt;</span>x<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a col-lg-3 col-md-4 col-sm-6 col-xs-12&quot;</span>&gt;</span>x<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="缩略图组件"><a href="#缩略图组件" class="headerlink" title="缩略图组件"></a>缩略图组件</h2><p>配合响应式的栅格系统</p>
<p><a href="https://imgtu.com/i/XBwfrn"><img src="https://s1.ax1x.com/2022/06/07/XBwfrn.png" alt="XBwfrn.png"></a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 栅栏系统部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-md-4 col-sm-6&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 省略图部分 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./image/3.jpg&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>狗狗之家<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>各种狗狗应有尽有...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>试看<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>购买<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 另外三个div省略。。。。。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="模态框组件"><a href="#模态框组件" class="headerlink" title="模态框组件"></a>模态框组件</h2><ul>
<li>data-toggle=”modal”     触发事件类型:模态框modal</li>
<li>data-target=”#myModal” 触发的模态框节点</li>
<li>data-backdrop=”static” 点击黑灰色背景，不会关闭模态框</li>
<li>data-dismiss=”modal”  关闭模态框事件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 弹框的按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#myModal&quot;</span>&gt;</span></span><br><span class="line">    弹框</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 声明定义模态框组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span> <span class="attr">data-backdrop</span>=<span class="string">&quot;static&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 窗口声明 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内容声明 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 1.框的头部  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">                    <span class="symbol">&amp;times;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>友情提示<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 2.框的身体 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                您确认删除吗！？</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 3.框的脚部 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myCarousel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;carousel slide&quot;</span> <span class="attr">data-ride</span>=<span class="string">&quot;carousel&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 滚动圆点区 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;carousel-indicators&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;0&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#myCarousel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#myCarousel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;2&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#myCarousel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 图片区 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./image/1.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./image/2.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./image/3.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 左右切换 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#myCarousel&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;prev&quot;</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control left&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#myCarousel&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;next&quot;</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control right&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>data-ride=”carousel”属性用户标记轮播在页面加载时开始动画自动播放</li>
<li>data-slide-to 来向轮播底部创建一个原始滑动索引，索引从 0 开始计数。</li>
<li>data-slide 接受关键字 prev 或 next，用来改变幻灯片相对于当前位置的位置；</li>
</ol>
<h2 id="响应式导航条"><a href="#响应式导航条" class="headerlink" title="响应式导航条"></a>响应式导航条</h2><p>页面宽度变小时，导航栏的导航项消失，点击按钮，导航项才显示出来。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认的导航条样式 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-default&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 响应式的容器 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 导航条的头部 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span>&gt;</span>张三科技股份有限公司<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#myNav&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 导航项 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myNav&quot;</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2022/03/09/MySQL/</url>
    <content><![CDATA[<p>这是一篇关于MySQL的个人笔记。</p>
<p>包含MySql的基本语法，MySql表单、约束和事物，MySql多表、外键和数据库设计，Mysql索引、存储过程和触发器。</p>
<span id="more"></span>

<h1 id="MySql基础"><a href="#MySql基础" class="headerlink" title="MySql基础"></a>MySql基础</h1><p>什么是数据库？</p>
<ul>
<li>数据库(DataBase) 就是存储和管理数据的仓库</li>
<li>其本质是一个文件系统, 还是以文件的方式,将数据保存在电脑上</li>
</ul>
<p>为什么用数据库？</p>
<table>
<thead>
<tr>
<th><strong>存储方式</strong></th>
<th><strong>优点</strong></th>
<th><strong>缺点</strong></th>
</tr>
</thead>
<tbody><tr>
<td>内存</td>
<td>速度快</td>
<td>不能够永久保存,数据是临时状态的</td>
</tr>
<tr>
<td>文件</td>
<td>数据是可以永久保存的</td>
<td>使用IO流操作文件, 不方便</td>
</tr>
<tr>
<td>数据库</td>
<td>1.数据可以永久保存  2.方便存储和管理数据   3.使用统一的方式操作数据库  (SQL)</td>
<td>占用资源,有些数据库需要付费(比如Oracle数据  库)</td>
</tr>
</tbody></table>
<p>通过上面的比较,我们可以看出,使用数据库存储数据, 用户可以非常方便对数据库中的数据进行增加, 删除, 修改及查询操作。</p>
<p>常见数据库</p>
<table>
<thead>
<tr>
<th><strong>数据库名</strong></th>
<th><strong>介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>MySql数据</strong>  <strong>库</strong></td>
<td>开源免费的数据库  因为免费开源、运作简单的特点，常作为中小型的项目的数据库首选。  MySQL1996年开始运作，目前已经被Oracle公司收购了.  MySQL6.x开始收费</td>
</tr>
<tr>
<td>Oracle数据  库</td>
<td>收费的大型数据库，Oracle公司的核心产品。  安全性高</td>
</tr>
<tr>
<td>DB2</td>
<td>IBM公司的数据库产品,收费的超大型数据库。  常在银行系统中使用</td>
</tr>
<tr>
<td>SQL Server</td>
<td>MicroSoft 微软公司收费的中型的数据库。  C#、.net等语言常使用。   但该数据库只能运行在windows机器上，扩展性、稳定性、安全性、性能都表现平平。</td>
</tr>
</tbody></table>
<p>为什么选择MySQL ?</p>
<ul>
<li>功能强大,足以应付web应用开发</li>
<li>开源, 免费</li>
</ul>
<p><strong>Mysql服务启动</strong>：</p>
<p>1，打开任务管理器，在“服务”选项卡下将“MySQL”启动。</p>
<p>2，win + R 快捷键，输入services.msc后进入，将“MySQL”启动。</p>
<p>3，以管理员身份打开DOS命令行，输入“net start mysql57”启动，输入“net stop mysql57”关闭。</p>
<p><strong>DOS命令行登入MySQL</strong>（前提是添加了环境变量）</p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>mysql -u 用户名 -p 密码</td>
<td>使用指定用户名和密码登录当前计算机中的MySQL数据库</td>
</tr>
<tr>
<td>mysql -h 主机IP -u 用户名  -p 密码</td>
<td>-h 指定IP  方式,进行 登录</td>
</tr>
<tr>
<td>exit 或  quit</td>
<td>退出</td>
</tr>
</tbody></table>
<h2 id="MySQL目录结构"><a href="#MySQL目录结构" class="headerlink" title="MySQL目录结构"></a>MySQL目录结构</h2><p><strong>MySQL安装目录</strong></p>
<p>MySql的默认安装目录在 C:\Program Files\MySQL\MySQL Server 5.7</p>
<table>
<thead>
<tr>
<th><strong>目录</strong></th>
<th><strong>目录内容</strong></th>
</tr>
</thead>
<tbody><tr>
<td>bin</td>
<td>放置一些可执行文件</td>
</tr>
<tr>
<td>docs</td>
<td>文档</td>
</tr>
<tr>
<td>include</td>
<td>包含(头)文件</td>
</tr>
<tr>
<td>lib</td>
<td>依赖库</td>
</tr>
<tr>
<td>share</td>
<td>用于存放字符集、语言等信息。</td>
</tr>
</tbody></table>
<h2 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h2><p>数据库管理系统（DataBase Management System，DBMS）：指一种操作和管理维护数据库的大型软件。</p>
<p>MySQL就是一个 数据库管理系统软件, 安装了Mysql的电脑,我们叫它数据库服务器.</p>
<p><strong>作用</strong></p>
<p> 用于建立、使用和维护数据库，对数据库进行统一的管理。</p>
<p><strong>数据库管理系统、数据库 和表之间的关系</strong></p>
<p> MySQL中管理着很多数据库，在实际开发环境中 一个数据库一般对应了一个的应用，数据库当中保存着多张表，每一张表对应着不同的业务，表中保存着对应业务的数据。</p>
<p><strong>几个概念</strong> </p>
<ul>
<li>数据库：文件夹</li>
<li>表：文件</li>
<li>数据：文件中的记录</li>
</ul>
<h2 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h2><p>数据库中以表为组织单位存储数据</p>
<p>表类似我们Java中的类,每个字段都有对应的数据类型，那么我们使用熟悉的Java程序来与关系型数据对比,就会发现以下关系: </p>
<ul>
<li>类————-&gt;表</li>
<li>类中变量—–&gt;表中字段</li>
<li>对象———-&gt;数据记录</li>
</ul>
<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p> 结构化查询语言(Structured Query Language)简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p>
<p><strong>作用</strong></p>
<ul>
<li>是所有关系型数据库的统一查询规范，不同的关系型数据库都支持SQL 所有的关系型数据库都可以使用SQL</li>
<li>不同数据库之间的SQL 有一些区别  方言</li>
</ul>
<p><strong>SQL通用语法</strong></p>
<ul>
<li><p>SQL语句可以单行 或者 多行书写，以分号 结尾 ;   （Sqlyog中可以不用写分号） </p>
</li>
<li><p>可以使用空格和缩进来增加语句的可读性。</p>
</li>
<li><p>MySql中使用SQL不区分大小写，一般关键字大写，数据库名 表名列名 小写。</p>
</li>
<li><p>注释方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 空格	单行注释</span></span><br><span class="line"><span class="comment">/* */</span>	 多行注释</span><br><span class="line">#	     MySql特有的单行注释</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>SQL的分类</strong></p>
<table>
<thead>
<tr>
<th><strong>分类</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>数据定义语言</td>
<td>简称DDL(Data Definition Language)，用来定义数据库对象：数据库，表，列等。</td>
</tr>
<tr>
<td>数据操作语言</td>
<td>简称DML(Data  Manipulation Language)，用来对数据库中表的记录进行更新。</td>
</tr>
<tr>
<td>数据查询语言</td>
<td>简称DQL(Data  Query Language)，用来查询数据库中表的记录。</td>
</tr>
<tr>
<td>数据控制语言</td>
<td>简称DCL(Date  Control Language)，用来定义数据库的访问权限和安全级别，及创建用户。(了解)</td>
</tr>
</tbody></table>
<p><a href="https://imgtu.com/i/bR54AO"><img src="https://s1.ax1x.com/2022/03/09/bR54AO.png" alt="bR54AO.png"></a></p>
<h2 id="DDL操作库"><a href="#DDL操作库" class="headerlink" title="DDL操作库"></a>DDL操作库</h2><p><strong>增，创建库</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>create database 数据库名；</td>
<td>创建指定名称的数据库。</td>
</tr>
<tr>
<td>create database 数据库名 character  set  字符集；</td>
<td>创建指定名称的数据库，并且指定字符集（一般都指定utf8）</td>
</tr>
</tbody></table>
<p><strong>删，删除库</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>drop database 数据库名</td>
<td>从MySql中永久的删除某个数据库</td>
</tr>
</tbody></table>
<p><strong>改，修改库</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>alter database 数据库名 character  set 字符集；</td>
<td>数据库的字符集修改操作</td>
</tr>
</tbody></table>
<p><strong>查，查询库</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>use 数据库</td>
<td>切换数据库</td>
</tr>
<tr>
<td>select database();</td>
<td>查看当前正在使用的数据库</td>
</tr>
<tr>
<td>show databases;</td>
<td>查看Mysql中 都有哪些数据库</td>
</tr>
<tr>
<td>show create database 数据库名；</td>
<td>查看一个数据库的定义信息</td>
</tr>
</tbody></table>
<h2 id="DDL操作表"><a href="#DDL操作表" class="headerlink" title="DDL操作表"></a>DDL操作表</h2><p><strong>MySQL的数据类型</strong></p>
<p>常见类型</p>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>整型</td>
</tr>
<tr>
<td>double</td>
<td>浮点型</td>
</tr>
<tr>
<td>char</td>
<td>字符串型（固定长度）</td>
</tr>
<tr>
<td>varchar</td>
<td>字符串型（可变长度，根据实际内容）</td>
</tr>
<tr>
<td>date</td>
<td>日期类型，给是为  yyyy-MM-dd ,只有年月日，没有时分秒</td>
</tr>
</tbody></table>
<p>其他类型</p>
<p><a href="https://imgtu.com/i/bRIgPg"><img src="https://s1.ax1x.com/2022/03/09/bRIgPg.png" alt="bRIgPg.png"></a></p>
<p>注意：MySQL中的 char类型与 varchar类型，都对应了 Java中的字符串类型，区别在于：</p>
<ul>
<li>char类型是固定长度的： 根据定义的字符串长度分配足够的空间。</li>
<li>varchar类型是可变长度的： 只使用字符串长度所需的空间</li>
</ul>
<p>适用场景：</p>
<ul>
<li>char类型适合存储 固定长度的字符串，比如 密码 ，性别一类 </li>
<li>varchar类型适合存储 在一定范围内，有长度变化的字符串 ，如姓名</li>
</ul>
<p><strong>增，创建表</strong></p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">	字段名1 字段类型(长度),</span><br><span class="line">	字段名2 字段类型(长度),</span><br><span class="line">	字段名3 字段类型(长度)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	uname <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>快速创建一个表test1，结构与表test相同（复制表结构）：</p>
<p>CREATE TABLE test1 LIKE test;</p>
<p><strong>删，删除表</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>drop table 表名；</td>
<td>删除表（从数据库中永久删除某一张表）</td>
</tr>
<tr>
<td>drop table if exists 表名；</td>
<td>判断表是否存在， 存在的话就删除,不存在就不执行删除</td>
</tr>
</tbody></table>
<p><strong>改，修改表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表名字rename</span></span><br><span class="line">RENAME <span class="keyword">TABLE</span> test <span class="keyword">TO</span> test1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表字符集alter</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给表添加一个字段alter,add</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">ADD</span> age <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段信息alter, modify</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 MODIFY age <span class="type">VARCHAR</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段名字和信息alter, change</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 CHANGE age uage <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给表删除一个字段alter, drop</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1 <span class="keyword">DROP</span> uage;</span><br></pre></td></tr></table></figure>

<p><strong>查，查看表</strong></p>
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>show tables;</td>
<td>查看当前数据库中的所有表名</td>
</tr>
<tr>
<td>desc 表名；</td>
<td>查看数据表的结构</td>
</tr>
<tr>
<td>show create table 表名</td>
<td>查看创建表的sql语句</td>
</tr>
</tbody></table>
<h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><p>数据管理语言</p>
<p><strong>增，插入数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名 （字段名1，字段名2） values(字段值1，字段值2);  </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名 values(字段值1，字段值2...所有字段);</span><br></pre></td></tr></table></figure>

<p><strong>删，删除数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 where 条件表达式;  删除表的指定条件的记录</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名;       删除表的所有记录，不推荐</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truncate table 表名;    删除表的所有记录，推荐</span><br></pre></td></tr></table></figure>

<p><strong>改，修改数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 列名 = 值;   修改表中所有数据</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 列名 = 值 where 条件表达式；  修改表中指定条件的数据</span><br></pre></td></tr></table></figure>

<h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><p>数据查询语言</p>
<p><strong>查，查询数据</strong></p>
<p>select 列名 from 表名  where 条件表达式</p>
<p><strong>简单查询</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM 表名;        查询所有字段，使用 * 表示所有列</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id,uname FROM 表名;   查询指定的字段</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT uname AS &#x27;姓名&#x27; FROM 表名;  给查询出来的字段取别名   </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id + 100 AS &#x27;编号&#x27;, uname FROM 表名;  查询出的结果可以进行运算</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT * FROM 表名;     使用DISTINCT去重操作</span><br></pre></td></tr></table></figure>

<p><strong>运算符</strong></p>
<p>比较运算符</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>&gt; &lt; &lt;= &gt;= = &lt;&gt; !=</td>
<td>大于、小于、大于(小于)等于、不等于</td>
</tr>
<tr>
<td>BETWEEN …AND…</td>
<td>显示在某一区间的值  例如: 2000-10000之间：  Between 2000 and 10000</td>
</tr>
<tr>
<td>IN(集合)</td>
<td>集合表示多个值,使用逗号分隔,例如:  name in (悟空，八戒) in中的每个数据都会作为一次条件,只要满足条件就会显示</td>
</tr>
<tr>
<td>LIKE ‘%张%’</td>
<td>模糊查询，%表示任意多个字符，_表示任意一个字符</td>
</tr>
<tr>
<td>IS NULL</td>
<td>查询某一列为NULL的值, 注: 不能写 =  NULL</td>
</tr>
<tr>
<td>IS NOT NULL</td>
<td>查询某一列不为NULL的值</td>
</tr>
</tbody></table>
<p>逻辑运算符</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>And &amp;&amp;</td>
<td>多个条件同时成立</td>
</tr>
<tr>
<td>Or ||</td>
<td>多个条件任一成立</td>
</tr>
<tr>
<td>Not</td>
<td>不成立，取反。</td>
</tr>
</tbody></table>
<p><strong>条件查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询员工姓名为黄蓉的员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;黄蓉&#x27;</span>; </span><br><span class="line"></span><br><span class="line"># 查询薪水价格为<span class="number">5000</span>的员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">=</span> <span class="number">5000</span>; </span><br><span class="line"></span><br><span class="line"># 查询薪水价格不是<span class="number">5000</span>的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">!=</span> <span class="number">5000</span>; </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">&lt;&gt;</span> <span class="number">5000</span>; </span><br><span class="line"></span><br><span class="line"># 查询薪水价格大于<span class="number">6000</span>元的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">6000</span>;</span><br><span class="line"></span><br><span class="line"># 查询薪水价格在<span class="number">5000</span>到<span class="number">10000</span>之间所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> <span class="number">5000</span> <span class="keyword">AND</span> <span class="number">10000</span>; </span><br><span class="line"></span><br><span class="line"># 查询薪水价格是<span class="number">3600</span>或<span class="number">7200</span>或者<span class="number">20000</span>的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">=</span> <span class="number">3600</span> <span class="keyword">OR</span> salary <span class="operator">=</span> <span class="number">7200</span> <span class="keyword">OR</span> salary <span class="operator">=</span> <span class="number">20000</span>; </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="keyword">IN</span>(<span class="number">3600</span>,<span class="number">7200</span>,<span class="number">20000</span>);</span><br></pre></td></tr></table></figure>

<p><strong>模糊查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询含有<span class="string">&#x27;精&#x27;</span>字的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;%精%&#x27;</span>; </span><br><span class="line"></span><br><span class="line"># 查询以<span class="string">&#x27;孙&#x27;</span>开头的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;孙%&#x27;</span>; </span><br><span class="line"></span><br><span class="line"># 查询第二个字为<span class="string">&#x27;兔&#x27;</span>的所有员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;_兔%&#x27;</span>; </span><br><span class="line"></span><br><span class="line"># 查询没有部门的员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_name <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"># 查询有部门的员工信息 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>通过 ORDER BY 子句,可以将查询出的结果进行排序(排序只是显示效果,不会影响真实数据)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段名 FROM 表名 [WHERE 条件表达式] ORDER BY 排序字段名 [ASC / DESC]</span><br></pre></td></tr></table></figure>

<ul>
<li>ASC：升序</li>
<li>DESC：降序</li>
</ul>
<p>多行排序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段名 FROM 表名 [WHERE 条件表达式] ORDER BY 排序字段名 [ASC / DESC], 排序字段名 [ASC / DESC]</span><br></pre></td></tr></table></figure>

<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>之前我们做的查询都是横向查询，它们都是根据条件一行一行的进行判断，而使用聚合函数查询是纵向<br>查询，它是对某一列的值进行计算，然后返回一个单一的值(另外聚合函数会忽略null空值。)；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 聚合函数(字段名) FROM 表名 [where 条件];</span><br></pre></td></tr></table></figure>

<p><strong>常用聚合函数：</strong> count()，sum()，max(),  min(),  avg() </p>
<p>案例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">1</span> 查询员工的总数 <span class="comment">-- 统计表中的记录条数 使用 count() </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(eid) <span class="keyword">FROM</span> emp; <span class="comment">-- 使用某一个字段 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp; <span class="comment">-- 使用 * </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> emp; <span class="comment">-- 使用 1,与 * 效果一样</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">2</span> 查看员工总薪水、最高薪水、最小薪水、薪水的平均值 <span class="comment">-- sum函数求和, max函数求最大, min函数求最小, avg函数求平均值 </span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="built_in">SUM</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;总薪水&#x27;</span>, </span><br><span class="line">	<span class="built_in">MAX</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;最高薪水&#x27;</span>, </span><br><span class="line">	<span class="built_in">MIN</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;最低薪水&#x27;</span>, </span><br><span class="line">	<span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;平均薪水&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">3</span> 查询薪水大于<span class="number">4000</span>员工的个数 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">4000</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">4</span> 查询部门为<span class="string">&#x27;教学部&#x27;</span>的所有员工的个数 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_name <span class="operator">=</span> <span class="string">&#x27;教学部&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">5</span> 查询部门为<span class="string">&#x27;市场部&#x27;</span>所有员工的平均薪水 </span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	<span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;市场部平均薪资&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> dept_name <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>分组查询指的是使用 GROUP BY 语句,对查询的信息进行分组,相同数据作为一组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 分组字段<span class="operator">/</span>聚合函数 <span class="keyword">FROM</span> 表名 [<span class="keyword">where</span> 条件] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段 [<span class="keyword">HAVING</span> 条件];</span><br></pre></td></tr></table></figure>

<p>例如：通过性别字段 进行分组,求各组的平均薪资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex, <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">1.</span> 查询有什么部门 </span><br><span class="line"><span class="keyword">SELECT</span> dept_name <span class="keyword">AS</span> <span class="string">&#x27;部门名称&#x27;</span> <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_name;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">2.</span>查询每个部门的平均薪资 </span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">dept_name <span class="keyword">AS</span> <span class="string">&#x27;部门名称&#x27;</span>, <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;平均薪资&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_name;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">3.</span>查询每个部门的平均薪资, 部门名称不能为<span class="keyword">null</span> </span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">dept_name <span class="keyword">AS</span> <span class="string">&#x27;部门名称&#x27;</span>, <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;平均薪资&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> dept_name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_name;</span><br></pre></td></tr></table></figure>

<p>having的用法：</p>
<ul>
<li><p>需要在分组后,对数据进行过滤,使用 关键字 having</p>
</li>
<li><p>分组操作中的having子语句，是用于在分组后对数据进行过滤的，作用类似于where条件。</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询平均薪资大于<span class="number">6000</span>的部门 <span class="comment">-- 需要在分组后再次进行过滤,使用 having </span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">dept_name , <span class="built_in">AVG</span>(salary) </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> dept_name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_name </span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&gt;</span> <span class="number">6000</span> ;</span><br></pre></td></tr></table></figure>

<p>where 与 having的区别</p>
<ul>
<li>where：where 进行分组前的过滤，where 后面不能写 聚合函数</li>
<li>having：having 是分组后的过滤，having 后面可以写 聚合函数</li>
</ul>
<h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><ul>
<li>limit是限制的意思,用于 限制返回的查询结果的行数 (可以通过limit指定查询多少行数据)</li>
<li>limit 语法是 MySql的方言,用来完成分页</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2.</span>.. <span class="keyword">FROM</span> 表名 LIMIT <span class="keyword">offset</span> , length;</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>offset： 起始行数, 从0开始记数, 如果省略 则默认为 0.</li>
<li>length：返回的行数</li>
</ul>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询emp表中的前 <span class="number">5</span>条数据</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">0</span> , <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>分页操作：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分页操作 每页显示3条数据 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">0</span>,<span class="number">3</span>; <span class="comment">-- 第1页 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">3</span>,<span class="number">3</span>; <span class="comment">-- 第2页 2-1=1 1*3=3 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">6</span>,<span class="number">3</span>; <span class="comment">-- 第三页</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分页公式 起始索引 = (当前页 - 1) * 每页条数</span></span><br></pre></td></tr></table></figure>

<h2 id="sql约束"><a href="#sql约束" class="headerlink" title="sql约束"></a>sql约束</h2><p>约束的作用: 对表中的数据进行进一步的限制，从而保证数据的正确性、有效性、完整性. 违反约束的不正确数据,将无法插入到表中</p>
<table>
<thead>
<tr>
<th><strong>约束名</strong></th>
<th><strong>约束关键字</strong></th>
</tr>
</thead>
<tbody><tr>
<td>主键</td>
<td>primary  key</td>
</tr>
<tr>
<td>唯一</td>
<td>unique</td>
</tr>
<tr>
<td>非空</td>
<td>not  null</td>
</tr>
<tr>
<td>外键</td>
<td>foreign  key</td>
</tr>
<tr>
<td>默认值</td>
<td>default</td>
</tr>
</tbody></table>
<h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>不可重复 唯一 非空，用来表示数据库中的每一条记录，每个表至多一个主键</p>
<p><strong>添加主键</strong></p>
<p>1，创建表时给字段添加主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp2( </span><br><span class="line">    <span class="comment">-- 设置主键 唯一 非空 </span></span><br><span class="line">    eid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">    ename <span class="type">VARCHAR</span>(<span class="number">20</span>), </span><br><span class="line">    sex <span class="type">CHAR</span>(<span class="number">1</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp2( </span><br><span class="line">    eid <span class="type">INT</span> , </span><br><span class="line">    ename <span class="type">VARCHAR</span>(<span class="number">20</span>), </span><br><span class="line">    sex <span class="type">CHAR</span>(<span class="number">1</span>), </span><br><span class="line">    <span class="comment">-- 指定主键为 eid字段 </span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(eid) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>2，给已存在且没有主键的表，添加主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp2 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(eid);</span><br></pre></td></tr></table></figure>

<p><strong>删除主键</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp2 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>

<p><strong>设置自增主键</strong></p>
<p>AUTO_INCREMENT： 表示自动增长(字段类型必须是整数类型) </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp2( </span><br><span class="line">    <span class="comment">-- 关键字 AUTO_INCREMENT,主键类型必须是整数类型 </span></span><br><span class="line">    eid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, </span><br><span class="line">    ename <span class="type">VARCHAR</span>(<span class="number">20</span>), </span><br><span class="line">    sex <span class="type">CHAR</span>(<span class="number">1</span>) </span><br><span class="line">)AUTO_INCREMENT<span class="operator">=</span><span class="number">100</span>;  <span class="comment">-- 还可以定义自增主键的起始值</span></span><br></pre></td></tr></table></figure>

<p>插入记录，主键自增，<code>select last_insert_id();</code>语句可以获取刚刚新增记录的主键是多少</p>
<p><strong>删除表中数据对自增主键的影响</strong></p>
<table>
<thead>
<tr>
<th><strong>清空表数据的方式</strong></th>
<th><strong>特点</strong></th>
</tr>
</thead>
<tbody><tr>
<td>DELETE</td>
<td>只是删除表中所有数据,对自增没有影响，主键自增到哪还是哪里</td>
</tr>
<tr>
<td>TRUNCATE</td>
<td>truncate 是将整个表删除掉,然后创建一个新的表自增的主键,重新从起始值开始</td>
</tr>
</tbody></table>
<h3 id="唯一键"><a href="#唯一键" class="headerlink" title="唯一键"></a>唯一键</h3><p>唯一不能重复， 但是可以为空，一个表中可以有多个唯一键约束</p>
<table>
<thead>
<tr>
<th><strong>主键约束与唯一约束的区别</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1.  主键约束 唯一且不能够为空</td>
</tr>
<tr>
<td>2.  唯一约束,唯一 但是可以为空</td>
</tr>
<tr>
<td>3.  一个表中只能有一个主键 , 但是可以有多个唯一约束</td>
</tr>
</tbody></table>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>事务是一个整体，由一条或者多条SQL 语句组成，这些SQL语句要么都执行成功,要么都执行失败，只要有一条SQL出现异常，整个操作就会回滚，整个业务执行失败</p>
<table>
<thead>
<tr>
<th><strong>功能</strong></th>
<th><strong>语句</strong></th>
</tr>
</thead>
<tbody><tr>
<td>开启事务</td>
<td><strong>start transaction;</strong> 或者 <strong>BEGIN</strong>;</td>
</tr>
<tr>
<td>提交事务</td>
<td><strong>commit;</strong></td>
</tr>
<tr>
<td>回滚事务</td>
<td><strong>rollback;</strong></td>
</tr>
</tbody></table>
<h2 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h2><table>
<thead>
<tr>
<th><strong>特性</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>原子性</td>
<td>每个事务都是一个整体，不可再拆分，事务中所有的  SQL 语句要么都执行成功， 要么都失败。</td>
</tr>
<tr>
<td>一致性</td>
<td>事务在执行前数据库的状态与执行后数据库的状态保持一致。如：转账前2个人的 总金额是  2000，转账后 2 个人总金额也是 2000.</td>
</tr>
<tr>
<td>隔离性</td>
<td>事务与事务之间不应该相互影响，执行时保持隔离的状态.</td>
</tr>
<tr>
<td>持久性</td>
<td>一旦事务执行成功，对数据库的修改是持久的。就算关机，数据也是要保存下来的.</td>
</tr>
</tbody></table>
<h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>事务在操作时的理想状态：<br>所有的事务之间保持隔离，互不影响。因为并发操作，多个用户同时访问同一个 数据。可能引发并发访问的问题</p>
<table>
<thead>
<tr>
<th><strong>并发访问的问题</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>脏读</td>
<td>一个事务读取到了另一个事务中尚未提交的数据</td>
</tr>
<tr>
<td>不可重复读</td>
<td>一个事务中两次读取的数据内容不一致, 要求的是在一个事务中多次读取时数据是一致的. 这是进行  update 操作时引发的问题</td>
</tr>
<tr>
<td>幻读</td>
<td>一个事务中,某一次的  select 操作得到的结果所表征的数据状态, 无法支撑后续的业务操作. 查询得到的数据状态不准确,导致幻读.</td>
</tr>
</tbody></table>
<p><strong>四种隔离级别</strong>（底到高）</p>
<p>1，read uncommitted：(读未提交) 会引发脏读，A事务开启后会读取到B事务没有提交的数据。</p>
<p>2，read committed：（读已提交）会引发不可重复读，A事务开启后访问了一个数据，此时B事务修改了改数据，然后B事务提交，A事务再次访问该数据时，是修改了的数据，导致前后两次访问同一数据不一致。（Oracle和SQLServer默认）</p>
<p>3，repeatable read：（可重复读）会引发幻读，例如A事务访问某个数据不存在时，准备添加该数据，而此时B事务刚好添加了该数据，A事务添加数据时就会异常。（MySql默认）</p>
<p>4，serializable：（串行化）完全隔离，所有问题解决</p>
<p>注意：出现问题，提高隔离级别可解决。虽然隔离级别越高，隔离性越好，但是代价是效率越低。</p>
<h2 id="隔离级别相关命令"><a href="#隔离级别相关命令" class="headerlink" title="隔离级别相关命令"></a>隔离级别相关命令</h2><p>查看隔离级别</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br></pre></td></tr></table></figure>

<p>设置事务隔离级别，需要退出 MySQL 再重新登录才能看到隔离级别的变化</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level 级别名称; </span><br><span class="line"></span><br><span class="line">read uncommitted 读未提交 </span><br><span class="line">read committed 读已提交 </span><br><span class="line">repeatable read 可重复读 </span><br><span class="line">serializable 串行化</span><br></pre></td></tr></table></figure>

<h1 id="多表"><a href="#多表" class="headerlink" title="多表"></a>多表</h1><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><ul>
<li><p>外键指的是在 从表 中的某个字段作为外键 与 主表 的主键字段相对于, 比如员工表的 dept_id,就是外键</p>
</li>
<li><p>使用外键约束可以让两张表之间产生一个对应关系,从而保证主从表的引用的完整性</p>
</li>
</ul>
<p>多表关系中的主表和从表：<br>主表: 主键id所在的表, 约束别人的表<br>从表: 外键所在的表多, 被约束的表</p>
<p><a href="https://imgtu.com/i/qMMqC8"><img src="https://s1.ax1x.com/2022/03/22/qMMqC8.png" alt="qMMqC8.png"></a></p>
<p><strong>创建语法</strong></p>
<p>1，新建表时，在字段后面，创建外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">CONSTRAINT</span>] [外键约束名称] <span class="keyword">FOREIGN</span> KEY(外键字段名) <span class="keyword">REFERENCES</span> 主表名(主键字段名)</span><br></pre></td></tr></table></figure>

<p>2，给已存在的表添加外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表 <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span>] [外键约束名称] <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表(主 键字段名);</span><br></pre></td></tr></table></figure>

<p><strong>删除外键</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表 <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键约束名称</span><br></pre></td></tr></table></figure>



<p><strong>外键约束的注意事项</strong></p>
<ol>
<li><p>从表外键类型必须与主表主键类型一致 否则创建失败. </p>
</li>
<li><p>添加数据时, 应该先添加主表中的数据.</p>
</li>
<li><p>删除数据时,应该先删除从表中的数据.</p>
</li>
</ol>
<p><strong>外键的级联删除</strong></p>
<p>创建外键时，在后面添加语法：ON DELETE CASCADE，为级联删除。</p>
<p>即，删除数据时，删除主表中的数据，从表中对应的数据也被直接删除。</p>
<p>例如，添加了级联删除后，删除部门表中的开发部，则员工表中，关于开发部的所有员工都将会被自动删除。</p>
<h2 id="多表关系设计"><a href="#多表关系设计" class="headerlink" title="多表关系设计"></a>多表关系设计</h2><p>表与表之间的三种关系：</p>
<ul>
<li>一对多关系: 最常见的关系, 学生对班级,员工对部门</li>
<li>多对多关系: 学生与课程, 用户与角色</li>
<li>一对一关系: 使用较少,因为一对一关系可以合成为一张表</li>
</ul>
<p><strong>一对多关系（1:n）</strong><br>例如：班级和学生，部门和员工，客户和订单，分类和商品</p>
<p>建表原则：在从表(多方)创建一个字段,字段作为外键指向主表(一方)的主键</p>
<p><a href="https://imgtu.com/i/qMYWnS"><img src="https://s1.ax1x.com/2022/03/22/qMYWnS.png" alt="qMYWnS.png"></a></p>
<p><strong>多对多（m:n）</strong><br>例如：老师和学生，学生和课程，用户和角色 </p>
<p>建表原则：需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向各自一方的 主键。</p>
<p><a href="https://imgtu.com/i/qMt1u8"><img src="https://s1.ax1x.com/2022/03/22/qMt1u8.png" alt="qMt1u8.png"></a></p>
<p><strong>一对一（1:1）</strong><br>在实际的开发中应用不多.因为一对一可以创建成一张表。 </p>
<p>建表原则：在任意一方添加外键，指向另一张表的主键，外键唯一 UNIQUE  </p>
<p><a href="https://imgtu.com/i/qMtTVe"><img src="https://s1.ax1x.com/2022/03/22/qMtTVe.png" alt="qMtTVe.png"></a></p>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>多表查询分为：内连接查询和外连接查询</p>
<h3 id="笛卡尔乘积"><a href="#笛卡尔乘积" class="headerlink" title="笛卡尔乘积"></a>笛卡尔乘积</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 表<span class="number">1</span>, 表<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>假设集合A={a, b}，集合B={0, 1, 2}，则两个集合的笛卡尔积为{(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}。</p>
<h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p><strong>隐式内连接</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 左表, 右表 <span class="keyword">WHERE</span> 连接条件;</span><br></pre></td></tr></table></figure>

<p>例如：查询所有商品信息和对应的分类信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products p,category c <span class="keyword">WHERE</span> p.category_id <span class="operator">=</span> c.cid;</span><br></pre></td></tr></table></figure>



<p><strong>显式内连接</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法   <span class="comment">-- inner 可以省略</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 左表 [<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> 右表 <span class="keyword">ON</span> 连接条件 <span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询所有商品信息和对应的分类信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products p <span class="keyword">INNER</span> <span class="keyword">JOIN</span> category c <span class="keyword">ON</span> p.category_id <span class="operator">=</span> c.cid;</span><br><span class="line"></span><br><span class="line"># 查询鞋服分类下,价格大于<span class="number">500</span>的商品名称和价格</span><br><span class="line"><span class="keyword">SELECT</span> p.pname, p.price </span><br><span class="line"><span class="keyword">FROM</span> products p <span class="keyword">INNER</span> <span class="keyword">JOIN</span> category c <span class="keyword">ON</span> p.category_id <span class="operator">=</span> c.cid </span><br><span class="line"><span class="keyword">WHERE</span> p.price <span class="operator">&gt;</span> <span class="number">500</span> <span class="keyword">AND</span> cname <span class="operator">=</span> <span class="string">&#x27;鞋服&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接的特点：</p>
<ul>
<li>以左表为基准, 匹配右边表中的数据,如果匹配的上,就展示匹配到的数据</li>
<li>如果匹配不到, 左表中的数据正常展示, 右边的展示为null.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法  <span class="keyword">outer</span>可省略</span><br><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 左表 <span class="keyword">LEFT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 右表 <span class="keyword">ON</span> 连接条件 <span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure>

<p>例如：左外连接, 查询每个分类下的商品个数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.cname <span class="keyword">AS</span> <span class="string">&#x27;分类名称&#x27;</span>, <span class="built_in">COUNT</span>(p.pid) <span class="keyword">AS</span> <span class="string">&#x27;商品个数&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> category c <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> products p </span><br><span class="line"><span class="keyword">ON</span> c.cid <span class="operator">=</span> p.category_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.cname;</span><br></pre></td></tr></table></figure>

<p>右外连接的特点：与左外连接一样，只不过以右表为基准，关键字，right  [outer]  join</p>
<p><strong>各种连接方式总结</strong>：</p>
<p><a href="https://imgtu.com/i/qMd1Rs"><img src="https://s1.ax1x.com/2022/03/22/qMd1Rs.png" alt="qMd1Rs.png"></a></p>
<ul>
<li>内连接: inner join , 只获取两张表中 交集部分的数据.</li>
<li>左外连接: left join , 以左表为基准 ,查询左表的所有数据, 以及与右表有交集的部分</li>
<li>右外连接: right join , 以右表为基准,查询右表的所有的数据,以及与左表有交集的部分</li>
</ul>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>概念：一条select 查询语句的结果, 作为另一条 select 语句的一部分</p>
<p>特点：<br>子查询必须放在小括号中<br>子查询一般作为父查询的查询条件使用</p>
<p>子查询常见分类：</p>
<ul>
<li>where型 子查询: 将子查询的结果, 作为父查询的比较条件</li>
<li>from型 子查询 : 将子查询的结果, 作为 一张表,提供给父层查询使用</li>
<li>exists型 子查询: 子查询的结果是单列多行, 类似一个数组, 父层查询使用 IN 函数 ,包含子查询的结果</li>
</ul>
<p><strong>where型 子查询</strong></p>
<p>将子查询的结果, 作为父查询的比较条件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段 <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 字段<span class="operator">=</span>（子查询）;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 通过子查询的方式, 查询价格最高的商品信息 </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.先查询出最高价格 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(price) <span class="keyword">FROM</span> products; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.将最高价格作为条件,获取商品信息 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> price <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(price) <span class="keyword">FROM</span> products);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询化妆品分类下的 商品名称 商品价格 </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先查出化妆品分类的 id </span></span><br><span class="line"><span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;化妆品&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 根据分类id ,去商品表中查询对应的商品信息 </span></span><br><span class="line"><span class="keyword">SELECT</span> p.pname, p.price </span><br><span class="line"><span class="keyword">FROM</span> products p </span><br><span class="line"><span class="keyword">WHERE</span> p.category_id <span class="operator">=</span> (<span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;化妆品&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询小于平均价格的商品信息</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.查询平均价格 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(price) <span class="keyword">FROM</span> products;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>查询小于平均价格的商品 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> price <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(price) <span class="keyword">FROM</span> products);</span><br></pre></td></tr></table></figure>



<p><strong>from型 子查询</strong></p>
<p> 将子查询的结果, 作为 一张表,提供给父层查询使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段 <span class="keyword">FROM</span> （子查询）表别名 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure>



<p><strong>exists型 子查询</strong></p>
<p>子查询的结果是单列多行, 父层查询使用 IN 函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段 <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 字段 <span class="keyword">IN</span> （子查询）;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询价格小于两千的商品,来自于哪些分类(名称) </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先查询价格小于2000 的商品的,分类ID </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> category_id <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> price <span class="operator">&lt;</span> <span class="number">2000</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在根据分类的id信息,查询分类名称</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cid <span class="keyword">in</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> category_id <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> price <span class="operator">&lt;</span> <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询家电类 与 鞋服类下面的全部商品信息 </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先查询出家电与鞋服类的 分类ID </span></span><br><span class="line"><span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="keyword">IN</span> (<span class="string">&#x27;家电&#x27;</span>,<span class="string">&#x27;鞋服&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 根据cid 查询分类下的商品信息 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> category_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="keyword">IN</span> (<span class="string">&#x27;家电&#x27;</span>,<span class="string">&#x27;鞋服&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<p>1，子查询如果查出的是一个字段(单列), 那就在where后面作为条件使用. </p>
<p>2，子查询如果查询出的是多个字段(多列), 就当做一张表使用(要起别名).</p>
<h1 id="数据库范式"><a href="#数据库范式" class="headerlink" title="数据库范式"></a>数据库范式</h1><p>为了建立冗余较小、结构合理的数据库，设计数据库时必须遵循一定的规则。在关系型数据库中这种规则就称为范式。</p>
<p>范式是符合某一种设计要求的总结。要想设计一个结构合理的关系型数据库，必须满足一定的范式</p>
<p><strong>第一范式 1NF</strong></p>
<ul>
<li>原子性, 做到列不可拆分</li>
<li>第一范式是最基本的范式。数据库表里面字段都是单一属性的，不可再分, 如果数据表中每个字段都是不可再分的最小数据单元，则满足第一范式。</li>
</ul>
<p><a href="https://imgtu.com/i/qMBRoT"><img src="https://s1.ax1x.com/2022/03/22/qMBRoT.png" alt="qMBRoT.png"></a></p>
<p><strong>第二范式 2NF</strong></p>
<ul>
<li>在第一范式的基础上更进一步，目标是确保表中的每列都和主键相关。</li>
<li>一张表只能描述一件事.</li>
</ul>
<p><a href="https://imgtu.com/i/qMBXFO"><img src="https://s1.ax1x.com/2022/03/22/qMBXFO.png" alt="qMBXFO.png"></a></p>
<p>学员信息表中其实在描述两个事物 , 一个是学员的信息,一个是课程信息</p>
<p>如果放在一张表中,会导致数据的冗余,如果删除学员信息, 成绩的信息也被删除了</p>
<p><strong>第三范式 3NF</strong></p>
<ul>
<li>消除传递依赖</li>
<li>表的信息，如果能够被推导出来，就不应该单独的设计一个字段来存放</li>
</ul>
<p><a href="https://imgtu.com/i/qMDAk8"><img src="https://s1.ax1x.com/2022/03/22/qMDAk8.png" alt="qMDAk8.png"></a></p>
<p>通过number 与 price字段就可以计算出总金额,不要在表中再做记录(空间最省)</p>
<p><strong>反三范式</strong></p>
<ul>
<li>反范式化指的是通过增加冗余或重复的数据来提高数据库的读性能</li>
<li>浪费存储空间,节省查询时间 (以空间换时间)</li>
</ul>
<p><strong>冗余字段</strong>：某个字段在多张表出现，且其意义相同，为冗余字段</p>
<p>反三范式案例：两张表，用户表、订单表，用户表中有字段name，而订单表中也存在字段name。</p>
<p><a href="https://imgtu.com/i/qMD79g"><img src="https://s1.ax1x.com/2022/03/22/qMD79g.png" alt="qMD79g.png"></a></p>
<p>适当冗余的好处：</p>
<p>当需要查询“订单表”所有数据并且只需要“用户表”的name字段时, 没有冗余字段 就需要去join连接用户表,假设表中数据量非常的大, 那么会这次连接查询就会非常大的消耗系统的性能.</p>
<p>这时候冗余的字段就可以派上用场了, 有冗余字段我们查一张表就可以了.</p>
<p><strong>总结</strong></p>
<p>1，尽量遵循范式理论的规约，尽可能少的冗余字段，让数据库设计看起来精致、优雅、让人心醉。</p>
<p>2，合理的加入冗余字段这个润滑剂，减少join，让数据库执行性能更高更快。</p>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>在数据库表中，对字段建立索引可以大大提高查询速度。通过善用这些索引，可以令MySQL的查询和运行更加高效。</p>
<p><strong>常见索引</strong></p>
<table>
<thead>
<tr>
<th><strong>索引名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>主键索引 (primary  key)</td>
<td>主键是主键索引，是一种唯一性索引,每个表只能有一个主键, 用于标识数据表中的每一条记录</td>
</tr>
<tr>
<td>唯一索引 (unique)</td>
<td>唯一键是唯一索引，指的是 索引列的所有值都只能出现一次, 必须唯一.</td>
</tr>
<tr>
<td>普通索引 (index)</td>
<td>最常见的索引,作用就是 加快对数据的访问速度</td>
</tr>
</tbody></table>
<p>MySql将一个表的索引都保存在同一个索引文件中, 如果对中数据进行增删改操作,MySql都会自动的更<br>新索引.</p>
<h2 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h2><p>其实主键就是主键索引。</p>
<p>创建表时添加主键索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名( </span><br><span class="line">    <span class="comment">-- 添加主键 (主键是唯一性索引,不能为null,不能重复,) </span></span><br><span class="line">    字段名 类型 <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>修改表结构添加主键索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY ( 列名 )</span><br></pre></td></tr></table></figure>

<h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>其实唯一键就是唯一索引。</p>
<p>创建表时，添加唯一索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名( </span><br><span class="line">    列名 类型(长度), </span><br><span class="line">    <span class="comment">-- 添加唯一索引 </span></span><br><span class="line">    <span class="keyword">UNIQUE</span> [索引名称] (列名) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>在已有的表上添加唯一索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index 索引名 <span class="keyword">on</span> 表名(列名(长度))</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> ( 列名 )</span><br></pre></td></tr></table></figure>

<h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><p>普通索引的唯一任务是加快对数据的访问速度。因此，应该只为那些最经常出现在查询条件（WHERE column=）或排序条件（ORDERBY column）中的数据列创建索引。</p>
<p>在已有的表上添加普通索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index 索引名 <span class="keyword">on</span> 表名(列名[长度])</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> INDEX 索引名 (列名)</span><br></pre></td></tr></table></figure>



<p><strong>删除索引</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> INDEX 索引名;</span><br></pre></td></tr></table></figure>

<h2 id="索引性能测试"><a href="#索引性能测试" class="headerlink" title="索引性能测试"></a>索引性能测试</h2><p>在数据量非常大的时候，查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 未添加索引,进行分组查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_index <span class="keyword">GROUP</span> <span class="keyword">BY</span> dname;</span><br></pre></td></tr></table></figure>

<p>速度非常慢，但是给该字段添加索引后，速度会大大提高。</p>
<p><strong>索引优缺点</strong></p>
<p>优：</p>
<ul>
<li>大大的提高查询速度</li>
<li>可以显著的减少查询中分组和排序的时间。</li>
</ul>
<p>缺：</p>
<ul>
<li> 创建索引和维护索引需要时间，而且数据量越大时间越长</li>
<li>当对表中的数据进行增加，修改，删除的时候，索引也要同时进行维护，降低了数据的维护速度</li>
</ul>
<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><ol>
<li>   视图是一种虚拟表。 </li>
<li>   视图建立在已有表的基础上, 视图赖以建立的这些表称为基表。</li>
<li>   向视图提供数据内容的语句为 SELECT 语句, 可以将视图理解为存储起来的 SELECT 语句. </li>
<li>   视图向用户提供基表数据的另一种表现形式</li>
</ol>
<p><strong>作用</strong></p>
<p>1，权限控制时可以使用</p>
<p>2，简化复杂的多表查询</p>
<p><strong>创建视图</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名 [column_list] <span class="keyword">as</span> 查询语句;</span><br></pre></td></tr></table></figure>

<p>创建了视图后，把视图当做一张只读的表操作就可以。</p>
<p><strong>删除视图</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 视图名;</span><br></pre></td></tr></table></figure>



<p><strong>视图的使用</strong></p>
<p> 需求: 查询各个分类下的商品平均价格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 通过 多表查询 </span></span><br><span class="line"><span class="keyword">SELECT</span> cname <span class="keyword">AS</span> <span class="string">&#x27;分类名称&#x27;</span>, <span class="built_in">AVG</span>(p.`price`) <span class="keyword">AS</span> <span class="string">&#x27;平均价格&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> products p <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> category c </span><br><span class="line"><span class="keyword">ON</span> p.`category_id` <span class="operator">=</span> c.`cid` </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.`cname`; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过视图查询 可以省略连表的操作 </span></span><br><span class="line"><span class="keyword">SELECT</span> cname <span class="keyword">AS</span> <span class="string">&#x27;分类名称&#x27;</span>, <span class="built_in">AVG</span>(price) <span class="keyword">AS</span> <span class="string">&#x27;平均价格&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> products_category_view </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cname;</span><br></pre></td></tr></table></figure>



<p><strong>视图与表的区别</strong></p>
<ul>
<li>视图是建立在表的基础上，表存储数据库中的数据，而视图只是做一个数据的展示</li>
<li>通过视图不能改变表中数据（一般情况下视图中的数据都是表中的列 经过计算得到的结果,不允许<br>更新）</li>
<li>删除视图，表不受影响，而删除表，视图不再起作用</li>
</ul>
<h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>MySQL 5.0 版本开始支持存储过程。</p>
<p>存储过程（Stored Procedure）是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象。<br>存储过程是为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行。</p>
<p>简单理解: 存储过程其实就是一堆 SQL 语句的合并。中间加入了一些逻辑控制。</p>
<p><strong>优</strong></p>
<ul>
<li>存储过程一旦调试完成后，就可以稳定运行，（前提是，业务需求要相对稳定，没有变化）</li>
<li>存储过程减少业务系统与数据库的交互，降低耦合，数据库交互更加快捷（应用服务器，与<br>数据库服务器不在同一个地区）</li>
</ul>
<p><strong>缺</strong></p>
<ul>
<li>在互联网行业中，大量使用MySQL，MySQL的存储过程与Oracle的相比较弱，所以较少使<br>用，并且互联网行业需求变化较快也是原因之一</li>
<li>尽量在简单的逻辑中使用，存储过程移植十分困难，数据库集群环境，保证各个库之间存储<br>过程变更一致也十分困难。</li>
<li>阿里的代码规范里也提出了禁止使用存储过程，存储过程维护起来的确麻烦；</li>
</ul>
<p><strong>创建存储过程一，无参</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$ <span class="comment">-- 声明语句结束符，可以自定义 一般使用$$ </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 过程名称() <span class="comment">-- 声明存储过程 </span></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="comment">-- 开始编写存储过程 -- 要执行的操作 </span></span><br><span class="line"><span class="keyword">END</span> $$ <span class="comment">-- 存储过程结束</span></span><br></pre></td></tr></table></figure>

<p>例子：编写存储过程, 查询所有商品数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> goods_proc() </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> goods; </span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> goods_proc;</span><br></pre></td></tr></table></figure>



<p><strong>创建存储过程二，有输入参</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称(<span class="keyword">IN</span> 参数名 参数类型)</span><br></pre></td></tr></table></figure>

<p>例子：输入一个商品id, 根据id删除数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> goods_proc02(<span class="keyword">IN</span> goods_id <span class="type">INT</span>) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">DELETE</span> <span class="keyword">FROM</span> goods <span class="keyword">WHERE</span> gid <span class="operator">=</span> goods_id ; </span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用 删除 id为2的商品 </span></span><br><span class="line"><span class="keyword">CALL</span> goods_proc02(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>



<p><strong>创建存储过程三，有输入参，有输出参</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称(<span class="keyword">IN</span> 参数名 参数类型, <span class="keyword">out</span> 参数名 参数类型)</span><br></pre></td></tr></table></figure>

<p>变量赋值操作：SET @变量名=值</p>
<p>例子：向订单表 插入一条数据, 返回1,表示插入成功</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> orders_proc(<span class="keyword">IN</span> id <span class="type">INT</span>, <span class="keyword">IN</span> price <span class="type">INT</span>, <span class="keyword">OUT</span> out_num <span class="type">INT</span>) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 执行插入操作 </span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders <span class="keyword">VALUES</span>(id, price); </span><br><span class="line">    <span class="comment">-- 设置 num的值为 1 </span></span><br><span class="line">    <span class="keyword">SET</span> <span class="variable">@out</span>_num <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line">    <span class="comment">-- 返回 out_num的值 </span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="variable">@out</span>_num; </span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">CALL</span> orders_proc(<span class="number">1</span>,<span class="number">30</span>,<span class="variable">@out</span>_num);</span><br></pre></td></tr></table></figure>

<h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>当我们执行一条sql语句的时候，这条sql语句的执行会自动去触发执行其他的sql语句。</p>
<p><strong>触发器四要素</strong></p>
<ol>
<li>监视地点（table） </li>
<li>监视事件（insert/update/delete） </li>
<li>触发时间（before/after） </li>
<li>触发事件（insert/update/delete）</li>
</ol>
<p><strong>创建语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $ <span class="comment">-- 将Mysql的结束符号从 ; 改为 $,避免执行出现错误 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> Trigger_Name <span class="comment">-- 触发器名，在一个数据库中触发器名是唯一的 </span></span><br><span class="line">(before<span class="operator">/</span>after) (<span class="keyword">insert</span><span class="operator">/</span>update<span class="operator">/</span><span class="keyword">delete</span>) <span class="comment">-- 触发的时机 和 监视的事件 </span></span><br><span class="line"><span class="keyword">on</span> table_Name <span class="comment">-- 触发器所在的表 </span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> <span class="comment">-- 固定写法 叫做行触发器, 每一行受影响，触发事件都执行 </span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="comment">-- begin和end之间写触发事件 </span></span><br><span class="line"><span class="keyword">end</span> $ <span class="comment">-- 结束标记</span></span><br></pre></td></tr></table></figure>

<p>例子：在下订单的时候，对应的商品的库存量要相应的减少</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.修改结束标识 </span></span><br><span class="line">DELIMITER $ </span><br><span class="line"><span class="comment">-- 2.创建触发器 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> t1 </span><br><span class="line"><span class="comment">-- 3.指定触发的时机,和要监听的表 </span></span><br><span class="line">AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> orders </span><br><span class="line"><span class="comment">-- 4.行触发器 固定写法 </span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br><span class="line"><span class="comment">-- 4.触发后具体要执行的事件 </span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 订单+1 库存-1 </span></span><br><span class="line">    UPDATE goods <span class="keyword">SET</span> num <span class="operator">=</span> num <span class="number">-1</span> <span class="keyword">WHERE</span> gid <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line"><span class="keyword">END</span>$</span><br></pre></td></tr></table></figure>

<h1 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h1><p>数据控制语言</p>
<h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><p>MySql默认使用的都是 root 用户，超级管理员，拥有全部的权限。除了root用户以外，我们还可以通过DCL语言来定义一些权限较小的用户, 分配不同的权限来管理和维护数据库。</p>
<p><strong>创建用户</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>主机名：指定该用户在哪个主机上可以登陆，本地用户可用 localhost，如果想让该用户可以 从任意远程主机登陆，可以使用通配符 %</p>
<p><strong>用户授权</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限 <span class="number">1</span>, 权限 <span class="number">2</span> <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>权限：授予用户的权限，如 CREATE、ALTER、SELECT、INSERT、UPDATE 等。如果要授 予所有的权限则使用 ALL</p>
<p><code>*.*</code>表示所有库所有表</p>
<p><strong>查看权限</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p><strong>删除用户</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p><strong>查询用户</strong></p>
<p>其实就是查询mysql的数据库中的user表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">USER</span>;</span><br></pre></td></tr></table></figure>

<h2 id="备份与还原"><a href="#备份与还原" class="headerlink" title="备份与还原"></a>备份与还原</h2><p><strong>SQLYog 数据备份与还原</strong></p>
<p>备份：选中要备份的数据库,右键 ”备份/导出“ —-&gt; “备份数据库,转储到SQL…”<br> —-&gt;  选择好路径后，点击“导出”</p>
<p>还原：右键，选择”执行SQL脚本…“ —-&gt; 选择好路径后，点击“执行”</p>
<p><strong>命令行备份</strong></p>
<p>打开DOS命令行</p>
<p>备份语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u 用户名 <span class="operator">-</span>p 密码 数据库 <span class="operator">&gt;</span> 文件路径</span><br></pre></td></tr></table></figure>

<p>还原，需要先创建一个库，选择该库，在库中还原</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use 库名</span><br><span class="line">source 文件路径</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>动态网页爬虫</title>
    <url>/2021/09/07/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p>动态网页：是网站在不重新加载的情况下，通过ajax技术动态更新网站中的局部数据。直接查看网页源代码是找不到数据的。</p>
<span id="more"></span>

<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>1，直接分析ajax调用的接口。然后通过代码请求这个接口。（上面的“爬虫实战1-多线程爬取王者荣耀壁纸”就是这种方案解决的）</p>
<p>2，使用Selenium+chromedriver模拟浏览器行为获取数据。</p>
<table>
<thead>
<tr>
<th align="center">方式</th>
<th align="center">优点</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">分析接口</td>
<td align="center">直接可以请求到数据。不需要做一些解析工作。代码量少，性能高</td>
<td align="center">分析接口比较复杂，特别是一些通过js混淆的接口，要有一定的js功底。容易别发现是爬虫。</td>
</tr>
<tr>
<td align="center">selenium</td>
<td align="center">直接模拟浏览器的行为。浏览器能请求到的，使用selenium也能请求到。爬虫更稳定</td>
<td align="center">代码量多。性能低。</td>
</tr>
</tbody></table>
<h2 id="selenium和chromedriver介绍："><a href="#selenium和chromedriver介绍：" class="headerlink" title="selenium和chromedriver介绍："></a>selenium和chromedriver介绍：</h2><p><strong>Selenium</strong>：相当于是一个机器人。可以模拟人类在浏览器上的一些行为，自动处理浏览器上的一些行为，比如点击，填充数据，删除cookie等。<br>Selenium官方网址(python版本)：<a href="https://selenium-python.readthedocs.io/">https://selenium-python.readthedocs.io</a></p>
<p>安装Selenium：Selenium有许多语言的版本，有java、ruby、python等。我们下载python版本就可以了。pip install selenium</p>
<p><strong>chromedriver</strong>：是一个驱动Chrome浏览器的驱动程序，使用它才可以驱动Chrome浏览器。当然针对不同的浏览器有不同的driver。下面是不同的浏览器对应driver。</p>
<ul>
<li>Chrome：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">https://sites.google.com/a/chromium.org/chromedriver/downloads</a></li>
<li>Firefox：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></li>
<li>Edge：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></li>
<li>Safari：<a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/">https://webkit.org/blog/6900/webdriver-support-in-safari-10/</a></li>
</ul>
<p><em>注</em>：下载版本和对应浏览器版本一致。保存在纯英文没有权限的路径下。</p>
<p>如果启动selenium报错如下：</p>
<p><code>selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 92</code>,</p>
<p>就是浏览器和浏览器驱动版本不一样导致的。</p>
<h2 id="selenium和chromedriver使用："><a href="#selenium和chromedriver使用：" class="headerlink" title="selenium和chromedriver使用："></a>selenium和chromedriver使用：</h2><h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#下载好的chromedriver的路径</span></span><br><span class="line">driver_path = <span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"><span class="comment">#直接用driver访问网站</span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#获取源代码</span></span><br><span class="line"><span class="built_in">print</span>(driver.page_source)  </span><br></pre></td></tr></table></figure>

<h3 id="关闭页面和浏览器："><a href="#关闭页面和浏览器：" class="headerlink" title="关闭页面和浏览器："></a>关闭页面和浏览器：</h3><ul>
<li><p>driver.close()：关闭当前页面</p>
</li>
<li><p>driver.quit()：关闭浏览器</p>
</li>
</ul>
<h3 id="定位元素："><a href="#定位元素：" class="headerlink" title="定位元素："></a>定位元素：</h3><ul>
<li>find_element_by_id(“”)：根据id查找元素</li>
<li>find_element_by_class_name(“”)：根据class名查找元素</li>
<li>find_element_by_name(“”)：根据name属性查找元素</li>
<li>find_element_by_tag_name(“”)：根据标签名查找元素</li>
<li>find_element_by_xpath(“”)：根据xpath语法查找元素</li>
<li>find_element_by_css_selector(“”)：根据css选择器查找元素</li>
</ul>
<p><strong>注</strong>：这些find_element查找元素是查找第一个满足条件的元素；如果加上s，即find_element<strong>s</strong>是获取所有满足条件的元素。</p>
<p>以上元素定位的方法外，还有另一种元素定位的写法，如下：</p>
<p>需要导入By：<code>from selenium.webdriver.common.by import By</code></p>
<ul>
<li>find_element(By.ID, “id”)</li>
<li>find_element(By.CLASS_NAME, “class_name”)</li>
<li>find_element(By.NAME, “name”)</li>
<li>find_element(By.TAG_NAME, “tag_name”)</li>
<li>find_element(By.XPATH, “xpath语法”)</li>
<li>find_element(By.CSS_SELECTOR, “css语法”)</li>
</ul>
<p><strong>注</strong>：用法和上面一样，也有element<strong>s</strong>的用法。注意大写。</p>
<h3 id="表单元素操作："><a href="#表单元素操作：" class="headerlink" title="表单元素操作："></a>表单元素操作：</h3><p>先到找该元素，再进行操作</p>
<p>1，输入文本操作，用于输入框</p>
<p>element.send_keys(“text”)：在该元素输入文本内容</p>
<p>element.clear()：清除文本内容</p>
<p>2，点击操作，用于复选框，按钮等</p>
<p>element.click()：单机该元素</p>
<p>3，选择下拉列表操作，用于select，option</p>
<ul>
<li>需要导入Select：<code>from selenium.webdriver.support.ui import Select</code></li>
<li>找到select元素后，用导入的Select包装一下：<br><code>select = Select(driver.find_element_by_xpath(&quot;//select[@name=&#39;name&#39;]&quot;))</code></li>
<li>在select标签中选择option：<br>select.select_by_index(“index”)：通过索引值选择<br>select.select_by_value(“value”)：通过value属性值选择<br>select.select_by_visible_text(“text”)：通过可视文本选择，即显示在上面的文字内容</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#表单元素操作：访问百度，在搜索框中输入‘python’，然后单击‘百度一下’按钮</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#找到搜索框</span></span><br><span class="line">inputTag = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br><span class="line"><span class="comment">#搜索框输入内容</span></span><br><span class="line">inputTag.send_keys(<span class="string">&quot;python&quot;</span>)  </span><br><span class="line"><span class="comment">#找到百度一下按钮</span></span><br><span class="line">btn = driver.find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br><span class="line"><span class="comment">#单机操作</span></span><br><span class="line">btn.click()  </span><br></pre></td></tr></table></figure>

<h3 id="行为链："><a href="#行为链：" class="headerlink" title="行为链："></a>行为链：</h3><p>更像人类的操作</p>
<p>有时候在页面中的操作可能要有很多步，那么可以使用行为链。</p>
<p>有些网站可能会在浏览器端做一些验证行为是否符合人类的行为来做反爬虫。这时候我们就可以使用行为链来模拟人的操作。行为链有更多的复杂操作，比如双击，右击。在自动化测试中非常有用。</p>
<p>使用：</p>
<ul>
<li><p>导入<code>from selenium.webdriver.common.action_chains import ActionChains</code></p>
</li>
<li><p>创建行为链<code>actions = ActionChains(driver)</code></p>
</li>
<li><p>相关操作</p>
<ul>
<li>actions.move_to_element(element)：鼠标移动到某个元素上</li>
<li>actions.send_keys_to_element(element, “text”)：在某个元素上输入文本</li>
<li>actions.click(element)：单击某元素</li>
<li>actions.context_click(element)：右击某元素</li>
<li>actions.double_click(element)：双击某元素</li>
<li>actions.click_and_hold(element)：单击但不松开，拖曳</li>
</ul>
</li>
<li><p>actions.perform()：执行行为链</p>
</li>
</ul>
<p><strong>注</strong>：创建了行为链，定义完后要提交执行，要再次使用行为链时，再重新创建一个行为链。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"><span class="comment">#访问知乎</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.zhihu.com/signin?next=%2F&#x27;</span>)</span><br><span class="line"><span class="comment">#创建行为链</span></span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line"><span class="comment">#操作：选择用户密码登入</span></span><br><span class="line">login = driver.find_elements_by_class_name(<span class="string">&quot;SignFlow-tab&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">actions.move_to_element(login)</span><br><span class="line">actions.click(login)</span><br><span class="line"><span class="comment">#执行该行为链</span></span><br><span class="line">actions.perform()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#再次创建新的行为链</span></span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line"><span class="comment">#操作：填写用户名</span></span><br><span class="line">username = driver.find_element_by_name(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">actions.move_to_element(username)</span><br><span class="line">actions.send_keys_to_element(username,<span class="string">&quot;17370466454&quot;</span>)</span><br><span class="line"><span class="comment">#操作：填写密码</span></span><br><span class="line">password = driver.find_element_by_name(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">actions.move_to_element(password)</span><br><span class="line">actions.send_keys_to_element(password,<span class="string">&quot;123456789&quot;</span>)</span><br><span class="line"><span class="comment">#操作：点击提交</span></span><br><span class="line">submit = driver.find_element_by_xpath(<span class="string">&quot;//button[@type=&#x27;submit&#x27;]&quot;</span>)</span><br><span class="line">actions.move_to_element(submit)</span><br><span class="line">actions.click(submit)</span><br><span class="line"><span class="comment">#执行该行为链</span></span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure>

<h3 id="cookie："><a href="#cookie：" class="headerlink" title="cookie："></a>cookie：</h3><ul>
<li>driver.get_cookies()：获取所有cookie</li>
<li>driver.get_cookie(“name”)：获取指定name的cookie</li>
<li>driver.delete_all_cookies()：删除所有cookie</li>
<li>driver.delete_cookie(“BA_HECTOR”)：删除指定name的cookie</li>
<li>driver.add_cookie({“name”:”abc”, “value”:”123456”})：添加cookie</li>
</ul>
<h3 id="隐式等待和显式等待："><a href="#隐式等待和显式等待：" class="headerlink" title="隐式等待和显式等待："></a>隐式等待和显式等待：</h3><p>现在的网页越来越多使用ajax技术，程序不能确定何时某个元素完全加载出来了。如果元素还没加载出来，但代码直接使用该元素，就会报错NullPointer。<br>为解决这问题，Selenium提供两种等待方式：隐式等待，显式等待。</p>
<h4 id="隐式等待："><a href="#隐式等待：" class="headerlink" title="隐式等待："></a>隐式等待：</h4><p>等待指定的秒数<br>driver.implicitly_wait()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#隐式等待</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#等待10秒</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;fjkd&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="显式等待："><a href="#显式等待：" class="headerlink" title="显式等待："></a>显式等待：</h4><p>等待，直到给定的条件成立后就不再等待，也可以指定一个最大等待时间，超过这个时间后就抛出异常。可配合try:，except:，else:，finally:。</p>
<p>需要导入：</p>
<ul>
<li><code>from selenium.webdriver.support.ui import WebDriverWait</code>  ：显式等待类</li>
<li><code>from selenium.webdriver.support import expected_conditions</code>  ：期望条件类</li>
<li><code>from selenium.webdriver.common.by import By</code>：在期望条件中查找元素，用By</li>
</ul>
<p>语法：</p>
<ul>
<li><code>WebDriverWait(driver, “最大等待时间” ).until( “期望的条件” )</code></li>
</ul>
<p>例子：访问12306铁路，等待，直到车站中选择了北京后，再查询。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait  <span class="comment">#显式等待类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC  <span class="comment">#期望的条件类,as取别名</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By   <span class="comment">#By用来查找元素的</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"><span class="comment">#访问12306铁路</span></span><br><span class="line">driver.get(<span class="string">&quot;https://kyfw.12306.cn/otn/czxx/init&quot;</span>)</span><br><span class="line"><span class="comment">#条件是本文被显示在某个元素的value属性上</span></span><br><span class="line">WebDriverWait(driver,<span class="number">1000</span>).until(</span><br><span class="line">    EC.text_to_be_present_in_element_value((By.NAME,<span class="string">&quot;train_station_name&quot;</span>),<span class="string">&quot;北京&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">btn = driver.find_element_by_id(<span class="string">&quot;_a_search_btn&quot;</span>)</span><br><span class="line">btn.click()</span><br></pre></td></tr></table></figure>

<p>显式等待预期的条件：</p>
<ul>
<li>title_is 判断title是否出现</li>
<li>title_contains 判断title页面标题是否包含某些字符</li>
<li><strong>presence_of_element_located 判断某个元素是否被加载到了dom树里，但是并不代表这个元素可见</strong></li>
<li><strong>url_contains 判断当前url是否包含某个url</strong></li>
<li>url_matches 判断当前url是否符合某种格式</li>
<li>url_to_be 判断当前url是否出现</li>
<li>url_changes 判断当前url是否已经发生了变化</li>
<li>visibility_of_element_located 判断某个元素是否被添加到了dom树里，且宽高都大于0</li>
<li>visibility_of 判断看某个元素是否可见</li>
<li>presence_of_all_elements_located 判断至少有一个元素存在于dom树中，返回所有定位到的元素</li>
<li>visibility_of_any_elements_located 判断至少有一个元素在页面中可见</li>
<li>visibility_of_all_elements_located 判断是否所有元素都在页面中可见</li>
<li>text_to_be_present_in_element 判断指定的元素中是否包含了预期的字符串</li>
<li><strong>text_to_be_present_in_element_value 判断指定的元素属性值中是否包含了预期的字符串</strong></li>
<li>frame_to_be_available_and_switch_to_it 判断iframe是否可以switch进去</li>
<li>invisibility_of_element_located 判断某个元素是否在dom中不可见</li>
<li><strong>element_to_be_clickable 判断某个元素是否可见并且是enable的，也就是说是是否可以点击</strong></li>
<li>staleness_of 等待某个元素从dom中删除</li>
<li>element_to_be_selected 判断某个元素是否被选中了，一般用于下拉列表中</li>
<li>element_located_to_be_selected 与上面的意思一样，只不过上面实例化的时候传入的是元素对象，这个传入的是定位</li>
<li>element_selection_state_to_be 判断某个元素的选中状态是否符合预期</li>
<li>element_located_selection_state_to_be 与上面一样，只不过传值不同而已</li>
<li>number_of_windows_to_be 判断当前窗口数是否等于预期</li>
<li>new_window_is_opened 判断是否有窗口增加</li>
<li>alert_is_present 判断页面是否有弹窗</li>
</ul>
<h3 id="切换窗口："><a href="#切换窗口：" class="headerlink" title="切换窗口："></a>切换窗口：</h3><p>1，<code>driver.switch_to_window()</code>：切换到指定窗口</p>
<p>2，<code>driver.window_handles</code>：返回窗口的列表</p>
<p>配合使用<code>driver.switch_to_window( driver.window_handles[0] )</code>，表示切换到第一个窗口</p>
<p>3，<code>driver.execute_script(&quot;window.open(&#39;https://douban.com&#39;)&quot;)</code>：execute_script表示执行js代码，这里用js代码打开新的窗口，execute_script（”这里写js代码，还可以写arguments[0]，arguments[1]，表示引用外面的参数”，参数1，参数2）。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#执行js代码,用js代码打开新的窗口</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;window.open(&#x27;https://douban.com&#x27;)&quot;</span>)</span><br><span class="line"><span class="comment">#切换窗口</span></span><br><span class="line">driver.switch_to_window(driver.window_handles[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#打印网页源代码</span></span><br><span class="line"><span class="built_in">print</span>(driver.page_source)</span><br></pre></td></tr></table></figure>

<h3 id="设置代理IP："><a href="#设置代理IP：" class="headerlink" title="设置代理IP："></a>设置代理IP：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment">#1，创建options</span></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment">#2，options添加代理IP</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--proxy-server=http://219.128.76.3:8080&quot;</span>)</span><br><span class="line"><span class="comment">#3，创建驱动时，把options添加进去</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>,chrome_options=options)</span><br><span class="line"><span class="comment">#该网站返回自己的ip地址</span></span><br><span class="line">driver.get(<span class="string">&quot;http://httpbin.org/ip&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>element.get_property(“属性名”)：获取元素的html官方属性。</p>
<p>element.get_attribute(“属性名”)：获取元素的属性，包括官方和自定义属性。</p>
<p>driver.save_screenshot(“path”)：保存当前页面截图，一般png类型。</p>
<h2 id="Selenium实战-12306自动抢票"><a href="#Selenium实战-12306自动抢票" class="headerlink" title="Selenium实战-12306自动抢票"></a>Selenium实战-12306自动抢票</h2><p>该程序可以自动实现抢票，虽然有点鸡肋，重在学习selenium。</p>
<p>假如9点开始抢票。提前物色好车次和席别，添加乘客信息，定好开抢时间。在9点之前打开该程序并运行，由于9点没到，会一直处于等待阶段。直到9点一到，立刻抢票。</p>
<p>简单定时器制作方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入time</span></span><br><span class="line"><span class="keyword">import</span> time   </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#获取时间戳，时间戳就是1970年一直到现在的时间秒数，所以分分秒秒时间戳都在变化</span></span><br><span class="line">    timestamp = time.time()</span><br><span class="line">    <span class="comment">#把时间戳变为本地时间</span></span><br><span class="line">    localtime = time.localtime(timestamp)</span><br><span class="line">    <span class="comment">#将本地时间格式化成我们想要的文本格式</span></span><br><span class="line">    localtime = time.strftime(<span class="string">&quot;%H:%M:%S&quot;</span>,localtime)</span><br><span class="line">    <span class="comment">#判断如果本地时间到了指定时间(文本格式要一致)就停止循环，继续往下执行代码</span></span><br><span class="line">    <span class="keyword">if</span> localtime == <span class="string">&quot;12:45:00&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;时间到了！！&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>代码实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrainSpider</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    该类用于12306铁路自动抢票功能，创建实例对象后直接调用run()方法。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    login_url = <span class="string">&quot;https://kyfw.12306.cn/otn/resources/login.html&quot;</span></span><br><span class="line">    search_url = <span class="string">&quot;https://kyfw.12306.cn/otn/leftTicket/init?linktypeid=dc&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,from_station,to_station,date,trains,passengers,snap_up</span>):</span></span><br><span class="line">        self.from_station = from_station</span><br><span class="line">        self.to_station = to_station</span><br><span class="line">        self.date = date</span><br><span class="line">        self.trains = trains</span><br><span class="line">        self.stations = &#123;&#125;  <span class="comment">#存放各个城市对应的代号词</span></span><br><span class="line">        self.get_stations_code()</span><br><span class="line">        self.driver = driver</span><br><span class="line">        self.train = <span class="literal">None</span>  <span class="comment">#存放确定好的的车次</span></span><br><span class="line">        self.seat = <span class="literal">None</span>   <span class="comment">#存放确定好的的席位</span></span><br><span class="line">        self.passengers = passengers</span><br><span class="line">        self.snap_up = snap_up</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_stations_code</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取每个城市对应的代号词&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;stations.csv&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            reader = csv.reader(fp)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> reader:</span><br><span class="line">                self.stations[i[<span class="number">0</span>]] = i[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(self.login_url)</span><br><span class="line">        <span class="comment">#等待用户手动登入</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.url_contains(<span class="string">&quot;https://kyfw.12306.cn/otn/view/index.html&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#等待“新冠疫情”的提示框弹出</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.CLASS_NAME, <span class="string">&quot;modal&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#单击确认</span></span><br><span class="line">        btn = self.driver.find_element(By.CLASS_NAME, <span class="string">&quot;modal-close&quot;</span>)</span><br><span class="line">        btn.click()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登入成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_ticket</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#相当于单击了“车票”导航栏中的“单程”命令</span></span><br><span class="line">        self.driver.get(self.search_url)</span><br><span class="line">        <span class="comment"># 等待“新冠疫情防控”的提示框弹出</span></span><br><span class="line">        WebDriverWait(self.driver, <span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.ID,<span class="string">&quot;content_defaultwarningAlert_id&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#单击确认</span></span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;qd_closeDefaultWarningWindowDialog_id&quot;</span>).click()</span><br><span class="line">        <span class="comment">#输入起始站，终点站，时间</span></span><br><span class="line">        input_from_station = self.driver.find_element_by_id(<span class="string">&quot;fromStation&quot;</span>)</span><br><span class="line">        from_station_code = self.stations[self.from_station]</span><br><span class="line">        self.driver.execute_script(<span class="string">&quot;arguments[0].value=&#x27;%s&#x27;&quot;</span>%from_station_code,input_from_station)</span><br><span class="line">        input_to_station = self.driver.find_element_by_id(<span class="string">&quot;toStation&quot;</span>)</span><br><span class="line">        to_station_code = self.stations[self.to_station]</span><br><span class="line">        self.driver.execute_script(<span class="string">&quot;arguments[0].value=&#x27;%s&#x27;&quot;</span>%to_station_code, input_to_station)</span><br><span class="line">        input_date = self.driver.find_element_by_id(<span class="string">&quot;train_date&quot;</span>)</span><br><span class="line">        self.driver.execute_script(<span class="string">&quot;arguments[0].value=&#x27;%s&#x27;&quot;</span>%self.date, input_date)</span><br><span class="line">        <span class="comment">#到达指定时间才继续执行代码，用于抢票</span></span><br><span class="line">        <span class="keyword">if</span> self.snap_up == <span class="string">&quot;无&quot;</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                timestamp = time.time()</span><br><span class="line">                localtime = time.localtime(timestamp)</span><br><span class="line">                localtime = time.strftime(<span class="string">&quot;%H:%M:%S&quot;</span>, localtime)</span><br><span class="line">                <span class="keyword">if</span> localtime == self.snap_up:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#点击查询</span></span><br><span class="line">        btn_submit = self.driver.find_element_by_id(<span class="string">&quot;query_ticket&quot;</span>)</span><br><span class="line">        btn_submit.click()</span><br><span class="line">        <span class="comment">#等待查询结果加载出来</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.XPATH,<span class="string">&quot;//tbody[@id=&#x27;queryLeftTable&#x27;]/tr&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#获取车次信息，解析车次</span></span><br><span class="line">        trs = self.driver.find_elements_by_xpath(<span class="string">&quot;//tbody[@id=&#x27;queryLeftTable&#x27;]/tr[not(@datatran)]&quot;</span>)</span><br><span class="line">        have_seat = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">            train_info = tr.text.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot; &quot;</span>).split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">            train = train_info[<span class="number">0</span>]</span><br><span class="line">            <span class="comment">#判断是不是我们想要的车次</span></span><br><span class="line">            <span class="keyword">if</span> train <span class="keyword">in</span> self.trains:</span><br><span class="line">                seats = self.trains[train]</span><br><span class="line">                <span class="keyword">for</span> seat <span class="keyword">in</span> seats:</span><br><span class="line">                    <span class="comment">#判断是什么座位，并判断该座位有无票</span></span><br><span class="line">                    <span class="comment">#一等座:M,二等座:O,硬座:1，硬卧:3，软卧:4,高级软卧:6,商务座:9</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;M&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">11</span>]</span><br><span class="line">                        <span class="comment">#票情况可以为：文本类型的数字，有，候补，无，--，*</span></span><br><span class="line">                        <span class="comment">#ticket等于‘有’或者等于文本类型的数字都代表有票，这里强行把ticket转换成int类型，</span></span><br><span class="line">                        <span class="comment">#可以转换表示ticket是文本类型的数字，转不了表示ticket是’有‘，或者其他无票的可能，那就pass</span></span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;O&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">10</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">4</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">6</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">8</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;6&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">9</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;9&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">12</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> have_seat:</span><br><span class="line">                    <span class="comment"># have_seat为真表示找到了票，然后单击‘预定’按钮</span></span><br><span class="line">                    self.train = train</span><br><span class="line">                    btn = tr.find_element_by_class_name(<span class="string">&quot;btn72&quot;</span>)</span><br><span class="line">                    btn.click()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">submit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#选择乘客</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.XPATH,<span class="string">&quot;//ul[@id=&#x27;normal_passenger_id&#x27;]/li/label&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        passengers = self.driver.find_elements_by_xpath(<span class="string">&quot;//ul[@id=&#x27;normal_passenger_id&#x27;]/li/label&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> passenger <span class="keyword">in</span> passengers:</span><br><span class="line">            <span class="keyword">if</span> passenger.text <span class="keyword">in</span> self.passengers:</span><br><span class="line">                passenger.click()</span><br><span class="line">        <span class="comment">#选择席别</span></span><br><span class="line">        selectsEle = self.driver.find_elements_by_xpath(<span class="string">&quot;//tbody[@id=&#x27;ticketInfo_id&#x27;]/tr[not(@class=&#x27;tips&#x27;)]/td[3]/select&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> selectEle <span class="keyword">in</span> selectsEle:</span><br><span class="line">            select = Select( selectEle )</span><br><span class="line">            select.select_by_value(self.seat)</span><br><span class="line">        <span class="comment">#提交订单</span></span><br><span class="line">        btn = self.driver.find_element_by_id(<span class="string">&quot;submitOrder_id&quot;</span>)</span><br><span class="line">        btn.click()</span><br><span class="line">        <span class="comment">#确认提交订单信息</span></span><br><span class="line">        WebDriverWait(self.driver, <span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.XPATH, <span class="string">&quot;//tbody[@id=&#x27;check_ticketInfo_id&#x27;]/tr/td&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.ID,<span class="string">&#x27;qr_submit_id&#x27;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                btn = self.driver.find_element_by_id(<span class="string">&quot;qr_submit_id&quot;</span>)</span><br><span class="line">                btn.click()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                passengers = <span class="string">&quot;、&quot;</span>.join(self.passengers)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;已为【%s】乘客购得【%s】车次【%s】席别票&quot;</span> % (passengers, self.train, self.seat))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#1，登入</span></span><br><span class="line">        self.login()</span><br><span class="line">        <span class="comment">#2，查询票</span></span><br><span class="line">        self.search_ticket()</span><br><span class="line">        <span class="comment">#3，提交订单</span></span><br><span class="line">        self.submit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment">#使用说明</span></span><br><span class="line">    <span class="comment">#创建类时按顺序输入参数：出发点，目的地，发车日期(&quot;****-**-**&quot;),车次座位(字典格式)，乘客(列表格式)，抢票时间(“**:**:**”)</span></span><br><span class="line">    <span class="comment">#车次座位格式：&#123;&quot;G403&quot;:[&quot;1&quot;],&quot;G505&quot;:[&quot;M&quot;,&quot;O&quot;]&#125;</span></span><br><span class="line">    <span class="comment"># 一等座:M,二等座:O,硬座:1，硬卧:3，软卧:4,高级软卧:6,商务座:9</span></span><br><span class="line">    <span class="comment">#抢票时间精确到时分秒，若填写“无”，表示当前时间直接抢票</span></span><br><span class="line">    </span><br><span class="line">    trainSpider = TrainSpider(<span class="string">&quot;万安县&quot;</span>,<span class="string">&quot;南昌&quot;</span>,<span class="string">&quot;2021-09-01&quot;</span>,&#123;<span class="string">&quot;G5022&quot;</span>:[<span class="string">&quot;O&quot;</span>]&#125;,[<span class="string">&quot;李昭德&quot;</span>,<span class="string">&quot;李昭辉&quot;</span>],<span class="string">&quot;13:11:00&quot;</span>)</span><br><span class="line">    trainSpider.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h2 id="反爬虫攻防实战"><a href="#反爬虫攻防实战" class="headerlink" title="反爬虫攻防实战"></a>反爬虫攻防实战</h2><p>上一章爬取动态网页是使用selenium。这一章用另一种方法，分析后端接口，破解js，直接访问后端接口。<br>这种方法需要有一定的js功底。</p>
<h3 id="有道翻译"><a href="#有道翻译" class="headerlink" title="有道翻译"></a>有道翻译</h3><p>通过请求有道翻译后端接口，实现翻译功能</p>
<p>网址：<a href="https://fanyi.youdao.com/">https://fanyi.youdao.com/</a></p>
<p><strong>分析及代码实现</strong>：</p>
<p>进入网站使用有道翻译发现，输入文本”world”后会自动翻译成”世界”，结论：输入文本后网页自动发送ajax请求。<br>通过抓包工具，找到相关包，包名‘translate_o?sm…..’。获取请求的url=”<a href="https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;%EF%BC%8C%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%EF%BC%9Apost%EF%BC%8C%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF%EF%BC%8C%E4%BB%A5%E5%8F%8A%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E3%80%82%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90%E5%A6%82%E4%B8%8B%EF%BC%9A">https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;，请求方式：post，请求头信息，以及请求参数。请求参数分析如下：</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">i: world          			<span class="comment">//要翻译的文本，不管</span></span><br><span class="line"><span class="attr">from</span>: AUTO		            <span class="comment">//原文本的语言，AUTO表示自动识别，不管</span></span><br><span class="line"><span class="attr">to</span>: AUTO		 		    <span class="comment">//需要翻译成的语言，AUTO表示自动识别，不管</span></span><br><span class="line"><span class="attr">smartresult</span>: dict    		<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">client</span>: fanyideskweb    	<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">salt</span>: <span class="number">16293414783192</span>    				  <span class="comment">//应该是通过某种算法或加密得到    </span></span><br><span class="line"><span class="attr">sign</span>: 530e6e5252905a4774e78e524a42fd0b    <span class="comment">//应该是通过某种算法或加密得到 </span></span><br><span class="line"><span class="attr">lts</span>: <span class="number">1629341478319</span>       				  <span class="comment">//应该是通过某种算法或加密得到 </span></span><br><span class="line"><span class="attr">bv</span>: eda468fc64295ecf2810ab8a672c2db1      <span class="comment">//应该是通过某种算法或加密得到 </span></span><br><span class="line"><span class="attr">doctype</span>: json    			<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">version</span>: <span class="number">2.1</span>     			<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">keyfrom</span>: fanyi.web    		<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">action</span>: FY_BY_REALTlME      <span class="comment">//应该是固定的，不管</span></span><br></pre></td></tr></table></figure>

<p>通过观察，很明显有些请求参数是固定的，可以不需要修改，不用管<br>但是还有些参数是应该是通过某种算法或加密得到的，而且每次请求都不一样，所以需要自己根据其后端接口的规则来模仿实现。</p>
<p>ajax请求是js文件写的，所以找到发送该ajax请求的js文件。找法：右击查看网页源代码，在网页源代码中找调用的js文件。可以打开js文件看看里面有没有相关的请求参数，如果基本都有，那就应该是该js文件。该js文件一般没有格式化，可以用js美化工具经行美化，方便阅读。</p>
<p>拿到js文件后，分析需要的请求参数在里面是怎么实现的，以有道翻译为例。<br>下面4个是我们需要自己实现的请求参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">salt: <span class="number">16293414783192</span></span><br><span class="line"><span class="attr">sign</span>: 530e6e5252905a4774e78e524a42fd0b</span><br><span class="line"><span class="attr">lts</span>: <span class="number">1629341478319</span></span><br><span class="line"><span class="attr">bv</span>: eda468fc64295ecf2810ab8a672c2db1</span><br></pre></td></tr></table></figure>

<p>然后在js文件中找这些参数实现的原理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">i: n,   <span class="comment">//n表示当前要翻译的单词</span></span><br><span class="line"><span class="attr">from</span>: C,</span><br><span class="line"><span class="attr">to</span>: S,</span><br><span class="line"><span class="attr">smartresult</span>: <span class="string">&quot;dict&quot;</span>,</span><br><span class="line"><span class="attr">client</span>: E,   </span><br><span class="line"><span class="attr">salt</span>: r.salt,    	<span class="comment">//找到这4个参数的实现原理，要找到r</span></span><br><span class="line"><span class="attr">sign</span>: r.sign,    	<span class="comment">//</span></span><br><span class="line"><span class="attr">lts</span>: r.ts,		 	<span class="comment">//</span></span><br><span class="line"><span class="attr">bv</span>: r.bv,		 	<span class="comment">//</span></span><br><span class="line"><span class="attr">doctype</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line"><span class="attr">version</span>: <span class="string">&quot;2.1&quot;</span>,</span><br><span class="line"><span class="attr">keyfrom</span>: <span class="string">&quot;fanyi.web&quot;</span>,</span><br><span class="line"><span class="attr">action</span>: e || <span class="string">&quot;FY_BY_DEFAULT&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//找到了这个</span></span><br><span class="line">r = v.generateSaltSign(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//按照逻辑一路往上找，最后找到该函数</span></span><br><span class="line"><span class="comment">//函数返回的这4个参数就是我们需要的参数，参数的实现原理也在其中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;   <span class="comment">//e就是表示上面的n</span></span><br><span class="line">			<span class="keyword">var</span> t = n.md5(navigator.appVersion),    <span class="comment">//md5加密navigator.appVersion，‘navigator.appVersion’返回浏览器版本，可以在浏览器工作台打印看看，是固定的</span></span><br><span class="line">				r = <span class="string">&quot;&quot;</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime(),   <span class="comment">//获取时间戳，然后改为文本类型</span></span><br><span class="line">				i = r + <span class="built_in">parseInt</span>(<span class="number">10</span> * <span class="built_in">Math</span>.random(), <span class="number">10</span>);  <span class="comment">//r加上随机数1到10</span></span><br><span class="line">			<span class="keyword">return</span> &#123;   </span><br><span class="line">				<span class="attr">ts</span>: r,</span><br><span class="line">				<span class="attr">bv</span>: t,</span><br><span class="line">				<span class="attr">salt</span>: i,</span><br><span class="line">				<span class="attr">sign</span>: n.md5(<span class="string">&quot;fanyideskweb&quot;</span> + e + i + <span class="string">&quot;Y2FYu%TNSbMCxc3t2u^XT&quot;</span>)  <span class="comment">//md5加密</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br></pre></td></tr></table></figure>

<p>找到了参数的实现原理后，用python代码把这些参数重新实现一遍，然后就可以发送请求：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">input</span>(<span class="string">&quot;请输入&quot;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;SESSION_FROM_COOKIE=www.baidu.com; OUTFOX_SEARCH_USER_ID=-1154821063@117.162.66.74; JSESSIONID=aaaogRJYT3CYncQm3pCTx; OUTFOX_SEARCH_USER_ID_NCOO=1780673000.2103813; ___rl__test__cookies=1629341478311&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://fanyi.youdao.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timestamp = <span class="built_in">str</span>(time.time()*<span class="number">1000</span>)  <span class="comment">#时间戳，默认秒，转换成毫秒，转换文本型</span></span><br><span class="line">salt = timestamp + <span class="built_in">str</span>(random.randint(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">text = <span class="string">&quot;fanyideskweb&quot;</span> + n + salt + <span class="string">&quot;Y2FYu%TNSbMCxc3t2u^XT&quot;</span></span><br><span class="line">sign = hashlib.md5(text.encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()   <span class="comment">#md5加密后获取值</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;i&quot;</span>: n,</span><br><span class="line">    <span class="string">&quot;from&quot;</span>: <span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;to&quot;</span>: <span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;smartresult&quot;</span>: <span class="string">&quot;dict&quot;</span>,</span><br><span class="line">    <span class="string">&quot;client&quot;</span>: <span class="string">&quot;fanyideskweb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;salt&quot;</span>: salt,             <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;sign&quot;</span>: sign,             <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;lts&quot;</span>: timestamp,         <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;bv&quot;</span>: <span class="string">&quot;eda468fc64295ecf2810ab8a672c2db1&quot;</span>,    <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;doctype&quot;</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;2.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;keyfrom&quot;</span>: <span class="string">&quot;fanyi.web&quot;</span>,</span><br><span class="line">    <span class="string">&quot;action&quot;</span>: <span class="string">&quot;FY_BY_REALTlME&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.post(url, headers=headers, data=data)</span><br><span class="line">text = resp.text</span><br><span class="line">text = json.loads(text)</span><br><span class="line">fanyi = text.get(<span class="string">&quot;translateResult&quot;</span>)[<span class="number">0</span>][<span class="number">0</span>].get(<span class="string">&quot;tgt&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fanyi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="comment"># 请输入hello world</span></span><br><span class="line"><span class="comment"># 你好世界</span></span><br></pre></td></tr></table></figure>

<h3 id="自动识别验证码"><a href="#自动识别验证码" class="headerlink" title="自动识别验证码"></a>自动识别验证码</h3><p>自动识别验证码，这里使用的是打码平台。</p>
<p>以菲菲打码平台为例，网址：<a href="http://www.fateadm.com/">http://www.fateadm.com/</a></p>
<p>1，注册登入，付款买积分（不贵，用于学习足够）<br>2，“开发文档”—–&gt;”例子参考“—–&gt;”demo下载“—–&gt;”python3“—–&gt;“下载解压得到py文件，可以直接使用”<br>3，该py文件中，定义了API接口调用类“FateadmApi”。如果不会使用，下面还定义了测试函数“TestFunc”。复制测试函数，粘贴到新的py文件，稍作修改，自己定义相关接口。如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fateadm_api <span class="keyword">import</span> FateadmApi   <span class="comment">#导入API接口调用类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestFunc</span>(<span class="params">img_path,pred_type</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    验证码图片识别</span></span><br><span class="line"><span class="string">    :param img_path: 验证码图片路径</span></span><br><span class="line"><span class="string">    :param pred_type: 验证码图片类型，下面就类型说明</span></span><br><span class="line"><span class="string">    :return: 对应的验证码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pd_id           = <span class="string">&quot;***不方便展示***&quot;</span>     <span class="comment">#用户中心页可以查询到pd信息</span></span><br><span class="line">    pd_key          = <span class="string">&quot;***不方便展示***&quot;</span></span><br><span class="line">    app_id          = <span class="string">&quot;***不方便展示***&quot;</span>     <span class="comment">#开发者分成用的账号，在开发者中心可以查询到</span></span><br><span class="line">    app_key         = <span class="string">&quot;***不方便展示***&quot;</span></span><br><span class="line">    <span class="comment">#识别类型，</span></span><br><span class="line">    <span class="comment">#具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服</span></span><br><span class="line">    pred_type       = pred_type</span><br><span class="line">    api             = FateadmApi(app_id, app_key, pd_id, pd_key)</span><br><span class="line">    <span class="comment"># 查询余额</span></span><br><span class="line">    balance 		= api.QueryBalcExtend()   <span class="comment"># 直接返余额</span></span><br><span class="line">    <span class="comment"># api.QueryBalc()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过文件形式识别：</span></span><br><span class="line">    file_name       = img_path</span><br><span class="line">    <span class="comment"># 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6</span></span><br><span class="line">    <span class="comment"># result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果</span></span><br><span class="line">    rsp             = api.PredictFromFile(pred_type, file_name)  <span class="comment"># 直接返回详细识别结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rsp.pred_rsp.value   <span class="comment">#返回识别结果</span></span><br></pre></td></tr></table></figure>

<p>pd_id、pd_key、app_id、app_key要填写自己的，在用户中可以找到。参数：pred_type是验证码类型，在“开发文档”—–&gt;”类型说明”。img_path是验证码的图片路径。</p>
<p>使用例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fateadm_api_my <span class="keyword">import</span> TestFunc   <span class="comment">#导入自己定义的接口函数</span></span><br><span class="line"></span><br><span class="line">result = TestFunc(<span class="string">&quot;image.png&quot;</span>,<span class="string">&quot;30900&quot;</span>)  <span class="comment">#调用函数，参数：验证码图片路径、验证码类型</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<p>访问要填写验证码的网站时，需要保存该验证码的图片，然后导入并调用我们定义的接口函数，传入参数：验证码图片路径、验证码类型，返回验证码识别结果。识别结果有一定的几率识别错误。</p>
<p>如果某个打码平台用不了了，属于正常现象，不必惊奇。</p>
<h3 id="字体反爬"><a href="#字体反爬" class="headerlink" title="字体反爬"></a>字体反爬</h3><p>网页开发者自己创造一种字体，因为在字体中每个文字都有其代号，那么以后再网页中不会直接显示这个文字的最终效果，而是显示他的代号。因此即使获取到了网页中的文字内容，也只是获取到文字的代号，而不是文字本身。从而达到反爬目的。</p>
<p>因为创造字体费时费力，数量多也影响网页加载。一般情况下为了反爬，仅会针对0-9以及少数汉字单独创造，其他还是使用用户系统中自带的字体。</p>
<p>这里以爬取这个网址：<a href="https://su.58.com/qztech/%E4%B8%BA%E4%BE%8B%E5%AD%90%E3%80%82">https://su.58.com/qztech/为例子。</a></p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>在网页源代码中我们可以找到@font-face属性，@font-face属性中一般有两种情况：<br>1，字体被编码成base64方式，直接获取@font-face中base64后面的内容。<br>2，字体文件放到服务器上，在@font-face中可以找到其url，直接下载。</p>
<p><strong>分析字体</strong>：</p>
<p>分析字体时，需要将字体转换成xml文件和ttf文件。<br>xml文件：可查看里的cmap和glyf内容。cmap中储存code（就是文字的代号，网页源代码显示的代号）和name的映射关系。glyf中储存name和对应的字体绘制规则。<br>ttf文件：在xml中可以得到字体绘制规则，类似坐标的形式，但是不知道字体长什么样子。有一款软件FontCreator，可以打开ttf文件，能看到最终字体的呈现效果。（软件下载地址：<a href="https://www.high-logic.com/FontCreatorSetup-x64.exe">https://www.high-logic.com/FontCreatorSetup-x64.exe</a></p>
<p>分析字体其目的是为了得到真实的字体和其字体对应的字体绘制规则</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"><span class="comment"># font_face是被经过base64解码后的字符串，其本身就是一个字体文件</span></span><br><span class="line">font_face = <span class="string">&#x27;d09GRgABAAAAACEUAAsAAAAAK....8klH9vrSy9aNNlv0CLWhrggA=&#x27;</span>  <span class="comment">#@font-face中复制的，内容太多，省略。</span></span><br><span class="line"><span class="comment">#将font_face用base64解密，放到Bytes管道中，然后创建TTFont对象。</span></span><br><span class="line">baseFont = TTFont(io.BytesIO(base64.b64decode(font_face)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># onlineFont.saveXML(&quot;58.xml&quot;)  #将字体保存成xml文件</span></span><br><span class="line"><span class="comment"># onlineFont.save(&quot;58.ttf&quot;)     #将字体保存成ttf文件</span></span><br><span class="line"></span><br><span class="line">baseGlyf = baseFont[<span class="string">&quot;glyf&quot;</span>]   <span class="comment">#获取glyg内容：name和其对应的字体绘制规则</span></span><br><span class="line"><span class="comment">#通过分析字体，得到真实字体和其对应的字体绘制规则。</span></span><br><span class="line">baseFontMap = &#123;</span><br><span class="line">    <span class="string">&quot;0&quot;</span>:baseGlyf[<span class="string">&quot;uniE3D3&quot;</span>],</span><br><span class="line">    <span class="string">&quot;1&quot;</span>:baseGlyf[<span class="string">&quot;uniF4C8&quot;</span>],</span><br><span class="line">    <span class="string">&quot;2&quot;</span>:baseGlyf[<span class="string">&quot;uniEB1C&quot;</span>],</span><br><span class="line">    <span class="string">&quot;3&quot;</span>:baseGlyf[<span class="string">&quot;uniF843&quot;</span>],</span><br><span class="line">    <span class="string">&quot;4&quot;</span>:baseGlyf[<span class="string">&quot;uniEA7C&quot;</span>],</span><br><span class="line">    <span class="string">&quot;5&quot;</span>:baseGlyf[<span class="string">&quot;uniE90E&quot;</span>],</span><br><span class="line">    <span class="string">&quot;6&quot;</span>:baseGlyf[<span class="string">&quot;uniE881&quot;</span>],</span><br><span class="line">    <span class="string">&quot;7&quot;</span>:baseGlyf[<span class="string">&quot;uniE671&quot;</span>],</span><br><span class="line">    <span class="string">&quot;8&quot;</span>:baseGlyf[<span class="string">&quot;uniEEB6&quot;</span>],</span><br><span class="line">    <span class="string">&quot;9&quot;</span>:baseGlyf[<span class="string">&quot;uniE295&quot;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>font-face的字体内容每次访问都不一样，所以上面的代码只是为了得到“baseFontMap”：真实字体和其对应的字体绘制规则的映射</p>
<p>代码实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comp</span>(<span class="params">shape_1, shape_2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    传入两个字体的绘制规则，判断这两个字体绘制的各个坐标的差异是否小于某某范围，一般40以内。匹配不到可扩大范围，出现乱匹配可缩小范围。</span></span><br><span class="line"><span class="string">    :param shape_1: 字体绘制规则1</span></span><br><span class="line"><span class="string">    :param shape_2: 字体绘制规则2</span></span><br><span class="line"><span class="string">    :return: True:各个坐标差异小于指定范围； False:各个坐标差异大于指定范围</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取字体绘制规则的坐标详情</span></span><br><span class="line">    shape_1 = shape_1.coordinates</span><br><span class="line">    shape_2 = shape_2.coordinates</span><br><span class="line">    <span class="comment"># 判断两个字体绘制规则的坐标个数是否一样</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(shape_1) == <span class="built_in">len</span>(shape_2):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(shape_1)):</span><br><span class="line">            <span class="comment"># 判断两个字体绘制规则相应的坐标，差异的范围是否在指定范围内。</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(shape_1[i][<span class="number">0</span>]-shape_2[i][<span class="number">0</span>])&gt;<span class="number">70</span> <span class="keyword">or</span> <span class="built_in">abs</span>(shape_1[i][<span class="number">1</span>]-shape_2[i][<span class="number">1</span>])&gt;<span class="number">70</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    font_face = <span class="string">&#x27;d09GRgABAAAAAC...aNNlv0CLWhrggA=&#x27;</span>   <span class="comment">##@font-face中复制的，内容太多，省略。</span></span><br><span class="line">    baseFont = TTFont(io.BytesIO(base64.b64decode(font_face)))</span><br><span class="line">    baseGlyf = baseFont[<span class="string">&quot;glyf&quot;</span>]</span><br><span class="line">    <span class="comment"># 得到真实字体和其对应的字体绘制规则的映射</span></span><br><span class="line">    baseFontMap = &#123;</span><br><span class="line">        <span class="string">&quot;0&quot;</span>:baseGlyf[<span class="string">&quot;uniE3D3&quot;</span>],</span><br><span class="line">        <span class="string">&quot;1&quot;</span>:baseGlyf[<span class="string">&quot;uniF4C8&quot;</span>],</span><br><span class="line">        <span class="string">&quot;2&quot;</span>:baseGlyf[<span class="string">&quot;uniEB1C&quot;</span>],</span><br><span class="line">        <span class="string">&quot;3&quot;</span>:baseGlyf[<span class="string">&quot;uniF843&quot;</span>],</span><br><span class="line">        <span class="string">&quot;4&quot;</span>:baseGlyf[<span class="string">&quot;uniEA7C&quot;</span>],</span><br><span class="line">        <span class="string">&quot;5&quot;</span>:baseGlyf[<span class="string">&quot;uniE90E&quot;</span>],</span><br><span class="line">        <span class="string">&quot;6&quot;</span>:baseGlyf[<span class="string">&quot;uniE881&quot;</span>],</span><br><span class="line">        <span class="string">&quot;7&quot;</span>:baseGlyf[<span class="string">&quot;uniE671&quot;</span>],</span><br><span class="line">        <span class="string">&quot;8&quot;</span>:baseGlyf[<span class="string">&quot;uniEEB6&quot;</span>],</span><br><span class="line">        <span class="string">&quot;9&quot;</span>:baseGlyf[<span class="string">&quot;uniE295&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 去爬取网页</span></span><br><span class="line">    url = <span class="string">&quot;https://su.58.com/qztech/&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;f=n; commoer=101...&#x27;</span>,   <span class="comment">#直接复制的cookie，内容太多，省略。</span></span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://passport.58.com/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resp = requests.get(url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    <span class="comment"># 获取font_face内容</span></span><br><span class="line">    font_face = re.search(<span class="string">&quot;@font-face.+?base64,(.+?)\)&quot;</span>,text,re.DOTALL).group(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 创建TTFont对象</span></span><br><span class="line">    currentFont = TTFont(io.BytesIO(base64.b64decode(font_face)))</span><br><span class="line">    <span class="comment">#获取cmap内容，即code和name的映射</span></span><br><span class="line">    currentCmap = currentFont.getBestCmap()</span><br><span class="line">    <span class="comment">#获取glyf内容，即name和字体绘制规则的映射</span></span><br><span class="line">    currentGlyf = currentFont[<span class="string">&quot;glyf&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> code,name <span class="keyword">in</span> currentCmap.items():</span><br><span class="line">        <span class="comment"># 当前网页的字体绘制规则</span></span><br><span class="line">        currentShape = currentGlyf[name]</span><br><span class="line">        <span class="keyword">for</span> font,shape <span class="keyword">in</span> baseFontMap.items():</span><br><span class="line">            <span class="comment">#1，如果字体绘制规则不变，可以这样写，直接相等。则说明code对应其font</span></span><br><span class="line">            <span class="comment">#if shape == currentShape:</span></span><br><span class="line">            <span class="comment">#2，如果字体绘制规则每次访问时都会略微改变，判断对应的坐标改变在某某范围以内，则视为同一字体。则说明code对应其font</span></span><br><span class="line">            <span class="keyword">if</span> comp(shape, currentShape):</span><br><span class="line">                <span class="comment">#把code转换成网页源代码上显示的格式，把code（十进制）转十六进制，然后把开头的“0”改为“&amp;#”，然后末尾加“;”</span></span><br><span class="line">                code = <span class="built_in">str</span>(<span class="built_in">hex</span>(code)).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&quot;&amp;#&quot;</span>,<span class="number">1</span>) + <span class="string">&quot;;&quot;</span></span><br><span class="line">                text = re.sub(code,font,text)</span><br><span class="line">    <span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC和XML</title>
    <url>/2022/03/27/JDBC%E5%92%8CXML/</url>
    <content><![CDATA[<p>一篇个人笔记，介绍了java怎么连接mysql数据库等知识。。</p>
<span id="more"></span>

<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p><strong>概念</strong></p>
<p>JDBC(Java Data Base Connectivity) 是 Java 访问数据库的标准规范.是一种用于执行SQL语句的Java API，可以为<br>多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。是Java访问数据库的标准规范.</p>
<p><strong>原理</strong></p>
<p> JDBC是接口，驱动是接口的实现，没有驱动将无法完成数据库连接，从而不能操作数据库！每个数据库厂商都需<br>要提供自己的驱动，用来连接自己公司的数据库，也就是说驱动一般都由数据库生成厂商提供。</p>
<p><a href="https://imgtu.com/i/q0CUNd"><img src="https://s1.ax1x.com/2022/03/27/q0CUNd.png" alt="q0CUNd.png"></a></p>
<p><strong>总结</strong></p>
<p> JDBC就是由sun公司定义的一套操作所有关系型数据库的规则(接口)，而数据库厂商需要实现这套接口,提供数据库<br>驱动jar包, 我们可以使用这套接口编程,真正执行的代码是对应驱动包中的实现类。</p>
<h2 id="JDBC开发"><a href="#JDBC开发" class="headerlink" title="JDBC开发"></a>JDBC开发</h2><p>1，将MySQL驱动包添加到jar包库文件夹中，Myjar文件夹,用于存放当前项目需要的所有jar包<br>包：mysql-connector-java-5.1.37-bin.jar</p>
<p>2，在 idea中 配置jar包库的位置</p>
<p><a href="https://imgtu.com/i/q0PcM6"><img src="https://s1.ax1x.com/2022/03/27/q0PcM6.png" alt="q0PcM6.png"></a></p>
<p>3，项目中, 配置jar包库</p>
<p><a href="https://imgtu.com/i/q0PzJs"><img src="https://s1.ax1x.com/2022/03/27/q0PzJs.png" alt="q0PzJs.png"></a></p>
<p><strong>流程</strong></p>
<p><strong>1，注册驱动（可省略）</strong></p>
<p>JDBC规范定义驱动接口： java.sql.Driver<br>MySql驱动包提供了实现类： com.mysql.jdbc.Driver</p>
<table>
<thead>
<tr>
<th>加载注册驱动的方式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Class.forName(数据库驱动实现类)</td>
<td>加载和注册数据库驱动,数据库驱动由数据库厂商MySql提供   “com.mysql.jdbc.Driver”</td>
</tr>
</tbody></table>
<p>代码：Class.forName(“com.mysql.jdbc.Driver”);</p>
<p><strong>2，获取连接</strong></p>
<p>Connection 接口，代表一个连接对象 ,具体的实现类由数据库的厂商实现<br>使用 DriverManager类的静态方法,getConnection可以获取数据库的连接</p>
<table>
<thead>
<tr>
<th>DriverManager类的静态方法获取连接</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Connection  getConnection(String url, String user, String password)</td>
<td>通过连接字符串和用户名,密码来获取数据库连接对象</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>连接参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>user</td>
<td>登录用户名</td>
</tr>
<tr>
<td>password</td>
<td>登录密码</td>
</tr>
<tr>
<td>url</td>
<td>mySql  URL的格式   jdbc:mysql://localhost:3306/db4?characterEncoding=UTF-8</td>
</tr>
</tbody></table>
<p><a href="https://imgtu.com/i/q0i4mT"><img src="https://s1.ax1x.com/2022/03/27/q0i4mT.png" alt="q0i4mT.png"></a></p>
<p><strong>3，获取语句执行平台Statement</strong></p>
<p>通过Connection 的 createStatement方法 获取sql语句执行对象</p>
<table>
<thead>
<tr>
<th>Connection接口中的方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Statement createStatement()</td>
<td>创建  SQL语句执行对象</td>
</tr>
</tbody></table>
<p><strong>4， 利用语句执行平台Statement，执行语句</strong></p>
<table>
<thead>
<tr>
<th>Statement类 常用方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int executeUpdate(String sql);</td>
<td>执行insert  update delete语句.返回int类型,代表受影响的行  数</td>
</tr>
<tr>
<td>ResultSet executeQuery(String sql);</td>
<td>执行select语句, 返回ResultSet结果集对象</td>
</tr>
</tbody></table>
<p><strong>5，如果是查询语句，需要对ResultSet结果集处理</strong></p>
<table>
<thead>
<tr>
<th>ResultSet接口方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>boolean next()</td>
<td>1) 游标向下一行   2) 返回 boolean 类型，如果还有下一条记录，返回  true，否则返回 false</td>
</tr>
<tr>
<td>xxx getXxx( String or int)</td>
<td>1) 通过列名，参数是 String 类型。返回不同的类型   2) 通过列号，参数是整数，从 1 开始。返回不同的类型</td>
</tr>
</tbody></table>
<p><strong>6，关闭资源</strong></p>
<p>先开的后关，后开的先关。ResultSet ==&gt; Statement ==&gt; Connection</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Connection con = <span class="keyword">null</span>;</span><br><span class="line">    Statement statement = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1，注册驱动（可省略）</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2，获取连接</span></span><br><span class="line">        String s = <span class="string">&quot;jdbc:mysql://localhost:3306/de?characterEncoding=UTF-8&quot;</span>;</span><br><span class="line">        con = DriverManager.getConnection(s, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3，获取语句执行平台Statement</span></span><br><span class="line">        statement = con.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4，通过Statement执行增删改sql语句</span></span><br><span class="line">        String sql = <span class="string">&quot;update account set userName = &#x27;小李&#x27; where id = 1&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> ia = statement.executeUpdate(sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + ia);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5,通过Statement执行查询sql语句，返回结果集ResultSet</span></span><br><span class="line">        sql = <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">        result = statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//处理ResultSet结果集对象</span></span><br><span class="line">        <span class="keyword">while</span>(result.next())&#123;</span><br><span class="line">            <span class="keyword">int</span> id = result.getInt(<span class="string">&quot;id&quot;</span>);     <span class="comment">//参数为字符串，表示字段名称</span></span><br><span class="line">            String bankNo = result.getString(<span class="string">&quot;bankNo&quot;</span>);</span><br><span class="line">            String userName = result.getString(<span class="number">3</span>);  <span class="comment">//参数为数字，表示字段号</span></span><br><span class="line">            <span class="keyword">int</span> money = result.getInt(<span class="number">4</span>);</span><br><span class="line">            System.out.println(id + <span class="string">&quot;:&quot;</span> + bankNo + <span class="string">&quot;:&quot;</span> + userName + <span class="string">&quot;:&quot;</span> + money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//6，关闭资源</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result.close();</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤总结</strong></p>
<ol>
<li>   获取驱动(可以省略)</li>
<li>   获取连接</li>
<li>   获取Statement对象</li>
<li>   Statement对象执行sql</li>
<li>   处理结果集(只在查询时处理)</li>
<li>   释放资源</li>
</ol>
<h2 id="JDBC工具类"><a href="#JDBC工具类" class="headerlink" title="JDBC工具类"></a>JDBC工具类</h2><p>如果一个功能经常要用到，我们建议把这个功能做成一个工具类，可以在不同的地方重用。</p>
<p>“获得数据库连接”操作，将在以后的增删改查所有功能中都存在，可以封装工具类JDBCUtils。提供获取连接对象的方法，从而达到代码的重复利用。</p>
<p>工具类包含的内容</p>
<ol>
<li>   可以把几个字符串定义成常量：用户名，密码，URL，驱动类 </li>
<li>   得到数据库的连接：getConnection() </li>
<li>   关闭所有打开的资源：close()，如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*    JDBC的工具类</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 定义字符串常量, 记录获取连接所需要的信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVERNAME = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/de?characterEncoding=UTF-8&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PWD = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2，注册驱动，static代码块随着类的加载而加载</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(DRIVERNAME);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = DriverManager.getConnection(URL, USER, PWD);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> con;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭资源2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement, ResultSet result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result.close();</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试JDBC工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtilsTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 增删改操作</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span>  <span class="comment">//@Test标注，可以直接执行该方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection con = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">//获取Statement</span></span><br><span class="line">        Statement statement = con.createStatement();</span><br><span class="line">        <span class="comment">//Statement执行sql</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into account values (null, &#x27;555&#x27;, &#x27;老丁&#x27;, 1000)&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> ia = statement.executeUpdate(sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + ia);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        JDBCUtils.close(con, statement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 查询操作</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection con = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">//获取Statement</span></span><br><span class="line">        Statement statement = con.createStatement();</span><br><span class="line">        <span class="comment">//执行sql</span></span><br><span class="line">        String sql = <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">        ResultSet result = statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//处理结果集ResultSet</span></span><br><span class="line">        <span class="keyword">while</span>(result.next())&#123;</span><br><span class="line">            <span class="keyword">int</span> id = result.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            String bankNo = result.getString(<span class="string">&quot;bankNo&quot;</span>);</span><br><span class="line">            String userName = result.getString(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">int</span> money = result.getInt(<span class="number">4</span>);</span><br><span class="line">            System.out.println(id + <span class="string">&quot;:&quot;</span> + bankNo + <span class="string">&quot;:&quot;</span> + userName + <span class="string">&quot;:&quot;</span> + money);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        JDBCUtils.close(con, statement, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><h3 id="sql注入问题"><a href="#sql注入问题" class="headerlink" title="sql注入问题"></a>sql注入问题</h3><p>假设查询用户名tom和密码123</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> jdbc_user <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;tom&#x27;</span> <span class="keyword">AND</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>用户名和密码都匹配才能查询到该用户的信息，假如代码如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> jdbc_user <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;随便填&#x27;</span> <span class="keyword">AND</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;随便填&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这样，一定能查询出结果。</p>
<p>如果这是一个登陆操作,那么用户就登陆成功了.显然这不是我们想要看到的结果</p>
<p><strong>sql注入问题案例</strong></p>
<p>需求：用户在控制台上输入用户名和卡号, 然后使用 Statement 字符串拼接的方式 实现用户的登录。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = JDBCUtils.getConnection();</span><br><span class="line">    <span class="comment">//获取Statement</span></span><br><span class="line">    Statement statement = con.createStatement();</span><br><span class="line">    <span class="comment">//输入用户名，卡号</span></span><br><span class="line">    System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    String user = sc.nextLine();</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入卡号：&quot;</span>);    <span class="comment">//1&#x27; or &#x27;1&#x27; = &#x27;1</span></span><br><span class="line">    String bankNo = sc.nextLine();</span><br><span class="line">    <span class="comment">//sql语句由字符串拼接而成，会引发注入问题</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from account where userName = &#x27;&quot;</span> + user + <span class="string">&quot;&#x27; and bankNo = &#x27;&quot;</span> + bankNo + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">    ResultSet result = statement.executeQuery(sql);</span><br><span class="line">    <span class="comment">//能否查询到</span></span><br><span class="line">    <span class="keyword">if</span>(result.next())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登入成功！欢迎使用&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登入失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    JDBCUtils.close(con, statement, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行程序，输入正确的用户名和卡号，能登入，错误的不能登入。但是用户名随便输入，卡号输入：1’ or ‘1’ = ‘1，依旧能成功登入。因为改变了原来sql的意思。</p>
<h3 id="预处理对象"><a href="#预处理对象" class="headerlink" title="预处理对象"></a>预处理对象</h3><p><strong>PreparedStatement 接口介绍</strong></p>
<ul>
<li>PreparedStatement 是 Statement 接口的子接口，继承于父接口中所有的方法。它是一个预编译的 SQL 语句对象.</li>
<li>预编译:  是指SQL 语句被预编译,并存储在 PreparedStatement 对象中。然后可以使用此对象多次高效地执行该语句</li>
</ul>
<p><strong>PreparedStatement特点</strong></p>
<p>因为有预先编译的功能，提高 SQL 的执行效率。可以有效的防止 SQL 注入的问题，安全性更高</p>
<p><strong>获取PrepareStatement对象</strong></p>
<table>
<thead>
<tr>
<th>Connection  接口中的方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>PreparedStatement  prepareStatement(String sql)</td>
<td>指定预编译的  SQL 语句，   SQL 语句中使用占位符 ? 创建一个语句对象</td>
</tr>
</tbody></table>
<p> <strong>PreparedStatement接口常用方法</strong></p>
<p>设置sql里”?“占位符的值</p>
<table>
<thead>
<tr>
<th>setXxx重载方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void setDouble(int parameterIndex, double x)</td>
<td>将指定参数设置为给定  Java double 值。</td>
</tr>
<tr>
<td>void setInt(int parameterIndex, int x)</td>
<td>将指定参数设置为给定  Java int 值。</td>
</tr>
<tr>
<td>void setString(int parameterIndex, String x)</td>
<td>将指定参数设置为给定  Java String 值。</td>
</tr>
<tr>
<td>void setObject(int parameterIndex, Object x)</td>
<td>使用给定对象设置指定参数的值。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>常用方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int executeUpdate();</td>
<td>执行insert  update delete语句.</td>
</tr>
<tr>
<td>ResultSet executeQuery();</td>
<td>执行select语句. 返回结果集对象  Resulet</td>
</tr>
</tbody></table>
<p>根据上面有sql注入问题的代码进行修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = JDBCUtils.getConnection();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取prepareStatement, ?表示占位符，预输入避免注入问题</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from account where userName = ? and bankNo = ?&quot;</span>;</span><br><span class="line">    PreparedStatement ps = con.prepareStatement(sql);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输入用户名，卡号</span></span><br><span class="line">    System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    String user = sc.nextLine();</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入卡号：&quot;</span>);</span><br><span class="line">    String bankNo = sc.nextLine();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置占位符的值</span></span><br><span class="line">    ps.setString(<span class="number">1</span>, user);</span><br><span class="line">    ps.setString(<span class="number">2</span>, bankNo);</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">    ResultSet result = ps.executeQuery();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//能否查询到</span></span><br><span class="line">    <span class="keyword">if</span>(result.next())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登入成功！欢迎使用&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登入失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    JDBCUtils.close(con, ps, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>原理</strong></p>
<p><a href="https://imgtu.com/i/q0AI78"><img src="https://s1.ax1x.com/2022/03/27/q0AI78.png" alt="q0AI78.png"></a></p>
<p><strong>区别</strong></p>
<p>1，Statement用于执行静态SQL语句，在执行时，必须指定一个事先准备好的SQL语句。</p>
<p>2，PrepareStatement是预编译的SQL语句对象，语句中可以包含动态参数“?”，在执行时可以为“?”动态设置参数值。</p>
<p>3，PrepareStatement可以减少编译次数提高数据库性能</p>
<h2 id="JDBC控制事务"><a href="#JDBC控制事务" class="headerlink" title="JDBC控制事务"></a>JDBC控制事务</h2><p>Connection中的方法实现事务管理</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void setAutoCommit(boolean autoCommit)</td>
<td>参数是  true 或 false  如果设置为 false，表示关闭自动提交，相当于开启事务</td>
</tr>
<tr>
<td>void commit()</td>
<td>提交事务</td>
</tr>
<tr>
<td>void rollback()</td>
<td>回滚事务</td>
</tr>
</tbody></table>
<p><strong>步骤</strong></p>
<ol>
<li>   获取连接 </li>
<li>   开启事务 </li>
<li>   获取到 PreparedStatement , 执行两次更新操作 </li>
<li>   正常情况下提交事务 </li>
<li>   出现异常回滚事务 </li>
<li>   最后关闭资源 </li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Connection con = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        con = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        con.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转账1：小李-500</span></span><br><span class="line">        ps = con.prepareStatement(<span class="string">&quot;update account set money=money-? where userName=?&quot;</span>);</span><br><span class="line">        ps.setInt(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">        ps.setString(<span class="number">2</span>, <span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//假设异常</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转账2：老丁+500</span></span><br><span class="line">        ps = con.prepareStatement(<span class="string">&quot;update account set money=money+? where userName=?&quot;</span>);</span><br><span class="line">        ps.setInt(<span class="number">1</span>, <span class="number">500</span>);</span><br><span class="line">        ps.setString(<span class="number">2</span>, <span class="string">&quot;老丁&quot;</span>);</span><br><span class="line">        ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        con.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//出现异常，回滚事务</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        JDBCUtils.close(con, ps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><p>实际开发中“获得连接”或“释放资源”是非常消耗系统资源的两个过程，为了解决此类性能问题，通常情况我们<br>采用连接池技术，来共享连接Connection。这样我们就不需要每次都创建连接、释放连接了，这些操作都交<br>给了连接池.</p>
<p>优点：用池来管理Connection，这样可以重复使用Connection。 当使用完Connection后，调用Connection的<br>close()方法也不会真的关闭Connection，而是把Connection“归还”给池。</p>
<p>区别：</p>
<p>JDBC方式</p>
<p><a href="https://imgtu.com/i/LPFLgU"><img src="https://s1.ax1x.com/2022/04/09/LPFLgU.png" alt="LPFLgU.png"></a></p>
<p>连接池方式</p>
<p><a href="https://imgtu.com/i/LPFxb9"><img src="https://s1.ax1x.com/2022/04/09/LPFxb9.png" alt="LPFxb9.png"></a></p>
<p>Java为数据库连接池提供了公共的接口：<strong>javax.sql.DataSource</strong>，各个厂商需要让自己的连接池实现这个接口。</p>
<p>这样应用程序可以方便的切换不同厂商的连接池！</p>
<p>常见的连接池有 DBCP连接池, C3P0连接池, Druid连接池。</p>
<h2 id="DBCP连接池"><a href="#DBCP连接池" class="headerlink" title="DBCP连接池"></a>DBCP连接池</h2><p> DBCP也是一个开源的连接池，是Apache成员之一，在企业开发中也比较常见，tomcat内置的连接池。</p>
<p><strong>创建项目，导入jar包</strong></p>
<p><a href="https://imgtu.com/i/LPku5t"><img src="https://s1.ax1x.com/2022/04/09/LPku5t.png" alt="LPku5t.png"></a></p>
<p><strong>编写工具类</strong></p>
<p>Java中提供了一个连接池的规则接口 ： DataSource , 它是java中提供的连接池</p>
<p>在DBCP包中提供了DataSource接口的实现类，我们要用的具体的连接池 BasicDataSource 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  DBCP数据库连接池的工具类</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBCPUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.定义常量 保存数据库连接的相关信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVERNAME = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/de?characterEncoding=UTF-8&amp;rewriteBatchedStatements=true&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PWD = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建连接池对象 (有DBCP提供的实现类)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BasicDataSource dataSource = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.使用静态代码块进行配置</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        dataSource.setDriverClassName(DRIVERNAME);</span><br><span class="line">        dataSource.setUrl(URL);</span><br><span class="line">        dataSource.setUsername(USER);</span><br><span class="line">        dataSource.setPassword(PWD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.获取连接的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.释放资源方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement, ResultSet result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result.close();</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接池对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSources</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = DBCPUtils.getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Statement,并执行sql</span></span><br><span class="line">    PreparedStatement ps = con.prepareStatement(<span class="string">&quot;select * from account where id = ?&quot;</span>);</span><br><span class="line">    ps.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">    ResultSet resultSet = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理结果集</span></span><br><span class="line">    <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">        String userName = resultSet.getString(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    DBCPUtils.close(con, ps, resultSet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>常见的配置项</strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>driverClassName</td>
<td>数据库驱动名称</td>
</tr>
<tr>
<td>url</td>
<td>数据库地址</td>
</tr>
<tr>
<td>username</td>
<td>用户名</td>
</tr>
<tr>
<td>password</td>
<td>密码</td>
</tr>
<tr>
<td>maxActive</td>
<td>最大连接数量</td>
</tr>
<tr>
<td>maxIdle</td>
<td>最大空闲连接</td>
</tr>
<tr>
<td>minIdle</td>
<td>最小空闲连接</td>
</tr>
<tr>
<td>initialSize</td>
<td>初始化连接</td>
</tr>
</tbody></table>
<h2 id="C3P0连接池"><a href="#C3P0连接池" class="headerlink" title="C3P0连接池"></a>C3P0连接池</h2><p>C3P0是一个开源的JDBC连接池,支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate、Spring等。</p>
<p><strong>导入jar包</strong></p>
<p><a href="https://imgtu.com/i/LPkbdA"><img src="https://s1.ax1x.com/2022/04/09/LPkbdA.png" alt="LPkbdA.png"></a></p>
<p><strong>导入配置文件 c3p0-confifig.xml</strong></p>
<p>c3p0-config.xml 文件名不可更改</p>
<p>直接放到src下,也可以放到到资源文件夹中，这里我们 在项目下创建一个resource文件夹(专门存放资源文件)，选择文件夹,右键 将resource文件夹指定为资源文件夹，将文件放在resource目录下即可,创建连接池对象的时候会去加载这个配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--默认配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span>  </span><br><span class="line">	</span><br><span class="line">		<span class="comment">&lt;!-- initialPoolSize：初始化时获取三个连接，</span></span><br><span class="line"><span class="comment">			  取值应在minPoolSize与maxPoolSize之间。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- maxIdleTime：最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdleTime&quot;</span>&gt;</span>60<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- maxPoolSize：连接池中保留的最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">		<span class="comment">&lt;!-- minPoolSize: 连接池中保留的最小连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">		</span><br><span class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">   <span class="comment">&lt;!--配置连接池mysql--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/de?characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>rewriteBatchedStatements=true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdleTime&quot;</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接池2,可以配置多个--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>编写C3P0工具类</strong></p>
<p>C3P0提供的核心工具类ComboPooledDataSource , 如果想使用连接池,就必须创建该类的对象</p>
<p>new ComboPooledDataSource(); 使用 默认配置<br>new ComboPooledDataSource(“mysql”); 使用命名配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建连接池对象 C3P0对DataSource接口的实现类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement, ResultSet resultSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resultSet.close();</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接池对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSources</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = C3P0Utils.getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Statement,并执行sql</span></span><br><span class="line">    PreparedStatement ps = con.prepareStatement(<span class="string">&quot;select * from account where id = ?&quot;</span>);</span><br><span class="line">    ps.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">    ResultSet resultSet = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理结果集</span></span><br><span class="line">    <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">        String userName = resultSet.getString(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    C3P0Utils.close(con, ps, resultSet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常见配置</p>
<p><a href="https://imgtu.com/i/LPAYQO"><img src="https://s1.ax1x.com/2022/04/09/LPAYQO.png" alt="LPAYQO.png"></a></p>
<h2 id="Druid连接池"><a href="#Druid连接池" class="headerlink" title="Druid连接池"></a>Druid连接池</h2><p> Druid（德鲁伊）是阿里巴巴开发的号称为监控而生的数据库连接池，Druid是目前最好的数据库连接池。在功<br>能、性能、扩展性方面，都超过其他数据库连接池，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行<br>情况。</p>
<p><strong>导入jar包</strong></p>
<p><a href="https://imgtu.com/i/LPABFI"><img src="https://s1.ax1x.com/2022/04/09/LPABFI.png" alt="LPABFI.png"></a></p>
<p><strong>导入配置文件</strong></p>
<p>是properties形式的<br>可以叫任意名称，可以放在任意目录下,我们统一放到 resources资源目录</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/de?characterEncoding=UTF-8&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure>

<p><strong>编写Druid工具类</strong></p>
<p>获取数据库连接池对象：</p>
<p>​        通过工厂类来获取, DruidDataSourceFactory类的createDataSource方法<br>​        createDataSource(Properties p) 方法参数可以是一个属性集对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.定义成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//3.创建属性集对象</span></span><br><span class="line">            Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//4.加载配置文件 Druid 连接池不能够主动加载配置文件 ,需要指定文件</span></span><br><span class="line">            InputStream inputStream = DruidUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">            <span class="comment">//5. 使用Properties对象的 load方法 从字节流中读取配置信息</span></span><br><span class="line">            p.load(inputStream);</span><br><span class="line">            <span class="comment">//6. 通过工厂类获取连接池对象</span></span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(p);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, Statement statement, ResultSet resultSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resultSet.close();</span><br><span class="line">            statement.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接池对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSources</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = DruidUtils.getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Statement,并执行sql</span></span><br><span class="line">    PreparedStatement ps = con.prepareStatement(<span class="string">&quot;select * from account where id = ?&quot;</span>);</span><br><span class="line">    ps.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">    ResultSet resultSet = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理结果集</span></span><br><span class="line">    <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">        String userName = resultSet.getString(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    DruidUtils.close(con, ps, resultSet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h1><p>使用JDBC我们发现冗余的代码太多了,为了简化开发 我们选择使用 DbUtils</p>
<p> Commons DbUtils是Apache组织提供的一个对JDBC进行简单封装的开源工具类库，使用它能够简化JDBC应用程<br>序的开发，同时也不会影响程序的性能。</p>
<p>导入jara包：DBUtils就是JDBC的简化开发工具包。需要项目导入commons-dbutils-1.6.jar。</p>
<p><strong>核心功能</strong></p>
<ol>
<li>QueryRunner 中提供对sql语句操作的API.</li>
<li>ResultSetHandler接口，用于定义select操作后，怎样封装结果集. </li>
<li>DbUtils类,他就是一个工具类,定义了关闭资源与事务处理相关方法.</li>
</ol>
<p><strong>相关知识介绍</strong></p>
<p><strong>表和类之间的关系：</strong></p>
<ul>
<li>整个表可以看做是一个类</li>
<li>表中的一列,对应类中的一个成员属性</li>
<li>表中的一行记录,对应一个类的实例(对象)</li>
</ul>
<p><a href="https://imgtu.com/i/LPEGAs"><img src="https://s1.ax1x.com/2022/04/09/LPEGAs.png" alt="LPEGAs.png"></a></p>
<p><strong>JavaBean组件</strong></p>
<p>JavaBean 就是一个类, 开发中通常用于封装数据,有一下特点</p>
<ol>
<li>需要实现 序列化接口, Serializable (暂时可以省略)</li>
<li> 提供私有字段: private 类型 变量名; </li>
<li>提供共有的 getter 和 setter</li>
<li>提供 空参构造</li>
</ol>
<p>创建Account类和数据库的Account表对应，我们可以创建一个 entity包,专门用来存放 JavaBean类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * account表对应的JavaBean类</span></span><br><span class="line"><span class="comment"> * 规则：</span></span><br><span class="line"><span class="comment"> * 1. 需要实现 序列化接口, Serializable (暂时可以省略) </span></span><br><span class="line"><span class="comment"> * 2. 提供私有字段: private 类型 变量名; </span></span><br><span class="line"><span class="comment"> * 3. 提供 getter 和 setter</span></span><br><span class="line"><span class="comment"> * 4. 提供 空参构造</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供私有字段: private 类型 变量名;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String bankNo;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供 getter 和 setter</span></span><br><span class="line">	<span class="comment">// ...............</span></span><br><span class="line">    <span class="comment">//...... </span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, bankNo=&#x27;&quot;</span> + bankNo + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h2><p><strong>QueryRunner核心类</strong></p>
<p>构造方法：</p>
<p>QueryRunner()，手动模式<br>QueryRunner(DataSource ds) ,参数：数据源（连接池对象），DBUtils底层自动维护连接connection，自动模式</p>
<p>常用方法：</p>
<p>update(Connection con, String sql, Object… params) ，用来完成表数据的增加、删除、更新操作</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Connection con</td>
<td>数据库连接对象, 自动模式创建QueryRun  可以不传 ,手动模式必须传递</td>
</tr>
<tr>
<td>String sql</td>
<td>占位符形式的SQL ,使用 ?  号占位符</td>
</tr>
<tr>
<td>Object… param</td>
<td>Object类型的 可变参,用来设置占位符上的参数</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 增</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1，获取QueryRunner对象，手动模式，无参构造方法</span></span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2，QureyRunner对象的update方法执行增删改sql</span></span><br><span class="line">    <span class="comment">//参数：连接对象</span></span><br><span class="line">    Connection con = DruidUtils.getConnection();</span><br><span class="line">    <span class="comment">//参数：sql语句</span></span><br><span class="line">    String sql = <span class="string">&quot;insert into account values (?, ?, ?, ?)&quot;</span>;</span><br><span class="line">    <span class="comment">//参数：设置sql占位符的参数</span></span><br><span class="line">    Object[] param = &#123;<span class="number">10</span>, <span class="string">&quot;1515&quot;</span>, <span class="string">&quot;老丁&quot;</span>, <span class="number">1500</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    qr.update(con, sql, param);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 删</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1，获取QueryRunner对象，自动模式，有参构造方法，参数:数据库连接池对象</span></span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSources());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2，QureyRunner对象的update方法执行增删改sql</span></span><br><span class="line">    <span class="comment">//参数：sql语句</span></span><br><span class="line">    String sql = <span class="string">&quot;delete from account where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    qr.update(sql, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 改</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1，获取QueryRunner对象，自动模式，有参构造方法，参数:数据库连接池对象</span></span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSources());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2，QureyRunner对象的update方法执行增删改sql</span></span><br><span class="line">    <span class="comment">//参数：sql语句</span></span><br><span class="line">    String sql = <span class="string">&quot;update account set userName = ? where id = ?&quot;</span>;</span><br><span class="line">    <span class="comment">//参数：设置sql占位符的参数</span></span><br><span class="line">    Object[] param = &#123;<span class="string">&quot;老鸟&quot;</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    qr.update(sql, param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><p>QueryRunner核心类的query(Connection con, String sql, ResultSetHandler<T> rsh, Object… params) 方法，用来完成表数据的查询操作</p>
<p><strong>ResultSetHandler接口</strong></p>
<p>ResultSetHandler可以对查询出来的ResultSet结果集进行处理，达到一些业务上的需求。</p>
<p><strong>ResultSetHandler 结果集处理类</strong></p>
<table>
<thead>
<tr>
<th>ResultSetHandler  实现类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>ArrayHandler</strong></td>
<td>将结果集中的第一条记录封装到一个Object[]数组中，数组中的每一个元素就是这条记录中的每一个字段的值</td>
</tr>
<tr>
<td><strong>ArrayListHandler</strong></td>
<td>将结果集中的每一条记录都封装到一个Object[]数组中，将这些数组在封装到List集合中。</td>
</tr>
<tr>
<td><strong>BeanHandler</strong></td>
<td>将结果集中第一条记录封装到一个指定的javaBean中.</td>
</tr>
<tr>
<td><strong>BeanListHandler</strong></td>
<td>将结果集中每一条记录封装到指定的javaBean中，再将这些javaBean在封装到List  集合中</td>
</tr>
<tr>
<td>ColumnListHandler</td>
<td>将结果集中指定的列的字段值，封装到一个List集合中</td>
</tr>
<tr>
<td>KeyedHandler</td>
<td>将结果集中每一条记录封装到Map&lt;String,Object&gt;,在将这个map集合做为另一个  Map的value,另一个Map集合的key是指定的字段的值。</td>
</tr>
<tr>
<td><strong>MapHandler</strong></td>
<td>将结果集中第一条记录封装到了Map&lt;String,Object&gt;集合中，key就是字段名称，  value就是字段值</td>
</tr>
<tr>
<td>MapListHandler</td>
<td>将结果集中每一条记录封装到了Map&lt;String,Object&gt;集合中，key就是字段名称，  value就是字段值，在将这些Map封装到List集合中。</td>
</tr>
<tr>
<td><strong>ScalarHandler</strong></td>
<td>它是用于封装单个数据。例如  select count(*) from 表操作。</td>
</tr>
</tbody></table>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动模式创建QueryRunner对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSources());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//查询id为5的记录,封装到数组中</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from account where id = ?&quot;</span>;</span><br><span class="line">    Object[] array = qr.query(sql, <span class="keyword">new</span> ArrayHandler(), <span class="number">5</span>);</span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    System.out.println(Arrays.toString(array)); <span class="comment">//[5, 119, 李四(买家), 1100]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有数据,封装到List集合中</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">    List&lt;Object[]&gt; list = qr.query(sql, <span class="keyword">new</span> ArrayListHandler());</span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    <span class="keyword">for</span>(Object[] array : list)&#123;</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//查询id为5的记录,封装到指定JavaBean中</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from account where id = ?&quot;</span>;</span><br><span class="line">    Account account = qr.query(sql, <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account.class), <span class="number">5</span>);</span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    System.out.println(account);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有数据,封装到JavaBean中再封装到List集合中</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">    List&lt;Account&gt; list = qr.query(sql,<span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account.class));</span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    <span class="keyword">for</span>(Account account:list)&#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">// 查询姓名是 小李的信息,将结果封装到Map集合中</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from account where userName = ?&quot;</span>;</span><br><span class="line">    Map&lt;String, Object&gt; map = qr.query(sql, <span class="keyword">new</span> MapHandler(), <span class="string">&quot;小李&quot;</span>);</span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有用户的money总合</span></span><br><span class="line">    String sql = <span class="string">&quot;select SUM(money) from account&quot;</span>;</span><br><span class="line">    Object obj = qr.query(sql, <span class="keyword">new</span> ScalarHandler());</span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    <span class="keyword">int</span> money = Integer.parseInt(obj.toString());</span><br><span class="line">    System.out.println(money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h1><p>批处理指的是一次操作中执行多条SQL语句，批处理相比于一次一次执行效率会提高很多。</p>
<p>当向数据库中添加大量的数据时，需要用到批处理。</p>
<p><strong>实现批处理</strong></p>
<p>Statement和PreparedStatement都支持批处理操作，这里我们介绍一下PreparedStatement的批处理方式：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void addBatch()</td>
<td>将给定的 SQL 命令添加到此  Statement 对象的当前命令列表中。   通过调用方法 executeBatch  可以批量执行此列表中的命令。</td>
</tr>
<tr>
<td>int[] executeBatch()</td>
<td>每次提交一批命令到数据库中执行，如果所有的命令都成功执行了，那么返回一个数组，这个数组是说明每条命令所影响的行数</td>
</tr>
</tbody></table>
<p>mysql 批处理是默认关闭的，所以需要加一个参数才打开mysql 数据库批处理，在url中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rewriteBatchedStatements=true </span><br><span class="line">例如: url=jdbc:mysql://127.0.0.1:3306/db5?characterEncoding=UTF-8&amp;rewriteBatchedStatements=true</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = DruidUtils.getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取prepareStatement</span></span><br><span class="line">    PreparedStatement ps = con.prepareStatement(<span class="string">&quot;insert into testbatch (uname) values (?)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置占位符，并添加到批处理</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i&lt;=<span class="number">10000</span>; i++)&#123;</span><br><span class="line">        ps.setString(<span class="number">1</span>, <span class="string">&quot;小强&quot;</span>+i);</span><br><span class="line">        ps.addBatch();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行批处理</span></span><br><span class="line">    ps.executeBatch();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(end-start);    <span class="comment">//103</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><p>除了表之外的数据都是元数据,可以分为三类</p>
<ul>
<li>查询结果信息： UPDATE 或 DELETE语句 受影响的记录数。</li>
<li>数据库和数据表的信息： 包含了数据库及数据表的结构信息。</li>
<li>MySQL服务器信息： 包含了数据库服务器的当前状态，版本号等。</li>
</ul>
<p><strong>获取mysql元数据相关命令</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 元数据相关的命令介绍 </span></span><br><span class="line"><span class="keyword">select</span> version(); 获取mysql服务器的版本信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> status; 查看服务器的状态信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> columns <span class="keyword">from</span> table_name; 显示表的字段信息等，和<span class="keyword">desc</span> table_name一样</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> table_name; 显示数据表的详细索引信息，包括<span class="keyword">PRIMARY</span> KEY（主键）</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> databases:列出所有数据库</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables : 显示当前数据库的所有表</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> database(): 获取当前的数据库名</span><br></pre></td></tr></table></figure>

<h2 id="使用JDBC获取元数据"><a href="#使用JDBC获取元数据" class="headerlink" title="使用JDBC获取元数据"></a>使用JDBC获取元数据</h2><p>通过JDBC 也可以获取到元数据,比如数据库的相关信息,或者当我们使用程序查询一个不熟悉的表时, 我们可以通过<br>获取元素据信息,了解表中有多少个字段,字段的名称 和 字段的类型.</p>
<p><strong>JDBC中描述元数据的类</strong></p>
<table>
<thead>
<tr>
<th>元数据类</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>DatabaseMetaData</td>
<td>描述数据库的元数据对象</td>
</tr>
<tr>
<td>ResultSetMetaData</td>
<td>描述结果集的元数据对象</td>
</tr>
</tbody></table>
<p><strong>获取元数据类对象的方法</strong></p>
<p>getMetaData ()</p>
<p>connection 连接对象, 调用 getMetaData () 方法,获取的是DatabaseMetaData 数据库元数据对象<br>PrepareStatement 预处理对象调用 getMetaData () , 获取的是ResultSetMetaData , 结果集元数据对象</p>
<h2 id="DatabaseMetaData"><a href="#DatabaseMetaData" class="headerlink" title="DatabaseMetaData"></a>DatabaseMetaData</h2><table>
<thead>
<tr>
<th>方法说明</th>
</tr>
</thead>
<tbody><tr>
<td>getURL() : 获取数据库的URL</td>
</tr>
<tr>
<td>getUserName(): 获取当前数据库的用户名</td>
</tr>
<tr>
<td>getDatabaseProductName(): 获取数据库的产品名称</td>
</tr>
<tr>
<td>getDatabaseProductVersion(): 获取数据的版本号</td>
</tr>
<tr>
<td>getDriverName():  返回驱动程序的名称</td>
</tr>
<tr>
<td>isReadOnly():  判断数据库是否只允许只读 true 代表只读</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDatabaseMetaData</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = DruidUtils.getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接对象获取数据元getMetaData()，将会是DatabaseMetaData对象</span></span><br><span class="line">    DatabaseMetaData metaData = con.getMetaData();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取元数据相关信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;数据库的url: &quot;</span> + metaData.getURL());</span><br><span class="line">    System.out.println(<span class="string">&quot;数据库用户名：&quot;</span> + metaData.getUserName());</span><br><span class="line">    System.out.println(<span class="string">&quot;数据库版本好：&quot;</span> + metaData.getDatabaseProductVersion());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ResultSetMetaData"><a href="#ResultSetMetaData" class="headerlink" title="ResultSetMetaData"></a>ResultSetMetaData</h2><table>
<thead>
<tr>
<th>方法说明</th>
</tr>
</thead>
<tbody><tr>
<td>getColumnCount()  : 当前结果集共有多少列</td>
</tr>
<tr>
<td>getColumnName(int  i) : 获取指定列号的列名, 参数是整数 从1开始</td>
</tr>
<tr>
<td>getColumnTypeName(int  i): 获取指定列号列的类型, 参数是整数 从1开始</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testResultSetMetaData</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection con = DruidUtils.getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取prepareStatement预处理</span></span><br><span class="line">    PreparedStatement ps = con.prepareStatement(<span class="string">&quot;select * from account&quot;</span>);</span><br><span class="line">    ps.executeQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//PrepaerdStatement对象获取的元数据getMetaData()，将是ResultSetMetaData对象</span></span><br><span class="line">    ResultSetMetaData metaData = ps.getMetaData();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取元数据相关信息</span></span><br><span class="line">    <span class="keyword">int</span> count = metaData.getColumnCount();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=count; i++)&#123;</span><br><span class="line">        String name = metaData.getColumnName(i);</span><br><span class="line">        String nameType = metaData.getColumnTypeName(i);</span><br><span class="line">        System.out.println(<span class="string">&quot;列名：&quot;</span> + name + <span class="string">&quot;，类型：&quot;</span> + nameType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>XML即可扩展标记语言（Extensible Markup Language）</p>
<p>W3C在1998年2月发布1.0版本，2004年2月又发布1.1版本，但因为1.1版本不能向下兼容1.0版<br>本，所以1.1没有人用。同时，在2004年2月W3C又发布了1.0版本的第三版。我们要学习的还是<br>1.0版本 !</p>
<p><strong>特点</strong>：</p>
<p>可扩展的, 标签都是自定义的<br>语法十分严格</p>
<p><strong>作用：</strong></p>
<table>
<thead>
<tr>
<th><strong>功能</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>存储数据</td>
<td>通常，我们在数据库中存储数据。不过，如果希望数据的可移植性更强，我们可以把数据存储  XML 文件中</td>
</tr>
<tr>
<td><strong>配置文件</strong></td>
<td>作为各种技术框架的配置文件使用 (多)</td>
</tr>
<tr>
<td>在网络中传输</td>
<td>客户端可以使用XML格式向服务器端发送数据,服务器接收到xml格式数据,进行解析</td>
</tr>
</tbody></table>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><strong>XML文档声明格式</strong></p>
<p>文档声明必写在第一行；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br></pre></td></tr></table></figure>

<p>versioin：指定XML文档版本。必须属性，因为我们不会选择1.1，只会选择1.0；<br>encoding：指定当前文档的编码。可选属性，默认值是utf-8；</p>
<p><strong>元素</strong></p>
<p>Element 元素: 是XML文档中最重要的组成部分</p>
<p>元素的命名规则</p>
<ul>
<li>不能使用空格，不能使用冒号</li>
<li>xml 标签名称区分大小写</li>
<li>XML 必须有且只有一个根元素</li>
</ul>
<p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;users&gt;&lt;/users&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;close/&gt;</span><br></pre></td></tr></table></figure>

<p>元素体内部可以是元素，也可以是文本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;hello&gt; </span><br><span class="line">	&lt;a&gt;你好&lt;/a&gt; </span><br><span class="line">&lt;/hello&gt;</span><br></pre></td></tr></table></figure>



<p><strong>属性</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;&quot; class=&quot;&quot;&gt; &lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>属性是元素的一部分，它必须出现在元素的开始标签中</li>
<li>属性的定义格式：属性名=属性值，其中属性值必须使用单引或双引</li>
<li>一个元素可以有0~N个属性，但一个元素中不能出现同名属性</li>
<li>属性名不能使用空格、冒号等特殊字符，且必须以字母开头</li>
</ol>
<p><strong>注释</strong></p>
<p>XML的注释，以<code>&lt;!--</code>开始，以<code>--&gt;</code>结束。注释内容会被XML解析器忽略！</p>
<p><strong>例如使用xml描述表中的数据</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>15<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>老六<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>60<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="XML约束"><a href="#XML约束" class="headerlink" title="XML约束"></a>XML约束</h2><p>在XML技术里，可以编写一个文档来约束一个XML文档的书写规范，这称之为XML约束。</p>
<p>常见的xml约束：</p>
<ul>
<li><p>DTD</p>
</li>
<li><p>Schema</p>
</li>
</ul>
<p>作为程序员只要掌握两点：</p>
<ul>
<li>会阅读约束文档</li>
<li>会引入约束文档</li>
<li>根据约束文档规范编写xml</li>
<li>不用自己编写约束文档</li>
</ul>
<p><a href="https://imgtu.com/i/LIsre1"><img src="https://s1.ax1x.com/2022/04/25/LIsre1.png" alt="LIsre1.png"></a></p>
<h3 id="DTD约束"><a href="#DTD约束" class="headerlink" title="DTD约束"></a>DTD约束</h3><p>DTD（Document Type Defifinition），文档类型定义，用来约束XML文档。规定XML文档中元素的名<br>称，子元素的名称及顺序，元素的属性等。</p>
<p>开发中，我们不会自己编写DTD约束文档。<br>常情况我们都是通过框架提供的DTD约束文档，编写对应的XML文档。常见框架使用DTD约束有：<br>Struts2、hibernate等。</p>
<p>例子：</p>
<p>DTD约束student1.dtd如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT students (student+) &gt;</span><br><span class="line">        &lt;!ELEMENT student (name,age,sex)&gt;</span><br><span class="line">        &lt;!ELEMENT name (#PCDATA)&gt;</span><br><span class="line">        &lt;!ELEMENT age (#PCDATA)&gt;</span><br><span class="line">        &lt;!ELEMENT sex (#PCDATA)&gt;</span><br><span class="line">        &lt;!ATTLIST student number ID #REQUIRED&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">    1，ELEMENT: 用来定义元素</span><br><span class="line">    students (student+):表示根元素是students，并且有多个student子元素</span><br><span class="line">    student (name,age,sex):表示student元素的子元素有name,age,sex</span><br><span class="line">    name (#PCDATA):name元素的内容是文本</span><br><span class="line"></span><br><span class="line">    2，ATTLIST：用来定义属性</span><br><span class="line">    student number ID #REQUIRED：student元素有number属性，</span><br><span class="line">    ID：唯一 值只能是字母或者下划线开头</span><br><span class="line">    #REQUIRED：非空</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<p>本地引入DTD约束并编写XML</p>
<p>引入语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名 SYSTEM &quot;约束文档路径&quot;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">students</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;student1.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>老王<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>老李<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>60<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Schema约束"><a href="#Schema约束" class="headerlink" title="Schema约束"></a>Schema约束</h3><ul>
<li>Schema是新的XML文档约束, 比DTD强大很多，是DTD 替代者；</li>
<li>Schema本身也是XML文档，但Schema文档的扩展名为xsd，而不是xml。 </li>
<li> Schema 功能更强大，内置多种简单和复杂的数据类型</li>
<li>Schema 支持命名空间 (一个XML中可以引入多个约束文档)</li>
</ul>
<p>例子：</p>
<p>Schema约束文档 ”student2.xsd“ 如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.de.com/xml&quot;</span>                    </span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.de.com/xml&quot;</span> <span class="attr">elementFormDefault</span>=<span class="string">&quot;qualified&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span> <span class="attr">type</span>=<span class="string">&quot;studentsType&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">&quot;studentsType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">type</span>=<span class="string">&quot;studentType&quot;</span> <span class="attr">minOccurs</span>=<span class="string">&quot;0&quot;</span> <span class="attr">maxOccurs</span>=<span class="string">&quot;unbounded&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">&quot;studentType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;ageType&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;sexType&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">type</span>=<span class="string">&quot;numberType&quot;</span> <span class="attr">use</span>=<span class="string">&quot;required&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">&quot;sexType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">&quot;ageType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:integer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:minInclusive</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:maxInclusive</span> <span class="attr">value</span>=<span class="string">&quot;200&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">&quot;numberType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">&quot;hehe_\d&#123;4&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/LIccF0"><img src="https://s1.ax1x.com/2022/04/25/LIccF0.png" alt="LIccF0.png"></a></p>
<p><strong>XML引入Schema约束步骤：</strong></p>
<p>1，查看schema文档，找到根元素，在xml中写出来</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，根元素来自哪个命名空间。使用<strong>xmlns</strong>指令来声明，引入 w3c的标准命名空间, 复制即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">students</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://www.de.com/xml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>完整代码如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://www.de.com/xml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;hehe_0001&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>老李<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>50<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>female<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;hehe_0002&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>老六<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>200<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h2><p>当将数据存储在XML后，我们就希望通过程序获得XML的内容。如果我们使用Java基础所学习的IO知<br>识是可以完成的，不过你需要非常繁琐的操作才可以完成，且开发中会遇到不同问题（只读、读写）。<br>人们为不同问题提供不同的解析方式，并提交对应的解析器，方便开发人员操作XML。</p>
<p><strong>XML解析方式</strong></p>
<ul>
<li>DOM：要求解析器把整个XML文档装载到内存，并解析成一个Document对象。<ul>
<li>优点：元素与元素之间保留结构关系，故可以进行增删改查操作。</li>
<li>缺点：XML文档过大，可能出现内存溢出显现。</li>
</ul>
</li>
<li>SAX：是一种速度更快，更有效的方法。它逐行扫描文档，一边扫描一边解析。并以事件驱动的方<br>式进行具体解析，每执行一行，都将触发对应的事件。（了解）<ul>
<li>优点：占用内存少 处理速度快，可以处理大文件</li>
<li>缺点：只能读，逐行后将释放资源。</li>
</ul>
</li>
</ul>
<p><a href="https://imgtu.com/i/LI2Z8K"><img src="https://s1.ax1x.com/2022/04/25/LI2Z8K.png" alt="LI2Z8K.png"></a></p>
<p><strong>常见的解析器</strong></p>
<p>解析器：就是根据不同的解析方式提供的具体实现。有的解析器操作过于繁琐，为了方便开发人员，<br>有提供易于操作的解析开发包</p>
<ul>
<li>JAXP：sun公司提供的解析器，支持DOM和SAX两种思想</li>
<li><strong>DOM4J</strong>：一款非常优秀的解析器 , Dom4j是一个易用的、开源的库，用于XML，XPath和XSLT。<br>它应用于Java平台，采用了Java集合框架并完全支持DOM，SAX和JAXP。</li>
<li>Jsoup：jsoup 是一款Java 的HTML解析器 ,也可以解析XML</li>
<li>PULL：Android内置的XML解析方式，类似SAX。</li>
</ul>
<h3 id="DOM4J的使用"><a href="#DOM4J的使用" class="headerlink" title="DOM4J的使用"></a>DOM4J的使用</h3><p><strong>导入包</strong></p>
<p>dom4j-1.6.1.jar</p>
<p><strong>API的使用</strong></p>
<p>使用核心类SaxReader加载xml文档获得Document，通过Document 对象获得文档的根元素，然后就<br>可以操作了</p>
<ul>
<li>SaxReader对象：<br>read(…) 加载执行xml文档</li>
<li>Document对象：<br>getRootElement() 获得根元素</li>
<li>Element对象：<br>elements(…) 获得指定名称的所有子元素。可以不指定名称<br>element(…) 获得指定名称的第一个子元素。可以不指定名称<br>getName() 获得当前元素的元素名<br>attributeValue(…) 获得指定属性名的属性值<br>elementText(…) 获得指定名称子元素的文本值<br>getText() 获得当前元素的文本内容</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取XML解析对象</span></span><br><span class="line">    SAXReader sr = <span class="keyword">new</span> SAXReader();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.解析XML 获取 文档对象 document</span></span><br><span class="line">    Document document = sr.read(<span class="string">&quot;D:\\projects\\JDBC_work\\src\\org\\de\\Test4\\student2.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取根元素</span></span><br><span class="line">    Element rootElement = document.getRootElement();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取元素名</span></span><br><span class="line">    System.out.println(rootElement.getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有子元素</span></span><br><span class="line">    List&lt;Element&gt; elements = rootElement.elements();</span><br><span class="line">    <span class="keyword">for</span>(Element element : elements)&#123;</span><br><span class="line">        System.out.println(element.getName());</span><br><span class="line">        System.out.println(element.attributeValue(<span class="string">&quot;number&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="xpath读取xml"><a href="#xpath读取xml" class="headerlink" title="xpath读取xml"></a>xpath读取xml</h3><p>XPath 是一门在 XML 文档中查找信息的语言。 可以是使用xpath查找xml中的内容。</p>
<p>优点：</p>
<p>由于DOM4J在解析XML时只能一层一层解析，所以当XML文件层数过多时使用会很不方便，结合<br>XPATH就可以直接获取到某个元素</p>
<p><strong>导入包</strong><br>jaxen-1.1-beta-6.jar</p>
<p><strong>基本语法，路径表达式</strong></p>
<table>
<thead>
<tr>
<th><strong>语法</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>/AAA/DDD/BBB</td>
<td>表示一层一层的，AAA下面  DDD下面的BBB</td>
</tr>
<tr>
<td>//BBB</td>
<td>表示和这个名称相同，表示只要名称是BBB，都得到</td>
</tr>
<tr>
<td>//*</td>
<td>所有元素</td>
</tr>
<tr>
<td>BBB[1] ,  BBB[last()]</td>
<td>第一种表示第一个BBB元素, 第二种表示  后一个BBB元素</td>
</tr>
<tr>
<td>//BBB[@id]</td>
<td>表示只要BBB元素上面有id属性，都得到</td>
</tr>
<tr>
<td>//BBB[@id=’b1’]</td>
<td>表示元素名称是BBB,在BBB上面有id属性，并且id的属性值是b1</td>
</tr>
</tbody></table>
<p><strong>API介绍</strong></p>
<ul>
<li>selectSingleNode(query): 查找和 XPath 查询匹配的一个节点。<br>参数是Xpath 查询串。</li>
<li>selectNodes(query): 得到的是xml根节点下的所有满足 xpath 的节点；<br>参数是Xpath 查询串。</li>
<li>Node: 节点对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取XML解析对象</span></span><br><span class="line">    SAXReader sr = <span class="keyword">new</span> SAXReader();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.解析XML 获取 文档对象 document</span></span><br><span class="line">    Document document = sr.read(<span class="string">&quot;D:\\projects\\JDBC_work\\src\\org\\de\\Test4\\student1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取单个节点，第二个学生的信息</span></span><br><span class="line">    Node nodeNumber = document.selectSingleNode(<span class="string">&quot;/students/student[2]/attribute::number&quot;</span>);</span><br><span class="line">    System.out.println(nodeNumber.getText());</span><br><span class="line">    </span><br><span class="line">    Node nodeName = document.selectSingleNode(<span class="string">&quot;/students/student[2]/name&quot;</span>);</span><br><span class="line">    System.out.println(nodeName.getText());</span><br><span class="line">    </span><br><span class="line">    Node nodeAge = document.selectSingleNode(<span class="string">&quot;/students/student[2]/age&quot;</span>);</span><br><span class="line">    System.out.println(nodeAge.getText());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取XML解析对象</span></span><br><span class="line">    SAXReader sr = <span class="keyword">new</span> SAXReader();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.解析XML 获取 文档对象 document</span></span><br><span class="line">    Document document = sr.read(<span class="string">&quot;D:\\projects\\JDBC_work\\src\\org\\de\\Test4\\student1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取多个节点,第一个学生的信息</span></span><br><span class="line">    List&lt;Node&gt; nodes = document.selectNodes(<span class="string">&quot;/students/student[1]/*&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(Node node : nodes)&#123;</span><br><span class="line">        System.out.println(node.getName() + <span class="string">&quot; = &quot;</span> + node.getText());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JDBC自定义XML"><a href="#JDBC自定义XML" class="headerlink" title="JDBC自定义XML"></a>JDBC自定义XML</h2><p>原来我们写JDBCUtils工具类时，数据库的配置信息是直接保存在工具类中，现在我们将数据库的配置信息保存在xml文件中。</p>
<p>1，创建自定义xml 文件, 保存 数据库连接信息，jdbc-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdbc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DRIVERNAME&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;URL&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/de?characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>rewriteBatchedStatements=true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;USER&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;PASSWORD&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbc</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，编写工具类 ,使用xpath 读取xml文件中的数据库配置信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1,定义成员变量存放配置信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String DRIVERNAME;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String URL;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String USER;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String PASSWORD;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2，在静态代码块中，解析xml文件的配置信息</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1,解析xml文件</span></span><br><span class="line">            SAXReader sr = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            Document document = sr.read(<span class="string">&quot;D:\\projects\\JDBC_work\\resources\\jdbc-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Node node = document.selectSingleNode(<span class="string">&quot;/jdbc/property[@name=&#x27;DRIVERNAME&#x27;]&quot;</span>);</span><br><span class="line">            DRIVERNAME = node.getText();</span><br><span class="line">            node = document.selectSingleNode(<span class="string">&quot;/jdbc/property[@name=&#x27;URL&#x27;]&quot;</span>);</span><br><span class="line">            URL = node.getText();</span><br><span class="line">            node = document.selectSingleNode(<span class="string">&quot;/jdbc/property[@name=&#x27;USER&#x27;]&quot;</span>);</span><br><span class="line">            USER = node.getText();</span><br><span class="line">            node = document.selectSingleNode(<span class="string">&quot;/jdbc/property[@name=&#x27;PASSWORD&#x27;]&quot;</span>);</span><br><span class="line">            PASSWORD = node.getText();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2，注册驱动</span></span><br><span class="line">            Class.forName(DRIVERNAME);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接的方法</span></span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源的方法</span></span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1><h2 id="商城案例表设计"><a href="#商城案例表设计" class="headerlink" title="商城案例表设计"></a>商城案例表设计</h2><p>通过对商城项目的部分表关系进行分析,完成数据库表的设计</p>
<p><a href="https://imgtu.com/i/L7RS3t"><img src="https://s1.ax1x.com/2022/04/26/L7RS3t.png" alt="L7RS3t.png"></a></p>
<p><strong>建库,建表</strong></p>
<ol>
<li>创建名为 store的数据库, 对应商城项目</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database db6 character set utf8;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建用户表</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE user (</span><br><span class="line">  uid varchar(32) PRIMARY KEY,	-- 用户ID</span><br><span class="line">  username varchar(20) , -- 用户名</span><br><span class="line">  password varchar(20) , -- 密码</span><br><span class="line">  telephone varchar(20) , -- 电话</span><br><span class="line">  birthday date , -- 生日</span><br><span class="line">  sex varchar(10) -- 性别</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO USER VALUES </span><br><span class="line">(&#x27;001&#x27;,&#x27;渣渣辉&#x27;,&#x27;123456&#x27;,&#x27;13511112222&#x27;,&#x27;2015-11-04&#x27;,&#x27;男&#x27;),</span><br><span class="line">(&#x27;002&#x27;,&#x27;药水哥&#x27;,&#x27;123456&#x27;,&#x27;13533334444&#x27;,&#x27;1990-02-01&#x27;,&#x27;男&#x27;),</span><br><span class="line">(&#x27;003&#x27;,&#x27;大明白&#x27;,&#x27;123456&#x27;,&#x27;13544445555&#x27;,&#x27;2015-11-03&#x27;,&#x27;男&#x27;),</span><br><span class="line">(&#x27;004&#x27;,&#x27;长海&#x27;,&#x27;123456&#x27;,&#x27;13566667777&#x27;,&#x27;2000-02-01&#x27;,&#x27;男&#x27;),</span><br><span class="line">(&#x27;005&#x27;,&#x27;乔杉&#x27;,&#x27;123456&#x27;,&#x27;13588889999&#x27;,&#x27;2000-02-01&#x27;,&#x27;男&#x27;);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建订单表</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE orders (</span><br><span class="line">  oid varchar(32)   PRIMARY KEY, -- 订单id</span><br><span class="line">  ordertime datetime ,	-- 下单时间 </span><br><span class="line">  total double , -- 总金额</span><br><span class="line">  name varchar(20), -- 收货人姓名</span><br><span class="line">  telephone varchar(20) , -- 电话</span><br><span class="line">  address varchar(30) , -- 地址</span><br><span class="line">  state int(11) ,  -- 订单状态</span><br><span class="line">  uid varchar(32), -- 外键字段 对应用户表id</span><br><span class="line">  CONSTRAINT ofk_0001 FOREIGN KEY (uid) REFERENCES user (uid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 插入一条订单数据</span><br><span class="line">INSERT INTO orders </span><br><span class="line">VALUES(&#x27;order001&#x27;,&#x27;2019-10-11&#x27;,5500,&#x27;乔杉&#x27;,&#x27;15512342345&#x27;,&#x27;皇家洗浴&#x27;,0,&#x27;001&#x27;);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建商品分类表</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE category (</span><br><span class="line">  cid varchar(32) PRIMARY KEY,</span><br><span class="line">  cname varchar(20)</span><br><span class="line">); </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO `category` VALUES (&#x27;1&#x27;,&#x27;手机数码&#x27;),(&#x27;2&#x27;,&#x27;电脑办公&#x27;),(&#x27;3&#x27;,&#x27;运动鞋服&#x27;),(&#x27;4&#x27;,&#x27;图书音像&#x27;);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>创建商品表</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE product (</span><br><span class="line">  pid varchar(32)  PRIMARY KEY,	-- 商品id</span><br><span class="line">  pname varchar(50) , -- 商品名称 </span><br><span class="line">  price double, -- 商品价格</span><br><span class="line">  pdesc varchar(255), -- 商品描述</span><br><span class="line">  pflag int(11) , -- 商品状态 1 上架 ,0 下架</span><br><span class="line">  cid varchar(32) , -- 外键对应 分类表id</span><br><span class="line">  KEY sfk_0001 (cid), </span><br><span class="line">  CONSTRAINT sfk_0001 FOREIGN KEY (cid) REFERENCES category (cid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO `product` VALUES </span><br><span class="line">(&#x27;1&#x27;,&#x27;小米6&#x27;,2200,&#x27;小米 移动联通电信4G手机 双卡双待&#x27;,0,&#x27;1&#x27;),</span><br><span class="line">(&#x27;2&#x27;,&#x27;华为Mate9&#x27;,2599,&#x27;华为 双卡双待 高清大屏&#x27;,0,&#x27;1&#x27;),</span><br><span class="line">(&#x27;3&#x27;,&#x27;OPPO11&#x27;,3000,&#x27;移动联通 双4G手机&#x27;,0,&#x27;1&#x27;),</span><br><span class="line">(&#x27;4&#x27;,&#x27;华为荣耀&#x27;,1499,&#x27;3GB内存标准版 黑色 移动4G手机&#x27;,0,&#x27;1&#x27;),</span><br><span class="line">(&#x27;5&#x27;,&#x27;华硕台式电脑&#x27;,5000,&#x27;爆款直降，满千减百&#x27;,0,&#x27;2&#x27;),</span><br><span class="line">(&#x27;6&#x27;,&#x27;MacBook&#x27;,6688,&#x27;128GB 闪存&#x27;,0,&#x27;2&#x27;),</span><br><span class="line">(&#x27;7&#x27;,&#x27;ThinkPad&#x27;,4199,&#x27;轻薄系列1)&#x27;,0,&#x27;2&#x27;),</span><br><span class="line">(&#x27;8&#x27;,&#x27;联想小新&#x27;,4499,&#x27;14英寸超薄笔记本电脑&#x27;,0,&#x27;2&#x27;),</span><br><span class="line">(&#x27;9&#x27;,&#x27;李宁音速6&#x27;,500,&#x27;实战篮球鞋&#x27;,0,&#x27;3&#x27;),</span><br><span class="line">(&#x27;10&#x27;,&#x27;AJ11&#x27;,3300,&#x27;乔丹实战系列&#x27;,0,&#x27;3&#x27;),</span><br><span class="line">(&#x27;11&#x27;,&#x27;AJ1&#x27;,5800,&#x27;精神小伙系列&#x27;,0,&#x27;3&#x27;);</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>订单项表 (中间表)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 订单项表</span><br><span class="line">CREATE TABLE orderitem (</span><br><span class="line">  itemid VARCHAR(32) PRIMARY KEY, -- 订单项ID</span><br><span class="line">  pid VARCHAR(32),  -- 外键 对应商品表 id</span><br><span class="line">  oid VARCHAR(32), -- 外键 对应订单表 id</span><br><span class="line">  KEY fk_0001 (pid),</span><br><span class="line">  KEY fk_0002 (oid),</span><br><span class="line">  CONSTRAINT fk_0001 FOREIGN KEY (pid) REFERENCES product (pid),</span><br><span class="line">  CONSTRAINT fk_0002 FOREIGN KEY (oid) REFERENCES orders (oid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 向中间表中插入两条数据</span><br><span class="line">INSERT INTO orderitem VALUES(&#x27;item001&#x27;,&#x27;1&#x27;,&#x27;order001&#x27;);</span><br><span class="line">INSERT INTO orderitem VALUES(&#x27;item002&#x27;,&#x27;11&#x27;,&#x27;order001&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app, 测试包 用于对DAO代码进行测试</span><br><span class="line">dao, dao包  数据访问层,包含所有对数据库的相关操作的类</span><br><span class="line">entity, 实体包 保存根据数据库表 对应创建的JavaBean类</span><br><span class="line">utils, 工具包</span><br></pre></td></tr></table></figure>

<h2 id="JavaBean类创建"><a href="#JavaBean类创建" class="headerlink" title="JavaBean类创建"></a>JavaBean类创建</h2><h3 id="3-1-设计用户与订单"><a href="#3-1-设计用户与订单" class="headerlink" title="3.1 设计用户与订单"></a>3.1 设计用户与订单</h3><h4 id="3-1-1-一对多关系分析"><a href="#3-1-1-一对多关系分析" class="headerlink" title="3.1.1 一对多关系分析"></a>3.1.1 一对多关系分析</h4><ul>
<li>在Java一对多的数据关系中，需要遵循以下设计原则：</li>
<li><ol>
<li>Java类的名称 = 实体表的名称</li>
<li>Java类的属性 = 实体表的字段</li>
<li>Java类的一个对象 = 表的一行记录</li>
<li>外键关系 = 引用配置</li>
</ol>
</li>
<li>一个用户拥有多个订单,所以 用户是一的一方, 订单是多的一方</li>
</ul>
<p><a href="https://imgtu.com/i/L7WWWR"><img src="https://s1.ax1x.com/2022/04/26/L7WWWR.png" alt="L7WWWR.png"></a></p>
<h4 id="3-1-2-User类"><a href="#3-1-2-User类" class="headerlink" title="3.1.2 User类"></a>3.1.2 User类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    用户表 对应 User类</span></span><br><span class="line"><span class="comment"> *   `uid` VARCHAR(32) NOT NULL,</span></span><br><span class="line"><span class="comment"> *   `username` VARCHAR(20) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `password` VARCHAR(20) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `telephone` VARCHAR(20) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `birthday` DATE DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `sex` VARCHAR(10) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String telephone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//提供 get set toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-1-3-Orders类"><a href="#3-1-3-Orders类" class="headerlink" title="3.1.3 Orders类"></a>3.1.3 Orders类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   订单表</span></span><br><span class="line"><span class="comment"> *   `oid` VARCHAR(32) NOT NULL,</span></span><br><span class="line"><span class="comment"> *   `ordertime` DATETIME DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `total` DOUBLE DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `name` VARCHAR(20) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `telephone` VARCHAR(20) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `address` VARCHAR(30) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `state` INT(11) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `uid` VARCHAR(32) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String oid; <span class="comment">//订单号</span></span><br><span class="line">    <span class="keyword">private</span> String ordertime; <span class="comment">//下单时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total; <span class="comment">//订单的总金额</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//收货人姓名</span></span><br><span class="line">    <span class="keyword">private</span> String telephone; <span class="comment">//收货人电话</span></span><br><span class="line">    <span class="keyword">private</span> String address;  <span class="comment">//收货人地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state; <span class="comment">//订单状态 1 代表已支付 , 0 代表未支付</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单属于哪个用户呢 ?</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提供 get set toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-1-4-Orders类设计分析"><a href="#3-1-4-Orders类设计分析" class="headerlink" title="3.1.4 Orders类设计分析"></a>3.1.4 Orders类设计分析</h4><ul>
<li><p>第一种方式</p>
<ul>
<li><p>根据两张表关系的描述  我们可以在 订单类中 添加一个uid 成员变量,表示订单属于哪个用户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String uid;</span><br></pre></td></tr></table></figure></li>
<li><p>但是这样设计会存在一些问题,比如 我要查询的是订单是属于哪个用户的用户名 ? 但是我们只有一个uid</p>
</li>
</ul>
</li>
<li><p>第二种方式</p>
<ul>
<li><p>Java类表示一对多关系,可以在多的一方添加一个成员变量,这个成员变量的类型 就是一的一方的类型.</p>
</li>
<li><p>再在订单表中 添加一个 User对象,User对象中 ,保存该订单关联的用户的所有信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String uid;</span><br><span class="line"><span class="keyword">private</span> User user;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="3-1-4-修改Orders类"><a href="#3-1-4-修改Orders类" class="headerlink" title="3.1.4 修改Orders类"></a>3.1.4 修改Orders类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String oid; <span class="comment">//订单号</span></span><br><span class="line">    <span class="keyword">private</span> String ordertime; <span class="comment">//下单时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total; <span class="comment">//订单的总金额</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//收货人姓名</span></span><br><span class="line">    <span class="keyword">private</span> String telephone; <span class="comment">//收货人电话</span></span><br><span class="line">    <span class="keyword">private</span> String address;  <span class="comment">//收货人地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state; <span class="comment">//订单状态 1 代表已支付 , 0 代表未支付</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单属于哪个用户呢 ?</span></span><br><span class="line">    <span class="keyword">private</span> String uid; <span class="comment">//表示外键</span></span><br><span class="line">    <span class="keyword">private</span> User user; <span class="comment">//用来保存订单对应的详细的用户信息</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提供 get set toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-设计商品与分类"><a href="#3-2-设计商品与分类" class="headerlink" title="3.2 设计商品与分类"></a>3.2 设计商品与分类</h3><p>分类与商品 同样是一对多关系,  我们可以在多的一方进行操作 添加一个成员变量 类型是一的一方的类型</p>
<p><a href="https://imgtu.com/i/L7fQk4"><img src="https://s1.ax1x.com/2022/04/26/L7fQk4.png" alt="L7fQk4.png"></a></p>
<h4 id="3-2-1-Category类"><a href="#3-2-1-Category类" class="headerlink" title="3.2.1 Category类"></a>3.2.1 Category类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cid;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提供 get set toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-2-Product类"><a href="#3-2-2-Product类" class="headerlink" title="3.2.2 Product类"></a>3.2.2 Product类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pdesc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pflag; <span class="comment">//是否上架 1 上架 ,0 下架</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cid; <span class="comment">//外键 对应分类表主键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Category category; <span class="comment">//用于保存Category的详细数据</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">//提供 get set toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-设计订单项"><a href="#3-3-设计订单项" class="headerlink" title="3.3 设计订单项"></a>3.3 设计订单项</h3><h4 id="3-3-1-多对多关系分析"><a href="#3-3-1-多对多关系分析" class="headerlink" title="3.3.1 多对多关系分析"></a>3.3.1 多对多关系分析</h4><p>商品与订单是多对多关系, 一个订单上可以有多个商品, 一个商品可以出现在多个订单中.</p>
<p>多对多建表原则 需要一张中间表,中间表中至少有两个字段,作为中间表的外键分别指向另外两张表的主键</p>
<p><a href="https://imgtu.com/i/L7f1h9"><img src="https://s1.ax1x.com/2022/04/26/L7f1h9.png" alt="L7f1h9.png"></a></p>
<h4 id="3-3-2-创建OrderItem"><a href="#3-3-2-创建OrderItem" class="headerlink" title="3.3.2 创建OrderItem"></a>3.3.2 创建OrderItem</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   订单项表(中间表)</span></span><br><span class="line"><span class="comment"> *   `itemid` VARCHAR(32) NOT NULL,</span></span><br><span class="line"><span class="comment"> *   `pid` VARCHAR(32) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *   `oid` VARCHAR(32) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderItem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单项 指的是中间表中的一条数据</span></span><br><span class="line">    <span class="keyword">private</span> String itemid; <span class="comment">//订单项的id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pid; <span class="comment">//外键 指向商品表主键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String oid; <span class="comment">//外键 指向订单表的主键</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Product product;<span class="comment">//订单项内部的商品详细信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Orders orders;<span class="comment">//订单项属于哪个订单</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-编写DAO类"><a href="#4-编写DAO类" class="headerlink" title="4.编写DAO类"></a>4.编写DAO类</h2><h3 id="4-1-UserDao"><a href="#4-1-UserDao" class="headerlink" title="4.1 UserDao"></a>4.1 UserDao</h3><ul>
<li>需求一: 编写一个注册用户的方法,接收的参数是一个User对象</li>
<li>需求二: 编写一个 用户登录的方法,接收的参数是 用户名 和密码, 返回值是User对象</li>
</ul>
<h4 id="4-1-1-编写UserDao"><a href="#4-1-1-编写UserDao" class="headerlink" title="4.1.1 编写UserDao"></a>4.1.1 编写UserDao</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册用户</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">register</span><span class="params">(User user)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取QueryRunner</span></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.编写SQL</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into user values(?,?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Object[] param = &#123;user.getUid(), user.getUsername(), user.getPassword(),</span><br><span class="line">                user.getTelephone(), user.getBirthday(), user.getSex()&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.执行插入操作</span></span><br><span class="line">        <span class="keyword">int</span> update = qr.update(sql,param);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.返回受影响的行数</span></span><br><span class="line">        <span class="keyword">return</span> update;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username , String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select * from user where username = ? and password = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回的是一个User对象 使用BeanHandler将结果集的第一条和数据封装到一个Javabean中</span></span><br><span class="line">        User user = qr.query(sql, <span class="keyword">new</span> BeanHandler&lt;User&gt;(User.class), username, password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-1-2-测试注册与登录功能"><a href="#4-1-2-测试注册与登录功能" class="headerlink" title="4.1.2 测试注册与登录功能"></a>4.1.2 测试注册与登录功能</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建UserDao</span></span><br><span class="line">    UserDao userDao = <span class="keyword">new</span> UserDao();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试注册功能</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRegister</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建User对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对User对象进行赋值</span></span><br><span class="line">        user.setUid(UUIDUtils.getUUID());</span><br><span class="line">        user.setUsername(<span class="string">&quot;大郎&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;654321&quot;</span>);</span><br><span class="line">        user.setTelephone(<span class="string">&quot;15052005200&quot;</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        user.setBirthday(DateUtils.getDateFormart());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.执行注册</span></span><br><span class="line">        <span class="keyword">int</span> register = userDao.register(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.判断注册是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(register &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;注册成功,欢迎您: &quot;</span> + user.getUsername());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;注册失败! !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试登录功能</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLogin</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用UserDao的 login方法,传入用户名密码</span></span><br><span class="line">        User user = userDao.login(<span class="string">&quot;大郎&quot;</span>, <span class="string">&quot;654321&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断user不为空 登录成功</span></span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(user.getUsername() +<span class="string">&quot; 欢迎您!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或者密码错误! !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其他工具类如下</strong></p>
<p>UUIDUtils工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.de.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UUID是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * UUID由以下几部分的组合：</span></span><br><span class="line"><span class="comment"> *  1.当前日期和时间，UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同。</span></span><br><span class="line"><span class="comment"> *  2.时钟序列。</span></span><br><span class="line"><span class="comment"> *  3.全局唯一的IEEE机器识别号，如果有网卡，从网卡MAC地址获得，没有网卡以其他方式获得。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UUIDUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取UUID的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUUID</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DateUtils工具类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.de.utils;</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取日期对象 格式化后的字符串</span><br><span class="line"> */</span><br><span class="line">public class DateUtils &#123;</span><br><span class="line"></span><br><span class="line">    public static String getDateFormat()&#123;</span><br><span class="line"></span><br><span class="line">        Date date = new Date();</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line"></span><br><span class="line">        String s = sdf.format(date);</span><br><span class="line"></span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-ProductDao"><a href="#4-2-ProductDao" class="headerlink" title="4.2 ProductDao"></a>4.2 ProductDao</h3><ul>
<li><p>需求1: 根据商品ID 获取商品名称 ,商品价格 以及商品所属分类的名称</p>
<ul>
<li>参数 pid, 返回值 product对象</li>
</ul>
</li>
<li><p>需求2: 根据分类ID 获取商品分类信息</p>
<ul>
<li>参数 cid , 返回值 category对象</li>
</ul>
</li>
<li><p>需求3: 查询指定分类ID 下的商品个数</p>
<ul>
<li>参数 cid , 返回值 int类型 商品个数</li>
</ul>
</li>
<li><p>需求4: 查询指定分类ID 下的所有商品信息</p>
<ul>
<li>参数分类ID ,返回值 List集合 集合中保存商品对象</li>
</ul>
</li>
</ul>
<h4 id="4-2-1-编写-ProductDao"><a href="#4-2-1-编写-ProductDao" class="headerlink" title="4.2.1 编写 ProductDao"></a>4.2.1 编写 ProductDao</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.根据商品ID 获取商品名称 ,商品价格 以及商品所属分类的名称</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findProductById</span><span class="params">(String pid)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select * from product where pid = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Product product = qr.query(sql, <span class="keyword">new</span> BeanHandler&lt;Product&gt;(Product.class), pid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用 findCategoryById()方法, 传递外键cid 获取商品对应 的分类信息</span></span><br><span class="line">        Category category = findCategoryById(product.getCid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将category保存到商品对象中</span></span><br><span class="line">        product.setCategory(category);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.根据分类ID 获取商品分类信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">findCategoryById</span><span class="params">(String cid)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select * from category where cid = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Category category = qr.query(sql, <span class="keyword">new</span> BeanHandler&lt;Category&gt;(Category.class),cid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> category;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.查询指定分类ID 下的商品个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">(String cid)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select count(*) from product where cid = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取的单列数据 ,使用ScalarHandler 封装</span></span><br><span class="line">        Long count = (Long)qr.query(sql,<span class="keyword">new</span> ScalarHandler&lt;&gt;(),cid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将Lang类型转换为 int 类型,并返回</span></span><br><span class="line">        <span class="keyword">return</span> count.intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.查询指定分类下的所有商品信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">findProductByCid</span><span class="params">(String cid)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line">        </span><br><span class="line">        String sql = <span class="string">&quot;select * from product where cid = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询结果是一个List集合, 使用BeanListHandler 封装结果集</span></span><br><span class="line">        List&lt;Product&gt; list = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Product&gt;(Product.class), cid);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-测试-ProductDao"><a href="#4-2-2-测试-ProductDao" class="headerlink" title="4.2.2 测试 ProductDao"></a>4.2.2 测试 ProductDao</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProductDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ProductDao productDao = <span class="keyword">new</span> ProductDao();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.测试 根据商品ID 获取商品名称 ,商品价格 以及商品所属分类的名称</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindProductById</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Product product = productDao.findProductById(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;商品名称: &quot;</span>+product.getPname()+ <span class="string">&quot;, 商品价格: &quot;</span> + product.getPrice() +</span><br><span class="line">                <span class="string">&quot;, 商品所属分类: &quot;</span>+ product.getCategory().getCname());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.测试 查询指定分类ID下的商品数</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetCount</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//查询 cid为3的分类下有多少个商品</span></span><br><span class="line">        <span class="keyword">int</span> count = productDao.getCount(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;分类ID为3的分类下商品个数: &quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.测试 查询指定分类下的所有商品信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindProductByCid</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询cid为 2的分类下 所有的商品信息</span></span><br><span class="line">        List&lt;Product&gt; list = productDao.findProductByCid(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Product product : list) &#123;</span><br><span class="line">            System.out.println(product);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-OrdersDao"><a href="#4-3-OrdersDao" class="headerlink" title="4.3 OrdersDao"></a>4.3 OrdersDao</h3><h4 id="4-3-1-多对一分析"><a href="#4-3-1-多对一分析" class="headerlink" title="4.3.1 多对一分析"></a>4.3.1 多对一分析</h4><p>OrderItem表与Orders表的关系是 多对一</p>
<p>之前我们一直是在描述一对多,那么我们再反向描述一下 多对一</p>
<p>方式是在Orders中应该有一个 集合用来保存订单中的订单项信息</p>
<p>在Orders类中添加 订单项的集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该订单中有多少订单项</span></span><br><span class="line">  List&lt;OrderItem&gt; orderItems = <span class="keyword">new</span> ArrayList&lt;OrderItem&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;OrderItem&gt; <span class="title">getOrderItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> orderItems;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderItems</span><span class="params">(List&lt;OrderItem&gt; orderItems)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.orderItems = orderItems;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-3-2-创建OrdersDao"><a href="#4-3-2-创建OrdersDao" class="headerlink" title="4.3.2 创建OrdersDao"></a>4.3.2 创建OrdersDao</h4><ul>
<li><p>需求1: 获取 uid为 001 的用户的所有订单信息</p>
</li>
<li><p>参数 uid, 返回值 LIst<Orders> 订单集合 </p>
</li>
<li><p>需求2: 获取订单编号为 order001的订单中的所有商品信息</p>
<ul>
<li>参数 oid, 返回值List<Product> 商品集合</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 获取订单编号为: order001的订单中的所有商品信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.查询订单项表中 oid是order001的 所有商品信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	oi.pid</span><br><span class="line"><span class="keyword">FROM</span> orderitem oi <span class="keyword">WHERE</span> oid <span class="operator">=</span> <span class="string">&#x27;order001&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.将上面的查询语句作为in函数的条件, 查询product表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pid <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> </span><br><span class="line">	oi.pid</span><br><span class="line"><span class="keyword">FROM</span> orderitem oi <span class="keyword">WHERE</span> oid <span class="operator">=</span> <span class="string">&#x27;order001&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrdersDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求1: 获取 uid为 001 的用户的所有订单信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Orders&gt;  <span class="title">findAllOrders</span><span class="params">(String uid)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select * from orders where uid = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个用户所有的订单信息</span></span><br><span class="line">        List&lt;Orders&gt; ordersList = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Orders&gt;(Orders.class), uid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ordersList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求2: 获取订单编号为 order001的订单中的所有商品信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">findOrderById</span><span class="params">(String oid)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.查询订单项表 获取订单项表中 订单ID为order001的数据</span></span><br><span class="line">        String sql = <span class="string">&quot;SELECT * FROM orderitem WHERE oid = ? &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.查询的结果是 多条订单项数据</span></span><br><span class="line">        List&lt;OrderItem&gt; list = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;OrderItem&gt;(OrderItem.class), oid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建集合保存商品信息</span></span><br><span class="line">        List&lt;Product&gt; productList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        ProductDao productDao = <span class="keyword">new</span> ProductDao();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.遍历订单项集合 获取Pid</span></span><br><span class="line">        <span class="keyword">for</span> (OrderItem orderItem : list) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.1从orderitem中获取 pid</span></span><br><span class="line">            String pid = orderItem.getPid();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.2 调用productDao</span></span><br><span class="line">            Product product = productDao.findProductById(pid);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.3 保存到集合</span></span><br><span class="line">            productList.add(product);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回 订单中对应的商品信息</span></span><br><span class="line">        <span class="keyword">return</span> productList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-3-测试OrdersDao"><a href="#4-3-3-测试OrdersDao" class="headerlink" title="4.3.3 测试OrdersDao"></a>4.3.3 测试OrdersDao</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOrderDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    OrdersDao ordersDao = <span class="keyword">new</span> OrdersDao();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取 uid为 001 的用户的所有订单信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllOrders</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Orders&gt; allOrders = ordersDao.findAllOrders(<span class="string">&quot;001&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历打印订单信息</span></span><br><span class="line">        <span class="keyword">for</span> (Orders order : allOrders) &#123;</span><br><span class="line">            System.out.println(order);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试 获取订单编号为: order001的订单中的所有商品信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOrderById</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Product&gt; list = ordersDao.findOrderById(<span class="string">&quot;order001&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;订单编号为order001中的商品有: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Product product : list) &#123;</span><br><span class="line">            System.out.println(product);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>































































]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫基础</title>
    <url>/2021/07/24/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>python网络爬虫</p>
<p>这是一篇文章关于python网络爬虫的个人笔记，</p>
<p>包括请求网站，解析数据，保存数据，多线程爬虫</p>
<span id="more"></span>

<h1 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h1><h2 id="urllib库-—内置"><a href="#urllib库-—内置" class="headerlink" title="urllib库  —内置"></a>urllib库  —内置</h2><h3 id="urlopen函数"><a href="#urlopen函数" class="headerlink" title="urlopen函数"></a>urlopen函数</h3><p>创建一个表示远程url的类文件对象，然后像本地文件一样操作这类文件对象来获取远程数据。在urllib.request模块中</p>
<p>url: 请求的url<br>data: 请求的data，如果设置了该参数，为post请求<br>返回值: 返回值是一个http.client.HTTPResponse对象，<br>该对象是一个类文件句柄对象。有read(size),readline,readlines,getcode等方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">resp = request.urlopen(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.read())</span><br><span class="line"><span class="built_in">print</span>(resp.getcode())</span><br></pre></td></tr></table></figure>

<h3 id="urlretrieve函数"><a href="#urlretrieve函数" class="headerlink" title="urlretrieve函数"></a>urlretrieve函数</h3><p>将网页上的某个文件保存到本地,在urllib.request模块中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">request.urlretrieve(url, file_name)</span><br></pre></td></tr></table></figure>

<h3 id="urlencode函数：编码"><a href="#urlencode函数：编码" class="headerlink" title="urlencode函数：编码"></a>urlencode函数：编码</h3><p>urlencode可以把字典数据转化成url<em><strong>编码</strong></em>的数据，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">18</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>( parse.urlencode(data) )</span><br><span class="line"></span><br><span class="line"><span class="comment">#name=%E7%8C%AA%E5%85%AB%E6%88%92&amp;age=18&amp;gender=%E7%94%B7       打印结果</span></span><br></pre></td></tr></table></figure>

<p><em>注</em>：urlencode对字典编码；quote对字符串编码。</p>
<h3 id="parse-qs函数：解码"><a href="#parse-qs函数：解码" class="headerlink" title="parse_qs函数：解码"></a>parse_qs函数：解码</h3><p>可以将经过编码后的url参数进行<em><strong>解码</strong></em>，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;name=%E7%8C%AA%E5%85%AB%E6%88%92&amp;age=18&amp;gender=%E7%94%B7&quot;</span></span><br><span class="line"><span class="built_in">print</span>( parse.parse_qs(data) )</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;&#x27;name&#x27;: [&#x27;猪八戒&#x27;], &#x27;age&#x27;: [&#x27;18&#x27;], &#x27;gender&#x27;: [&#x27;男&#x27;]&#125;           打印结果</span></span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：parse_qs解码成字典；unquote解码成字符串。</p>
<h3 id="urlparse和urlsplit函数：解析url"><a href="#urlparse和urlsplit函数：解析url" class="headerlink" title="urlparse和urlsplit函数：解析url"></a>urlparse和urlsplit函数：解析url</h3><p>对url各个组成部分进行分割，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com/index.html;user?id=S#comment&quot;</span></span><br><span class="line">result = parse.urlparse(url)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment">#打印结果:</span></span><br><span class="line"><span class="comment">#ParseResult(scheme=&#x27;http&#x27;, netloc=&#x27;www.baidu.com&#x27;, path=&#x27;/index.html&#x27;, params=&#x27;user&#x27;, query=&#x27;id=S&#x27;, fragment=&#x27;comment&#x27;)</span></span><br><span class="line">result2 = parse.urlsplit(url)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line"><span class="comment">#打印结果:</span></span><br><span class="line"><span class="comment">#SplitResult(scheme=&#x27;http&#x27;, netloc=&#x27;www.baidu.com&#x27;, path=&#x27;/index.html;user&#x27;, query=&#x27;id=S&#x27;, fragment=&#x27;comment&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(result.scheme)      <span class="comment">#http</span></span><br><span class="line"><span class="built_in">print</span>(result.netloc)      <span class="comment">#www.baidu.com</span></span><br></pre></td></tr></table></figure>

<p><em>注</em>：urlparse函数和urlsplit函数用法基本一样，唯一的区别是urlparse有params属性，而urlsplit没有。</p>
<h3 id="request-Request类：网络请求，可添加请求头，请求参数"><a href="#request-Request类：网络请求，可添加请求头，请求参数" class="headerlink" title="request.Request类：网络请求，可添加请求头，请求参数"></a>request.Request类：网络请求，可添加请求头，请求参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like    Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)   <span class="comment">#重点，添加请求头信息，User-Agent</span></span><br><span class="line">resp = request.urlopen(rq)</span><br><span class="line"><span class="built_in">print</span>(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="ProxyHandler处理器（代理设置）：封ip问题"><a href="#ProxyHandler处理器（代理设置）：封ip问题" class="headerlink" title="ProxyHandler处理器（代理设置）：封ip问题"></a>ProxyHandler处理器（代理设置）：封ip问题</h3><p>代理原理：在请求网站之前，先请求代理服务器，然后让代理服务器去请求目标网站，代理服务器拿到目标网站数据后，再转发给我们的代码。</p>
<p><a href="http://httpbin.org/">http://httpbin.org</a>  —这个网站方便查看http请求的一些参数</p>
<p>常用的代理有：</p>
<ul>
<li>快代理：<a href="https://www.kuaidaili.com/">https://www.kuaidaili.com/</a></li>
<li>代理云</li>
</ul>
<p>在代码中使用代理：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/ip&quot;</span></span><br><span class="line"><span class="comment">#创建handler</span></span><br><span class="line">handler = request.ProxyHandler(&#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;58.56.149.198:53281&quot;</span>&#125;)</span><br><span class="line"><span class="comment">#创建opener</span></span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"><span class="comment">#使用opener发送请求</span></span><br><span class="line">resp = opener.<span class="built_in">open</span>(url)</span><br><span class="line"><span class="built_in">print</span>( resp.read() )</span><br></pre></td></tr></table></figure>

<h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies:"></a>cookies:</h3><p>某些网站为了辨别用户身份，进行session跟踪而存储在用户本地终端上的数据</p>
<h4 id="模拟cookies访问网站方法一："><a href="#模拟cookies访问网站方法一：" class="headerlink" title="模拟cookies访问网站方法一："></a>模拟cookies访问网站方法一：</h4><p>用浏览器访问网站后，手动抓包，将cookie信息复制，放到代码的请求头上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.zhihu.com/&quot;</span></span><br><span class="line">headers = &#123;  </span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like    Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span>,</span><br><span class="line"><span class="string">&quot;cookie&quot;</span>: <span class="string">&#x27;_zap=5b69d7ff-9b3f-468b-b891-103b2029d8a3;..#复制的cookie内容太多，省略不写</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">rq = request.Request(url, headers=headers)</span></span><br><span class="line"><span class="string">resp = request.urlopen(rq)</span></span><br><span class="line"><span class="string">print(resp.read().decode(&quot;utf-8&quot;))</span></span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法二："><a href="#模拟cookies访问网站方法二：" class="headerlink" title="模拟cookies访问网站方法二："></a>模拟cookies访问网站方法二：</h4><p>http.cookiejar模块，主要有CookieJar，FileCookieJar，MozillaCookieJar，LWPCookieJar四个类</p>
<p>CookieJar：将cookie保存在内存中</p>
<p>FileCookieJar，MozillaCookieJar，LWPCookieJar：将cookie保存在文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> CookieJar</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="comment">#1，登入</span></span><br><span class="line">cookiejar = CookieJar()</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)  <span class="comment">#创建handler</span></span><br><span class="line">opener = request.build_opener(handler)            <span class="comment">#创建opener</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#opener发送请求前，准备登入的url,请求头,请求参数(需要编码)</span></span><br><span class="line">post_url = <span class="string">&quot;https://i.meishi.cc/login_t.php?username=17370466454&amp;login_type=1&amp;password=575389&quot;</span></span><br><span class="line">post_headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">post_data = parse.urlencode(&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;17370466454&quot;</span>,</span><br><span class="line">    <span class="string">&quot;login_type&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;575389&quot;</span></span><br><span class="line">&#125;)    </span><br><span class="line"><span class="comment">#request.Request()里的data只能接收字节，所以data=post_data.encode(&quot;utf-8&quot;)</span></span><br><span class="line">post_rq = request.Request(url=post_url, headers=post_headers, data=post_data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="comment">#opener访问网站后，网站的cookie暂时保存在内存opener中</span></span><br><span class="line">opener.<span class="built_in">open</span>(post_rq)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2，访问，opener已经带有cookie访问网站</span></span><br><span class="line">url = <span class="string">&quot;https://meishij.net/&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)</span><br><span class="line">resp = opener.<span class="built_in">open</span>(rq)</span><br><span class="line"><span class="built_in">print</span>(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="cookies的保存"><a href="#cookies的保存" class="headerlink" title="cookies的保存"></a>cookies的保存</h4><p>以MozillaCookieJar类为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookies = MozillaCookieJar(<span class="string">&quot;cookies.txt&quot;</span>)  <span class="comment">#保存cookies的文件</span></span><br><span class="line">handler = request.HTTPCookieProcessor(cookies)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)</span><br><span class="line">opener.<span class="built_in">open</span>(rq)</span><br><span class="line">cookies.save()   <span class="comment">#保存cookies</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#cookies.save( ignore_discard=False, ignore_expires=False )  默认</span></span><br><span class="line"><span class="comment">#ignore_discard=True       即使cookies即将被丢失也要保存起来</span></span><br><span class="line"><span class="comment">#ignore_expires=True	   如果cookies已经过期也将它保存，并且文件已存在时将覆盖</span></span><br></pre></td></tr></table></figure>



<h2 id="requests库-—第三方库"><a href="#requests库-—第三方库" class="headerlink" title="requests库  —第三方库"></a>requests库  —第三方库</h2><p>让HTTP服务人类</p>
<h3 id="安装和文档地址"><a href="#安装和文档地址" class="headerlink" title="安装和文档地址:"></a>安装和文档地址:</h3><ul>
<li><p>pip安装：pip install requests</p>
</li>
<li><p>中文文档：<a href="https://docs.python-requests.org/zh_CN/latest/index.html">https://docs.python-requests.org/zh_CN/latest/index.html</a></p>
</li>
<li><p>github地址：<a href="https://github.com/requests/requests">https://github.com/requests/requests</a></p>
</li>
</ul>
<h3 id="发送get请求："><a href="#发送get请求：" class="headerlink" title="发送get请求："></a>发送get请求：</h3><p>response = requests.get(url, headers=headers, params=params)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;wd&quot;</span>:<span class="string">&quot;中国&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url, headers=headers, params=params)  <span class="comment">#发送get请求</span></span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line"><span class="built_in">print</span>(response.content.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(response.json())  <span class="comment">#如果响应的是json格式字符串，直接将JSON转换成python数据，相当于json.loads(json)</span></span><br></pre></td></tr></table></figure>

<h3 id="发送post请求："><a href="#发送post请求：" class="headerlink" title="发送post请求："></a>发送post请求：</h3><p>方法与上面的<em><strong>发送get请求</strong></em>用法差不多：</p>
<p>response = requests.post(url, headers=headers, data=data)</p>
<h3 id="response-content和response-text区别："><a href="#response-content和response-text区别：" class="headerlink" title="response.content和response.text区别："></a>response.content和response.text区别：</h3><p>1，response.content：直接从网站上抓取数据，没有经过解码，所以是bytes类型，其实硬盘和网络上传输的字符串类型都是bytes类型。</p>
<p>2，response.text：是str数据类型，把response.content经行自动解码的结果，自动解码可能会出现乱码的情况，所以需要自己手动解码：response.content.decode(“utf-8”)。</p>
<h3 id="使用代理："><a href="#使用代理：" class="headerlink" title="使用代理："></a>使用代理：</h3><p>resp = requests.get(url, proxies=代理信息)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;116.196.88.86:3128&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/ip&quot;</span></span><br><span class="line">resp = requests.get(url, proxies=proxy)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<h3 id="处理cookie"><a href="#处理cookie" class="headerlink" title="处理cookie:"></a>处理cookie:</h3><h4 id="查看cookies"><a href="#查看cookies" class="headerlink" title="查看cookies"></a>查看cookies</h4><p>响应中如果包含cookie，可以通过cookies属性查看cookie：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(resp.cookies)</span><br><span class="line"><span class="built_in">print</span>(resp.cookies.get_dict())   <span class="comment">#字典型的coookie</span></span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法一：-1"><a href="#模拟cookies访问网站方法一：-1" class="headerlink" title="模拟cookies访问网站方法一："></a>模拟cookies访问网站方法一：</h4><p>用浏览器访问网站后，手动抓包，将cookie信息复制，放到代码的请求头上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.zhihu.com/&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span>,</span><br><span class="line"><span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;_zap=5b69d7ff-9b3f-468b-b891-103b2029d8&#x27;</span>   <span class="comment">#复制的cookie内容太多，省略</span></span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法二：使用session，共享cookie"><a href="#模拟cookies访问网站方法二：使用session，共享cookie" class="headerlink" title="模拟cookies访问网站方法二：使用session，共享cookie"></a>模拟cookies访问网站方法二：使用session，共享cookie</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#登入,准备好需要登入的网站，参数，请求头</span></span><br><span class="line">post_url = <span class="string">&quot;&quot;</span>      <span class="comment">#登入的网站</span></span><br><span class="line">post_data = &#123;&#125;     <span class="comment">#登入的参数，账号密码</span></span><br><span class="line">post_headers = &#123;&#125;  <span class="comment">#登入需要的请求头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1，创建session</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="comment">#2，用session发送请求，然后session会自动保存cookie信息</span></span><br><span class="line">session.post(url=post_url, data=post_data, headers=post_headers)</span><br><span class="line"><span class="comment">#3，session中已带有cookie信息，继续用session访问网站，实现cookie共享</span></span><br><span class="line">url = <span class="string">&quot;https://m.meishij.net/&quot;</span></span><br><span class="line">resp = session.get(url)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在session中添加代理IP</span></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;116.196.88.86:3128&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">session.proxies = proxy</span><br></pre></td></tr></table></figure>

<h3 id="处理不信任的ssl证书："><a href="#处理不信任的ssl证书：" class="headerlink" title="处理不信任的ssl证书："></a>处理不信任的ssl证书：</h3><p>对于哪些被信任的SSL证书的网站，如<a href="https://www.baidu.com/%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%E3%80%82">https://www.baidu.com/，直接访问可以正常返回响应。</a></p>
<p>而不被信任的SSL证书的网站无法正常返回响应。requests请求时需要把verify=False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://inv-veri.chinatax.gov.cn/&quot;</span></span><br><span class="line">resp = requests.get(url, verify=<span class="literal">False</span>)   <span class="comment">#verify=False</span></span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>



<h1 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h1><p>数据解析，即数据提取，爬取的所有信息中将需要的信息提取出来。</p>
<h2 id="XPath语法和lxml模块"><a href="#XPath语法和lxml模块" class="headerlink" title="XPath语法和lxml模块"></a>XPath语法和lxml模块</h2><h3 id="什么是XPath"><a href="#什么是XPath" class="headerlink" title="什么是XPath"></a>什么是XPath</h3><p>xpath（XML Path Language）是一门在xml和html文档中查找信息的语言，可用来在XML和HTML文档中对元素和属性经行遍历</p>
<h3 id="XPath开发工具"><a href="#XPath开发工具" class="headerlink" title="XPath开发工具"></a>XPath开发工具</h3><p>Chrome插件XPath Helper</p>
<p>Firefox插件Try XPath</p>
<h3 id="XPath节点"><a href="#XPath节点" class="headerlink" title="XPath节点"></a>XPath节点</h3><p>在XPath中，有七类类型的节点：元素，属性，文本，命名空间，处理指令，注释，文档(根)节点。XML文档是被作为节点树来对待的。树的根被称为文档节点或者根节点。</p>
<h3 id="XPath基本语法："><a href="#XPath基本语法：" class="headerlink" title="XPath基本语法："></a>XPath基本语法：</h3><h4 id="路径表达式："><a href="#路径表达式：" class="headerlink" title="路径表达式："></a>路径表达式：</h4><table>
<thead>
<tr>
<th align="left">表达式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">nodename</td>
<td align="left">选取此节点的所有子节点。</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">从根节点选取（取子节点）。</td>
</tr>
<tr>
<td align="left">//</td>
<td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置（取子孙节点）。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">选取当前节点。</td>
</tr>
<tr>
<td align="left">..</td>
<td align="left">选取当前节点的父节点。</td>
</tr>
<tr>
<td align="left">@</td>
<td align="left">选取属性。</td>
</tr>
</tbody></table>
<h4 id="谓语："><a href="#谓语：" class="headerlink" title="谓语："></a>谓语：</h4><table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">/bookstore/book[1]</td>
<td align="left">选取属于 bookstore 子元素的第一个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[last()]</td>
<td align="left">选取属于 bookstore 子元素的最后一个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[last()-1]</td>
<td align="left">选取属于 bookstore 子元素的倒数第二个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[position()&lt;3]</td>
<td align="left">选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td>
</tr>
<tr>
<td align="left">//title[@lang]</td>
<td align="left">选取所有拥有名为 lang 的属性的 title 元素。</td>
</tr>
<tr>
<td align="left">//title[@lang=’eng’]</td>
<td align="left">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>
</tr>
<tr>
<td align="left">/bookstore/book[price&gt;35.00]</td>
<td align="left">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
<tr>
<td align="left">/bookstore/book[price&gt;35.00]//title</td>
<td align="left">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
</tbody></table>
<h4 id="通配符："><a href="#通配符：" class="headerlink" title="通配符："></a>通配符：</h4><table>
<thead>
<tr>
<th align="left">通配符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配任何元素节点。</td>
</tr>
<tr>
<td align="left">@*</td>
<td align="left">匹配任何属性节点。</td>
</tr>
<tr>
<td align="left">node()</td>
<td align="left">匹配任何类型的节点。</td>
</tr>
</tbody></table>
<h4 id="选取若干路径："><a href="#选取若干路径：" class="headerlink" title="选取若干路径："></a>选取若干路径：</h4><table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">//book/title | //book/price</td>
<td align="left">选取 book 元素的所有 title 和 price 元素。</td>
</tr>
<tr>
<td align="left">//title | //price</td>
<td align="left">选取文档中的所有 title 和 price 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book/title | //price</td>
<td align="left">选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td>
</tr>
</tbody></table>
<h3 id="lxml库："><a href="#lxml库：" class="headerlink" title="lxml库："></a>lxml库：</h3><p>安装：pip install lxml</p>
<p>lxml python 官方文档：<a href="https://lxml.de/index.html">https://lxml.de/index.html</a></p>
<p>基本使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#随便定义的html文本举例</span></span><br><span class="line">text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">	&lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">	&lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">	&lt;script type=&quot;text/javascript&quot; src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">	&lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">		&lt;input type=&quot;text&quot;&gt;</span></span><br><span class="line"><span class="string">		&lt;p&gt;&lt;a href=&#x27;www.baidu.com&#x27;&gt;hello&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">	&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment">#将字符串解析为html文档树</span></span><br><span class="line">html= etree.HTML(text)</span><br><span class="line"><span class="built_in">print</span>(html)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将html列化为字符串,即获取元素的源代码</span></span><br><span class="line">result = etree.tostring(html).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#element.get(&quot;属性&quot;)  获取元素的某个属性的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从文件中读取html代码</span></span><br><span class="line">html = etree.parse(<span class="string">&quot;hello.html&quot;</span>)</span><br><span class="line">result = etree.tostring(html).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h3 id="在lxml中使用xpath语法："><a href="#在lxml中使用xpath语法：" class="headerlink" title="在lxml中使用xpath语法："></a>在lxml中使用xpath语法：</h3><p>文件路径：hello.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link0.html&quot;</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link1.html&quot;</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-inactive&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link2.html&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link3.html&quot;</span>&gt;</span>forth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link4.html&quot;</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>练习语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在lxml中使用xpath</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">html = etree.parse(<span class="string">&quot;hello.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1,获取所有li标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(etree.tostring(i))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#2，获取所有li标签下的class属性值</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/@class&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3,获取li标签下href为&quot;link0.html&quot;的a标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/a[@href=&#x27;link0.html&#x27;]&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4,获取li标签下所有span标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li//span&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5,获取li标签下的a标签的所有class属性</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/a//@class&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6,获取最后一个li的a的href属性对应的值</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()]/a/@href&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7,获取倒数第二个li元素的内容</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()-1]/a&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result[<span class="number">0</span>].text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8,获取倒是第二个li元素的内容的第二种方式</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()-1]/a/text()&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="xpath实战-爬取笑话网站："><a href="#xpath实战-爬取笑话网站：" class="headerlink" title="xpath实战-爬取笑话网站："></a>xpath实战-爬取笑话网站：</h3><p>网站：<a href="https://xiaohua.zol.com.cn/new/">https://xiaohua.zol.com.cn/new/</a></p>
<p>详情：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;https://xiaohua.zol.com.cn/&quot;</span>   </span><br><span class="line">joke = []     <span class="comment">#存放joke的容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解析每一页笑话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    detail_url_list = html.xpath(<span class="string">&quot;//ul[@class=&#x27;article-list&#x27;]/li[@class=&#x27;article-summary&#x27;]//a[@class=&#x27;all-read&#x27;]/@href&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_url_list:</span><br><span class="line">        detail_url = url+detail_url</span><br><span class="line">        parse_detail(detail_url)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#解析详情页笑话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>(<span class="params">detail_url</span>):</span></span><br><span class="line">    resp = requests.get(detail_url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    joke_title = html.xpath(<span class="string">&quot;//h1[@class=&#x27;article-title&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    joke_content = <span class="string">&#x27;&#x27;</span>.join(html.xpath(<span class="string">&quot;//div[@class=&#x27;article-text&#x27;]//text()&quot;</span>)).strip()</span><br><span class="line">    joke.append(&#123;</span><br><span class="line">        <span class="string">&quot;joke_title&quot;</span>: joke_title,</span><br><span class="line">        <span class="string">&quot;joke_content&quot;</span>: joke_content</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;joke_title&#125;</span>笑话下载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#主流程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):      <span class="comment">##1，2，3页笑话</span></span><br><span class="line">        page_url = <span class="string">f&quot;https://xiaohua.zol.com.cn/new/<span class="subst">&#123;i&#125;</span>.html&quot;</span>    </span><br><span class="line">        parse_page(page_url)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;joke.json&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="comment">#json.dump函数，将内存的数据保存到文件中</span></span><br><span class="line">        <span class="comment">#如果ensure_ascii没有设置为False，那么保存到json文件中文会存储为Unicode字符串</span></span><br><span class="line">        json.dump(joke, fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;所有笑话加载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p><em><strong>注</strong></em>：测试时，for循环中应添加break终止循环。代码运行时，添加time.sleep(2)，避免数据抓取过于频繁。</p>
<h2 id="BeautifulSoup4库"><a href="#BeautifulSoup4库" class="headerlink" title="BeautifulSoup4库"></a>BeautifulSoup4库</h2><p>和lxml一样，BeautifulSoup也是一个HTML/XML的解析器，主要功能也是解析和提取HTML/XML数据。</p>
<h3 id="安装和文档"><a href="#安装和文档" class="headerlink" title="安装和文档:"></a>安装和文档:</h3><p>安装：</p>
<p>pip install bs4</p>
<p>中文文档：</p>
<p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p>
<h3 id="几大解析工具对比："><a href="#几大解析工具对比：" class="headerlink" title="几大解析工具对比："></a>几大解析工具对比：</h3><table>
<thead>
<tr>
<th>解析工具</th>
<th>解析速度</th>
<th>解析难度</th>
</tr>
</thead>
<tbody><tr>
<td>BeautifulSoup</td>
<td>最慢</td>
<td>最简单</td>
</tr>
<tr>
<td>lxml</td>
<td>快</td>
<td>简单</td>
</tr>
<tr>
<td>正则</td>
<td>最快</td>
<td>最难</td>
</tr>
</tbody></table>
<h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">	&lt;a href=&quot;link.html&quot;&gt;hello word!!&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#第二个参数选择解析器，这里使用的是lxml解析器，已下载过。</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(soup)  	<span class="comment">#输html文档树</span></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())  <span class="comment">#输出格式有自动缩进</span></span><br><span class="line"><span class="built_in">print</span>(soup.a)   <span class="comment">#获取a标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.name)   <span class="comment">#获取a标签的标签名，就是a</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.attrs)  <span class="comment">#获取a标签的所有属性，返回字典</span></span><br><span class="line"><span class="built_in">print</span>(soup.a[<span class="string">&quot;href&quot;</span>]) <span class="comment">#a的href属性值</span></span><br></pre></td></tr></table></figure>

<h3 id="常见的四种对象："><a href="#常见的四种对象：" class="headerlink" title="常见的四种对象："></a>常见的四种对象：</h3><p>1，Tag：BeautifulSoup种所有标签都是Tag类型</p>
<p>2，NavigableString：标签的文本内容，继承python中的str，用法也是和str一样的</p>
<p>3，BeautifulSoup：继承Tag，用来生成BeautifulSoup树的，用法和Tag差不多</p>
<p>3，Comment：继承NavigableString，是注解内容</p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;hello word!!&lt;/p&gt;</span></span><br><span class="line"><span class="string">	&lt;!-- &lt;a href=&quot;link1&quot;&gt;hello word&lt;/a&gt; --&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.p)     <span class="comment">#Tag类型</span></span><br><span class="line"><span class="built_in">print</span>(soup.p.string)  <span class="comment">#NavigableString类型</span></span><br><span class="line"><span class="built_in">print</span>(soup)		  <span class="comment">#BeautifulSoup类型</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.string)  <span class="comment">#Comment类型</span></span><br></pre></td></tr></table></figure>

<h3 id="contents和children："><a href="#contents和children：" class="headerlink" title="contents和children："></a>contents和children：</h3><p><em>用法</em>：</p>
<p>Tag对象.contents     </p>
<p>Tag对象.children</p>
<p><em>返回</em>：</p>
<p>返回某个标签下的直接子元素，其中也包括字符串。</p>
<p><em>区别</em>：</p>
<p>contents返回的是list列表</p>
<p>children返回的是一个迭代器</p>
<h3 id="string和strings，stripped-strings属性和get-text-方法："><a href="#string和strings，stripped-strings属性和get-text-方法：" class="headerlink" title="string和strings，stripped_strings属性和get_text()方法："></a>string和strings，stripped_strings属性和get_text()方法：</h3><p><em>string</em>:获取某个标签下的文本内容，返回的是字符串。如果有多行，就无法获取。</p>
<p><em>strings</em>:获取某个标签下的文本内容，可以是多行，返回的是生成器。</p>
<p><em>stripped_strings</em>:用法和strings差不多可以是多行，放回生成器，区别是该属性会去除空白字符，如空格换行符。</p>
<p><em>get_text()</em>:获取某个标签下的文本内容，可以是多行，返回字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"></span><br><span class="line">string = soup.li.string</span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line">strings = soup.ul.strings</span><br><span class="line"><span class="built_in">print</span>(strings)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strings:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">stripped_strings = soup.ul.stripped_strings</span><br><span class="line"><span class="built_in">print</span>(stripped_strings)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> stripped_strings:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h3 id="find-和find-all-方法"><a href="#find-和find-all-方法" class="headerlink" title="find()和find_all()方法:"></a>find()和find_all()方法:</h3><p>搜索文档树使用的方法。</p>
<p>find方法是找到第一个满足条件的标签返回，返回一个元素。</p>
<p>find_all方法是把所有满足条件的标签都返回，返回的是一个list列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-0&quot; id=&#x27;hello&#x27;&gt;&lt;a href=&quot;link0.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;forth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取第一个li标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.li)</span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&quot;li&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有的li标签</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&quot;li&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取第二个li标签</span></span><br><span class="line">li = soup.find_all(<span class="string">&quot;li&quot;</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="comment">#获取class等于item-inactive的li标签，注：由于属性class有重名，用class_</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>, class_=<span class="string">&#x27;item-inactive&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"><span class="comment">#获取所有a标签href值</span></span><br><span class="line">a_list = soup.find_all(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> a_list:</span><br><span class="line">    <span class="built_in">print</span>(a[<span class="string">&quot;href&quot;</span>])</span><br><span class="line"><span class="comment">#获取所有li标签的文本内容</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    <span class="built_in">print</span>(li.string)</span><br><span class="line"><span class="comment">#只获取前两个li标签，limit限制个数</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>, limit=<span class="number">2</span>) </span><br></pre></td></tr></table></figure>

<h3 id="select-方法："><a href="#select-方法：" class="headerlink" title="select()方法："></a>select()方法：</h3><p>有时候使用css选择器的方式更加方便，需要使用css选择器时，用select方法。返回list列表。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#通过标签名查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line"><span class="comment">#通过class查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;.item-inactive&#x27;</span>))</span><br><span class="line"><span class="comment">#通过id查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;#hello&#x27;</span>))</span><br><span class="line"><span class="comment">#组合查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li a&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li &gt; a&#x27;</span>))</span><br><span class="line"><span class="comment">#通过属性查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a[href=&quot;link0.html&quot;]&#x27;</span>))</span><br><span class="line"><span class="comment">#获取内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a&#x27;</span>)[<span class="number">0</span>].get_text())</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战1-豆瓣Top250爬取："><a href="#爬虫实战1-豆瓣Top250爬取：" class="headerlink" title="爬虫实战1-豆瓣Top250爬取："></a>爬虫实战1-豆瓣Top250爬取：</h3><p>网站：<a href="https://movie.douban.com/top250">https://movie.douban.com/top250</a></p>
<p>爬取：爬取top250的电影的信息，这里只爬取了电影名，演员，上映时间，评分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#访问页，获取每一页里的所有详情页url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_urls</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    html = resp.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    li_list = soup.find(<span class="string">&quot;ol&quot;</span>, class_=<span class="string">&quot;grid_view&quot;</span>).find_all(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">    detail_urls = []</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        detail_url = li.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&quot;href&quot;</span>]</span><br><span class="line">        detail_urls.append(detail_url)</span><br><span class="line">    <span class="keyword">return</span> detail_urls</span><br><span class="line"><span class="comment">#解析详情页：访问详情页，解析电影信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>(<span class="params">detail_url, fp</span>):</span></span><br><span class="line">    resp = requests.get(detail_url, headers=headers)</span><br><span class="line">    html = resp.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(soup.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span>=<span class="string">&quot;wrapper&quot;</span>).find(<span class="string">&quot;h1&quot;</span>).stripped_strings))</span><br><span class="line">    actor_exist = soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;actor&quot;</span>)</span><br><span class="line">    actor = <span class="string">&quot;暂无数据&quot;</span></span><br><span class="line">    <span class="comment">#由于有的电影没有演员信息，所有这里if判断</span></span><br><span class="line">    <span class="keyword">if</span> actor_exist:</span><br><span class="line">        actor = <span class="string">&#x27; &#x27;</span>.join(<span class="built_in">list</span>(soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;actor&quot;</span>).find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;attrs&quot;</span>).stripped_strings))</span><br><span class="line">    date = soup.find(<span class="string">&quot;div&quot;</span>, <span class="built_in">id</span>=<span class="string">&quot;info&quot;</span>).find_all(<span class="string">&quot;span&quot;</span>, <span class="built_in">property</span>=<span class="string">&quot;v:initialReleaseDate&quot;</span>)[<span class="number">0</span>].string</span><br><span class="line">    score = soup.find(<span class="string">&quot;strong&quot;</span>, class_=<span class="string">&quot;ll rating_num&quot;</span>).string</span><br><span class="line">    num = soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;top250-no&quot;</span>).string</span><br><span class="line">    fp.write(<span class="string">&quot;电影名：&#123;&#125;，演员：&#123;&#125;，上映时间：&#123;&#125;，评分：&#123;&#125;\n\n&quot;</span>.<span class="built_in">format</span>(name, actor, date, score))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num&#125;</span>-<span class="subst">&#123;name&#125;</span>,电影信息加载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    base_url = <span class="string">&quot;https://movie.douban.com/top250?start=&#123;&#125;&amp;filter=&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;movieTop250.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">250</span>,<span class="number">25</span>):</span><br><span class="line">            page_url = base_url.<span class="built_in">format</span>(i)</span><br><span class="line">            detail_urls = get_detail_urls(page_url)</span><br><span class="line">            <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">                parse_detail(detail_url, fp)</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;top250部电影信息加载完毕！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战2-快代理ip爬取："><a href="#爬虫实战2-快代理ip爬取：" class="headerlink" title="爬虫实战2-快代理ip爬取："></a>爬虫实战2-快代理ip爬取：</h3><p>网站：<a href="https://www.kuaidaili.com/free/">https://www.kuaidaili.com/free/</a></p>
<p>爬取：IP信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpSpider</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;准备10页的url&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.page_urls = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">            page_url = <span class="string">&quot;https://www.kuaidaili.com/free/inha/&#123;&#125;/&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">            self.page_urls.append(page_url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page_infos</span>(<span class="params">self,page_url</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;解析每一页的代理ip信息，并返回&#x27;&#x27;&#x27;</span></span><br><span class="line">        resp = requests.get(page_url, headers=headers)</span><br><span class="line">        html = resp.text</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        trs = soup.find(<span class="string">&quot;table&quot;</span>, class_=<span class="string">&quot;table table-bordered table-striped&quot;</span>).find(<span class="string">&quot;tbody&quot;</span>).find_all(<span class="string">&quot;tr&quot;</span>)</span><br><span class="line">        infos = []</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">            info = <span class="built_in">list</span>(tr.stripped_strings)</span><br><span class="line">            infos.append(info)</span><br><span class="line">        <span class="keyword">return</span> infos</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;主程序&#x27;&#x27;&#x27;</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ipSpider.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;IP&quot;</span>,<span class="string">&quot;PORT&quot;</span>,<span class="string">&quot;匿名度&quot;</span>,<span class="string">&quot;类型&quot;</span>,<span class="string">&quot;位置&quot;</span>,<span class="string">&quot;响应速度&quot;</span>,<span class="string">&quot;最后验证时间&quot;</span>))</span><br><span class="line">            <span class="keyword">for</span> page_url <span class="keyword">in</span> self.page_urls:</span><br><span class="line">                infos = self.parse_page_infos(page_url)</span><br><span class="line">                <span class="keyword">for</span> info <span class="keyword">in</span> infos:</span><br><span class="line">                    fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(info[<span class="number">0</span>],info[<span class="number">1</span>],info[<span class="number">2</span>],info[<span class="number">3</span>],info[<span class="number">4</span>],info[<span class="number">5</span>],info[<span class="number">6</span>]))</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;count&#125;</span>页解析完成！&quot;</span>)</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ipSpider = IpSpider()</span><br><span class="line">    ipSpider.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h2 id="正则表达式和re模块"><a href="#正则表达式和re模块" class="headerlink" title="正则表达式和re模块"></a>正则表达式和re模块</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;abc&quot;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;a&#x27;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h3 id="使用规则："><a href="#使用规则：" class="headerlink" title="使用规则："></a>使用规则：</h3><h4 id="匹配单个字符："><a href="#匹配单个字符：" class="headerlink" title="匹配单个字符："></a>匹配单个字符：</h4><ul>
<li><p>点(.)：匹配任意字符(除了\n)</p>
</li>
<li><p>\d：匹配任意数字</p>
</li>
<li><p>\D：匹配任意非数字</p>
</li>
<li><p>\s：匹配任意空白字符(\n,\t,\r)</p>
</li>
<li><p>\S：非空白字符</p>
</li>
<li><p>\w：匹配大小写英文字母，数字以及下划线</p>
</li>
<li><p>\W：匹配和\w正好相反</p>
</li>
<li><p>[]：组合方式，只要满足中括号中的每一项都算匹配成功</p>
</li>
</ul>
<p>#例如：</p>
<p>[1b]：表示1和b都能匹配到，</p>
<p>[a-zA-Z]：表示大小写英文字母都能匹配到</p>
<p>[0-9]：表示0到9数字都能匹配到，[ ^0-9 ]：^取反</p>
<h4 id="匹配多个字符："><a href="#匹配多个字符：" class="headerlink" title="匹配多个字符："></a>匹配多个字符：</h4><ul>
<li><p>*：匹配任意个</p>
</li>
<li><p>+：匹配1个或多个</p>
</li>
<li><p>？：匹配0个或1个</p>
</li>
<li><p>{m}：匹配m个</p>
</li>
<li><p>{m,n}：匹配m-n之间个</p>
</li>
<li><p>|：匹配多个字符或表达式，或连接</p>
</li>
</ul>
<p>练习：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#手机验证：号码1开头，第二位34578，后面9位任意数字</span></span><br><span class="line">text = <span class="string">&quot;17370466454&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;1[34578]\d&#123;9&#125;&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱验证：邮箱名由数字、大小写英文、下划线组成，后接@，后接域名</span></span><br><span class="line">text = <span class="string">&quot;1753645532@qq.com&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;\w+@[a-z0-9]+\.[a-z]+&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证url：前面是http或https或ftp，后接冒号，后接//，后接任意非空白字符</span></span><br><span class="line">text = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;(http|https|ftp)://\S+&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#省份证验证：前面17位任意数字，后接数字或大小写x</span></span><br><span class="line">text = <span class="string">&quot;36242820000815323x&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;\d&#123;17&#125;[\dxX]&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>

<h4 id="开始，结束，贪婪和非贪婪："><a href="#开始，结束，贪婪和非贪婪：" class="headerlink" title="开始，结束，贪婪和非贪婪："></a>开始，结束，贪婪和非贪婪：</h4><ul>
<li><p>^：以…开头</p>
</li>
<li><p>&amp;：以…结尾</p>
</li>
<li><p>贪婪和非贪婪：正常时为贪婪模式，尽可能匹配多的字符；匹配多个字符时，加上?为非贪婪模式，尽可能少的匹配字符。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text = <span class="string">&quot;123456&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;\d+?&quot;</span>,text)   <span class="comment">#匹配多个字符时，加上?为非贪婪模式</span></span><br><span class="line"><span class="built_in">print</span>(result.group())   <span class="comment">#结果：1</span></span><br></pre></td></tr></table></figure>

<p>案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例一：获取html标签</span></span><br><span class="line">text = <span class="string">&quot;&lt;h1&gt;这是标题&lt;/h1&gt;&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;&lt;.+&gt;&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())   <span class="comment">#贪婪模式结果：&lt;h1&gt;这是标题&lt;/h1&gt;</span></span><br><span class="line">result2 = re.match(<span class="string">&quot;&lt;.+?&gt;&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result2.group())  <span class="comment">#非贪婪模式结果：&lt;h1&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例二：验证一个字符是不是1-100之间</span></span><br><span class="line">text = <span class="string">&quot;100&quot;</span></span><br><span class="line">result = re.search(<span class="string">&quot;^0$|^[1-9]\d?$|^100$&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>

<h4 id="转义字符和原生字符："><a href="#转义字符和原生字符：" class="headerlink" title="转义字符和原生字符："></a>转义字符和原生字符：</h4><p>python中的转义字符，如在\n前加上一个,即\\n；在字符串前面加上r，变成原生字符。例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#\n有特殊意义的字符，转义后将变得无意义</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;aaaa\\naa&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;aaa\naa&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>正则中的转义字符：也是在特殊意义字符前加\</p>
<p>但是在python中解析正则，会先把字符串给python层面解析，再给正则解析。</p>
<p>所以对于\a,\b,\c,\d…这些带有反斜杠的特殊意义字符前加上\，却不能被成功解析。应该还需要在字符串前面加上r，如r”\c”，或者应该四个,如”\\\\d”。建议用加r的方法，所以以后在python中使用正则匹配时应习惯性在字符串前加r</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;\c&quot;</span></span><br><span class="line">result = re.match(<span class="string">r&quot;\\c&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line">result2 = re.match(<span class="string">&quot;\\\\c&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result2.group())</span><br><span class="line"><span class="comment">#输出结果：\c</span></span><br></pre></td></tr></table></figure>

<h4 id="分组："><a href="#分组：" class="headerlink" title="分组："></a>分组：</h4><p>分组,把重要的信息用()进行分组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;as1dyyf2&quot;</span>  <span class="comment">#获取数字</span></span><br><span class="line">result = re.match(<span class="string">&quot;[a-z]+(\d)[a-z]+(\d)&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.groups())  <span class="comment">#结果：(&#x27;1&#x27;, &#x27;2&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#group()/group(0)：匹配整个分组</span></span><br><span class="line"><span class="comment">#group(1)：匹配第一个分组</span></span><br><span class="line"><span class="comment">#group(2)：匹配第二个分组</span></span><br><span class="line"><span class="comment">#groups()：匹配所有分组</span></span><br></pre></td></tr></table></figure>

<h3 id="re模块常用函数："><a href="#re模块常用函数：" class="headerlink" title="re模块常用函数："></a>re模块常用函数：</h3><p>match()，search()，findall()，sub()，split()，compile() 和 re.VERBOSE，re.DOTALL</p>
<ul>
<li>match：匹配第一个满足条件的，从文本<strong>开始处</strong>进行匹配</li>
<li>search：匹配第一个满足条件的</li>
<li>findall：匹配<strong>所有</strong>满足条件的，返回list列表</li>
<li>sub：<strong>替换</strong>所有满足条件的字符串，相比于默认的<code>text.replace</code>可以有多个条件</li>
<li>split：按条件<strong>分割</strong>字符,返回list列表，相比于默认的<code>text.split</code>可以有多个条件</li>
<li>compile：<strong>编译</strong>正则表达式，如果在for循环中应该先编译再进行循环，提高效率</li>
<li>re.VERBOSE：在函数参数中加上表示可以添加注释<br>re.DOTALL：在函数参数中加上表示点(.)可以代替所以字符<br>re.l：不区分大小写</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#findall:匹配所有满足条件的，返回list列表</span></span><br><span class="line">text = <span class="string">&quot;apple price is $99, orange price is $17&quot;</span></span><br><span class="line">result = re.findall(<span class="string">r&quot;\$\d+&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result)   <span class="comment">#结果：[&#x27;$99&#x27;, &#x27;$17&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sub，替换字符串</span></span><br><span class="line">text = <span class="string">&quot;hello world,ni hao ya&quot;</span></span><br><span class="line">result = re.sub(<span class="string">r&quot;[ ,]&quot;</span>,<span class="string">&quot;,&quot;</span>,text)  <span class="comment">#空格或逗号替换</span></span><br><span class="line"><span class="built_in">print</span>(result)   <span class="comment">#结果：hello,world,ni,hao,ya</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#split,分割字符,返回list列表</span></span><br><span class="line">text = <span class="string">&quot;hello,world ni,hao ya&quot;</span></span><br><span class="line">result = re.split(<span class="string">r&quot; |,&quot;</span>,text)  <span class="comment">#空格或逗号分割</span></span><br><span class="line"><span class="built_in">print</span>(result)   <span class="comment">#结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;ni&#x27;, &#x27;hao&#x27;, &#x27;ya&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#compile：编译正则表达式，如果在for循环中应该先编译再进行循环，提高效率</span></span><br><span class="line">text = <span class="string">&quot;apple price is 36.12&quot;</span></span><br><span class="line">r = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+\.?\d*&#x27;</span>)</span><br><span class="line">result = re.search(r,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战1-赶集网租房信息爬取："><a href="#爬虫实战1-赶集网租房信息爬取：" class="headerlink" title="爬虫实战1-赶集网租房信息爬取："></a>爬虫实战1-赶集网租房信息爬取：</h3><p>网站：<a href="https://cs.58.com/chuzu/">https://cs.58.com/chuzu/</a></p>
<p>爬取：前十页房子标题，户型，面积，价格信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">cookie = <span class="string">&quot;&quot;&quot;f=n; commontopbar_new_city_info=414%7C%E9%95%..........&quot;&quot;&quot;</span> <span class="comment">#cookie复制的，字符太多，省略</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cookie&quot;</span>:cookie</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    infos = re.findall(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    house-cell.+?des.+?&lt;h2&gt;.+?&gt;\s*(.+?)\s*?&lt;/a&gt;    #标题</span></span><br><span class="line"><span class="string">    .+?&lt;p.+?&gt;(.+?)\s+.*?(\d+.+?)\s+         #户型，面积</span></span><br><span class="line"><span class="string">    .+?money.+?&lt;b.+?&gt;(\d+?)&lt;/b&gt;      #价格</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>,text,re.VERBOSE|re.DOTALL)    <span class="comment">#re.VERBOSE和re.DOTALL的用法体现</span></span><br><span class="line">    <span class="keyword">return</span> infos</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    base_url = <span class="string">&quot;https://cs.58.com/chuzu/pn&#123;&#125;/?PGTID=0d3090a7-0019-e874-075b-c49785753d71&amp;ClickID=2&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;houseInfo.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;标题&quot;</span>,<span class="string">&quot;户型&quot;</span>,<span class="string">&quot;面积&quot;</span>,<span class="string">&quot;价格&quot;</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">            page_url = base_url.<span class="built_in">format</span>(i)</span><br><span class="line">            infos = parse_page(page_url)</span><br><span class="line">            <span class="keyword">for</span> info <span class="keyword">in</span> infos:</span><br><span class="line">                fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(info[<span class="number">0</span>],info[<span class="number">1</span>],info[<span class="number">2</span>],info[<span class="number">3</span>]))</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;i&#125;</span>页加载完成！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战2-糗事百科爬取："><a href="#爬虫实战2-糗事百科爬取：" class="headerlink" title="爬虫实战2-糗事百科爬取："></a>爬虫实战2-糗事百科爬取：</h3><p>网站：<a href="https://www.qiushibaike.com/text/">https://www.qiushibaike.com/text/</a></p>
<p>爬取：前十页糗事作者和内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Get_qiuShiBaiKe</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取前十页url&quot;&quot;&quot;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.page_urls = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">            page_url = <span class="string">&quot;https://www.qiushibaike.com/text/page/&#123;&#125;/&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">            self.page_urls.append(page_url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">self,page_url</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;解析每一页&quot;&quot;&quot;</span></span><br><span class="line">        resp = requests.get(page_url, headers=self.headers)</span><br><span class="line">        text = resp.text</span><br><span class="line">        jokes = re.findall(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;div.+?article.+?&lt;h2&gt;\s+(.+?)\s+&lt;/h2&gt;   #作者</span></span><br><span class="line"><span class="string">        .+?content.+?&lt;span&gt;\s+(.+?)\s+&lt;/span&gt;   #内容，但是内容中还包含&lt;br/&gt;标签</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>, text, re.VERBOSE|re.DOTALL)</span><br><span class="line">        new_jokes = []</span><br><span class="line">        <span class="keyword">for</span> joke <span class="keyword">in</span> jokes:</span><br><span class="line">            content = re.sub(<span class="string">&quot;&lt;br/&gt;&quot;</span>, <span class="string">&quot; &quot;</span>,joke[<span class="number">1</span>])</span><br><span class="line">            new_jokes.append([</span><br><span class="line">                joke[<span class="number">0</span>],content</span><br><span class="line">            ])</span><br><span class="line">        <span class="keyword">return</span> new_jokes</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;主流程&quot;&quot;&quot;</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;qiushibaike.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;content&quot;</span>))</span><br><span class="line">            <span class="keyword">for</span> page_url <span class="keyword">in</span> self.page_urls:</span><br><span class="line">                jokes = self.parse_page(page_url)</span><br><span class="line">                <span class="keyword">for</span> joke <span class="keyword">in</span> jokes:</span><br><span class="line">                   fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(joke[<span class="number">0</span>],joke[<span class="number">1</span>]))</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;count&#125;</span>页加载完成！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    get_qiuShiBaiKe = Get_qiuShiBaiKe()</span><br><span class="line">    get_qiuShiBaiKe.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>1，如果想让 . 代表所有的字符，则需要在函数后面加re.DOTALL参数，否则 . 不会代表\n，也就是换行除外。</p>
<p>2，获取数据时，大多数要用非贪婪模式。</p>
<p>3，如果正则写得不对，会获取不到结果，程序会假死。</p>
<p>4，如果正则写得有问题，不要钻牛角尖，更换一个思路。</p>
<h1 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h1><h2 id="JSON文件格式处理。"><a href="#JSON文件格式处理。" class="headerlink" title="JSON文件格式处理。"></a>JSON文件格式处理。</h2><h3 id="JSON："><a href="#JSON：" class="headerlink" title="JSON："></a>JSON：</h3><p>是一种轻量级的数据交换格式，有效的提高网络传输效率</p>
<p>JSON支持数据格式：</p>
<ul>
<li>对象（python的字典）：使用花括号</li>
<li>数组（python的列表）：使用方括号</li>
<li>字符串类型：字符串必须要用双引号，不能用单引号</li>
<li>整形，浮点型，布尔类型还有null类型</li>
<li>多个数据之间用逗号(,)分开</li>
</ul>
<p><strong>注</strong>：json本质上就是一个字符串</p>
<h3 id="python数据转换成json数据（dumps和dump）："><a href="#python数据转换成json数据（dumps和dump）：" class="headerlink" title="python数据转换成json数据（dumps和dump）："></a>python数据转换成json数据（dumps和dump）：</h3><p>dumps：将python数据转换成json数据</p>
<p>dump：将python数据转换成json数据，接收fp文件指针参数，并且保存到文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;王五&quot;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">17</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">15</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#dumps</span></span><br><span class="line">json_students = json.dumps(students, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">type</span>(json_students) )   <span class="comment">#&lt;class &#x27;str&#x27;&gt; 类型数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#dump</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.json&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json.dump(students, fp, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：这两个方法都有 ensure_ascii 参数，默认为True，那么只存储ASCII码格式，不存储中文。要存储中文将其设为False。</p>
<h3 id="json数据转换成python数据（loads和load）："><a href="#json数据转换成python数据（loads和load）：" class="headerlink" title="json数据转换成python数据（loads和load）："></a>json数据转换成python数据（loads和load）：</h3><p>loads：将json数据转换成python数据</p>
<p>load：将json数据转换成python数据，并且是从文件中获取JSON数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_students = <span class="string">&#x27;[&#123;&quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 19&#125;, &#123;&quot;name&quot;: &quot;王五&quot;, &quot;age&quot;: 17&#125;, &#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 15&#125;]&#x27;</span>   <span class="comment">#json类型字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#loads</span></span><br><span class="line">students = json.loads(json_students)</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">type</span>(students) )  <span class="comment">#&lt;class &#x27;list&#x27;&gt; 类型数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#load</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.json&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    studetns = json.load(fp)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(studetns))  <span class="comment">#&lt;class &#x27;list&#x27;&gt; 类型数据</span></span><br></pre></td></tr></table></figure>



<h2 id="CSV文件格式处理。"><a href="#CSV文件格式处理。" class="headerlink" title="CSV文件格式处理。"></a>CSV文件格式处理。</h2><p>csv文件有点类似excel表格一样。所以一般第一行为字段名</p>
<h3 id="读取CSV文件的两种方法："><a href="#读取CSV文件的两种方法：" class="headerlink" title="读取CSV文件的两种方法："></a>读取CSV文件的两种方法：</h3><p>1，以列表形式读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ipSpider.csv&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.reader(fp)  <span class="comment">#返回一个迭代器reader</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(x[<span class="number">4</span>])</span><br></pre></td></tr></table></figure>

<p>2，以字典形式读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ipSpider.csv&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.DictReader(fp)   <span class="comment">#返回一个迭代器reader</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(x[<span class="string">&quot;位置&quot;</span>])</span><br></pre></td></tr></table></figure>

<h3 id="写入CSV文件的两种方法："><a href="#写入CSV文件的两种方法：" class="headerlink" title="写入CSV文件的两种方法："></a>写入CSV文件的两种方法：</h3><p>1，以列表形式读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">headers = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>]</span><br><span class="line">students = [</span><br><span class="line">    (<span class="string">&quot;李四&quot;</span>,<span class="number">18</span>),</span><br><span class="line">    (<span class="string">&quot;王五&quot;</span>,<span class="number">16</span>),</span><br><span class="line">    (<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.csv&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    writer = csv.writer(fp)</span><br><span class="line">    writer.writerow(headers)    <span class="comment">#写一行</span></span><br><span class="line">    writer.writerows(students)  <span class="comment">#写多行</span></span><br></pre></td></tr></table></figure>

<p>2，以字典形式读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">headers = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>]</span><br><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;李四&#x27;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;张良&#x27;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">15</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;李逵&#x27;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.csv&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    writer = csv.DictWriter(fp, headers)</span><br><span class="line">    writer.writeheader()     <span class="comment">#上一行传入了字段名，这里还需要写入字段名</span></span><br><span class="line">    writer.writerows(students)</span><br></pre></td></tr></table></figure>



<h2 id="Excel文件处理。"><a href="#Excel文件处理。" class="headerlink" title="Excel文件处理。"></a>Excel文件处理。</h2><p>安装xlrd和xlwt两个库（读取和写入）</p>
<ul>
<li>pip install xlrd</li>
<li>pip indtall xlwt</li>
</ul>
<h3 id="读取Excel（xlrd）："><a href="#读取Excel（xlrd）：" class="headerlink" title="读取Excel（xlrd）："></a>读取Excel（xlrd）：</h3><p>1,打开Excel文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line">workbook = xlrd.open_workbook(<span class="string">&quot;test.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>2,工作簿对sheet表的操作:</p>
<ul>
<li><p>workbook.sheet_names()：获取所有sheet表名</p>
</li>
<li><p>workbook.sheet_by_index(0)：通过索引，获取sheet表对象(下标从0开始)</p>
</li>
<li><p>workbook.sheet_by_name(“Sheet1”)：通过名字，获取sheet表对象</p>
</li>
<li><p>workbook.sheets()：获取所有sheet表对象</p>
</li>
</ul>
<p>3，sheet工作表对cell单元格的操作：</p>
<ul>
<li>sheet.nrows：总行数</li>
<li>sheet.ncols：总列数</li>
<li>sheet.cell(row,col) ：获取单元格对象</li>
<li>sheet.cell_value(row,col) ：获取单元格对象的值</li>
<li>sheet.row_slice(row,start_col,end_col) ：获取指定行里的某几列单元格对象</li>
<li>sheet.row_values(row,start_col,end_col) ：获取指定行里的某几列单元格对象的值</li>
<li>sheet.col_slice(col,start_row,end_row) ：获取指定列里的某几行单元格对象</li>
<li>sheet.col_values(col,start_row,end_row) ：获取指定列里的某几行单元格对象的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line">workbook = xlrd.open_workbook(<span class="string">&quot;test.xlsx&quot;</span>)  <span class="comment">#获取工作簿</span></span><br><span class="line">sheet = workbook.sheet_by_index(<span class="number">0</span>)   <span class="comment">#获取sheet表</span></span><br><span class="line"><span class="built_in">print</span>(sheet.name)     <span class="comment">#打印sheet表名</span></span><br><span class="line">cells = sheet.row_slice(<span class="number">1</span>,<span class="number">1</span>,sheet.ncols)   <span class="comment">#指定行获取某几列单元格</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> cells:</span><br><span class="line">    <span class="built_in">print</span>(cell.value)   <span class="comment">#打印单元格的值</span></span><br></pre></td></tr></table></figure>

<h3 id="写入Excel（xlwt）："><a href="#写入Excel（xlwt）：" class="headerlink" title="写入Excel（xlwt）："></a>写入Excel（xlwt）：</h3><p>1,建立工作簿：workbook = xlwt.Workbook()</p>
<p>2,添加工资表：sheet = workbook.add_sheet(“表1”)</p>
<p>3,写入数据：sheet.write(row,col,value)</p>
<p>4,保存路径：workbook.save(“test.xlsx”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">workbook = xlwt.Workbook()</span><br><span class="line">sheet = workbook.add_sheet(<span class="string">&quot;表1&quot;</span>)</span><br><span class="line"></span><br><span class="line">headers = [<span class="string">&quot;姓名&quot;</span>,<span class="string">&quot;英文&quot;</span>,<span class="string">&quot;数学&quot;</span>,<span class="string">&quot;语文&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(headers):</span><br><span class="line">    sheet.write(<span class="number">0</span>,index,value)</span><br><span class="line">    </span><br><span class="line">names = [<span class="string">&quot;阿信&quot;</span>,<span class="string">&quot;阿达&quot;</span>,<span class="string">&quot;二哥&quot;</span>,<span class="string">&quot;阿飞&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):</span><br><span class="line">    sheet.write(index+<span class="number">1</span>,<span class="number">0</span>,value)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">        sheet.write(row,col,random.randint(<span class="number">1</span>,<span class="number">100</span>))</span><br><span class="line">        </span><br><span class="line">workbook.save(<span class="string">&quot;test2.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h3><p><code>cell.ctype()</code>：查看数据类型</p>
<p><strong>注</strong>：返回结果为数字</p>
<ul>
<li><p>xlrd.XL_CELL_TEXT    文本类型(1)</p>
</li>
<li><p>xlrd.XL_CELL_NUMBER  数值类型(2)</p>
</li>
<li><p>xlrd.XL_CELL_DATE    日期时间类型(3)</p>
</li>
<li><p>xlrd.XL_CELL_BOOLEAN 布尔类型(4)</p>
</li>
<li><p>xlrd.XL_CELL_EMPTY   空白数据类型(0)</p>
</li>
</ul>
<h3 id="编辑Excel："><a href="#编辑Excel：" class="headerlink" title="编辑Excel："></a>编辑Excel：</h3><p>1，先读取原来的Excel文件（xlrd）</p>
<p>2，然后在读取的sheet表中对cell修改，使用 <code>put_cell(row, col, 数据类型, value, None)</code> 方法实现</p>
<p>3，再重新创建新的Excel文件写入数据（xlwt）</p>
<p>案例：Excel文件中有该数据，要求：添加总分和平均分</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>英语</th>
<th>数学</th>
<th>语文</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>55</td>
<td>68</td>
<td>99</td>
</tr>
<tr>
<td>李四</td>
<td>59</td>
<td>89</td>
<td>100</td>
</tr>
<tr>
<td>王五</td>
<td>56</td>
<td>87</td>
<td>77</td>
</tr>
<tr>
<td>赵四</td>
<td>69</td>
<td>45</td>
<td>89</td>
</tr>
<tr>
<td>小二</td>
<td>99</td>
<td>66</td>
<td>75</td>
</tr>
</tbody></table>
<p>结果：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>英语</th>
<th>数学</th>
<th>语文</th>
<th>总分</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>55</td>
<td>68</td>
<td>99</td>
<td>222</td>
</tr>
<tr>
<td>李四</td>
<td>59</td>
<td>89</td>
<td>100</td>
<td>248</td>
</tr>
<tr>
<td>王五</td>
<td>56</td>
<td>87</td>
<td>77</td>
<td>220</td>
</tr>
<tr>
<td>赵四</td>
<td>69</td>
<td>45</td>
<td>89</td>
<td>203</td>
</tr>
<tr>
<td>小二</td>
<td>99</td>
<td>66</td>
<td>75</td>
<td>240</td>
</tr>
<tr>
<td>平均分</td>
<td>67.6</td>
<td>71</td>
<td>88</td>
<td>226.6</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="comment">#1,读取和修改到内存中</span></span><br><span class="line">rwb = xlrd.open_workbook(<span class="string">&quot;test.xlsx&quot;</span>)</span><br><span class="line">rsheet = rwb.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">rows = rsheet.nrows</span><br><span class="line">cols = rsheet.ncols</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加总分字段</span></span><br><span class="line">rsheet.put_cell(<span class="number">0</span>,cols,xlrd.XL_CELL_TEXT,<span class="string">&quot;总分&quot;</span>,<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#添加每个同学的总分</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,rows):</span><br><span class="line">    grades = rsheet.row_values(row,<span class="number">1</span>,cols)</span><br><span class="line">    total = <span class="built_in">sum</span>(grades)</span><br><span class="line">    rsheet.put_cell(row,cols,xlrd.XL_CELL_NUMBER,total,<span class="literal">None</span>)</span><br><span class="line">rows = rsheet.nrows</span><br><span class="line">cols = rsheet.ncols</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加平均分字段</span></span><br><span class="line">rsheet.put_cell(rows,<span class="number">0</span>,xlrd.XL_CELL_TEXT,<span class="string">&quot;平均分&quot;</span>,<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#添加每个同学的平均分</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,cols):</span><br><span class="line">    grades = rsheet.col_values(col,<span class="number">1</span>,rows)</span><br><span class="line">    avg = <span class="built_in">sum</span>(grades)/<span class="built_in">len</span>(grades)</span><br><span class="line">    rsheet.put_cell(rows,col,xlrd.XL_CELL_NUMBER,avg,<span class="literal">None</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#2,写入</span></span><br><span class="line">wwb = xlwt.Workbook()</span><br><span class="line">wsheet = wwb.add_sheet(<span class="string">&quot;成绩表&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,rsheet.nrows):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,rsheet.ncols):</span><br><span class="line">        wsheet.write(row,col,rsheet.cell_value(row,col))</span><br><span class="line">wwb.save(<span class="string">&quot;test2.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="MySQL数据库处理。"><a href="#MySQL数据库处理。" class="headerlink" title="MySQL数据库处理。"></a>MySQL数据库处理。</h2><p>安装相关模块：</p>
<p>pip install pymysql</p>
<p>1，连接数据库(主机号，端口号，用户，密码，数据库，编码)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;root&quot;</span>, database=<span class="string">&quot;de&quot;</span>,charset=<span class="string">&quot;utf8&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>2，创建游标</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"><span class="comment">#创建字典类型游标</span></span><br><span class="line">cursor = db.cursor(cursor=pymysql.cursors.DictCursor)</span><br></pre></td></tr></table></figure>

<p>3，用游标执行sql语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用游标执行各种命令</span></span><br><span class="line">cursor.execute(<span class="string">&quot;insert into users  values (&#x27;1&#x27;,&#x27;王二麻子&#x27;,&#x27;男&#x27;)&quot;</span>)</span><br><span class="line">sql = <span class="string">&quot;update users set userName=&#x27;二麻子&#x27; where id=&#x27;1&#x27;&quot;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="comment">#可以添加%s为占位符</span></span><br><span class="line">sql = <span class="string">&quot;select * from users where id=%s&quot;</span></span><br><span class="line">cursor.execute(sql,(<span class="number">1</span>)) </span><br></pre></td></tr></table></figure>

<p>4，查询操作和修改操作<br>如果是查询操作，获取数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor.fetchone()    <span class="comment">#获取一条数据</span></span><br><span class="line">cursor.fetchmany(<span class="number">3</span>)  <span class="comment">#获取多条数据 </span></span><br><span class="line">cursor.fetchall()    <span class="comment">#获取所有数据</span></span><br></pre></td></tr></table></figure>

<p>如果是‘增删改’这些修改操作，需要提交</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db.commit()</span><br></pre></td></tr></table></figure>

<p>5，关闭资源</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor.close()  <span class="comment">#关闭游标</span></span><br><span class="line">db.close()	    <span class="comment">#关闭数据库连接</span></span><br></pre></td></tr></table></figure>



<h1 id="多线程爬虫"><a href="#多线程爬虫" class="headerlink" title="多线程爬虫"></a>多线程爬虫</h1><h2 id="理解多线程："><a href="#理解多线程：" class="headerlink" title="理解多线程："></a>理解多线程：</h2><p>默认情况下，一个程序只有一个进程和一个线程，代码是依次线性执行的。而多线程则可以并发执行，一次性多个人一起做多件事，自然比单线程更快。</p>
<p>单线程执行方式：</p>
<p>操作1—–&gt;操作2—–&gt;操作3—–&gt;程序结束</p>
<p>多线程执行方式：</p>
<p>操作1—–&gt;程序结束<br>操作2—–&gt;程序结束<br>操作3—–&gt;程序结束</p>
<h2 id="threading的使用："><a href="#threading的使用：" class="headerlink" title="threading的使用："></a>threading的使用：</h2><h3 id="基本使用：-1"><a href="#基本使用：-1" class="headerlink" title="基本使用："></a>基本使用：</h3><p>正常单线程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#单线程</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coding</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>在写代码&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawing</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>在画画&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_thread</span>():</span></span><br><span class="line">    coding()</span><br><span class="line">    drawing()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    single_thread()</span><br></pre></td></tr></table></figure>

<p>使用threading创建多线程：</p>
<p>创建线程：<code>threading.Thread(target=函数,name=&quot;可无&quot;)</code></p>
<p>执行线程：<code>th1.start()</code></p>
<p><code>threading.current_thread()</code>：在某个线程中执行，获取当前线程对象</p>
<p><code>threading.enumerate()</code>：获取所有正在执行的线程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多线程</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coding</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        thread = threading.current_thread()  <span class="comment">#获取当前线程</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;thread.name&#125;</span>在敲代码&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawing</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>在画画&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span>():</span></span><br><span class="line">    th1 = threading.Thread(target=coding,name=<span class="string">&quot;小明&quot;</span>)</span><br><span class="line">    ht2 = threading.Thread(target=drawing)</span><br><span class="line"></span><br><span class="line">    th1.start()</span><br><span class="line">    ht2.start()</span><br><span class="line">    <span class="built_in">print</span>(threading.<span class="built_in">enumerate</span>())  <span class="comment">#打印所有当前执行的线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    multi_thread()</span><br></pre></td></tr></table></figure>

<h3 id="继承自threading-Thread类："><a href="#继承自threading-Thread类：" class="headerlink" title="继承自threading.Thread类："></a>继承自threading.Thread类：</h3><p>1，我们自己写的类必须继承<code>threading.Thread</code>类</p>
<p>2，程序代码需要放在run方法中执行</p>
<p>3，以后创建线程时，直接使用我们自己创建的类来创建线程</p>
<p>4，使用类的方式创建线程，可以用更加方便的管理我们的代码，面向对象的方式进行编程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#继承自threading.Thread类</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coding_thread</span>(<span class="params">threading.Thread</span>):</span>  <span class="comment">#创建类，继承threading.Thread</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span>    <span class="comment">#主程序写在run实例方法下</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            thread = threading.current_thread()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;thread.name&#125;</span>在敲代码&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing_thread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>在画画&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    th1 = Coding_thread(name=<span class="string">&quot;小明&quot;</span>)  <span class="comment">#可以用刚刚创建的类来创建线程</span></span><br><span class="line">    th2 = Drawing_thread()</span><br><span class="line"></span><br><span class="line">    th1.start()</span><br><span class="line">    th2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="多线程共享全局变量的问题："><a href="#多线程共享全局变量的问题：" class="headerlink" title="多线程共享全局变量的问题："></a>多线程共享全局变量的问题：</h2><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>多个线程在同一个进程中运行的。因此进程中的全局变量是所有线程都共享的，即所有线程都可以操作同一个全局变量。而线程执行顺序是无序的，有可能造成数据错误。</p>
<p>举例：</p>
<p>全局变量value=1，线程1执行给value加1，线程2也执行给value加1，按道理最终value=3。但是因为线程执行是无序的，所以执行时，线程1和线程2同时把value=1取出，然后加上1，最终value=2，造成数据错误。</p>
<p>代码举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_value</span>():</span></span><br><span class="line">    <span class="keyword">global</span> value</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):  <span class="comment">#循环10000000次，相当于给value加10000000</span></span><br><span class="line">        value += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;value的值是<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>): <span class="comment">#创建两个线程，value讲道理应该一个为10000000，另一个为20000000</span></span><br><span class="line">        th = threading.Thread(target=add_value)</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#value的值是1019353</span></span><br><span class="line"><span class="comment">#value的值是1493383</span></span><br><span class="line"><span class="comment">#因为两个线程同时对一个全局变量操作，所以产生问题</span></span><br></pre></td></tr></table></figure>

<h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><p>threading提供了一个Lock类，这个类可以在某个线程访问全局变量时上锁，其他线程此时就进不来，直到该线程处理完后，就解锁，其他线程才能进来处理。</p>
<p><code>threading.Lock()</code>：创建锁</p>
<p><code>gLock.acquire()</code>：上锁</p>
<p><code>gLock.release()</code>：解锁</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解决：当某线程操作全局变量时，应该上锁，操作完了就解锁，让给其他线程继续操作</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">value = <span class="number">0</span></span><br><span class="line">gLock = threading.Lock() <span class="comment">#创建锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_value</span>():</span></span><br><span class="line">    <span class="keyword">global</span> value</span><br><span class="line">    gLock.acquire()  <span class="comment">#上锁</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        value += <span class="number">1</span></span><br><span class="line">    gLock.release()  <span class="comment">#解锁</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;value的值是<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        th = threading.Thread(target=add_value)</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>使用锁原则：</p>
<p>1，尽量把少的和不耗时的代码放到锁中执行</p>
<p>2，代码执行完后要记得解锁，不然程序会阻塞</p>
<p>3，如果只是读取全局变量而不改变全局变量，不需要上锁</p>
<h2 id="生产者和消费者模式："><a href="#生产者和消费者模式：" class="headerlink" title="生产者和消费者模式："></a>生产者和消费者模式：</h2><p>生产者和消费者模式是多线程开发中经常见到的一种模式。生产者线程专门用来生产一些数据，然后存放到一个中间的变量中，即中间容器。消费者再从这个中间变量中取出数据经行消费。</p>
<p>这种模式让代码达到高内聚低耦合的目标，程序分工明确，线程方便管理。</p>
<p>生产者  ———&gt;  中间容器  ———&gt;  消费者</p>
<p>生产者和消费者因为要使用中间变量，这个中间变量经常是全局变量，因此需要使用锁来保证数据的完整性。</p>
<h3 id="Lock版生产者和消费者模式："><a href="#Lock版生产者和消费者模式：" class="headerlink" title="Lock版生产者和消费者模式："></a>Lock版生产者和消费者模式：</h3><p>以下是使用threading.Lock锁实现的一个生产者和消费者模式的例子：</p>
<p><strong>注</strong>：为了与下面的Condition版本相比，所以下面例子代码写成这样，没有符合上锁原则：尽量把少的和不耗时的代码放到锁中执行</p>
<p>生产者一直往中间变量gMoney中加钱，而消费者一直从中间变量gMoney中减钱。因此加钱和减钱时都需要上锁。生产者加钱10次就不再执行了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Lock版生产者和消费者模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">0</span>  <span class="comment">#中间变量</span></span><br><span class="line">gLock = threading.Lock()</span><br><span class="line">gTimes = <span class="number">0</span>  <span class="comment">#保存生产者加钱的次数</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                gLock.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            money = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">            gMoney += money   <span class="comment">#加钱</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s赚了%d钱，余额有%d&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            gLock.release()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            money = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">            <span class="keyword">if</span> money&lt;=gMoney:</span><br><span class="line">                gMoney -= money  <span class="comment">#减钱</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s消费了%d钱，剩余%d钱&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;%s想消费%d钱，但是钱不够只有%d钱，并且生产者不再赚钱钱了&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">                    gLock.release()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s想消费%d钱，但是钱不够只有%d钱&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            gLock.release()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th = Producer(name=<span class="string">&quot;%d号生产者&quot;</span>%(x))</span><br><span class="line">        th.start()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th = Consumer(name=<span class="string">&quot;%d号消费者&quot;</span>%(x))</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="Condition版生产者和消费者模式："><a href="#Condition版生产者和消费者模式：" class="headerlink" title="Condition版生产者和消费者模式："></a>Condition版生产者和消费者模式：</h3><p>Lock版本可以正常运行，但存在一个不足。在消费者中，上锁后假如发现gMoney不够，就什么也不做，然后再解锁。上锁解锁是耗费CPU资源的行为。</p>
<p>而threading.Condition，和threading.Lock一样也可以上锁解锁。但是它上锁时，可以在没有数据的时候（gMoney不够）处于阻塞等待状态wait，一旦有了数据，可以使用notify等函数通知处于等待状态的线程，继续执行。这样可以不用做一些无用的上锁和解锁操作。</p>
<p><code>threading.Condition()</code>：创建锁</p>
<p><code>acquire()</code>：上锁</p>
<p><code>release()</code>：解锁</p>
<p><code>wait()</code>：将当前线程处于阻塞等待状态，暂时释放锁。可以被其他线程使用notify()和notify_all()函数唤醒。被唤醒后会继续等待上锁，然后继续执行代码。</p>
<p><code>notify()</code>：通知某个等待状态的线程，默认通知第1个等待的线程</p>
<p><code>notify_all()</code>：通知所有等待状态的线程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Condition版生产者和消费者模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">0</span></span><br><span class="line">gCondition = threading.Condition()</span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                gCondition.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            money = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">            gMoney += money</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s赚了%d钱，余额有%d&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            gCondition.notify_all()   <span class="comment">#每次加钱后，通知所有阻塞等待状态的线程可以唤醒。</span></span><br><span class="line">            gCondition.release()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            money = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">            <span class="keyword">while</span> money&gt;gMoney:</span><br><span class="line">                <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;%s想消费%d钱，但是钱不够剩余%d钱，并且生产者不再赚钱钱了&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">                    gCondition.release()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s想消费%d钱，但是钱不够剩余%d钱&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">                <span class="comment">#钱不够，进入阻塞等待状态，等待被唤醒,唤醒后继续判断钱够不够</span></span><br><span class="line">                gCondition.wait()  </span><br><span class="line">            gMoney -= money</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s消费了%d钱，剩余%d钱&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            gCondition.release()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th = Producer(name=<span class="string">&quot;%d号生产者&quot;</span>%(x))</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th = Consumer(name=<span class="string">&quot;%d号消费者&quot;</span>%(x))</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="Queue线程安全的队列"><a href="#Queue线程安全的队列" class="headerlink" title="Queue线程安全的队列"></a>Queue线程安全的队列</h2><p>先进先出，像装羽毛球的圆筒。多线程访问Queue不需要加锁。</p>
<p><code>from queue import Queue</code>：导入</p>
<p><code>Queue(maxsize)</code>：初始化Queue</p>
<p>1，<code>qsize()</code>：返回队列大小</p>
<p>2，<code>empty()</code>：判断队列是否为空</p>
<p>3，<code>full()</code>：判断队列是否为满</p>
<p>4，<code>get()</code>：取一个数据</p>
<p>5，<code>put()</code>：放一个数据</p>
<p>get()和put()：当get()取数据，Queue队列却是空的时，进入阻塞状态，直到有数据被填入；当put()放数据，Queue队列却是满的时，也进入阻塞状态，直到有数据被取出。<br>它们都有block和timeout参数：block=False时，表示进入阻塞时立即报错；timeout=数字，表示阻塞超过该秒后报错。所以这里可以配合try–except抓取报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#queue队列是线程安全的，可以不用锁</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_value</span>(<span class="params">queue</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        queue.put(random.randint(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span>(<span class="params">queue</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        value = queue.get()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;获取的值是<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    q = Queue(<span class="number">1</span>)</span><br><span class="line">    th1 = threading.Thread(target=add_value, args=[q])   <span class="comment">#args=[]用来传参数</span></span><br><span class="line">    th2 = threading.Thread(target=get_value, args=[q])</span><br><span class="line"></span><br><span class="line">    th1.start()</span><br><span class="line">    th2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="爬虫实战1-多线程爬取王者荣耀壁纸："><a href="#爬虫实战1-多线程爬取王者荣耀壁纸：" class="headerlink" title="爬虫实战1-多线程爬取王者荣耀壁纸："></a>爬虫实战1-多线程爬取王者荣耀壁纸：</h2><p>网站：<a href="https://pvp.qq.com/web201605/wallpaper.shtml">https://pvp.qq.com/web201605/wallpaper.shtml</a></p>
<p>要求：以每张图片名创建文件夹，文件夹中下载该图片的8种尺寸类型图片。</p>
<p>图片数据不在该网站中，数据应该是通过ajax请求后响应过来的，通过抓包发现真实数据在名为“workList_inc.cgi?activit……..”的包里，在请求头中找到url接口，”<a href="https://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi?activityId=2735&amp;sVerifyCode=ABCD&amp;sDataType=JSON&amp;iListNum=20&amp;totalpage=0&amp;page=0&amp;iOrder=0&amp;iSortNumClose=1&amp;jsoncallback=jQuery17108003164251331345_1628482515726&amp;iAMSActivityId=51991&amp;_everyRead=true&amp;iTypeId=2&amp;iFlowId=267733&amp;iActId=2735&amp;iModuleId=2735&amp;_=1628482515913&quot;%EF%BC%8C%E8%BF%99%E4%B8%AAurl%E4%B8%AD%E6%9C%89%E5%9B%BE%E7%89%87%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BF%A1%E6%81%AF%E3%80%82">https://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi?activityId=2735&amp;sVerifyCode=ABCD&amp;sDataType=JSON&amp;iListNum=20&amp;totalpage=0&amp;page=0&amp;iOrder=0&amp;iSortNumClose=1&amp;jsoncallback=jQuery17108003164251331345_1628482515726&amp;iAMSActivityId=51991&amp;_everyRead=true&amp;iTypeId=2&amp;iFlowId=267733&amp;iActId=2735&amp;iModuleId=2735&amp;_=1628482515913&quot;，这个url中有图片数据的信息。</a><br><strong>注</strong>：响应的数据是JSON格式；数据内容也经过编码。<strong>提示</strong>：loads，unquote</p>
<h3 id="正常单线程爬取："><a href="#正常单线程爬取：" class="headerlink" title="正常单线程爬取："></a>正常单线程爬取：</h3><p>这里用单线程只爬取第一页的内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#单线程获取第一页王者荣耀图片</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse,request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">https://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi?activityId=2735&amp;sVerifyCode=ABCD&amp;sDataType=JSON&amp;iListNum=20&amp;totalpage=0&amp;page=0&amp;iOrder=0&amp;iSortNumClose=1&amp;jsoncallback=jQuery17106986742030628452_1628233940837&amp;iAMSActivityId=51991&amp;_everyRead=true&amp;iTypeId=2&amp;iFlowId=267733&amp;iActId=2735&amp;iModuleId=2735&amp;_=1628233941161</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3775.400 QQBrowser/10.6.4209.400&quot;</span>,</span><br><span class="line"><span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://pvp.qq.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;访问相关页，返回list，包含每个图片的相关信息&quot;&quot;&quot;</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    result = resp.text</span><br><span class="line">    data = re.search(<span class="string">&quot;\(.+?List.*?:(.+)&#125;\)&quot;</span>, result).group(<span class="number">1</span>)</span><br><span class="line">    data = parse.unquote(data)</span><br><span class="line">    data = json.loads(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_image_urls</span>(<span class="params">image</span>):</span></span><br><span class="line">    image_urls = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        image_url = image[<span class="string">f&quot;sProdImgNo_<span class="subst">&#123;i&#125;</span>&quot;</span>].replace(<span class="string">&quot;200&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        image_urls.append(image_url)</span><br><span class="line">    <span class="keyword">return</span> image_urls</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    os.mkdir(<span class="string">&quot;image_WZ&quot;</span>)</span><br><span class="line">    data = parse_page(url)</span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> data:</span><br><span class="line">        name = image[<span class="string">&quot;sProdName&quot;</span>]</span><br><span class="line">        <span class="comment">#名字中含有”\/:*?&quot;&lt;&gt;|“,不符合文件夹命名规范，将其都替换成空格</span></span><br><span class="line">        name = re.sub(<span class="string">r&#x27;[\\/:\*\?&quot;&lt;&gt;\|]&#x27;</span>,<span class="string">&quot; &quot;</span>,name)</span><br><span class="line">        path_name = os.path.join(<span class="string">&quot;image_WZ&quot;</span>, name)</span><br><span class="line">        <span class="comment">#官网的图片有重复的，这里判断文件夹是否存在</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(path_name):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        os.mkdir(path_name)</span><br><span class="line">        image_urls = get_image_urls(image)</span><br><span class="line">        <span class="keyword">for</span> index,image_url <span class="keyword">in</span> <span class="built_in">enumerate</span>(image_urls):</span><br><span class="line">            image_name = <span class="string">&quot;sProdImgNo_&#123;&#125;.jpg&quot;</span>.<span class="built_in">format</span>(index+<span class="number">1</span>)</span><br><span class="line">            image_path = os.path.join(path_name,image_name)</span><br><span class="line">            request.urlretrieve(image_url,image_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>下载完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="多线程爬取："><a href="#多线程爬取：" class="headerlink" title="多线程爬取："></a>多线程爬取：</h3><p>使用多线程爬取所有26页，生产者和消费者模式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多线程</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse,request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">https://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi?activityId=2735&amp;sVerifyCode=ABCD&amp;sDataType=JSON&amp;iListNum=20&amp;totalpage=0&amp;page=&#123;&#125;&amp;iOrder=0&amp;iSortNumClose=1&amp;jsoncallback=jQuery17106986742030628452_1628233940837&amp;iAMSActivityId=51991&amp;_everyRead=true&amp;iTypeId=2&amp;iFlowId=267733&amp;iActId=2735&amp;iModuleId=2735&amp;_=1628233941161</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3775.400 QQBrowser/10.6.4209.400&quot;</span>,</span><br><span class="line"><span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://pvp.qq.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url_queue = Queue(<span class="number">26</span>)   <span class="comment">#存放page_url的队列</span></span><br><span class="line">image_queue = Queue(<span class="number">1000</span>)  <span class="comment">#存放图片的队列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生产者负责访问page_url，并解析图片信息，将图片url和下载路径保存到image_queue中&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,url_queue,image_queue,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Producer, self).__init__(*args,**kwargs)  <span class="comment">#重写__init__后，需要调用父类的构造方法</span></span><br><span class="line">        self.url_queue = url_queue</span><br><span class="line">        self.image_queue = image_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.url_queue.empty():</span><br><span class="line">            resp = requests.get(self.url_queue.get(), headers=headers)</span><br><span class="line">            result = resp.text</span><br><span class="line">            data = re.search(<span class="string">&quot;\(.+?List.*?:(.+)&#125;\)&quot;</span>, result, re.DOTALL).group(<span class="number">1</span>)</span><br><span class="line">            data = parse.unquote(data)</span><br><span class="line">            data = json.loads(data)</span><br><span class="line">            <span class="keyword">for</span> image <span class="keyword">in</span> data:</span><br><span class="line">                dir_name = image.get(<span class="string">&quot;sProdName&quot;</span>)</span><br><span class="line">                dir_name = re.sub(<span class="string">&#x27;[\\\/:*?&quot;&lt;&gt;|]&#x27;</span>,<span class="string">&quot; &quot;</span>,dir_name)</span><br><span class="line">                dir_path = os.path.join(<span class="string">&quot;image_WZ2&quot;</span>,dir_name)</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(dir_path):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                os.mkdir(dir_path)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">                    image_url = image.get(<span class="string">f&quot;sProdImgNo_<span class="subst">&#123;i&#125;</span>&quot;</span>).replace(<span class="string">&quot;200&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">                    image_name = <span class="string">f&quot;sProdImgNo_<span class="subst">&#123;i&#125;</span>.jpg&quot;</span></span><br><span class="line">                    image_path = os.path.join(dir_path,image_name)</span><br><span class="line">                    self.image_queue.put(&#123;<span class="string">&quot;image_url&quot;</span>:image_url,<span class="string">&quot;image_path&quot;</span>:image_path&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;消费者负责将image_queue中的图片信息取出，将图片url下载到对应路径中&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, image_queue, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Consumer, self).__init__(*args,**kwargs)</span><br><span class="line">        self.image_queue = image_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:<span class="comment">#阻塞超过10秒出现异常，跳出循环，</span></span><br><span class="line">                image = self.image_queue.get(timeout=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            image_url = image.get(<span class="string">&quot;image_url&quot;</span>)</span><br><span class="line">            image_path = image.get(<span class="string">&quot;image_path&quot;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                request.urlretrieve(image_url,image_path)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;下载完成！&quot;</span>.<span class="built_in">format</span>(image_path))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;下载失败!&quot;</span>.<span class="built_in">format</span>(image_path))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    os.mkdir(<span class="string">&quot;image_WZ2&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        page_url = base_url.<span class="built_in">format</span>(i)</span><br><span class="line">        url_queue.put(page_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        th1 = Producer(url_queue, image_queue, name=<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>号生产者&quot;</span>)</span><br><span class="line">        th1.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th2 = Consumer(image_queue,name=<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>号消费者&quot;</span>)</span><br><span class="line">        th2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="爬虫实战2：多线程爬取糗事百科："><a href="#爬虫实战2：多线程爬取糗事百科：" class="headerlink" title="爬虫实战2：多线程爬取糗事百科："></a>爬虫实战2：多线程爬取糗事百科：</h2><p>网站：<a href="https://www.qiushibaike.com/text/">https://www.qiushibaike.com/text/</a></p>
<p>要求：使用多线程爬取所有13页，把笑话链接和内容保存在csv文件种</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多线程爬取糗事百科，保存再csv文件中</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生产者负责访问page_url,解析详细页，把每一页的所以的笑话内容和连接保存到joke_queue&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,url_queue,joke_queue,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args,**kwargs)</span><br><span class="line">        self.url_queue = url_queue</span><br><span class="line">        self.joke_queue = joke_queue</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3775.400 QQBrowser/10.6.4209.400&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.qiushibaike.com/text/page/13/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.url_queue.empty():</span><br><span class="line">            page_url = self.url_queue.get()</span><br><span class="line">            resp = requests.get(page_url, headers=self.headers)</span><br><span class="line">            text = resp.text</span><br><span class="line">            jokes = re.findall(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            typs_hot.+?&lt;/div&gt;.+?href=&quot;(.+?)&quot;     #笑话连接</span></span><br><span class="line"><span class="string">            .+?contentHerf.+?&lt;span&gt;\s*(.+?)\s*&lt;/span&gt;  #笑话内容</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>,text,re.VERBOSE|re.DOTALL)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> joke <span class="keyword">in</span> jokes:</span><br><span class="line">                link = joke[<span class="number">0</span>]</span><br><span class="line">                link = <span class="string">&quot;https://www.qiushibaike.com&quot;</span>+link</span><br><span class="line">                content = joke[<span class="number">1</span>]</span><br><span class="line">                content = re.sub(<span class="string">&quot;&lt;br/&gt;&quot;</span>,<span class="string">&quot;  &quot;</span>,content)</span><br><span class="line">                self.joke_queue.put(&#123;<span class="string">&quot;content&quot;</span>:content,<span class="string">&quot;link&quot;</span>:link&#125;)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;页访问完成！&quot;</span>.<span class="built_in">format</span>(page_url.split(<span class="string">&quot;/&quot;</span>)[<span class="number">5</span>]))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;消费者负责从joke_queue中获取笑话内容和链接，保存到csv文件中，保存时需要上锁和解锁&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,writer,fp, gLock,joke_queue, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args,**kwargs)</span><br><span class="line">        self.writer = writer</span><br><span class="line">        self.joke_queue = joke_queue</span><br><span class="line">        self.gLock = gLock</span><br><span class="line">        self.fp = fp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                joke = self.joke_queue.get(timeout=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.fp.close()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            link = joke.get(<span class="string">&quot;link&quot;</span>)</span><br><span class="line">            content = joke.get(<span class="string">&quot;content&quot;</span>)</span><br><span class="line">            self.gLock.acquire()</span><br><span class="line">            self.writer.writerow((content,link))   <span class="comment">#保存到csv文件操作也要上锁，相当于全局变量</span></span><br><span class="line">            self.gLock.release()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;保存一条成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    base_url = <span class="string">&quot;https://www.qiushibaike.com/text/page/&#123;&#125;/&quot;</span></span><br><span class="line">    url_queue = Queue(<span class="number">13</span>)</span><br><span class="line">    joke_queue = Queue(<span class="number">1000</span>)</span><br><span class="line">    gLock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">14</span>):</span><br><span class="line">        page_url = base_url.<span class="built_in">format</span>(i)</span><br><span class="line">        url_queue.put(page_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th1 = Producer(url_queue, joke_queue, name=<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>号生产者&quot;</span>)</span><br><span class="line">        th1.start()</span><br><span class="line"></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&quot;joke_mulit_thread.csv&quot;</span>, <span class="string">&quot;a&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    writer = csv.writer(fp)</span><br><span class="line">    writer.writerow([<span class="string">&quot;内容&quot;</span>,<span class="string">&quot;链接&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th2 = Consumer(writer,fp , gLock, joke_queue, name=<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>号消费者&quot;</span>)</span><br><span class="line">        th2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="多线程的GIL锁："><a href="#多线程的GIL锁：" class="headerlink" title="多线程的GIL锁："></a>多线程的GIL锁：</h2><p>Python自带的解释器是CPython。CPython解释器的多线程实际上是一个假的多线程。同一时刻只有一个线程在执行，为保证这个，在CPython解释器中有一个东西叫做GIL（Global Intepreter Lock），叫做全局解释器锁。这个解释器锁是有必要的，因为CPython解释器的内存管理不是线程安全的。</p>
<p>虽然是一个假的多线程，但是在处理一些IO操作（比如文件读写和网络请求）还是可以在很大程度上提高效率的。所以在IO操作上建议使用多线程提高效率；在一些CPU计算操作上不建议使用多线程，而建议使用多进程。</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE</title>
    <url>/2021/12/11/JavaSE/</url>
    <content><![CDATA[<p>JaveSE</p>
<p>这是一篇关于javaSE基础的笔记</p>
<p>其中包括java面向对象，java核心类库，java型特性和项目</p>
<span id="more"></span>

<h1 id="Java面向对象编程"><a href="#Java面向对象编程" class="headerlink" title="Java面向对象编程"></a>Java面向对象编程</h1><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>定义类：class 类名{ 类体 }。<br><code>class Person&#123;&#125;</code></p>
<p>创建对象：new 类名();<br><code>Person p = new Person();</code></p>
<p>成员变量的定义：数据类型 变量名 = 初始值;<br><code>int age;</code></p>
<p>成员方法的定义：返回值类型 方法名（参数）{ 方法体 }<br><code>void setAge(int age)&#123; &#125;</code></p>
<p>成员方法的可变长参数，即该参数长度是0~~n个，最多定义一个，而且放在最后一个参数。使用时，相当于一维数组。<br>可变长参数定义<code>void xiaoName(String... args)&#123; &#125;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;, 今年&quot;</span> + age + <span class="string">&quot;岁！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">xiaoName</span><span class="params">(String... args)</span><span class="comment">/*可变参数*/</span> </span>&#123; </span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;args.length; i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;个参数是：&quot;</span> + args[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建Person类型引用指向Person类型对象</span></span><br><span class="line">		Person p = <span class="keyword">new</span> Person();</span><br><span class="line">		p.setName(<span class="string">&quot;李&quot;</span>);</span><br><span class="line">		p.age = <span class="number">18</span>;</span><br><span class="line">		p.show();</span><br><span class="line">		p.xiaoName(<span class="string">&quot;德&quot;</span>, <span class="string">&quot;昭的&quot;</span>, <span class="string">&quot;得得&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>1）基本数据类型：byte、short、char、int、long、float、double、boolean 八个。</p>
<p>这些基本数据类型定义变量时，内存中的栈区会申请一个存储单元用来存储数据。</p>
<p>如 int a = 10;  内存中的栈区申请一个名为a的存储单元，大小为4个字节，里面存放着数据10。</p>
<p>2）引用数据类型：数组、类、接口、枚举、标注</p>
<p>用引用数据类型（数组、类、接口、枚举、标注）定义的变量叫做引用型变量，简称<strong>引用</strong>。如<code>Person p</code></p>
<p>引用数据类型在定义时，如<code>Person p = new Person();</code> ，内存中的栈区申请一个名为p的存储单元，用来存放地址。而new Person()这部分存放在内存中的堆区，有数据。假设new Person()在堆区中的地址是0x10，而p中存放的就是这个地址0x10。</p>
<p>如图，变量a为int类型，在栈区中存放的是数据10。引用型变量（引用）p为Person类型（类），在栈区中存放的是一个地址（0x10），该地址指向堆区中的new Person()，而new Person()中才有数据。</p>
<p>基本数据类型变量中存放的是数据，而引用数据类型变量中存放的是地址。</p>
<p><a href="https://imgtu.com/i/oTqXEq"><img src="https://s4.ax1x.com/2021/12/11/oTqXEq.png" alt="oTqXEq.png" border="0" /></a></p>
<p><strong>注意</strong>：</p>
<p>基本数据类型的变量，作为方法的参数传递时，形参不会影响到实参，因为这两个变量存放的是各自的数据，虽然数据一样。</p>
<p>引用数据类型的变量，作为方法的参数传递时，形参可能会影响到实参，因为这两个变量存放的是同一个地址。</p>
<h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>其实创建对象是<code>new Person();</code>,此时内存堆区会申请一块空间存放对象，但是由于没有引用型变量（引用）指向该对象的地址，就会被当作垃圾回收。所以创建对象时使用<code>Person p = new Person();</code>,含义是“创建Person类型引用p指向Person类型对象”。引用型变量p存放着对象的地址，因此不会被回收。</p>
<h2 id="方法和封装"><a href="#方法和封装" class="headerlink" title="方法和封装"></a>方法和封装</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>使用new关键字创建对象时，会自动调用构造方法。一般用于对象的初始化工作</p>
<p>定义：</p>
<ul>
<li><p>不用写返回值类型</p>
</li>
<li><p>构造方法名和类名一致</p>
</li>
</ul>
<p>当用户没有定义构造方法时，系统会默认定义一个无参无内容的构造方法，如Person类，<code>Person()&#123;&#125;</code></p>
<h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p>重载：方法名可以相同，但是参数个数，或类型，或顺序不一样。</p>
<p>例如：一般我们定义构造方法时，会定义一个有参的构造方法，同时再定义一个无参的构造方法，这就属于重载。</p>
<p>意义：调用用一个方法名，参数不一样可以实现不同的功能。例如println()方法，调用该方法我们传参可以是多种数据类型，但是依然可以打印出来，是因为官方写好了许多个println()同名不同参数方法。</p>
<h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>在类中使用this关键字表示，创建的该对象本身。</p>
<p>用法：</p>
<ul>
<li>this.成员变量、this.成员方法：当成员变量和局部变量重名时，系统会就近原则。变量前加上this.前缀，就表明是成员变量。（成员方法相同）</li>
<li>this还可以当作返回值，表示该对象本身。返回值类型就是该类名的类型。</li>
<li><code>this();</code>用在构造方法的第一行，可以调用本类的其他构造方法</li>
</ul>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归：定义 方法时，该方法会调用该方法自己</p>
<p>例如：计算费氏数列：1，1，2，3，5，8，13，21，第一项和第二项是1，之后的每一项的前两项和。下面分别使用递归和递推(循环)实现。传入第n项，返回第n项的数值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FengShi</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">diGui</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">//用递归的方法计算</span></span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">1</span> || n ==<span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> diGui(n-<span class="number">1</span>) + diGui(n-<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">diTui</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">//用递推的方法计算</span></span><br><span class="line">		<span class="keyword">int</span> ia = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> ib = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> ic;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;=n; i++) &#123;</span><br><span class="line">			ic = ia + ib;</span><br><span class="line">			ia = ib;</span><br><span class="line">			ib = ic;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ib;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显，使用递归代码简单明了，而递推复杂。但是递归代码的执行速度慢许多。</p>
<p><strong>递归注意事项</strong></p>
<ul>
<li>使用递归必须有递归规律以及退出条件</li>
<li>使用递归是把问题变得简单化而不是复杂化</li>
<li>若递归影响到程序的执行性能，则不推荐。建议使用递推取代之。</li>
</ul>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>通常情况下测试类给成员变量赋值一些合法但不合理的数值，程序不会报错，但是与现实不符。例如age赋值负数等。</p>
<p>为避免这一现象，需要对成员变量进行密封包装处理，保证成员变量的合理性，该机制就叫封装。</p>
<p>步骤：</p>
<ul>
<li><p>私有化成员变量，用private关键字修饰。如<code>private int age;</code></p>
</li>
<li><p>提供公有的set和get成员方法来访问成员变量，在方法中对合理值进行判断</p>
</li>
<li><p>构造方法中也调用set方法进行合理值判断</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1,私有化成员变量。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3,构造方法也调用成员方法来初始化成员变量。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">		setAge(age);</span><br><span class="line">		setName(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//2,提供我们写成员方法来访问成员变量，成员方法会判断参数是否正确。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (age &lt; <span class="number">0</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;age不能小于0岁。&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.age = age;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//定义show()来打印对象的特征</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;，今年&quot;</span> + age + <span class="string">&quot;岁！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>案例</strong></em>：使用上面定义的类完成。提示用户输入人数，然后输入学生信息：姓名，年龄，最后打印出来。</p>
<p>提示：Student[] arr = new Student[num];</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入学生人数：&quot;</span>);</span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">		<span class="comment">//根据输入的人数，创建Student引用类型的一维数组</span></span><br><span class="line">		Student[] arr = <span class="keyword">new</span> Student[num];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;请输入name和age：&quot;</span>);</span><br><span class="line">			arr[i] = <span class="keyword">new</span> Student(sc.next(), sc.nextInt());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++) &#123;</span><br><span class="line">			arr[i].show();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Student[] arr = new Student[num];</code>，表示创建一个一维数组，数组类型是自己定义的Student引用类型。数组中的每个元素都是Student引用类型变量，里面存放的只是地址，指向后面创建的对象。如下图：</p>
<p><a href="https://imgtu.com/i/oq9Xb6"><img src="https://s4.ax1x.com/2021/12/12/oq9Xb6.png" alt="oq9Xb6.png" border="0" /></a></p>
<h2 id="static关键字和继承"><a href="#static关键字和继承" class="headerlink" title="static关键字和继承"></a>static关键字和继承</h2><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><p>在类中正常定义的成员方法或变量隶属于<strong>对象层级</strong>，即创建对象时才拥有。且每个对象独有一份，互不影响，需要通过 <code>引用.成员</code> 的方式调用。</p>
<p>在定义成员时，加上static关键字修饰，就变成了静态成员，由原来的<strong>对象层级</strong>上升为<strong>类层级</strong>。即加载该类时就出现了，跟创不创建对象没有关系。类拥有一份，且被所有实例对象共享该同一份。不仅可通过 <code>引用.成员</code> 调用，还可以 <code>类名.成员</code> 调用。推荐 <code>类名.成员</code> 调用。</p>
<p><strong>static修饰成员变量</strong></p>
<p>例如：<code>public static String country;</code></p>
<p>变量由对象层级上升为类层级，叫做静态变量或者类变量。类和对象共享同一份该变量，所以一个改变该对象值，大家都跟着改变。不仅可通过 <code>引用.变量</code> 调用，还可以 <code>类名.变量</code> 调用。</p>
<p><strong>staitc修饰成员方法</strong></p>
<p>例如：<code>public static void show(参数) &#123;方法体&#125;</code></p>
<p>方法由对象层级上升为类层级，叫做静态方法或者类方法。不仅可通过 <code>引用.方法</code> 调用，还可以 <code>类名.方法</code> 调用。</p>
<p>由于方法是static修饰，属于类层级，所以在加载类时就已经被加载了，跟创建不创建对象无关。<br>而非静态的成员属于对象层级，必须要在创建对象后才出现。<br>所以在静态方法中只能访问静态成员，不可以访问非静态的成员，也不可以出现this之类跟对象有关的关键字（因为对象可能还没被创建）。</p>
<p>非静态方法即能访问非静态成员又可以访问静态成员。</p>
<p><strong>注意</strong>：</p>
<p>在开发中只有隶属于类层级并被所有对象共享的内容才可以使用static关键字修饰。（不能滥用static关键字）</p>
<h3 id="构造块和静态代码块"><a href="#构造块和静态代码块" class="headerlink" title="构造块和静态代码块"></a>构造块和静态代码块</h3><p>构造块：在类中直接大括号{}括起来的代码叫构造快，在每次创建对象时，构造方法之前执行。</p>
<p>静态代码块：在构造快前面加上static关键字。当类被加载时立马执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="comment">//静态代码块</span></span><br><span class="line">    <span class="comment">//需要在执行代码块之前随着类的加载做一些准备工作，比如，加载数据库的驱动包等。</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是静态代码块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//构造块。</span></span><br><span class="line">    <span class="comment">//需要在执行构造方法体之前做一些准备工作，比如，对成员变量经行统一初始化操作。</span></span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是构造块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是构造方法&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：当该类被加载时，就会立马调用一次”静态代码块“。此后，每次创建一个对象都会调用”构造块“，接着再调用”构造方法“。</p>
<h3 id="单例设计模型（Singleton类）"><a href="#单例设计模型（Singleton类）" class="headerlink" title="单例设计模型（Singleton类）"></a>单例设计模型（Singleton类）</h3><p>编程实现Singleton类，并且该类只能创建一个对象。</p>
<p>如下：</p>
<p>饿汉式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">	<span class="comment">//饿汉式，创建了引用 s 立马创建对象并指向，推荐</span></span><br><span class="line">    <span class="comment">//2,声明本类类型的引用指向本类类型的对象，配合private，static。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton s = <span class="keyword">new</span> Singleton();</span><br><span class="line">	<span class="comment">//1,私有化构造方法(private)，使得外面不能直接通过&quot;new 类名();&quot;的方式创建对象</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//3,提供公有的get方法将类中定义的对象返回出去，配合public，static。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>懒汉式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">	<span class="comment">//懒汉式，创建了引用 s 并没有初始化,而是在后面方法里初始化。</span></span><br><span class="line">    <span class="comment">//2,声明本类类型的引用指向暂时为null，配合private，static。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton s;</span><br><span class="line">    <span class="comment">//1,私有化构造方法(private)，使得外面不能直接通过&quot;new 类名();&quot;的方式创建对象</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	<span class="comment">//3,提供公有的get方法将类中定义的对象返回出去，配合public，static。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">			s = <span class="keyword">new</span> Singleton();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，可以外面只可以通过提供的共有的静态方法getSingleton()，即 <code>类名.静态方法（）</code> 的方法得到该类创建的对象。并且无论调用多少次方法，得到的都是同一个对象。</p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Singleton s1 = Singleton.getSingleton();</span><br><span class="line">        Singleton s2 = Singleton.getSingleton();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;s1 = &quot;</span> + s1);   <span class="comment">/*s1 = org.de.test_3.Singleton@312b1dae*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s2 = &quot;</span> + s2);   <span class="comment">/*s2 = org.de.test_3.Singleton@312b1dae*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<p>当Singleton类被加载时，静态变量<code>private static Singleton s = new Singleton();</code>就被加载，栈区创建引用s指向堆区创建的对象。执行静态方法<code>getSingleton()</code>，返回引用s。即返回堆区对象的地址。而无论调用多少次<code>getSingleton()</code>方法，返回的都是同一个地址，即同一个对象。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>例如定义教师类、定义工人类、学生类等等，这些类都有些共同的特征，比如它们都有人的特征。每个类都重新定义有关人的特征的话，重复代码严重。所以可以定义一个人类，而这些类都继承人类。</p>
<p>使用extends关键字表示继承关系，例如：<code>public class Teach extends People&#123;&#125;</code><br>Teach类继承People类。其中<br>Person类叫做父类，超类，基类<br>Teach类叫做子类，派生类，孩子类<br>Teach类继承People类后，就可以继承People类的成员方法和变量。</p>
<p>意义：使用继承提高了代码的复用性，可维护性及扩展性，是多态的前提条件</p>
<p>继承的特点：</p>
<ul>
<li>子类不能继承父类的构造方法和私有方法，但私有成员变量可以被继承，只是不能直接访问</li>
<li>无论调用何种方法创建子类对象是都会调用父类的无参构造方法，来初始化从父类继承的成员变量，相当于在子类的构造方法的第一行增加代码super()的效果。</li>
<li>使用继承必须满足逻辑关系：子类 is a 父类，例如老师 是 一个 人。也就是继承不能滥用。</li>
<li>java语言只支持单继承。一个子类只能有一个父类，但一个父类可以有多个子类。</li>
</ul>
<h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>从父类中继承下来的方法不满足子类的需求时，就需要在子类中重写一个新的和父类一样名字的方法，来覆盖从父类中继承下来的版本。该方式叫做方法的重写( Override )。</p>
<p>重写方法时，可以在方法上一行写<code>@Override</code>，有助于帮助我们检查该方法是不是重写。</p>
<p>重写原则：</p>
<ul>
<li>方法名相同、参数列表相同、返回值类型相同，从java5开始允许返回子类类型</li>
<li>方法的访问权限不能变小，可以相同或变大。</li>
<li>方法不能抛出更大的异常（异常机制）。</li>
</ul>
<p><strong>代码演示：</strong></p>
<p>封装了一个Animal类，有age、name私有变量，show()打印特征的成员方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>  age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        setAge(age);</span><br><span class="line">        setName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是动物，我叫&quot;</span> + getName() + <span class="string">&quot;，今年&quot;</span> + getAge() + <span class="string">&quot;岁！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>封装了一个Dog类，该类继承了Animal类。该类有tooth私有变量，还重写了父类的show()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tooth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> age, String name, <span class="keyword">int</span> tooth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(age, name);</span><br><span class="line">        setTooth(tooth);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTooth</span><span class="params">(<span class="keyword">int</span> tooth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tooth = tooth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTooth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tooth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;我是狗狗有&quot;</span> + getTooth() +<span class="string">&quot;颗牙齿&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>封装了一个Cat类，该类继承了Animal类。该类有color私有变量，还重写了父类的show()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(<span class="keyword">int</span> age, String name, String color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(age, name);</span><br><span class="line">        setColor(color);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;我是猫，我的颜色是&quot;</span> + getColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="构造块和静态代码块的考点"><a href="#构造块和静态代码块的考点" class="headerlink" title="构造块和静态代码块的考点"></a>构造块和静态代码块的考点</h3><p>假设：父类有构造方法，构造块，静态代码块。子类继承了父类，子类中也有构造方法，构造块，静态代码块。<br>问：  执行流程。</p>
<p>刚开始父类比子类先加载出来，所以先执行父类的静态代码块，再执行子类的静态代码块（一次）。<br>（由于创建子类对象一定会调用父类的构造方法怎么一说）<br>所以然后每次创建一个子类的对象时，都会先执行父类的构造块—–&gt;父类的构造方法——&gt;再执行子类的构造块—–&gt;子类的构造方法</p>
<h3 id="常用的访问控制符"><a href="#常用的访问控制符" class="headerlink" title="常用的访问控制符"></a>常用的访问控制符</h3><table>
<thead>
<tr>
<th>修饰符</th>
<th>本类</th>
<th>同一个包中的类</th>
<th>子类</th>
<th>其他类</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>可以访问</td>
<td>可以访问</td>
<td>可以访问</td>
<td>可以访问</td>
</tr>
<tr>
<td>protected</td>
<td>可以访问</td>
<td>可以访问</td>
<td>可以访问</td>
<td>不能访问</td>
</tr>
<tr>
<td>默认，即不写</td>
<td>可以访问</td>
<td>可以访问</td>
<td>不能访问</td>
<td>不能访问</td>
</tr>
<tr>
<td>private</td>
<td>可以访问</td>
<td>不能访问</td>
<td>不能访问</td>
<td>不能访问</td>
</tr>
</tbody></table>
<p>注意：</p>
<ul>
<li>public修饰的成员可以在任意位置使用</li>
<li>private修饰的成员只能在本类内部使用</li>
<li>通常情况下，没有特殊要求，成员方法用public修饰，成员变量用private修饰。</li>
</ul>
<h3 id="package包"><a href="#package包" class="headerlink" title="package包"></a>package包</h3><p>定义类需要指定类名，仅仅将类名作为类的唯一标识，会出现命名冲突的问题。<br>java用包（package）的概念解决该问题</p>
<ul>
<li><p>定义类的时，还需要指定一个包，例如：<br>package 包名;<br>package 包名1.包名2.包名3…..包名n;</p>
</li>
<li><p>为实现项目管理、解决命名冲突以及权限控制的效果</p>
</li>
</ul>
<p>定义包规范：<br>例如：org.apache.commons.lang.StringUtil<br>其中StringUtil是类名，而org.apache.commons.lang是多层包名，含义：<br>org.apache表示公司或组织的信息，<br>commons表示项目的名称信息，<br>lang表示模块的名称信息。</p>
<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>final表示最终的、不可改变的。可以修饰类，成员方法和成员变量。</p>
<ul>
<li>final关键字修饰类，表示该类不能被继承。<br>主要用于防止滥用继承，如：java.lang.String类等。</li>
<li>final关键字修饰成员方法，表示该方法不能被重写，但可以被继承。<br>主要用于防止不经意间造成重写，如java.text.Dateformat类中的format方法等。</li>
<li>final关键字修饰成员变量，表示该变量必须初始化且不能被改变了。<br>初始化的三种方式：定义时直接加等于号“=”初始化，在构造方法中初始化，在构造块中初始化。<br>主要用于防止不经意间造成改写，如java.lang.Thread类中的MAX_PRIORITY等。</li>
</ul>
<p><strong>常量</strong>：</p>
<p>用final关键字修饰的成员变量一般叫做常量。<br>但是通常不会单独使用final关键字修饰，会配合public static final关键字一起修饰来表达常量的含义。<br>常量的命名规范：所有字母要大写，不同单词之间用下划线连接。</p>
<h2 id="多态和特殊类-抽象类-接口"><a href="#多态和特殊类-抽象类-接口" class="headerlink" title="多态和特殊类(抽象类,接口)"></a>多态和特殊类(抽象类,接口)</h2><p>多态是指同一种事物表现出来的多种形态</p>
<p>饮料：可乐、雪碧、红牛、旺仔·····<br>宠物：猫、狗、鱼······<br>人：学生、老师、工人、警察······</p>
<p>多态语法格式：<br><code>父类类型 引用变量名 = new 子类类型();</code><br>声明父类类型的引用指向子类类型对象。</p>
<p>如：创建了Animal类。再创建Dog类，其中Dog类继承Animal类。再创建Cat类，其中Cat类继承Animal类。<br>多态：<code>Animal a1 = new Dog();</code>  或 <code>Animal a2 = new Cat();</code></p>
<p>其实，父类引用指向子类对象的形式就叫做多态。</p>
<h3 id="多态特点"><a href="#多态特点" class="headerlink" title="多态特点"></a>多态特点</h3><ul>
<li>当父类类型的引用指向子类类型的对象时(多态)，父类类型的引用可以直接调用父类独有的方法</li>
<li>当父类类型的引用指向子类类型的对象时(多态)，父类类型的引用不能直接调用子类独有的方法。（强制类型转换成子类就可以解决）</li>
<li>对与父类和子类都有的非静态方法来说(重写)，编译阶段调用父类版本，运行阶段调用子类重写的版本。</li>
<li>对于父类和子类都有的静态方法来说，编译和运行阶段都调用父类版本。（因为静态成员跟创建不创建对象无关，所以和子类无关）</li>
</ul>
<h3 id="引用数据类型的转换"><a href="#引用数据类型的转换" class="headerlink" title="引用数据类型的转换"></a>引用数据类型的转换</h3><p>父类类型可以理解为较大的类型，子类类型可以理解为较小的类型。<br>引用数据类型的转换方式有：自动类型转换、强制类型转换<br>转换方法跟基本数据类型相似。</p>
<ul>
<li>自动类型转换：指小类型转换成大类型，即子类转父类，也叫向上转型。比如多态的语法格式：Animal a = new Dog();</li>
<li>强制类型转换：指大类型转换成小类型，即父类转子类，也叫向下转换。比如：将上面的Animal a转换一下成Dog类型，Dog d = (Dog) a;</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>引用数据类型的转换必须发生再父子类之间，否则编译报错</li>
<li>若强制转换的目标不是该引用真正指向的数据类型时，编译通过，但是运行异常。ClassCastException类型转换异常。案例如下：</li>
</ul>
<p>例如，有Animal类作为父类，有Dog类和Cat类都继承Animal类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line"> <span class="comment">//该代码在运行报错，ClassCastException类型转换异常</span></span><br><span class="line">Cat c = (Cat)a;   </span><br><span class="line">Dog d = (Dog)a;  <span class="comment">//没问题</span></span><br></pre></td></tr></table></figure>

<p>如上，a虽然是Animal类型，但是真正意义上却是Dog类型。所以即使通过强制转换也不能转换成Cat类型。</p>
<p>为了避免上述错误发生，应该在强制转之前进行判断，借助instanceof，格式：<br>if(引用变量 instanceof 数据类型){ 为真时执行 }</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;可以放心强制转换&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;不可以转换哦&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多态的意义"><a href="#多态的意义" class="headerlink" title="多态的意义"></a>多态的意义</h3><p>例如，有Animal类作为父类，有Dog类和Cat类都继承Animal类。<br>要求：1，自定义方法实现，将参数指定的Dog对象的特征打印出来。<br>            2，自定义方法实现，将参数指定的Cat对象的特征打印出来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.de.test_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">	<span class="comment">//要求1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Dog d)</span></span>&#123;</span><br><span class="line">        d.show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//要求2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Cat c)</span> </span>&#123;</span><br><span class="line">        c.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//测试，调用</span></span><br><span class="line">        Test2.test(<span class="keyword">new</span> Dog(<span class="number">18</span>, <span class="string">&quot;WangCai&quot;</span>, <span class="number">27</span>));</span><br><span class="line">        Test2.test(<span class="keyword">new</span> Cat(<span class="number">10</span>, <span class="string">&quot;Baozi&quot;</span>, <span class="string">&quot;orange&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，Animal类中只有两个子类Dog和Cat。假如有n个子类，这类要求也是n个。代码冗余严重。<br>借助多态，可以完美解决该问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.de.test_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">	<span class="comment">//形参是父类类型的引用。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Animal a)</span> </span>&#123; </span><br><span class="line">        a.show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">        Test2.test(<span class="keyword">new</span> Animal());</span><br><span class="line">        <span class="comment">//实参是子类类型的对象。</span></span><br><span class="line">        Test2.test(<span class="keyword">new</span> Dog(<span class="number">18</span>, <span class="string">&quot;WangCai&quot;</span>, <span class="number">27</span>));</span><br><span class="line">        Test2.test(<span class="keyword">new</span> Cat(<span class="number">10</span>, <span class="string">&quot;Baozi&quot;</span>, <span class="string">&quot;orange&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多态的使用场合之一：通过传参的方法，实现多态。形参是父类类型的引用，实参是子类类型的对象。</p>
<p><strong>多态使用场合：</strong></p>
<ul>
<li>通过方法的参数传递形成多态；<br>形参是父类类型引用，实参是子类类型对象。</li>
<li>在方法体中直接使用多态的语法格式；<br>父类类型 引用变量名 = new 子类类型();</li>
<li>通过方法的返回值类型形成多态<br>定义方法的返回值类型是父类类型，但是return后面真实返回的是子类对象。</li>
</ul>
<h3 id="抽象方法和抽象类"><a href="#抽象方法和抽象类" class="headerlink" title="抽象方法和抽象类"></a>抽象方法和抽象类</h3><p>抽象方法：在定义方法时，加上abstract关键字。抽象方法没有方法体。如：<br><code> public abstract void show(参数);</code></p>
<p>抽象类：在定义时，加上abstract关键字。如：<br><code>public abstract class 类名&#123; 类体 &#125;</code></p>
<ul>
<li>抽象方法一定要定义在抽象类中。</li>
<li>抽象类中可以有或着没有，成员变量，成员方法，构造方法，抽象方法等。</li>
<li>抽象类不可以实例化对象（万一实例化了对象，而对象又调用了没有方法体的抽象方法怎么办！！）。</li>
</ul>
<p><strong>意义</strong></p>
<ul>
<li>抽象类的实际意义不在于创建对象，而在与被继承。</li>
<li>并且继承了抽象类的子类，必须重写抽象类的所有抽象方法，否者也定义成抽象类。<br>也就是说，抽象类对子类具有强制性和规范性，因此叫做模板设计模式。</li>
</ul>
<p><strong>注意</strong>：</p>
<p>虽然只要是满足abstract关键字修饰的类是抽象类，但是真正意义上的抽象类还应该有抽象方法。</p>
<p><strong>案例</strong>：银行有 定期账户 和 活期账户 ，都继承自 账户类。</p>
<p>定义 账户类Account，该类定义成抽象类，获取利息的方法也定义成抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.de.test_5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        setMoney(money);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取利息的抽象方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getLiXing</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义定期账户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.de.test_5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DingQiAccount</span> <span class="keyword">extends</span> <span class="title">Account</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DingQiAccount</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLiXing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMoney() * <span class="number">0.03</span> * <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义活期账户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.de.test_5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuoQiAccount</span> <span class="keyword">extends</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HuoQiAccount</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLiXing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMoney() * <span class="number">0.01</span> * <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.de.test_5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//多态场景之一</span></span><br><span class="line">        Account a = <span class="keyword">new</span> <span class="comment">/*DingQi*/</span>HuoQiAccount(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;利息是&quot;</span> + a.getLiXing() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>考点</strong></p>
<p>abstract关键字不能和private、static、final关键字一起使用。原因：</p>
<ul>
<li>abstract 和 private： private是私有的，子类访问不到，就更不用说重写了。而abstract就是需要重写，互相矛盾。</li>
<li>abstract 和 static：用static修饰的方法隶属于类层级，可以用“类名.方法”来调用，而此时抽象方法没有方法体，错误。</li>
<li>abstract 和 final：final修饰的方法表示不能被重写，而abstract就是需要重写，互相矛盾。</li>
</ul>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口就是一种比抽象类还抽象的类。体现接口中在只有常量和抽象方法。</p>
<p>定义时接口时，把class关键字改成interface。如<code>public interface 接口名&#123; 接口体 &#125;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接口只有常量和抽象方法（型特性除外）,注释中的关键字可以省略。</span></span><br><span class="line">    <span class="comment">/*public static final*/</span> <span class="keyword">int</span> i = <span class="number">1</span>;  <span class="comment">//常量</span></span><br><span class="line">    <span class="comment">/*public abstract*/</span> <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;    <span class="comment">//抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//8版本之后的新特性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;&#125;    <span class="comment">//非抽象方法，子类自由选择重写不重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show3</span><span class="params">()</span></span>&#123;&#125;     <span class="comment">//静态方法，子类不能重写</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//9版本的新特性</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show4</span><span class="params">()</span></span>&#123;&#125;           <span class="comment">//私有方法，子类不能重写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上，接口只有常量和抽象方法。但是Java8版本之后的新特性可以有非抽象方法，静态方法；Java9版本的新特性可以有私有方法。</p>
<p><strong>意义</strong></p>
<p>接口出现可以弥补Java中类不能多继承的不足。</p>
<p>例如：黄金即属于金属，又属于货币。如果用类描述关系的话，很难描述。而接口可以。<br>定义金属接口，定义货币接口，再定义黄金类。黄金类继承金属接口又继承货币接口。<br><em>注意</em>：类继承接口，叫做类实现接口，不用extends关键字，而用implements关键字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//金属接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Metal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">shine</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//货币接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Money</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//黄金类Gold，实现(继承)了金属接口Metal和货币接口Money。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gold</span> <span class="keyword">implements</span> <span class="title">Metal</span>, <span class="title">Money</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>      <span class="comment">//重写金属接口Metal的抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shine</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄金闪闪发光&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>      <span class="comment">//重写货币接口Money的抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;买买买&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>接口和类的关系</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>关键字</th>
<th>关系</th>
</tr>
</thead>
<tbody><tr>
<td>类和类之间</td>
<td>用extends关键字表示继承</td>
<td>单继承</td>
</tr>
<tr>
<td>类和接口之间</td>
<td>用implements关键字表示实现</td>
<td>多实现</td>
</tr>
<tr>
<td>接口和接口之间</td>
<td>用extends关键字表示继承</td>
<td>多继承</td>
</tr>
</tbody></table>
<p><em>注意</em>：</p>
<ul>
<li>类可以实现(继承)接口，而接口不能继承类。</li>
<li>子接口a继承了父接口b，某个类实现子接口a的话，该类必须重写接口a和接口b的所有抽象方法，否则将该类变成抽象类。</li>
</ul>
<p>想要即继承父类又实现接口的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 <span class="keyword">extends</span> 父类 <span class="keyword">implements</span> 接口1, 接口2, 接口3 </span>&#123; 类体 &#125;</span><br></pre></td></tr></table></figure>

<h2 id="特殊类"><a href="#特殊类" class="headerlink" title="特殊类"></a>特殊类</h2><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p><em>概念</em><br>当一个类的定义出现在另外一个类的类体中时，那么这个类叫做内部类（Inner），而这个内部类所在的类叫做外部类（Outer）。</p>
<p>类中的内容可以有：成员变量、成员方法、构造方法、静态方法、构造块、静态代码块、内部类。<br>由此可见内部类和其他成员是平级关系。</p>
<p><em>作用：</em><br>当一个类的存在价值仅仅是为某一个类单独服务时，那么就可以将这个类定义为服务类中的内部类，这样可以隐藏该类的现实细节并且可以方便的访问外部类的私有成员。</p>
<p><em>内部类的分类</em></p>
<ul>
<li>普通（成员）内部类：直接将一个类定义在另一个类的类体中</li>
<li>静态内部类：使用static关键字修饰的内部类，隶属于类层级</li>
<li>局部内部类：直接将一个类定义在方法体的内部</li>
<li>匿名内部类：就是指没有名字的内部类（重要）</li>
</ul>
<h4 id="普通内部类"><a href="#普通内部类" class="headerlink" title="普通内部类"></a>普通内部类</h4><p>又叫成员内部类，直接将一个类定义在另一个类的类体中，写法和普通的类一样。<br>内部类可以直接访问外部类的成员。出现同名成员，可以用<code>外部类名.this.成员</code>访问外部类的成员。<br>测试中想要创建内部类，必须先创建外部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//定义普通内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Innter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;形参a = &quot;</span> + a);</span><br><span class="line">            System.out.println(<span class="string">&quot;普通内部类的成员变量a = &quot;</span> + <span class="keyword">this</span>.a);</span><br><span class="line">            System.out.println(<span class="string">&quot;外部类的成员变量a = &quot;</span> + Outer1.<span class="keyword">this</span>.a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">	<span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Outer1 o = <span class="keyword">new</span> Outer1();</span><br><span class="line">        Outer1.Innter i = o.<span class="function">new <span class="title">Innter</span><span class="params">()</span></span>;</span><br><span class="line">        i.show(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>使用static关键字修饰的内部类，隶属于类层级<br>由于静态内部类隶属于类层级，可以用类名.的方式直接调用。<br>并且静态内部类里面不可以访问外部类的非静态成员。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//该静态内部类里面不能访问外部类的非静态成员。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnter</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> b = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;形参a = &quot;</span> + a);</span><br><span class="line">            System.out.println(<span class="string">&quot;静态内部类的成员变量b = &quot;</span> + <span class="keyword">this</span>.b);</span><br><span class="line">            System.out.println(<span class="string">&quot;静态内部类的静态变量a = &quot;</span> + StaticInnter.a);</span><br><span class="line">            System.out.println(<span class="string">&quot;外部类的静态变量a = &quot;</span> + Outer2.a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">	<span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Outer2.StaticInnter si = <span class="keyword">new</span> Outer2.StaticInnter();</span><br><span class="line">        si.show(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><p>直接将一个类定义在方法体的内部。<br>只能在该方法体中使用。<br>和局部变量一样，定义局部内部类时不用加public等关键字修饰。<br>局部内部类中访问外部方法体的变量时，应该把该变量当作常量一样使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ia = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ib = <span class="number">2</span>;   <span class="comment">//对于局部内部类来说，该外部方法体的变量ib相当于常量。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//在方法体中定义局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AreaInner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> ic = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ia = &quot;</span> + ia);</span><br><span class="line">                System.out.println(<span class="string">&quot;ib = &quot;</span> + ib);<span class="comment">//外部方法体的变量ib相当于常量。</span></span><br><span class="line">                System.out.println(<span class="string">&quot;ic = &quot;</span> + ic);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只能在所在的方法体中调用。</span></span><br><span class="line">        AreaInner ai = <span class="keyword">new</span> AreaInner();</span><br><span class="line">        ai.show2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">	<span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Outer3 o = <span class="keyword">new</span> Outer3();</span><br><span class="line">        o.show1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p><strong>回调模式的概念</strong></p>
<p>回调模式：指如果一个方法的形参是接口类型，则调用该方法时，实参就要是该接口类型的实现类创建的对象。而该方法在运行时会调用到参数对象中所重写的方法。</p>
<p>例如：定义一个接口MyInterface。接口中有抽象方法show();<br>定义一个方法如下，符合回调模式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//形参是接口类型引用。注意：而接口有不能创建对象，只能利用多态。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">huiDiao</span><span class="params">(MyInterface i)</span></span>&#123;</span><br><span class="line">    i.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用该方法，实参是接口的某个实现类(子类)创建的对象。所以我们又需要为接口MyInterface定义一个实现类(子类)Sub。实现类Sub要重写接口的抽象方法。<br>然后可以如下调用方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1,实参是接口的某个实现类(子类)创建的对象</span></span><br><span class="line">huiDiao( <span class="keyword">new</span> Sub() );</span><br></pre></td></tr></table></figure>

<p>假如该方法只要调用一次就没有用了，所以实现类Sub只会用到一次就没用了。相当于是临时定义出来的类，为了方便，我们可以使用匿名内部类。</p>
<p><strong>匿名内部类</strong></p>
<p>接口/父类 引用名 = new 接口/父类（）{ 匿名内部类的方法体(注意要重写方法) };</p>
<p>根据上面的代码，调用huiDiao()方法传实参时，我们可以不用定义临时的实现类Sub了。<br>采用匿名内部类，为接口MyInterface 临时创建一个没有名字实现类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2,实参是利用匿名内部类创建的对象</span></span><br><span class="line">MyInterface i = <span class="keyword">new</span> MyInterface()&#123; <span class="comment">//类体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;临时创建出来的匿名内部类重写接口的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;   <span class="comment">//注意最后的分号;</span></span><br><span class="line">huiDiao(i);</span><br></pre></td></tr></table></figure>

<p>从java8开始提出型特性lamda表达式可以简化上述代码，<br>格式为：(参数列表) -&gt; {方法体}，后面会讲。</p>
<p><strong>开发经验</strong></p>
<p>当  接口/父类  类型的引用作为方法的形参时，实参的传递方式有两种：</p>
<ul>
<li>自定义类来  实现接口/继承父类，并重写方法。然后创建该类的对象作为实参传递。</li>
<li>使用上述匿名内部类的语法格式，得到  接口/类  类型的引用即可。</li>
</ul>
<h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p>定义季节类，对象只有：春夏秋冬<br>定义性别类，对象只有：男女</p>
<p>例如：定义一个枚举类，枚举类只能创建指定的几个对象。</p>
<h4 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h4><p>编程实现方向枚举类，该类只能创建对象：向上，向下，向左，向右。（定义方法跟之前的单例设计模型类似）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Direction</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String direc;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *2，声明本类类型的引用指向本类类型的对象，配合public static final关键字</span></span><br><span class="line"><span class="comment">     *   使得外部只能得到这4个引用（类名.引用名），而且不能修改。外部不能创建别的对象了。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Direction UP = <span class="keyword">new</span> Direction(<span class="string">&quot;向上&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Direction DOWN = <span class="keyword">new</span> Direction(<span class="string">&quot;向下&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Direction LEFT = <span class="keyword">new</span> Direction(<span class="string">&quot;向左&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Direction RIGHT = <span class="keyword">new</span> Direction(<span class="string">&quot;向右&quot;</span>);</span><br><span class="line">    <span class="comment">//1,私有化构造方法，使得外部不能通过new的方法创建对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Direction</span><span class="params">(String derec)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.direc = derec;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方向是&quot;</span> + <span class="keyword">this</span>.direc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>外部只能得到这4个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Direction d1 = Direction.UP;</span><br><span class="line">Direction d2 = Direction.DOWN;</span><br><span class="line">Direction d3 = Direction.LEFT;</span><br><span class="line">Direction d4 = Direction.RIGHT;</span><br></pre></td></tr></table></figure>

<h4 id="用enum定义枚举类"><a href="#用enum定义枚举类" class="headerlink" title="用enum定义枚举类"></a>用enum定义枚举类</h4><p>使用上述public static final配合表示有点繁琐，Java5以后有了新的引用数据类型：<em>枚举类型</em>，用enum关键字。<br>定义枚举类时，将class替换成enum表示枚举类类型。</p>
<p>Java5后建议如下这样定义枚举类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Direction2</span></span>&#123;</span><br><span class="line">    <span class="comment">//public static final Direction UP = new Direction(&quot;向上&quot;);</span></span><br><span class="line">    <span class="comment">//在枚举类中简写成： UP(&quot;向上&quot;);   且放在第一行。</span></span><br><span class="line">    UP(<span class="string">&quot;向上&quot;</span>), DOWN(<span class="string">&quot;向下&quot;</span>), LEFT(<span class="string">&quot;向左&quot;</span>), RIGHT(<span class="string">&quot;向右&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String deric;</span><br><span class="line">    <span class="comment">//1,私有化构造方法，使得外部不能通过new的方法创建对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Direction2</span><span class="params">(String deric)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deric = deric;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.deric);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Direction2 d1 = Direction2.UP;</span><br><span class="line">Direction2 d2 = Direction2.DOWN;</span><br><span class="line">Direction2 d3 = Direction2.LEFT;</span><br><span class="line">Direction2 d4 = Direction2.RIGHT;</span><br></pre></td></tr></table></figure>

<p>在switch结构中支持采用enum关键字定义的枚举类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(Direction2 d)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(d)&#123;</span><br><span class="line">            <span class="keyword">case</span> UP: System.out.println(<span class="string">&quot;贪吃蛇向上走&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DOWN: System.out.println(<span class="string">&quot;贪吃蛇向下走&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LEFT: System.out.println(<span class="string">&quot;贪吃蛇向左走&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RIGHT: System.out.println(<span class="string">&quot;贪吃蛇向右走&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Test2.test2(Direction2.UP);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Enum类的方法"><a href="#Enum类的方法" class="headerlink" title="Enum类的方法"></a>Enum类的方法</h4><p>用enum关键字定义的枚举类天生继承自java.lang.Enum类，所以也继承父类的方法。<br><em>注意</em>：由于继承Enum父类。枚举类不能再继承其他类了，但是可以实现接口。</p>
<p>继承的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>static T[] values()</td>
<td>返回当前枚举类中所有对象</td>
</tr>
<tr>
<td>String toString()</td>
<td>返回当前枚举类对象名称</td>
</tr>
<tr>
<td>int ordinal()</td>
<td>获取枚举类对象在枚举中的索引位置</td>
</tr>
<tr>
<td>static T valueOf(String str)</td>
<td>将参数指定的字符串转换为当前枚举类的对象</td>
</tr>
<tr>
<td>ing compareTo(E o)</td>
<td>比较当前枚举类对象和参数枚举类对象的顺序</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Direction2[] arr = Direction2.values();   <span class="comment">//values()</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前对象的名称是：&quot;</span> + arr[i].toString());   <span class="comment">//toString()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前对象的索引值是：&quot;</span> + arr[i].ordinal());  <span class="comment">//ordinal()</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意细节，print打印“引用”或者是“引用.toString()”的结果是一样的。</span></span><br><span class="line">    Direction2 d = Direction2.valueOf(<span class="string">&quot;LEFT&quot;</span>);     <span class="comment">//valueOf()</span></span><br><span class="line">    System.out.println(d);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//compareTo()是将当前对象索引值减去参数对象索引值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> ia = d.compareTo(arr[i]);                      <span class="comment">//compareTo()</span></span><br><span class="line">        System.out.println(d.toString() + <span class="string">&quot;和&quot;</span> + arr[i].toString() + <span class="string">&quot;比的结果是&quot;</span> + ia);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="枚举类重写接口方法"><a href="#枚举类重写接口方法" class="headerlink" title="枚举类重写接口方法"></a>枚举类重写接口方法</h4><p>上面说过，由于继承Enum父类。枚举类不能再继承其他类了，但是可以实现接口。</p>
<p>枚举类实现了某个接口，就需要重写接口的方法。重写方法有两种方式：</p>
<ul>
<li>所有枚举类对象共享同一个重写方法。</li>
<li>每个枚举类对象各自重写方法，利用匿名内部类的方式。</li>
</ul>
<p>假设定义一个接口MyInterface，有抽象方法show()。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Direction3</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    UP(<span class="string">&quot;向上&quot;</span>), DOWN(<span class="string">&quot;向下&quot;</span>), LEFT(<span class="string">&quot;向左&quot;</span>), RIGHT(<span class="string">&quot;向右&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String direc;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Direction3</span><span class="params">(String direc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.direc = direc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1,所有枚举类对象共享同一个重写方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Direction3</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2,每个枚举类对象各自重写方法，利用匿名内部类的方式。</span></span><br><span class="line">    <span class="comment">//匿名内部类：接口/父类 引用名 = new 接口/父类()&#123;类体&#125;;</span></span><br><span class="line">    <span class="comment">//public static finla Directioin3 UP = new Direction3(&quot;向上&quot;) &#123;类体中重写方法&#125;;</span></span><br><span class="line">    <span class="comment">//简化为：UP(&quot;向上&quot;)&#123;类体中重写方法&#125;, DOWN(&quot;向下&quot;)&#123;类体中重写方法&#125;, ......</span></span><br><span class="line">    UP(<span class="string">&quot;向上&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, DOWN(<span class="string">&quot;向下&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, LEFT(<span class="string">&quot;向左&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, RIGHT(<span class="string">&quot;向右&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String direc;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Direction3</span><span class="params">(String direc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.direc = direc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>注解(Annotation)又叫标注。是Java5开始增加的一种引用数据类型。是一种特殊的接口。</p>
<p>本质上就是给代码贴标签，特殊标记。通过这些标记可以在编译、类加载、以及运行时执行指定的处理。</p>
<h4 id="定义和使用"><a href="#定义和使用" class="headerlink" title="定义和使用"></a>定义和使用</h4><p><strong>定义</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">访问修饰符 <span class="meta">@interface</span> 注解名称&#123;</span><br><span class="line">	注解成员;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注解成员只有成员变量。注解的成员变量声明语法：<br><code>public 数据类型 变量名();</code>     或者<br><code>public 数据类型 变量名() default 默认值;</code></p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="comment">//只能有成员变量。public 数据类型 变量名() /*default 默认值*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value2</span><span class="params">()</span> <span class="keyword">default</span> 10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果一个注解没有任何成员，叫做标记注解/标识注解。</p>
<p><strong>使用</strong></p>
<p>在需要注解的代码上写上：@ 注解名(传参)</p>
<p>例如：注解标注Person类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(value=1, value2=2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>注解是标注在代码上面。<br>但是有些注解可以标注在注解上———叫做元注解。</p>
<p>元注解主要有：@retention、@Documented、@Target、@Inherited、@Repeatable</p>
<p><strong>@retention</strong></p>
<p>@retention应用(贴)在一个注解上，用于说明该注解的生命周期，取值如下：</p>
<ul>
<li><p>RetentionPolicy.SOURCE：注解只在源码阶段保留，在编译器进行编译时</p>
<p>它将被丢弃忽视。java文件前有效</p>
</li>
<li><p>RetentionPolicy.CLASS：注解只被保留到编译进行的时候，它并不会被加</p>
<p>载到 JVM 中，默认方式。class文件前有效</p>
</li>
<li><p>RetentionPolicy.RUNTIME：注解可以保留到程序运行的时候，它会被加载</p>
<p>进入到 JVM 中，所以在程序运行时可以获取到它们。</p>
</li>
</ul>
<p>java文件——–(javac.exe编译器编译阶段)——-&gt;class文件——(java.exe解释器解释运行阶段)———-&gt;结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定所修饰的注解MyAnnotation的生命周期在class文件前有效(默认)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.CLASS)</span>    </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;  <span class="comment">//自定义注解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Documented</strong></p>
<p>使用Javadoc工具可以从程序源代码中抽取类、方法、成员等形成一个和源代码配套的API帮助文档。默认不包括注解内容。</p>
<p>例如写了如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(value=1, value2=2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//文档注释</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * age是描述年龄的成员变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * name是描述姓名的成员变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i:随便传的形参</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>:返回参数int i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里使用过IDEA演示，点击“Tools”—&gt;“Generate JavaDoc”，打开对话框，填写好相关信息后点击ok。然后会自动生成跟我们写的代码配套的API帮助文档。<br>文档注释/**    */会变成代码的功能说明。</p>
<p>生成的API帮助文档，里面默认不包括注解内容。<br>想要在API帮助文档包括注解内容的话，需要在定义注解时，贴上元注解@Documented。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所修饰的注解MyAnnotation可以被添加到API帮助文档中</span></span><br><span class="line"><span class="meta">@Documented</span>                     </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Target</strong></p>
<p>@Target用于指定被修饰的注解只能贴在哪些元素上。</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>ElementType.ANNOTATION_TYPE</td>
<td>可以给一个注解进行注解</td>
</tr>
<tr>
<td>ElementType.CONSTRUCTOR</td>
<td>可以给构造方法进行注解</td>
</tr>
<tr>
<td>ElementType.FIELD</td>
<td>可以给属性进行注解</td>
</tr>
<tr>
<td>ElementType.LOCAL_VARIABLE</td>
<td>可以给局部变量进行注解</td>
</tr>
<tr>
<td>ElementType.METHOD</td>
<td>可以给方法进行注解</td>
</tr>
<tr>
<td>ElementType.PACKAGE</td>
<td>可以给一个包进行注解</td>
</tr>
<tr>
<td>ElementType.PARAMETER</td>
<td>可以给一个方法内的参数进行注解</td>
</tr>
<tr>
<td>ElementType.TYPE</td>
<td>可以给类型进行注解，比如类、接口、枚举</td>
</tr>
</tbody></table>
<p>从Java8开始对元注解@Target的参数类型ElementType枚举值增加了两个：</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>ElementType.TYPE_PARAMETER</td>
<td>该注解能写在类型变量的声明语句中，如：泛型。</td>
</tr>
<tr>
<td>中ElementType.TYPE_USE</td>
<td>该注解能写在使用类型的任何语句中</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所修饰的注解MyAnnotation只可以贴在属性或类型上。</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Inherited</strong></p>
<p>默认子类继承父类时，不会把父类的注解也继承。</p>
<p>@Inherited所应用的注解可以被继承。</p>
<p>并不是说注解本身可以继承，而是说如果一个父类被该元注解(@Inherited)标记过的注解进行标记时，如果子类没有被任何注解应用时，则子类就继承父类的注解。</p>
<p><strong>@Repeatable</strong></p>
<p>表示自然可重复的含义</p>
<p>正常定义的注解不能对同一代码反复标注。</p>
<p>如果某一注解想要对同一代码反复标注，Java8以前的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ManType &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ManTypes &#123;</span><br><span class="line">    <span class="keyword">public</span> ManType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java8以前是这样处理多个注解</span></span><br><span class="line"><span class="meta">@ManTypes(value=&#123;@ManType(value=&quot;超人&quot;), @ManType(value=&quot;父亲&quot;)&#125;)</span>   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java8以后借助元注解@Repeatable可以这样写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repeatable(value=ManTypes.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ManType &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ManTypes &#123;</span><br><span class="line">    <span class="keyword">public</span> ManType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java8以后借助元注解@Repeatable可以这样写</span></span><br><span class="line"><span class="meta">@ManType(value=&quot;超人&quot;)</span>    </span><br><span class="line"><span class="meta">@ManType(value=&quot;父亲&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是无论哪种写法，ManType注解想要反复使用的话，都需要定义ManTypes注解，里面的成员是ManType注解类型的数组。</p>
<h4 id="常见的预制注解"><a href="#常见的预制注解" class="headerlink" title="常见的预制注解"></a>常见的预制注解</h4><p>预制注解就是Java语言自身提供的注解，具体如下：</p>
<table>
<thead>
<tr>
<th>预制注解</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>@author</td>
<td>标明开发该类模块的作者，多个作者之间使用,分割</td>
</tr>
<tr>
<td>@version</td>
<td>标明该类模块的版本</td>
</tr>
<tr>
<td>@see</td>
<td>参考转向，也就是相关主题</td>
</tr>
<tr>
<td>@since</td>
<td>从哪个版本开始增加的</td>
</tr>
<tr>
<td>@param</td>
<td>对方法中某参数的说明，如果没有参数就不能写</td>
</tr>
<tr>
<td>@return</td>
<td>对方法返回值的说明，如果方法的返回值类型是void就不能写</td>
</tr>
<tr>
<td>@exception</td>
<td>对方法可能抛出的异常进行说明</td>
</tr>
<tr>
<td>@Override</td>
<td>限定重写父类方法, 该注解只能用于方法</td>
</tr>
<tr>
<td>@Deprecated</td>
<td>用于表示所修饰的元素(类, 方法等)已过时</td>
</tr>
<tr>
<td>@SuppressWarnings</td>
<td>抑制编译器警告</td>
</tr>
</tbody></table>
<h1 id="Java核心类库-上"><a href="#Java核心类库-上" class="headerlink" title="Java核心类库(上)"></a>Java核心类库(上)</h1><h2 id="常用类的概述和使用"><a href="#常用类的概述和使用" class="headerlink" title="常用类的概述和使用"></a>常用类的概述和使用</h2><p>这里开始学习官方提供的类和接口，需要借助API工具。</p>
<h3 id="常用的包"><a href="#常用的包" class="headerlink" title="常用的包"></a>常用的包</h3><ul>
<li><p>java.lang包 - 该包是Java语言的核心包，并且该包中的所有内容由Java虚拟机自动导入。<br>如：System类、String类、… </p>
</li>
<li><p>java.util包 - 该包是Java语言的工具包，里面提供了大量工具类以及集合类等。<br>如：Scanner类、Random类、List集合、…</p>
</li>
<li><p>java.io包 - 该包是Java语言中的输入输出包，里面提供了大量读写文件相关的类等。<br>如：FileInputStream类、FileOutputStream类、…</p>
</li>
<li><p>java.net包 - 该包是Java语言中的网络包，里面提供了大量网络编程相关的类等。<br>如：ServerSocket类、Socket类、…</p>
</li>
<li><p>java.sql 包 - 该包是Java语言中的数据包，里面提供了大量操作数据库的类和接口等。<br>如：DriverManager类、Connection接口、…</p>
</li>
<li><p>… …</p>
</li>
</ul>
<p>Java程序员在编程时可以使用大量类库，因此Java编程时需要记的很多，对编程能力本身要求不是</p>
<p>特别的高。</p>
<h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><ul>
<li><p>java.lang.Object类是Java语言中类层次结构的根类，也就是说任何一个类都是该类的直接或者间<br>接子类。</p>
</li>
<li><p>如果定义一个Java类时没有使用extends关键字声明其父类，则其父类默认为 java.lang.Object 类。</p>
</li>
<li><p>Object类定义了“对象”的基本行为, 被子类默认继承。</p>
</li>
</ul>
<p><strong>Object类的常用方法如下：</strong>（被所有子类继承）</p>
<h4 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h4><p>boolean equals(Object obj)：</p>
<p>用于判断调用对象是否与参数对象相等。默认是判断地址是否相等，和==运算符一样。<br>若希望比较两个对象的内容，则需要重写该方法。<br>若该方法被重写后，则应该重写hashCode方法来保证结果的一致性。</p>
<p><em>例如</em>，定义了student类，假如两个对象的id一样，则equals()就为true。重写如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">    <span class="comment">//参数obj为空，或者参数和当前对象this不是同一类，直接返回false。</span></span><br><span class="line">    <span class="keyword">if</span>( obj == <span class="keyword">null</span> || obj.getClass()!= <span class="keyword">this</span>.getClass() ) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//参数obj和当前对象this地址相同直接返回true。</span></span><br><span class="line">    <span class="keyword">if</span>(obj == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//如果id相同，直接返回true。</span></span><br><span class="line">    ObjectTest that = (ObjectTest)obj;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.getId() == that.getId() )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//id不同返回false。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是String name这种引用数据类型的话，条件如下(因为String类中重写了equals方法)</span></span><br><span class="line"><span class="comment">//if( this.getName().equals(that.getName()) )</span></span><br></pre></td></tr></table></figure>

<h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h4><p>int hashCode()：</p>
<p>用于获取调用对象的哈希码值(内存地址的编号)。<br>若两个对象调用equals方法相等，则各自调用该方法的结果必须相同。<br>若两个调用对象equals方法不相等，则各自调用该方法的结果应该不相同。<br>为了使得该方法与equals方法保持一致，重写了equals方法，就需要重写该方法。</p>
<p><em>例如</em>，上面重写了equals()方法，是基于对象的id比较是否相等，那么hashCode()方法也要重写来与id有关联。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">31</span> * <span class="number">12</span> + <span class="keyword">this</span>.getId();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是String name这种引用数据类型的话，返回值如下(因为String类中重写了hashCode方法)</span></span><br><span class="line"><span class="comment">//return 31 * 12 + this.getName().hashCode();</span></span><br></pre></td></tr></table></figure>

<h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p>String toString()：</p>
<p>该方法默认返回的字符串为：包名.类名@哈希码值的十六进制。<br>为了返回更有意义的数据，需要重写该方法。<br>使用print或println打印引用或字符串拼接引用都会自动调用该方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;id=&quot;</span> + <span class="keyword">this</span>.id + <span class="string">&quot;,name=&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="getClass"><a href="#getClass" class="headerlink" title="getClass()"></a>getClass()</h4><p>Class&lt;?&gt; getClass() ：</p>
<p>用于返回调用对象执行时的Class实例，反射机制使用</p>
<h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>通常情况下基本数据类型的变量不是对象，为了满足万物皆对象的理念就需要对基本数据类型的变量进行打包封装处理变成对象，而负责将这些变量声明为成员变量进行对象化处理的相关类，叫做包装类。</p>
<table>
<thead>
<tr>
<th><strong>包装类</strong></th>
<th><strong>对应的基本类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td>java.lang.Byte</td>
<td>byte</td>
</tr>
<tr>
<td>java.lang.Short</td>
<td>short</td>
</tr>
<tr>
<td>java.lang.Integer</td>
<td>int</td>
</tr>
<tr>
<td>java.lang.Long</td>
<td>long</td>
</tr>
<tr>
<td>java.lang.Float</td>
<td>float</td>
</tr>
<tr>
<td>java.lang.Double</td>
<td>double</td>
</tr>
<tr>
<td>java.lang.Boolean</td>
<td>boolean</td>
</tr>
<tr>
<td>java.lang.Character</td>
<td>char</td>
</tr>
</tbody></table>
<p>其中Byte、Short、Integer、Long、Float、Double包装类都继承自java.lang.Number抽象类。</p>
<h4 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h4><p>java.lang.Integer类内部包装了一个int类型的变量作为成员变量，主要用于实现对int类型的包装并<br>提供int类型到String类之间的转换等方法。</p>
<p><strong>常用常量</strong></p>
<table>
<thead>
<tr>
<th><strong>常量类型和名称</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>public static final int MAX_VALUE</td>
<td>表示int类型可以描述的最大值，即2^31-1</td>
</tr>
<tr>
<td>public static final int MIN_VALUE</td>
<td>表示int类型可以描述的最小值，即-2^31</td>
</tr>
<tr>
<td>public static final int SIZE</td>
<td>表示int类型采用二进制补码形式的位数</td>
</tr>
<tr>
<td>public static final int BYTES</td>
<td>表示int类型所占的字节个数</td>
</tr>
<tr>
<td>public static final Class TYPE</td>
<td>表示int类型的Class实例</td>
</tr>
</tbody></table>
<p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Integer(int value)</td>
<td>根据参数指定的整数来构造对象（已过时）</td>
</tr>
<tr>
<td>Integer(String s)</td>
<td>根据参数指定的字符串来构造对象 （已过时）</td>
</tr>
<tr>
<td>static Integer valueOf(int i)</td>
<td>根据参数指定整数值得到Integer类型对象</td>
</tr>
<tr>
<td>int intValue()</td>
<td>获取调用对象中的整数值并返回</td>
</tr>
<tr>
<td>String toString()</td>
<td>返回描述调用对象数值的字符串形式</td>
</tr>
<tr>
<td>static int parseInt(String s)</td>
<td>将字符串类型转换为int类型并返回</td>
</tr>
<tr>
<td>static String toString(int i)</td>
<td>获取参数指定整数的十进制字符串形式</td>
</tr>
<tr>
<td>static String toBinaryString(int i)</td>
<td>获取参数指定整数的二进制字符串形式</td>
</tr>
<tr>
<td>static String toHexString(int i)</td>
<td>获取参数指定整数的十六进制字符串形式</td>
</tr>
<tr>
<td>static String toOctalString(int i)</td>
<td>获取参数指定整数</td>
</tr>
</tbody></table>
<p><strong>装箱和拆箱</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用构造方法创建对象，已过时（不建议使用）</span></span><br><span class="line">Integer it1 = <span class="keyword">new</span> Integer(<span class="number">5</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Integer对象，相当于将int类型转换Integer类型，装箱</span></span><br><span class="line">Integer it2 = Integer.valueOf(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于将Integer类型转换int类型，拆箱</span></span><br><span class="line"><span class="keyword">int</span> ia = it2.intValue();</span><br></pre></td></tr></table></figure>

<p><strong>自动装箱和拆箱</strong>(java5之后的新特性)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java5后，自动装箱拆箱</span></span><br><span class="line">Integer it1 = <span class="number">9</span>;  </span><br><span class="line"><span class="keyword">int</span> ia = it1;</span><br></pre></td></tr></table></figure>

<p><strong>自动装箱池</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer it1 = <span class="number">128</span>;</span><br><span class="line">Integer it2 = <span class="number">128</span>;</span><br><span class="line">System.out.println(it5 == it6);  <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>如上，明显it1和it2的地址不相同，所以结果是false，但是如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer it3 = <span class="number">127</span>;</span><br><span class="line">Integer it4 = <span class="number">127</span>;</span><br><span class="line">System.out.println(it3 == it4);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>结果却是true。因为：</p>
<p>在Integer类的内部提供了自动装箱池技术，将-128到127之间的整数已经装箱完毕，当程序中使用<br>该范围之间的整数时，无需装箱直接取用自动装箱池中的对象即可，从而提高效率。</p>
<p><strong>其他方法演示</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;返回十进制&quot;</span> + Integer.toString(<span class="number">200</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;返回二进制&quot;</span> + Integer.toBinaryString(<span class="number">200</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;返回八进制&quot;</span> + Integer.toOctalString(<span class="number">200</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;返回十六进制&quot;</span>+Integer.toHexString(<span class="number">200</span>));</span><br><span class="line"><span class="comment">//常量</span></span><br><span class="line">System.out.println(<span class="string">&quot;Integer类型表示的最大值&quot;</span> + Integer.MAX_VALUE);  <span class="comment">//2147483647</span></span><br></pre></td></tr></table></figure>

<h4 id="Bouble"><a href="#Bouble" class="headerlink" title="Bouble"></a>Bouble</h4><p>用法和Interger差不多，例如，装箱拆箱和自动装箱拆箱等…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//boolean isNaN()：判断调用对象的数值是否为非数字</span></span><br><span class="line">Double D1 = Double.valueOf(<span class="string">&quot;3.14&quot;</span>);</span><br><span class="line">System.out.println( D1.isNaN() );   <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">Double D2 = Double.valueOf(<span class="number">0</span>/<span class="number">0.0</span>);</span><br><span class="line">System.out.println( D2.isNaN() );   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><p>用法和Interger差不多，例如，装箱拆箱和自动装箱拆箱等…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串转换Boolean类型，只有字符串是true(不区分大小写)时，结果才是true，其他都为false。</span></span><br><span class="line">Boolean B = Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">System.out.println(B.toString());  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="Character"><a href="#Character" class="headerlink" title="Character"></a>Character</h4><p>用法和Interger差不多，例如，装箱拆箱和自动装箱拆箱等…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;是否大写：&quot;</span> + Character.isUpperCase(<span class="string">&#x27;A&#x27;</span>));    <span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否小写：&quot;</span> + Character.isLowerCase(<span class="string">&#x27;A&#x27;</span>));    <span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否数字：&quot;</span> + Character.isDigit(<span class="string">&#x27;2&#x27;</span>));        <span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">&quot;转换成大写：&quot;</span> + Character.toUpperCase(<span class="string">&#x27;a&#x27;</span>));  <span class="comment">//A</span></span><br><span class="line">System.out.println(<span class="string">&quot;转换成小写：&quot;</span> + Character.toLowerCase(<span class="string">&#x27;A&#x27;</span>));  <span class="comment">//a</span></span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ul>
<li>基本数据类型转换为对应包装类的方式</li>
</ul>
<p>调用包装类的构造方法或静态方法valueOf即可</p>
<ul>
<li>获取包装类对象中基本数据类型变量数值的方式</li>
</ul>
<p>调用包装类中的xxxValue方法即可</p>
<ul>
<li>字符串转换为基本数据类型的方式</li>
</ul>
<p>调用包装类中的parseXxx方法即可</p>
<h3 id="数学处理类"><a href="#数学处理类" class="headerlink" title="数学处理类"></a>数学处理类</h3><h4 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h4><p>java.lang.Math类主要用于提供执行数学运算的方法，如：对数，平方根。</p>
<p>常用方法</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static int max(int a, int b)</td>
<td>返回两个参数中的最大值</td>
</tr>
<tr>
<td>static int min(int a, int b)</td>
<td>返回两个参数中的最小值</td>
</tr>
<tr>
<td>static double pow(double a, double b)</td>
<td>返回第一个参数的幂</td>
</tr>
<tr>
<td>static int abs(int a)</td>
<td>返回参数指定数值的绝对值</td>
</tr>
<tr>
<td>static long round(double a)</td>
<td>返回参数四舍五入的结果</td>
</tr>
<tr>
<td>static double sqrt(double a)</td>
<td>返回参数的平方根</td>
</tr>
<tr>
<td>static double random()</td>
<td>返回0.0到1.0的随机数</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;最大数：&quot;</span> + Math.max(<span class="number">5</span>,<span class="number">8</span>));    <span class="comment">//8</span></span><br><span class="line">System.out.println(<span class="string">&quot;最小数&quot;</span> + Math.min(<span class="number">5</span>,<span class="number">8</span>));      <span class="comment">//5</span></span><br><span class="line">System.out.println(<span class="string">&quot;求幂&quot;</span> + Math.pow(<span class="number">2</span>,<span class="number">3</span>));        <span class="comment">//8.0</span></span><br><span class="line">System.out.println(<span class="string">&quot;绝对值&quot;</span> + Math.abs(-<span class="number">1</span>));       <span class="comment">//1</span></span><br><span class="line">System.out.println(<span class="string">&quot;四舍五路:&quot;</span> + Math.round(<span class="number">2</span>/<span class="number">0.3</span>));<span class="comment">//7</span></span><br><span class="line">System.out.println(<span class="string">&quot;平方跟:&quot;</span> + Math.sqrt(<span class="number">25</span>));      <span class="comment">//5.0</span></span><br><span class="line">System.out.println(<span class="string">&quot;0到1.0的随机数:&quot;</span> + Math.random());<span class="comment">//随机数</span></span><br></pre></td></tr></table></figure>

<h4 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h4><p>由于flfloat类型和double类型在运算时可能会有误差，若希望实现精确运算则借助<br>java.math.BigDecimal类型加以描述。</p>
<p>常用方法：</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>BigDecimal(String val)</td>
<td>根据参数指定的字符串来构造对象</td>
</tr>
<tr>
<td>BigDecimal add(BigDecimal augend)</td>
<td>用于实现加法运算</td>
</tr>
<tr>
<td>BigDecimal subtract(BigDecimal subtrahend)</td>
<td>用于实现减法运算</td>
</tr>
<tr>
<td>BigDecimal multiply(BigDecimal multiplicand)</td>
<td>用于实现乘法运算</td>
</tr>
<tr>
<td>BigDecimal divide(BigDecimal divisor)</td>
<td>用于实现除法运算</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal bd1 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;5.2&quot;</span>);</span><br><span class="line">BigDecimal bd2 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1.3&quot;</span>);</span><br><span class="line"><span class="comment">//正常浮点类型运算会由失误，虽然误差很小。</span></span><br><span class="line">System.out.println(<span class="number">5.2</span>*<span class="number">1.3</span>);    <span class="comment">//6.760000000000001</span></span><br><span class="line">System.out.println(<span class="string">&quot;加法运算：&quot;</span> + bd1.add(bd2));       <span class="comment">//6,5</span></span><br><span class="line">System.out.println(<span class="string">&quot;减法运算：&quot;</span> + bd1.subtract(bd2));  <span class="comment">//3.9</span></span><br><span class="line">System.out.println(<span class="string">&quot;乘法运算：&quot;</span> + bd1.multiply(bd2));  <span class="comment">//6.76</span></span><br><span class="line">System.out.println(<span class="string">&quot;除法运算：&quot;</span> + bd1.divide(bd2));    <span class="comment">//4.0</span></span><br></pre></td></tr></table></figure>

<h4 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h4><p>若希望表示比long类型范围还大的整数数据，则需要借助java.math.BigInteger类型描述。</p>
<p>常用方法：</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>BigInteger(String val)</td>
<td>根据参数指定的字符串来构造对象</td>
</tr>
<tr>
<td>“加减乘除”与上述BigDecimal一样</td>
<td></td>
</tr>
<tr>
<td>BigInteger remainder(BigInteger val)</td>
<td>用于实现取余运算</td>
</tr>
<tr>
<td>BigInteger[] divideAndRemainder(BigInteger val)</td>
<td>用于实现取商和余数的运算</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigInteger bi1 = <span class="keyword">new</span> BigInteger(<span class="string">&quot;20&quot;</span>);</span><br><span class="line">BigInteger bi2 = <span class="keyword">new</span> BigInteger(<span class="string">&quot;8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取商和取余数一起</span></span><br><span class="line">BigInteger[] arr = bi1.divideAndRemainder(bi2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;下标为&quot;</span> + i + <span class="string">&quot;的元素值是：&quot;</span> + arr[i]);    <span class="comment">//0--2， 1--4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><ul>
<li><p>java.lang.String类用于描述字符串，Java程序中所有的字符串字面值都可以使用该类的对象加以描述，如：”abc”。</p>
</li>
<li><p>该类由fifinal关键字修饰，表示该类不能被继承。</p>
</li>
<li><p>从jdk1.9开始该类的底层不使用char[]来存储数据，而是改成 byte[]加上编码标记，从而节约了一些空间。</p>
</li>
<li><p>该类描述的字符串内容是个常量不可更改，因此可以被共享使用。</p>
<p>如：</p>
<p> String str = “abc”; -表示str指向”abc”，其中”abc”这个字符串是个常量不可改变。 </p>
<p> str = “123”; - 将“123”字符串的地址赋值给变量str。</p>
<p> - 改变str的指向并没有改变指向的内容</p>
</li>
</ul>
<h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><p>由于String类型描述的字符串内容是常量不可改变，因此Java虚拟机将首次出现的字符串放入常量</p>
<p>池中，若后续代码中出现了相同字符串内容则直接使用池中已有的字符串对象而无需申请内存及创建对</p>
<p>象，从而提高了性能。</p>
<p>例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;adcd&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;adcd&quot;</span>;</span><br><span class="line">System.out.println(str1 == str2);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="常用构造方法"><a href="#常用构造方法" class="headerlink" title="常用构造方法"></a>常用构造方法</h3><table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>String()</td>
<td>使用无参方式构造对象得到空字符序列</td>
</tr>
<tr>
<td>String(byte[] bytes, int offset, int length)</td>
<td>使用bytes数组中下标从offset位置开始的length个字节来构造对象</td>
</tr>
<tr>
<td>String(byte[] bytes)</td>
<td>使用bytes数组中的所有内容构造对象</td>
</tr>
<tr>
<td>String(char[] value, int offset, int count)</td>
<td>使用value数组中下标从offset位置开始的count个字符来构造对象</td>
</tr>
<tr>
<td>String(char[] value)</td>
<td>使用value数组中的所有内容构造对象</td>
</tr>
<tr>
<td>String(String original)</td>
<td>根据参数指定的字符串内容来构造对象，新创建对象为参数对象的副本</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bArr = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line">String str = <span class="keyword">new</span> String(bArr);</span><br><span class="line">System.out.println(str);  <span class="comment">//abcd   由ASCII码转换而成。</span></span><br></pre></td></tr></table></figure>

<p><strong>考点</strong>：</p>
<ul>
<li>String str = “abc”  和 String str = new String(“abc”)的区别：<br>String str = “abc”：常量“abc”被创建在常量池中，str指向“abc”。<br>String str = new String(“abc”)：常量“abc”被创建在常量池中，new String()被创建在堆区，str指向堆区的new String()。</li>
<li>判断如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;adcd&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;adcd&quot;</span>;</span><br><span class="line">String str3 = <span class="keyword">new</span> String(<span class="string">&quot;adcd&quot;</span>);</span><br><span class="line">String str4 = <span class="keyword">new</span> String(<span class="string">&quot;adcd&quot;</span>);</span><br><span class="line"><span class="comment">//判断内容</span></span><br><span class="line">System.out.println(str1.equals(str2));   <span class="comment">//true</span></span><br><span class="line">System.out.println(str3.equals(str4));   <span class="comment">//true</span></span><br><span class="line"><span class="comment">//判断地址</span></span><br><span class="line">System.out.println(str1 == str2);   <span class="comment">//true，都指向常量池中的常量“abcd”。</span></span><br><span class="line">System.out.println(str3 == str4);   <span class="comment">//false，指向堆区中不同的String类型对象。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;ab&quot;</span> + <span class="string">&quot;cd&quot;</span>;   <span class="comment">//常量优化机制</span></span><br><span class="line">System.out.println(str1 == str2);   <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">String str3 = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">String str4 = str3 + <span class="string">&quot;cd&quot;</span>;  <span class="comment">//没有常量优化机制</span></span><br><span class="line">System.out.println(str1 == str4);   <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="常用成员方法"><a href="#常用成员方法" class="headerlink" title="常用成员方法"></a>常用成员方法</h3><table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>String toString()</td>
<td>返回字符串本身</td>
</tr>
<tr>
<td>byte[] getBytes()</td>
<td>将当前字符串内容转换为byte数组并返回</td>
</tr>
<tr>
<td>char[] toCharArray()</td>
<td>用于将当前字符串内容转换为char数组并返回</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>char charAt(int index)</td>
<td>方法charAt用于返回字符串指定位置的字符。</td>
</tr>
<tr>
<td>int length()</td>
<td>返回字符串字符序列的长度</td>
</tr>
<tr>
<td>boolean isEmpty()</td>
<td>判断字符串是否为空</td>
</tr>
</tbody></table>
<p>案例题目:</p>
<p>判断字符串“上海自来水来自海上”是否为回文并打印，所谓回文是指一个字符序列无论从左向右读</p>
<p>还是从右向左读都是相同的句子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str2 = <span class="string">&quot;上海自来水来自海上&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str2.length()/<span class="number">2</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>( str2.charAt(i) != str2.charAt(str2.length()-<span class="number">1</span>-i) )&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不是回文！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;是回文！&quot;</span>);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>int compareTo(String anotherString)</td>
<td>用于比较调用对象和参数对象的大小关系</td>
</tr>
<tr>
<td>int compareToIgnoreCase(String str)</td>
<td>不考虑大小写，也就是’a’和’A’是相等的关系</td>
</tr>
</tbody></table>
<p>从头比，相同的继续比较下一个，不同就用字符串对应的ASCII码值相减。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println( str.compareTo(<span class="string">&quot;hello&quot;</span>) );          <span class="comment">//相同返回 0</span></span><br><span class="line">System.out.println( str.compareTo(<span class="string">&quot;hgllo&quot;</span>) );          <span class="comment">//e-g 返回 -2</span></span><br><span class="line">System.out.println( str.compareTo(<span class="string">&quot;hello1234&quot;</span>) );      <span class="comment">//长度返回 -4</span></span><br><span class="line">System.out.println( str.compareToIgnoreCase(<span class="string">&quot;HELLO&quot;</span>) );<span class="comment">//不区分大小写 0</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>String concat(String str)</td>
<td>用于实现字符串的拼接</td>
</tr>
<tr>
<td>boolean contains(CharSequence s)</td>
<td>用于判断当前字符串是否包含参数指定的内容</td>
</tr>
<tr>
<td>String toLowerCase()</td>
<td>返回字符串的小写形式</td>
</tr>
<tr>
<td>String toUpperCase()</td>
<td>返回字符串的大写形式</td>
</tr>
<tr>
<td>String trim()</td>
<td>返回去掉前导和后继空白的字符串</td>
</tr>
<tr>
<td>boolean startsWith(String prefifix)</td>
<td>判断字符串是否以参数字符串开头</td>
</tr>
<tr>
<td>boolean startsWith(String prefifix, int toffffset)</td>
<td>从指定位置开始是否以参数字符串开头</td>
</tr>
<tr>
<td>boolean endsWith(String suffiffiffix)</td>
<td>判断字符串是否以参数字符串结尾</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>boolean equals(Object anObject)</td>
<td>用于比较字符串内容是否相等并返回</td>
</tr>
<tr>
<td>boolean equalsIgnoreCase(String anotherString)</td>
<td>用于比较字符串内容是否相等并返回，不考虑大小写，如：’A’和’a’是相等</td>
</tr>
<tr>
<td>int hashCode()</td>
<td>获取调用对象的哈希码值</td>
</tr>
</tbody></table>
<p>案例题目</p>
<p>提示用户从键盘输入用户名和密码信息，若输入”admin”和”123456”则提示“登录成功，欢迎使</p>
<p>用”，否则提示“用户名或密码错误，您还有n次机会”，若用户输入三次后依然错误则提示“账户已</p>
<p>冻结，请联系客服人员！”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">    String user = sc.next();</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">    String password = sc.next();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(user) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功，欢迎使用&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;账户已冻结，请联系客服人员！&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名或密码错误，您还有&quot;</span> + (i-<span class="number">1</span>) + <span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>int indexOf(int ch)</td>
<td>用于返回当前字符串中参数ch指定的字符第一次出现的下标</td>
</tr>
<tr>
<td>int indexOf(int ch, int fromIndex)</td>
<td>用于从fromIndex位置开始查找ch指定的字符</td>
</tr>
<tr>
<td>int indexOf(String str)</td>
<td>在字符串中检索str返回其第一次出现的位置，若找不到返回-1</td>
</tr>
<tr>
<td>int indexOf(String str, int fromIndex)</td>
<td>表示从字符串的fromIndex位置开始检索str第一次出现的位置</td>
</tr>
<tr>
<td>int lastIndexOf(int ch)</td>
<td>用于返回参数ch指定的字符最后一次出现的下标</td>
</tr>
<tr>
<td>int lastIndexOf(int ch, int fromIndex)</td>
<td>用于从fromIndex位置开始查找ch指定字符出现的下标</td>
</tr>
<tr>
<td>int lastIndexOf(String str)</td>
<td>返回str指定字符串最后一次出现的下标</td>
</tr>
<tr>
<td>int lastIndexOf(String str, int fromIndex)</td>
<td>用于从fromIndex位置开始反向搜索的第一次出现的下标。</td>
</tr>
</tbody></table>
<p>注意：indexOf() 是从左往右第一个，而lastIndexOf() 是从右往左第一个。</p>
<ul>
<li>案例题目</li>
</ul>
<p>编写通用的代码可以查询字符串”Good Good Study, Day Day Up!”中所有”Day”出现的索引位置并打印出来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;Good Good Study, Day Day Up!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = str.indexOf(<span class="string">&quot;Day&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(i != -<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i = str.indexOf(<span class="string">&quot;Day&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;Good Good Study, Day Day Up!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>( (i=str.indexOf(<span class="string">&quot;Day&quot;</span>, i)) != -<span class="number">1</span> )&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i += <span class="string">&quot;Day&quot;</span>.length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>String substring(int beginIndex, int endIndex)</td>
<td>返回字符串中从下标beginIndex（包括）开始到endIndex（不包括）结束的子字符串</td>
</tr>
<tr>
<td>String substring(int beginIndex)</td>
<td>返回字符串中从下标beginIndex（包括）开始到字符串结尾的子字符串</td>
</tr>
</tbody></table>
<ul>
<li>案例题目</li>
</ul>
<p>提示用户从键盘输入一个字符串和一个字符，输出该字符(不含)后面的所有子字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入字符串：&quot;</span>);</span><br><span class="line">String str1 = sc.next();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入字符：&quot;</span>);</span><br><span class="line">String str2 = sc.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = str1.indexOf(str2);</span><br><span class="line">String str3 = str1.substring(i+<span class="number">1</span>);</span><br><span class="line">System.out.println(str3);</span><br></pre></td></tr></table></figure>

<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式本质就是一个“规则字符串”，可以用于对字符串数据的格式进行验证，以及匹配、查</p>
<p>找、替换等操作。该字符串通常使用^运算符作为开头标志，使用$运算符作为结尾标志，当然也可以省</p>
<p>略。</p>
<p>规则：</p>
<ul>
<li><p>[abc] ：可以出现a、b、c中任意一个字符</p>
</li>
<li><p>[^abc] ：可以出现任何字符，除了a、b、c的任意字符</p>
</li>
<li><p>[a-z] ：可以出现a、b、c、……、z中的任意一个字符</p>
</li>
<li><p>[a-zA-Z0-9] ：可以出现a<del>z、A</del>Z、0~9中任意一个字符</p>
</li>
</ul>
<hr>
<hr>
<ul>
<li><p>. ：任意一个字符（通常不包含换行符）</p>
</li>
<li><p>\d ：任意一个数字字符，相当于[0-9]</p>
</li>
<li><p>\D ：任意一个非数字字符</p>
</li>
<li><p>\s ：空白字符，相当于[\t\n\x0B\f\r]</p>
</li>
<li><p>\S ：非空白字符</p>
</li>
<li><p>\w ：任意一个单词字符，相当于[a-zA-Z_0-9]</p>
</li>
<li><p>\W ：任意一个非单词字符</p>
</li>
</ul>
<hr>
<hr>
<ul>
<li><p>X? ：表示X可以出现一次或一次也没有，也就是0 ~ 1次</p>
</li>
<li><p>X* ：表示X可以出现零次或多次，也就是0 ~ n次</p>
</li>
<li><p>X+ ：表示X可以出现一次或多次，也就是1 ~ n次</p>
</li>
<li><p>X{n} ：表示X可以出现恰好 n 次</p>
</li>
<li><p>X{n，} ：表示X可以出现至少 n 次，也就是&gt;=n次</p>
</li>
<li><p>X{n，m} ：表示X可以出现至少 n 次，但是不超过 m 次，也就是&gt;=n并且&lt;=m次</p>
</li>
</ul>
<p><strong>相关方法：</strong></p>
<table>
<thead>
<tr>
<th><strong>方法名称</strong></th>
<th><strong>方法说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>boolean matches(String regex)</td>
<td>判断当前正在调用的字符串是否匹配参数指定的正则表达式规则</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入字符串：&quot;</span>);</span><br><span class="line">String str = sc.next();</span><br><span class="line"><span class="comment">//规则: 银行卡密码的规则：要求是由6位数字组成。</span></span><br><span class="line">String reg = <span class="string">&quot;\\d&#123;6&#125;&quot;</span>;   </span><br><span class="line"><span class="keyword">if</span>( str.matches(reg) )&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;字符规则正确！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;字符规则错误！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分割和替换：</p>
<table>
<thead>
<tr>
<th><strong>方法名称</strong></th>
<th>方法说明</th>
</tr>
</thead>
<tbody><tr>
<td>String[] split(String regex)</td>
<td>参数regex为正则表达式，以regex所表示的字符串为分隔符，将字符串拆分成字符串数组</td>
</tr>
<tr>
<td>String replace(char oldChar, char newChar)</td>
<td>使用参数newChar替换此字符串中出现的所有参数oldChar</td>
</tr>
<tr>
<td>String replaceFirst(String regex, String replacement)</td>
<td>替换此字符串匹配给定的正则表达式的第一个子字符串</td>
</tr>
<tr>
<td>String replaceAll(String regex, String replacement)</td>
<td>将字符串中匹配正则表达式regex的字符串替换成replacement</td>
</tr>
</tbody></table>
<h2 id="可变字符串类"><a href="#可变字符串类" class="headerlink" title="可变字符串类"></a>可变字符串类</h2><ul>
<li><p>由于String类描述的字符串内容是个常量不可改变，当需要在Java代码中描述大量类似的字符串时，只能单独申请和存储，此时会造成内存空间的浪费。</p>
</li>
<li><p>为了解决上述问题，可以使用java.lang.StringBuilder类和java.lang.StringBuffer类来描述字符列可以改变的字符串</p>
</li>
<li><p>StringBuffer类是从jdk1.0开始存在，属于线程安全的类，因此效率比较低。</p>
</li>
<li><p>StringBuilder类是从jdk1.5开始存在，属于非线程安全的类，效率比较高。</p>
</li>
</ul>
<h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p><strong>构造方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>StringBuilder()</td>
<td>使用无参方式构造对象，容量为16</td>
</tr>
<tr>
<td>StringBuilder(int capacity)</td>
<td>根据参数指定的容量来构造对象，容量为参数指定大小</td>
</tr>
<tr>
<td>StringBuilder(String str)</td>
<td>根据参数指定的字符串来构造对象，容量为：16+字符串长度</td>
</tr>
</tbody></table>
<p><strong>成员方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>int capacity()</td>
<td>用于返回调用对象的容量</td>
</tr>
<tr>
<td>int length()</td>
<td>用于返回字符串的长度，也就是字符的个数</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">System.out.println(<span class="string">&quot;sb1的容量是：&quot;</span> + sb1.capacity());   <span class="comment">//16</span></span><br><span class="line">System.out.println(<span class="string">&quot;sb1的长度是：&quot;</span> + sb1.length());     <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">StringBuilder sb2 = <span class="keyword">new</span> StringBuilder(<span class="number">20</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb2的容量是：&quot;</span> + sb2.capacity());   <span class="comment">//20</span></span><br><span class="line">System.out.println(<span class="string">&quot;sb2的长度是：&quot;</span> + sb2.length());     <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">StringBuilder sb3 = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb3的容量是：&quot;</span> + sb3.capacity());    <span class="comment">//16+5=21</span></span><br><span class="line">System.out.println(<span class="string">&quot;sb3的长度是：&quot;</span> + sb3.length());      <span class="comment">//5</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>StringBuilder insert(int offset, String str)</td>
<td>插入字符串并返回调用对象的引用，就是自己。</td>
</tr>
<tr>
<td>StringBuilder append(String str)</td>
<td>追加字符串</td>
</tr>
<tr>
<td>StringBuilder deleteCharAt(int index)</td>
<td>将当前字符串中下标为index位置的单个字符删除</td>
</tr>
<tr>
<td>StringBuilder delete(int start，int end)</td>
<td>删除字符串</td>
</tr>
<tr>
<td>StringBuilder replace(int start，int end，String str)</td>
<td>替换字符串</td>
</tr>
<tr>
<td>void setCharAt(int index, char ch)</td>
<td>指定索引处的字符设置为 ch 。</td>
</tr>
<tr>
<td>StringBuilder reverse()</td>
<td>字符串反转</td>
</tr>
<tr>
<td>查询操作与String类差不多。。。。</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb1 = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">sb1.insert(<span class="number">2</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1 = &quot;</span> + sb1);  <span class="comment">//he123llo</span></span><br><span class="line">sb1.append(<span class="string">&quot;word&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1 = &quot;</span> + sb1);  <span class="comment">//he123lloword</span></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">sb1.deleteCharAt(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1 = &quot;</span> + sb1);  <span class="comment">//he23lloword</span></span><br><span class="line">sb1.delete(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1 = &quot;</span> + sb1);  <span class="comment">//helloword</span></span><br><span class="line"><span class="comment">//改</span></span><br><span class="line">sb1.setCharAt(<span class="number">0</span>, <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1 = &quot;</span> + sb1);  <span class="comment">//Helloword</span></span><br><span class="line">sb1.replace(<span class="number">5</span>,<span class="number">9</span>, <span class="string">&quot;Teacher&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1 = &quot;</span> + sb1);  <span class="comment">//Helloteacher</span></span><br><span class="line"><span class="comment">//反转操作</span></span><br><span class="line">sb1.reverse();</span><br><span class="line">System.out.println(<span class="string">&quot;sb1 = &quot;</span> + sb1);  <span class="comment">//rehcaetolleH</span></span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">System.out.println(<span class="string">&quot;索引为1的字符是：&quot;</span> + sb1.charAt(<span class="number">1</span>) );     <span class="comment">//e</span></span><br><span class="line">System.out.println(<span class="string">&quot;e第一次出现的位置的下标是：&quot;</span> + sb1.indexOf(<span class="string">&quot;e&quot;</span>) );  <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong><br>作为参数传递的话，方法内部String不会改变其值，StringBuffer和StringBuilder会改变其值。</p>
<p><strong>自动扩容机制</strong></p>
<p>当StringBuffer和StringBuilder中的字符串长度超过了原始的容量。容量会自动扩容。<br>扩容后容量 = 原始容量 * 2 + 2。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动扩容机制</span></span><br><span class="line">StringBuilder sb1 = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1的容量是：&quot;</span> + sb1.capacity());  <span class="comment">//16+5=21</span></span><br><span class="line">System.out.println(<span class="string">&quot;sb1的长度是：&quot;</span> + sb1.length());    <span class="comment">//5</span></span><br><span class="line"><span class="comment">//增加，但没超过原始容量</span></span><br><span class="line">sb1.append(<span class="string">&quot;word&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1的容量是：&quot;</span> + sb1.capacity());  <span class="comment">//21</span></span><br><span class="line">System.out.println(<span class="string">&quot;sb1的长度是：&quot;</span> + sb1.length());    <span class="comment">//9</span></span><br><span class="line"><span class="comment">//增加，并且超过了原始容量，sb1将自动扩容。</span></span><br><span class="line">sb1.append(<span class="string">&quot;1234567890123456&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb1的容量是：&quot;</span> + sb1.capacity());  <span class="comment">//21*2+2=44</span></span><br><span class="line">System.out.println(<span class="string">&quot;sb1的长度是：&quot;</span> + sb1.length());    <span class="comment">//25</span></span><br></pre></td></tr></table></figure>

<p><strong>考点</strong></p>
<ul>
<li><p>1，既然StringBuilder类的对象本身可以被改变，为什么成员方法还要返回值，返回本身。<br>答：为了连续调用，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb1.append(<span class="string">&quot;1&quot;</span>).append(<span class="string">&quot;5&quot;</span>).reverse().delete(<span class="number">0</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>2，如何实现String和StringBuilder之间的转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;213456&quot;</span>;</span><br><span class="line"></span><br><span class="line">StringBuilder sb1 = <span class="keyword">new</span> StringBuilder(s1);</span><br><span class="line">String s2 = sb1.toString();</span><br></pre></td></tr></table></figure></li>
<li><p>3，String、StringBuilder和StringBuffer效率排序：</p>
<pre><code>  低到高：String &lt; StringBuffer &lt; StringBuilder
</code></pre>
</li>
</ul>
<h2 id="Java8以前时间相关类"><a href="#Java8以前时间相关类" class="headerlink" title="Java8以前时间相关类"></a>Java8以前时间相关类</h2><h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><p>Java.lang.System类中提供了一些有用的类字段和方法。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static long currentTimeMillis()</td>
<td>返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差（时间戳）</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> l = System.currentTimeMillis();</span><br><span class="line">System.out.println(l);   <span class="comment">//1640670878418</span></span><br></pre></td></tr></table></figure>

<h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><p>java.util.Date类主要用于描述特定的瞬间，也就是年月日时分秒，可以精确到毫秒。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Date()</td>
<td>使用无参的方式构造对象，也就是当前系统时间</td>
</tr>
<tr>
<td>Date(long date)</td>
<td>根据参数指定毫秒数构造对象， 参数为距离1970年1月1日0时0分0秒的毫秒数</td>
</tr>
<tr>
<td>long getTime()</td>
<td>获取调用对象距离1970年1月1日0时0分0秒的毫秒数</td>
</tr>
<tr>
<td>void setTime(long time)</td>
<td>设置调用对象为距离基准时间time毫秒的时间点</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前系统时间</span></span><br><span class="line">Date d1 = <span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(d1);  <span class="comment">//Tue Dec 28 10:39:07 CST 2021</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//距离基准时间相差1000毫秒的时间</span></span><br><span class="line">Date d2 = <span class="keyword">new</span> Date(<span class="number">1000</span>);</span><br><span class="line">System.out.println(d2);  <span class="comment">//Thu Jan 01 08:00:01 CST 1970  (东八区，所以超了八小时)</span></span><br><span class="line"><span class="comment">//对象时间与基准时间的相差毫秒</span></span><br><span class="line"><span class="keyword">long</span> l = d2.getTime();</span><br><span class="line">System.out.println(l);   <span class="comment">//1000</span></span><br><span class="line"><span class="comment">//更改对象时间与基准时间相差的毫秒</span></span><br><span class="line">d2.setTime(<span class="number">2000</span>);</span><br><span class="line">System.out.println(d2);  <span class="comment">//Thu Jan 01 08:00:02 CST 1970  (东八区，所以超了八小时)</span></span><br></pre></td></tr></table></figure>

<h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><p>java.text.SimpleDateFormat类主要用于实现日期和文本之间的转换。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>SimpleDateFormat()</td>
<td>使用无参方式构造对象</td>
</tr>
<tr>
<td>SimpleDateFormat(String pattern)</td>
<td>根据参数指定的模式来构造对象，模式主要有: y-年 M-月 d-日H-时 m-分 s-秒</td>
</tr>
<tr>
<td>fifinal String format(Date date)</td>
<td>用于将日期类型转换为文本类型</td>
</tr>
<tr>
<td>Date parse(String source)</td>
<td>用于将文本类型转换为日期类型</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date now = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">//设定时间格式</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd  HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">String s = sdf.format(now);</span><br><span class="line">System.out.println(s);       <span class="comment">//2021-12-28  10:49:42</span></span><br><span class="line">Date now1 = sdf.parse(s);</span><br><span class="line">System.out.println(now1);    <span class="comment">//Tue Dec 28 10:49:42 CST 2021</span></span><br></pre></td></tr></table></figure>

<h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p>java.util.Calender类主要用于描述特定的瞬间，取代Date类中的过时方法实现全球化。</p>
<p>该类是个抽象类，因此不能实例化对象，其具体子类针对不同国家的日历系统，其中应用最广泛的<br>是GregorianCalendar（格里高利历），对应世界上绝大多数国家/地区使用的标准日历系统。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static Calendar getInstance()</td>
<td>用于获取Calendar类型的引用</td>
</tr>
<tr>
<td>void set(int year, int month, int date, int hourOfDay, int minute, int second)</td>
<td>用于设置年月日时分秒信息，月份需减一</td>
</tr>
<tr>
<td>void set(int fifield, int value)</td>
<td>设置指定字段的数值</td>
</tr>
<tr>
<td>void add(int fifield, int amount)</td>
<td>向指定字段增加数值</td>
</tr>
<tr>
<td>Date getTime()</td>
<td>用于将Calendar类型转换为Date类型</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取Calendar实例</span></span><br><span class="line">Calendar c1 = Calendar.getInstance();</span><br><span class="line"><span class="comment">//设置时间，月份需要减一</span></span><br><span class="line">c1.set(<span class="number">2020</span>, <span class="number">12</span>-<span class="number">1</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">30</span>,<span class="number">00</span>);</span><br><span class="line">c1.set(Calendar.YEAR, <span class="number">2021</span>);</span><br><span class="line">c1.add(Calendar.DAY_OF_MONTH, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//将Calendar类型转换从Date类型</span></span><br><span class="line">Date d1 = c1.getTime();</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常打印对应格式的时间</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日  HH:mm:ss&quot;</span>);</span><br><span class="line">String s1 = sdf.format(d1);</span><br><span class="line">System.out.println(s1);   <span class="comment">//2021年12月15日  08:30:00</span></span><br></pre></td></tr></table></figure>

<h2 id="Java8以后时间相关类"><a href="#Java8以后时间相关类" class="headerlink" title="Java8以后时间相关类"></a>Java8以后时间相关类</h2><p><strong>java8以前</strong></p>
<p>JDK 1.0中包含了一个java.util.Date类，但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。</p>
<p>而Calendar并不比Date好多少。它们面临的问题是：</p>
<ul>
<li><p>Date类中的年份是从1900开始的，而月份都从0开始。</p>
</li>
<li><p>格式化只对Date类有用，对Calendar类则不能使用。</p>
</li>
<li><p>非线程安全等。</p>
</li>
</ul>
<p><strong>Java8以后</strong></p>
<ul>
<li><p>Java 8通过发布新的Date-Time API来进一步加强对 日期与时间的处理。</p>
</li>
<li><p>java.time包：该包日期/时间API的基础包。</p>
</li>
<li><p>java.time.chrono包：该包提供对不同日历系统的访问。 </p>
</li>
<li><p>java.time.format包：该包能够格式化和解析日期时间对象。</p>
</li>
<li><p>java.time.temporal包：该包包含底层框架和扩展特性。</p>
</li>
<li><p>java.time.zone包：该包支持不同时区以及相关规则的类。</p>
</li>
</ul>
<h3 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h3><p>java.time.LocalDate类主要用于描述年-月-日格式的日期信息，该类不表示时间和时区信息。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static LocalDate now()</td>
<td>在默认时区中从系统时钟获取当前日期</td>
</tr>
</tbody></table>
<h3 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h3><p>java.time.LocalTime 类主要用于描述时间信息，可以描述时分秒以及纳秒。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static LocalTime now()</td>
<td>从默认时区的系统时间中获取当前时间</td>
</tr>
<tr>
<td>static LocalTime now(ZoneId zone)</td>
<td>获取指定时区的当前时间</td>
</tr>
</tbody></table>
<h3 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h3><p>java.time.LocalDateTime类主要用于描述ISO-8601日历系统中没有时区的日期时间，如2007-12-03T10:15:30。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static LocalDateTime now()</td>
<td>从默认时区的系统时间中获取当前日期时间</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate now1 = LocalDate.now();</span><br><span class="line">System.out.println(now1);            <span class="comment">//2021-12-28</span></span><br><span class="line"></span><br><span class="line">LocalTime now2 = LocalTime.now();</span><br><span class="line">System.out.println(now2);            <span class="comment">//14:23:29.800789600</span></span><br><span class="line"></span><br><span class="line">LocalDateTime now3 = LocalDateTime.now();</span><br><span class="line">System.out.println(now3);            <span class="comment">//2021-12-28T14:23:29.800789600</span></span><br></pre></td></tr></table></figure>

<p>其他成员方法</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second)</td>
<td>根据参数指定的年月日时分秒信息来设置日期时间</td>
</tr>
<tr>
<td>int getYear()</td>
<td>获取年份字段的数值</td>
</tr>
<tr>
<td>int getMonthValue()</td>
<td>获取1到12之间的月份字段</td>
</tr>
<tr>
<td>int getDayOfMonth()</td>
<td>获取日期字段</td>
</tr>
<tr>
<td>int getHour()</td>
<td>获取小时数</td>
</tr>
<tr>
<td>int getMinute()</td>
<td>获取分钟数</td>
</tr>
<tr>
<td>int getSecond()</td>
<td>获取秒数</td>
</tr>
<tr>
<td>LocalDateTime withYear(int year)</td>
<td>设置为参数指定的年</td>
</tr>
<tr>
<td>LocalDateTime withMonth(int month)</td>
<td>设置为参数指定的月</td>
</tr>
<tr>
<td>LocalDateTime withDayOfMonth(int dayOfMonth)</td>
<td>设置为参数指定的日</td>
</tr>
<tr>
<td>LocalDateTime withHour(int hour)</td>
<td>设置为参数指定的时</td>
</tr>
<tr>
<td>LocalDateTime withMinute(int minute)</td>
<td>设置为参数指定的分</td>
</tr>
<tr>
<td>LocalDateTime withSecond(int second)</td>
<td>设置为参数指定的秒</td>
</tr>
<tr>
<td>LocalDateTime plusYears(long years)</td>
<td>加上参数指定的年</td>
</tr>
<tr>
<td>LocalDateTime plusMonths(long months)</td>
<td>加上参数指定的月</td>
</tr>
<tr>
<td>LocalDateTime plusDays(long days)</td>
<td>加上参数指定的日</td>
</tr>
<tr>
<td>LocalDateTime plusHours(long hours)</td>
<td>加上参数指定的时</td>
</tr>
<tr>
<td>LocalDateTime plusMinutes(long minutes)</td>
<td>加上参数指定的分</td>
</tr>
<tr>
<td>LocalDateTime plusSeconds(long seconds)</td>
<td>加上参数指定的秒</td>
</tr>
<tr>
<td>LocalDateTime minusYears(long years)</td>
<td>减去参数指定的年</td>
</tr>
<tr>
<td>LocalDateTime minusMonths(long months)</td>
<td>减去参数指定的月</td>
</tr>
<tr>
<td>LocalDateTime minusDays(long days)</td>
<td>减去参数指定的日</td>
</tr>
<tr>
<td>LocalDateTime minusHours(long hours)</td>
<td>减去参数指定的时</td>
</tr>
<tr>
<td>LocalDateTime minusMinutes(long minutes)</td>
<td>减去参数指定的分</td>
</tr>
<tr>
<td>LocalDateTime minusSeconds(long seconds)</td>
<td>减去参数指定的秒</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设定时间</span></span><br><span class="line">LocalDateTime time = LocalDateTime.of(<span class="number">2021</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">30</span>,<span class="number">00</span>);</span><br><span class="line"><span class="comment">//重新设定年</span></span><br><span class="line">time = time.withYear(<span class="number">2020</span>);</span><br><span class="line"><span class="comment">//加上指定年</span></span><br><span class="line">time = time.plusYears(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//减去指定年</span></span><br><span class="line">time = time.minusYears(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//获取年</span></span><br><span class="line"><span class="keyword">int</span> year = time.getYear();</span><br><span class="line">System.out.println(year);    <span class="comment">//2019</span></span><br></pre></td></tr></table></figure>

<h3 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h3><p>java.time.format.DateTimeFormatter类主要用于格式化和解析日期。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static DateTimeFormatter ofPattern(String pattern)</td>
<td>根据参数指定的模式来获取对象</td>
</tr>
<tr>
<td>String format(TemporalAccessor temporal)</td>
<td>将参数指定日期时间转换为字符串</td>
</tr>
<tr>
<td>TemporalAccessor parse(CharSequence text)</td>
<td>将参数指定字符串转换为日期时间</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前时间</span></span><br><span class="line">LocalDateTime now = LocalDateTime.now();</span><br><span class="line"><span class="comment">//1,设定时间格式</span></span><br><span class="line">DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日  HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">String s = dtf.format(now);</span><br><span class="line">System.out.println(s);      <span class="comment">//2021年12月28日  11:50:45</span></span><br><span class="line"></span><br><span class="line">TemporalAccessor date = dtf.parse(s);</span><br><span class="line">System.out.println(date);   <span class="comment">//&#123;&#125;,ISO resolved to 2021-12-28T11:50:45</span></span><br></pre></td></tr></table></figure>

<h3 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h3><p>java.time.Instant类主要用于描述瞬间的时间点信息。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>static Instant now()</td>
<td>从系统时钟上获取当前时间</td>
</tr>
<tr>
<td>OffsetDateTime atOffset(ZoneOffset offset)</td>
<td>将此瞬间与偏移量组合以创建偏移日期时间</td>
</tr>
<tr>
<td>static Instant ofEpochMilli(long epochMilli)</td>
<td>根据参数指定的毫秒数来构造对象，参数为距离1970年1月1 日0时0分0秒的毫秒数</td>
</tr>
<tr>
<td>long toEpochMilli()</td>
<td>获取距离1970年1月1日0时0分0秒的毫秒数</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Instant now = Instant.now();</span><br><span class="line">System.out.println(now);       <span class="comment">//与本地时间相差8小时，</span></span><br><span class="line"><span class="comment">//将now相差的8小时偏移过来，变成本地时间</span></span><br><span class="line">OffsetDateTime now2 = now.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">System.out.println(now2);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据毫秒数创建时间</span></span><br><span class="line">Instant time = Instant.ofEpochMilli(<span class="number">1000</span>);</span><br><span class="line">System.out.println(time);    <span class="comment">//1970-01-01T00:00:01Z</span></span><br><span class="line"><span class="comment">//对象时间与基准时间相差的毫秒数</span></span><br><span class="line"><span class="keyword">long</span> l = time.toEpochMilli();</span><br><span class="line">System.out.println(l);    <span class="comment">//1000</span></span><br></pre></td></tr></table></figure>

<h2 id="集合类库-上"><a href="#集合类库-上" class="headerlink" title="集合类库(上)"></a>集合类库(上)</h2><p><strong>集合的由来</strong></p>
<ul>
<li>当需要在Java程序中记录单个数据内容时，则声明一个变量。</li>
<li>当需要在Java程序中记录多个类型相同的数据内容时，声明一个一维数组。 </li>
<li>当需要在Java程序中记录多个类型不同的数据内容时，则创建一个对象。</li>
<li>当需要在Java程序中记录多个类型相同的对象数据时，创建一个对象数组。 </li>
<li>当需要在Java程序中记录多个类型不同的对象数据时，则准备一个集合。<br>（注意集合可以记录类型不同的对象，但是也可以记录类型相同的对象。）</li>
</ul>
<p><strong>集合的框架结构</strong></p>
<p><a href="https://imgtu.com/i/TfqsJ0"><img src="https://s4.ax1x.com/2021/12/31/TfqsJ0.png" alt="TfqsJ0.png"></a></p>
<ul>
<li>Java中集合框架顶层框架是：java.util.Collection集合 和 java.util.Map集合。</li>
<li>其中Collection集合中存取元素的基本单位是：单个元素。</li>
<li>其中Map集合中存取元素的基本单位是：单对元素。</li>
</ul>
<h3 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h3><p>java.util.Collection接口是List接口、Queue 接口以及Set接口的父接口，<br>因此该接口里定义的方法既可用于操作List集合，也可用于操作Queue集合和Set集合。</p>
<p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>boolean add(E e);</td>
<td>向集合中添加对象</td>
</tr>
<tr>
<td>boolean addAll(Collection&lt;? extends E&gt; c)</td>
<td>用于将参数指定集合c中的所有元素添加到当前集合中</td>
</tr>
<tr>
<td>boolean contains(Object o);</td>
<td>判断是否包含指定对象</td>
</tr>
<tr>
<td>boolean containsAll(Collection&lt;?&gt; c)</td>
<td>判断是否包含参数指定的所有对象</td>
</tr>
<tr>
<td>boolean retainAll(Collection&lt;?&gt; c)</td>
<td>保留当前集合中存在且参数集合中存在的所有对象（取交集保留到所调用集合）</td>
</tr>
<tr>
<td>boolean remove(Object o);</td>
<td>从集合中删除对象</td>
</tr>
<tr>
<td>boolean removeAll(Collection&lt;?&gt; c)</td>
<td>从集合中删除参数指定的所有对象</td>
</tr>
<tr>
<td>void clear();</td>
<td>清空集合</td>
</tr>
<tr>
<td>int size();</td>
<td>返回包含对象的个数</td>
</tr>
<tr>
<td>boolean isEmpty();</td>
<td>判断是否为空</td>
</tr>
<tr>
<td>boolean equals(Object o)</td>
<td>判断是否相等</td>
</tr>
<tr>
<td>int hashCode()</td>
<td>获取当前集合的哈希码值</td>
</tr>
<tr>
<td>Object[] toArray()</td>
<td>将集合转换为数组</td>
</tr>
<tr>
<td>Iterator iterator()</td>
<td>获取当前集合的迭代器</td>
</tr>
</tbody></table>
<p>add()和addAll()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">Collection c2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">System.out.println(c1);    <span class="comment">//[]</span></span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">c1.add(<span class="number">1</span>);      <span class="comment">//自动装箱机制</span></span><br><span class="line">c1.add(<span class="string">&quot;abc&quot;</span>);  <span class="comment">//常量池</span></span><br><span class="line">c1.add(<span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;张飞&quot;</span>));</span><br><span class="line">System.out.println(c1);   <span class="comment">//[1, abc, Person&#123;name=&#x27;张飞&#x27;, id=1&#125;], 相当于输出每个元素的toString()方法</span></span><br><span class="line"></span><br><span class="line">c2.add(<span class="number">5</span>);</span><br><span class="line">c2.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">System.out.println(c2);   <span class="comment">//[5, one]</span></span><br><span class="line">c1.addAll(c2);       </span><br><span class="line">System.out.println(c1); <span class="comment">//[1, abc, Person&#123;name=&#x27;张飞&#x27;, id=1&#125;, 5, one]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//考点： c1.add(c2); 和 c1.addAll(c2); 的区别。</span></span><br><span class="line"><span class="comment">//c1.add(c2);    把c2当作整体添加到c1中---&gt;[1, abc, Person&#123;name=&#x27;张飞&#x27;, id=1&#125;, [5, one]]</span></span><br><span class="line"><span class="comment">//c1.addAll(c2); 把c2的每个元素依次添加到c1中---&gt;[1, abc, Person&#123;name=&#x27;张飞&#x27;, id=1&#125;, 5, one]</span></span><br></pre></td></tr></table></figure>

<p>contains()和containsAll()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="number">1</span>);</span><br><span class="line">c1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">c1.add(<span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;张飞&quot;</span>));</span><br><span class="line">System.out.println(c1);    <span class="comment">//[1, one, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试contains()</span></span><br><span class="line"><span class="keyword">boolean</span> b = c1.contains(<span class="number">1</span>);</span><br><span class="line">System.out.println(b);   <span class="comment">//true</span></span><br><span class="line">b = c1.contains(<span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;张飞&quot;</span>));   </span><br><span class="line">System.out.println(b);   <span class="comment">//false      因为没有重写Person的equals()方法。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过源代码可知，contains判断是否包含的原理是调用 Objects.equals();方法。即：</span><br><span class="line">return a == b || a != null &amp;&amp; a.equals(b);   返回true包含，false不包含</span><br><span class="line">先判断地址是否相同：参数对象==集合元素</span><br><span class="line">然后判断参数对象不是null的前提下，调用：参数对象.equalse(集合元素)</span><br><span class="line">由于上面的Person类没有重写equels方法，所以默认判断地址是否相同。</span><br><span class="line">很明显两个张飞内存地址不相同，所以判断是否包含张飞时，返回false。</span><br><span class="line">假如我们在Person类中重写了equals方法，使得基于id相同，返回true的话。</span><br><span class="line">此时再判断是否包含张飞时，返回true。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试containsAll()</span></span><br><span class="line">Collection c2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c2.add(<span class="number">1</span>);</span><br><span class="line">c2.add(<span class="number">2</span>);</span><br><span class="line">System.out.println(c2);   <span class="comment">//[1, 2]</span></span><br><span class="line"></span><br><span class="line">b = c1.containsAll(c2);</span><br><span class="line">System.out.println(b);     <span class="comment">//false   因为没有全部包含</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//考点：c1.contains(c2); 和 c1.containsAll(c2); 区别。</span></span><br><span class="line"><span class="comment">//c1.contains(c2);     判断c1是否包含c2这个集合整体</span></span><br><span class="line"><span class="comment">//c1.containsAll(c2);  判断c1是否包含c2中的所有元素</span></span><br></pre></td></tr></table></figure>

<p>remove() 和  removeAll()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="number">1</span>);</span><br><span class="line">c1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(c1);   <span class="comment">//[1, one, hello]</span></span><br><span class="line"><span class="comment">//remover()</span></span><br><span class="line">c1.remove(<span class="number">2</span>);</span><br><span class="line">System.out.println(c1);   <span class="comment">//[1, one, hello]</span></span><br><span class="line">c1.remove(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">System.out.println(c1);   <span class="comment">//[1, hello]</span></span><br><span class="line"><span class="comment">//removeAll()</span></span><br><span class="line">Collection c2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c2.add(<span class="number">1</span>);</span><br><span class="line">c2.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">c1.removeAll(c2);</span><br><span class="line">System.out.println(c1);   <span class="comment">//[]</span></span><br><span class="line"><span class="comment">//包含就删，没有包含就不删。删除原理也是调用Objects.equals()，判断是true就表示包含，并删除。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//考点：c1.remove(c2); 和 c1.removeAll(c2);区别。</span></span><br><span class="line"><span class="comment">//c1.remove(c2)      c1删除c2这个集合整体</span></span><br><span class="line"><span class="comment">//c1.reomveAll(c2)   c1删除c2中的所有元素</span></span><br></pre></td></tr></table></figure>

<p><strong>集合和数组的转换</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">c1.add(<span class="number">2</span>);</span><br><span class="line">c1.add(<span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;张飞&quot;</span>));</span><br><span class="line"><span class="comment">//c1集合转数组</span></span><br><span class="line">Object[] arr = c1.toArray();</span><br><span class="line">System.out.println( Arrays.toString(arr) );   <span class="comment">//打印数组arr：[one, 2, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]</span></span><br><span class="line"><span class="comment">//arr数组转集合</span></span><br><span class="line">Collection c2 = Arrays.asList(arr);</span><br><span class="line">System.out.println(c2);   		 <span class="comment">//打印集合c2：[one, 2, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]</span></span><br></pre></td></tr></table></figure>

<h3 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h3><ul>
<li>java.util.Iterator接口主要用于描述迭代器对象，可以遍历Collection集合中的所有元素。</li>
<li>java.util.Collection接口继承Iterable接口，因此所有实现Collection接口的实现类都可以使用该迭 代器对象。</li>
</ul>
<p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>boolean hasNext()</td>
<td>判断集合中是否有可以迭代/访问的元素</td>
</tr>
<tr>
<td>E next()</td>
<td>用于取出一个元素并指向下一个元素</td>
</tr>
<tr>
<td>void remove()</td>
<td>用于删除访问到的最后一个元素</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="number">1</span>);</span><br><span class="line">c1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">c1.add(<span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;张飞&quot;</span>));</span><br><span class="line">System.out.println(c1);       <span class="comment">//[1, one, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]</span></span><br><span class="line"><span class="comment">//生成迭代器iterator1</span></span><br><span class="line">Iterator iterator1 = c1.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(iterator1.hasNext())&#123;</span><br><span class="line">    Object obj = iterator1.next();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;one&quot;</span>.equals(obj))&#123;</span><br><span class="line">        iterator1.remove();    <span class="comment">//删除next最近一个访问的元素。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(c1);    <span class="comment">//[1, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]</span></span><br></pre></td></tr></table></figure>

<p>案例：</p>
<p>用迭代器模拟集合提供的toString</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="number">1</span>);</span><br><span class="line">c1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">c1.add(<span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;张飞&quot;</span>));</span><br><span class="line">System.out.println( c1.toString() );       <span class="comment">//[1, one, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]，模拟此格式</span></span><br><span class="line"><span class="comment">//用迭代器模拟toString打印</span></span><br><span class="line">Iterator iterator1 = c1.iterator();</span><br><span class="line">StringBuilder sb1 = <span class="keyword">new</span> StringBuilder();   <span class="comment">//存放打印的内容</span></span><br><span class="line">sb1.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    Object obj = iterator1.next();</span><br><span class="line">    <span class="comment">//判断是不是最后一个元素。</span></span><br><span class="line">    <span class="keyword">if</span>(!iterator1.hasNext())&#123;</span><br><span class="line">        sb1.append(obj).append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sb1.append(obj).append(<span class="string">&quot;,&quot;</span>).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sb1);   <span class="comment">//[1, one, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]</span></span><br></pre></td></tr></table></figure>

<h3 id="for-each循环"><a href="#for-each循环" class="headerlink" title="for each循环"></a>for each循环</h3><ul>
<li><p>Java5推出了增强型for循环语句，可以应用数组和集合的遍历。  </p>
</li>
<li><p>是经典迭代的“简化版”。</p>
</li>
<li><p>格式：for(元素类型 变量名 :  数组/集合名称)  {循环体;}</p>
</li>
<li><p>不断地从数组/集合中取出一个元素赋值给变量名并执行循环体，直到取完所有元素为止。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for each遍历集合</span></span><br><span class="line">Collection c1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c1.add(<span class="number">1</span>);</span><br><span class="line">c1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">c1.add(<span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;张飞&quot;</span>));</span><br><span class="line">System.out.println( c1.toString() );       <span class="comment">//[1, one, Person&#123;id=1, name=&#x27;张飞&#x27;&#125;]</span></span><br><span class="line"><span class="keyword">for</span>(Object obj : c1)&#123;</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for each遍历数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i += <span class="number">5</span>;    <span class="comment">//不改变原始数组数据。</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));    <span class="comment">//[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><p><a href="https://imgtu.com/i/TfqsJ0"><img src="https://s4.ax1x.com/2021/12/31/TfqsJ0.png" alt="TfqsJ0.png"></a></p>
<ul>
<li>java.util.List集合是Collection集合的子集合，该集合中允许有重复的元素并且有先后放入次序。<br>该集合的主要实现类有：ArrayList类、LinkedList类、Stack类、Vector类。</li>
</ul>
<p>实现类：</p>
<ul>
<li>其中ArrayList类的底层是采用动态数组进行数据管理的，支持下标访问，增删元素不方便。</li>
<li>其中LinkedList类的底层是采用双向链表进行数据管理的，访问不方便，增删元素方便。</li>
</ul>
<p>可以认为ArrayList和LinkedList的方法在逻辑上完全一样，只是在性能上有一定的差别，ArrayList 更适合于随<br>机访问而LinkedList更适合于插入和删除；在性能要求不是特别苛刻的情形下可以忽略这个差别。</p>
<ul>
<li>其中Stack类的底层是采用动态数组进行数据管理的，该类主要用于描述一种具有后进先出特征的数据结构，<br>叫做栈(last in ﬁrst out LIFO)。</li>
<li>其中Vector类的底层是采用动态数组进行数据管理的，该类与ArrayList类相比属于线程安全的类，效率比较低，<br>以后开发中基本不用。</li>
</ul>
<p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>void add(int index, E element)</td>
<td>向集合中指定位置添加元素</td>
</tr>
<tr>
<td>boolean addAll(int index, Collection&lt;? extends E&gt; c)</td>
<td>向集合中添加所有元素</td>
</tr>
<tr>
<td>E get(int index)</td>
<td>从集合中获取指定位置元素</td>
</tr>
<tr>
<td>int indexOf(Object o)</td>
<td>查找参数指定的对象</td>
</tr>
<tr>
<td>int lastIndexOf(Object o)</td>
<td>反向查找参数指定的对象</td>
</tr>
<tr>
<td>E set(int index, E element)</td>
<td>修改指定位置的元素</td>
</tr>
<tr>
<td>E remove(int index)</td>
<td>删除指定位置的元素</td>
</tr>
<tr>
<td>List subList(int fromIndex, int toIndex)</td>
<td>用于获取子List</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List l = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">l.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">l.add(<span class="number">1</span>);</span><br><span class="line">System.out.println(l);   <span class="comment">//[one, 1]</span></span><br><span class="line">l.add(<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(l);   <span class="comment">//[one, hello, 1]</span></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">l.remove(<span class="number">2</span>);</span><br><span class="line">System.out.println(l);   <span class="comment">//[one, hello]</span></span><br><span class="line"><span class="comment">//改</span></span><br><span class="line">l.set(<span class="number">0</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">System.out.println(l);   <span class="comment">//[two, hello]</span></span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">Object obj = l.get(<span class="number">0</span>);</span><br><span class="line">System.out.println(obj);   <span class="comment">//two</span></span><br><span class="line"><span class="keyword">int</span> i = l.indexOf(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(i);   <span class="comment">//1</span></span><br><span class="line"><span class="comment">//获取子list</span></span><br><span class="line">List l2 = l.subList(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(l2);     <span class="comment">//[two]</span></span><br></pre></td></tr></table></figure>

<p><strong>stack实现类</strong>（栈，后进先出）</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Stack()</td>
<td>创建一个空堆栈</td>
</tr>
<tr>
<td>boolean empty()</td>
<td>测试此堆栈是否为空。</td>
</tr>
<tr>
<td>E pop()</td>
<td>移除此堆栈顶部的对象，并将该对象作为此函数的值返回。</td>
</tr>
<tr>
<td>E push(E item)</td>
<td>将项目推到此堆栈的顶部。</td>
</tr>
<tr>
<td>E peek()</td>
<td>查看此堆栈顶部的对象，而不将其从堆栈中删除。</td>
</tr>
</tbody></table>
<ul>
<li>案例题目<br>准备一个Stack集合，将数据11、22、33、44、55依次入栈并打印，然后查看栈顶元素并打印， 然后将栈中所有数据依次出栈并打印。<br>再准备一个Stack对象，将数据从第一个栈中取出来放入第二个栈中，然后再从第二个栈中取出并   打印。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stack st = <span class="keyword">new</span> Stack();    <span class="comment">//[]</span></span><br><span class="line">Stack st2 = <span class="keyword">new</span> Stack();   <span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//st进栈：11，22，33，44，55</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">    st.push(i*<span class="number">11</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(st);    <span class="comment">//[11, 22, 33, 44, 55]</span></span><br><span class="line">System.out.println(st.peek());  <span class="comment">//栈顶元素：55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//st出栈:55,44,33,22,11 ,并st2进栈每个元素</span></span><br><span class="line"><span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">    Object obj = st.pop();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">    st2.push(obj);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(st2);   <span class="comment">//[55, 44, 33, 22, 11]</span></span><br><span class="line">System.out.println(st2.peek());  <span class="comment">//栈顶元素：11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//st2出栈：11，22，33，44，55</span></span><br><span class="line"><span class="keyword">while</span>(!st2.empty())&#123;</span><br><span class="line">    Object obj = st2.pop();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Queue集合"><a href="#Queue集合" class="headerlink" title="Queue集合"></a>Queue集合</h3><p><a href="https://imgtu.com/i/TfqsJ0"><img src="https://s4.ax1x.com/2021/12/31/TfqsJ0.png" alt="TfqsJ0.png"></a></p>
<ul>
<li>java.util.Queue集合是Collection集合的子集合，与List集合属于平级关系。</li>
<li>该集合的主要用于描述具有先进先出特征的数据结构，叫做队列(ﬁrst in ﬁrst out FIFO)。</li>
<li>该集合的主要实现类是LinkedList类，因为该类在增删方面比较有优势。</li>
</ul>
<p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>boolean oﬀer(E e)</td>
<td>将一个对象添加至队尾，若添加成功则返回true</td>
</tr>
<tr>
<td>E poll()</td>
<td>从队首删除并返回一个元素</td>
</tr>
<tr>
<td>E peek()</td>
<td>返回队首的元素（但并不删除）</td>
</tr>
</tbody></table>
<ul>
<li>案例题目<br>准备一个Queue集合，将数据11、22、33、44、55依次入队并打印，然后查看队首元素并打印， 然后将队列中所有数据依次出队并打印。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Queue q = <span class="keyword">new</span> LinkedList();   <span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//进队列：11，22，33，44，55</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++)&#123;</span><br><span class="line">    q.offer(i*<span class="number">11</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(q);   <span class="comment">//[11, 22, 33, 44, 55]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//出队列：11，22，33，44，55</span></span><br><span class="line"><span class="keyword">while</span>(q.peek() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Object obj = q.poll();</span><br><span class="line">    System.out.println(obj);   <span class="comment">//11，22，33，44，55</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="集合类库-下"><a href="#集合类库-下" class="headerlink" title="集合类库(下)"></a>集合类库(下)</h2><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ul>
<li>通常情况下集合中可以存放不同类型的对象，是因为将所有对象都看做Object类型放入的，因此  从集合中取出元素时也是Object类型，为了表达该元素真实的数据类型，则需要强制类型转换，  而强制类型转换可能会引发类型转换异常。</li>
<li>为了避免上述错误的发生，从Java5开始增加泛型机制，也就是在集合名称的右侧使用&lt;数据类型&gt;     的方式来明确要求该集合中可以存放的元素类型，若放入其它类型的元素则编译报错。</li>
<li>泛型只在编译时期有效，在运行时期不区分是什么类型。</li>
</ul>
<p><strong>原理</strong></p>
<p>泛型的本质就是参数化类型，也就是让数据类型作为参数传递，其中E相当于形式参数负责占位，  而使用集合时&lt;&gt;中的数据类型相当于实际参数，用于给形式参数E进行初始化，从而使得集合中所   有的E被实际参数替换，由于实际参数可以传递各种各样广泛的数据类型，因此得名为泛型。<br>如：<br>//其中i叫做形式参数，负责占位<br>//int i = 10;<br>//int i = 20;<br>public static void show(int i) {<br>    …<br>}<br>//其中10叫做实际参数，负责给形式参数初始化<br>show(10);<br>show(20);        </p>
<p>如：<br>//其中E叫做形式参数，负责占位<br>E = String;<br>E = Integer;<br>public interface List&lt;E&gt;{<br>    …<br> }<br>//其中String叫做实际参数<br>List&lt;String&gt; lt1 = …;<br>List&lt;Integer&gt; lt2 = …;</p>
<h4 id="定义泛型接口"><a href="#定义泛型接口" class="headerlink" title="定义泛型接口"></a>定义泛型接口</h4><p>泛型接口和普通接口的区别就是后面添加了类型参数列表，可以有多个类型参数，如：&lt;E, T, .. &gt;<br>等。</p>
<h4 id="定义泛型类"><a href="#定义泛型类" class="headerlink" title="定义泛型类"></a>定义泛型类</h4><ul>
<li>泛型类和普通类的区别就是类名后面添加了类型参数列表，可以有多个类型参数，如：&lt;E, T, .. &gt;<br>等。</li>
<li>实例化泛型类时应该指定具体的数据类型，并且是引用数据类型而不是基本数据类型。 </li>
<li>父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型。</li>
<li>子类必须是“富二代”，子类除了指定或保留父类的泛型，还可以增加自己的泛型。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> E gender;   <span class="comment">//gender的数据类型是E，E是什么类型由创建对象决定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, E gender)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不是泛型方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(E gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person&lt;String&gt; t1 = <span class="keyword">new</span> Person&lt;&gt;(<span class="string">&quot;li&quot;</span>, <span class="string">&quot;男&quot;</span>);   <span class="comment">//将E赋值为String</span></span><br><span class="line">Person&lt;Boolean&gt; t2 = <span class="keyword">new</span> Person&lt;&gt;(<span class="string">&quot;li&quot;</span>, <span class="keyword">true</span>);  <span class="comment">//将E赋值为Booleean</span></span><br></pre></td></tr></table></figure>

<p>继承关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//public class SubPerson extends Person &#123;         //不保留的泛型且没有指定类型，此时父类的E默认是Object类型，擦除</span></span><br><span class="line"><span class="comment">//public class SubPerson extends Person&lt;String&gt; &#123; //不保留的泛型但是指定了类型，此时父类的E默认是String类型</span></span><br><span class="line"><span class="comment">//public class SubPerson&lt;E&gt; extends Person&lt;E&gt; &#123;   //保留了父类的泛型，可以在构造方法中指定E的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubPerson</span>&lt;<span class="title">E</span>, <span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Person</span>&lt;<span class="title">E</span>&gt; </span>&#123;  <span class="comment">//保留了父类的泛型，同时子类还增加了新的泛型T</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="定义泛型方法"><a href="#定义泛型方法" class="headerlink" title="定义泛型方法"></a>定义泛型方法</h4><ul>
<li>泛型方法就是我们输入参数的时候，输入的是泛型参数，而不是具体的参数。我们在调用这个泛型  方法的时需要对泛型参数进行实例化。</li>
<li>泛型方法的格式：<br>[访问权限] &lt;泛型&gt; 返回值类型 方法名([泛型标识 参数名称]) { 方法体; }</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//泛型方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; T <span class="title">show</span><span class="params">(T arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String s1 = show(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">Integer ia = show(<span class="number">123</span>);</span><br></pre></td></tr></table></figure>

<h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p>如果A和B具备父子类关系，但是List&lt;A&gt;和List&lt;B&gt;不具备父子关系。</p>
<ul>
<li>有时候我们希望传入的类型在一个指定的范围内，此时就可以使用泛型通配符了。</li>
<li>如：之前传入的类型要求为Integer类型，但是后来业务需要Integer的父类Number类也可以传入。</li>
<li>泛型中有三种通配符形式：<?> 无限制通配符：表示我们可以传入任意类型的参数。
<? extends E> 表示类型的上界是E，只能是E或者是E的子类。
<? super E> 表示类型的下界是E，只能是E或者是E的父类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; lt1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;SubPerson&gt; lt2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//lt1 = lt2;    //Error:不具备父子类关系</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用通配符作为泛型类型的公共父类</span></span><br><span class="line">List&lt;?&gt; lt3 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">lt3 = lt2;</span><br><span class="line">lt3 = lt1;</span><br><span class="line"><span class="comment">//lt3.add(new Person())    //Eooor:不支持添加元素操作，因为有更小的类型</span></span><br><span class="line">Object obj1 = lt3.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;? extends Person&gt; lt4 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//lt4.add(new Person());      //Error:不支持添加元素操作，因为有更小的类型</span></span><br><span class="line">Person p1 = lt4.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;? <span class="keyword">super</span> Person&gt; lt5 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">lt5.add(<span class="keyword">new</span> Person());    <span class="comment">//可以添加Person及以下子类型的对象</span></span><br><span class="line">Object obj2 = lt5.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><p><a href="https://imgtu.com/i/TfqsJ0"><img src="https://s4.ax1x.com/2021/12/31/TfqsJ0.png" alt="TfqsJ0.png"></a></p>
<ul>
<li>java.util.Set集合是Collection集合的子集合，与List集合平级。  </li>
<li>该集合中元素没有先后放入次序，且不允许重复。</li>
</ul>
<p>实现类：HashSet类 和 TreeSet类以及LinkedHashSet类。</p>
<ul>
<li>其中HashSet类的底层是采用哈希表进行数据管理的。</li>
<li>其中TreeSet类的底层是采用红黑树进行数据管理的。</li>
<li>其中LinkedHashSet类与HashSet类的不同之处在于内部维护了一个双向链表，链表中记录了元  素的迭代顺序，也就是元素插入集合中的先后顺序，因此便于迭代。</li>
</ul>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul>
<li>参考Collection集合中的方法即可！ </li>
<li>案例题目<br>准备一个Set集合指向HashSet对象，向该集合中添加元素”two”并打印，再向集合中添加元  素”one”并打印，再向集合中添加元素”three”并打印，再向集合中添加”one”并打印。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; set1 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">set1.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">set1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">set1.add(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">set1.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">System.out.println(set1);    <span class="comment">//[one, two, three]  没有先后顺序，且不能重复</span></span><br></pre></td></tr></table></figure>

<p><strong>元素放入HashSet原理</strong></p>
<ul>
<li>使用元素调用hashCode方法获取对应的<em>哈希码值</em>，再由某种哈希算法计算出该元素在数组中的索  引位置。</li>
<li>若该位置没有元素，则将该元素直接放入即可。</li>
<li>若该位置有元素，则使用新元素与已有元素依次比较<em>哈希值</em>，若哈希值不相同，则将该元素直接放  入。</li>
<li>若新元素与已有元素的哈希值相同，则使用新元素调用<em>equals方法</em>与已有元素依次比较。  </li>
<li>若相等则添加元素失败，否则将元素直接放入即可。</li>
</ul>
<p>思考：为什么要求重写equals方法后要重写hashCode方法呢？</p>
<p>解析：<br>当两个元素调用equals方法相等时证明这两个元素相同，重写hashCode方法后保证这两个元    素得到的哈希码值相同，由同一个哈希算法生成的索引位置相同，此时只需要与该索引位置已有元  素比较即可，从而提高效率并避免重复元素的出现。</p>
<h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><ul>
<li>二叉树主要指每个节点最多只有两个子节点的树形结构。</li>
<li>满足以下3个特征的二叉树叫做有序二叉树。<br>a.左子树中的任意节点元素都小于根节点元素值；<br>b.右子树中的任意节点元素都大于根节点元素值；<br>c.左子树和右子树的内部也遵守上述规则；</li>
<li>由于TreeSet集合的底层采用红黑树进行数据的管理，当有新元素插入到TreeSet集合时，需要使用新元素与集合中已有的元素依次比较来确定新元素的合理位置。</li>
<li>比较元素大小的规则有两种方式：<br>a.使用元素的自然排序规则进行比较并排序，让元素类型实现java.lang.Comparable接口；<br>b.使用比较器规则进行比较并排序，构造TreeSet集合时传入java.util.Comparator接口；</li>
<li>自然排序的规则比较单一，而比较器的规则比较多元化，而且比较器优先于自然排序；</li>
</ul>
<table>
<thead>
<tr>
<th>构造器</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>TreeSet()</td>
<td>构造一个新的空树集，根据其元素的自然顺序进行排序。</td>
</tr>
<tr>
<td>TreeSet(Comparator&lt;? super E&gt; comparator)</td>
<td>构造一个新的空树集，根据指定的比较器进行排序。</td>
</tr>
</tbody></table>
<p>TreeSet集合中放入String数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">set.add(<span class="string">&quot;nihao&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">System.out.println(set);   <span class="comment">//[abc, hello, nihao]</span></span><br><span class="line"><span class="comment">//String类型放入TreeSet不需要添加排序，因为String类中官方已经实现了comparable接口。</span></span><br></pre></td></tr></table></figure>

<p>TreeSet集合中放入其他数据需要定义排序规则：</p>
<p>自然排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;   <span class="comment">//元素类型实现java.lang.Comparable接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用对象this表示新增的对象，this和o进行比较。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o：Object o 表示集合中已有的元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>：0表示相同，丢弃；正数表示大于，放后面；负数表示小于，放前面。（从小到大）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//自定义排序规则：</span></span><br><span class="line">        <span class="comment">//age从小到大，年龄相同按name排序</span></span><br><span class="line">        <span class="keyword">int</span> ia = <span class="keyword">this</span>.age - ((Person)o).age;</span><br><span class="line">        <span class="keyword">int</span> ib = <span class="keyword">this</span>.name.compareTo( ((Person)o).name );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>!=ia ? ia : ib ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Person&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">23</span>, <span class="string">&quot;guanyu&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">18</span>, <span class="string">&quot;zhangfei&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">18</span>, <span class="string">&quot;Li&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">35</span>, <span class="string">&quot;liubei&quot;</span>));</span><br><span class="line">System.out.println(set);</span><br></pre></td></tr></table></figure>

<p>比较器排序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用匿名内部类创建比较器</span></span><br><span class="line">Comparator  comparetor1 = <span class="keyword">new</span> Comparator()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o, Object t1)</span> </span>&#123;  <span class="comment">//o是新增对象，t1是集合中已有对象。</span></span><br><span class="line">        <span class="keyword">int</span> ia = ((Person)o).age - ((Person)t1).age;</span><br><span class="line">        <span class="keyword">int</span> ib = ((Person)o).name.compareTo( ((Person)t1).name );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>!=ia ? ia : ib ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//java8支持Lambda表达式</span></span><br><span class="line">Comparator comparetor2 = (Object o, Object t1) -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> ia = ((Person)o).age - ((Person)t1).age;</span><br><span class="line">    <span class="keyword">int</span> ib = ((Person)o).name.compareTo( ((Person)t1).name );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>!=ia ? ia : ib ;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Set&lt;Person&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;(comparetor1);</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">23</span>, <span class="string">&quot;guanyu&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">18</span>, <span class="string">&quot;zhangfei&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">18</span>, <span class="string">&quot;Li&quot;</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="number">35</span>, <span class="string">&quot;liubei&quot;</span>));</span><br><span class="line">System.out.println(set);</span><br></pre></td></tr></table></figure>

<h3 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h3><p><a href="https://imgtu.com/i/TfqsJ0"><img src="https://s4.ax1x.com/2021/12/31/TfqsJ0.png" alt="TfqsJ0.png"></a></p>
<ul>
<li>java.util.Map&lt;K,V&gt;集合中存取元素的基本单位是：单对元素，其中类型参数如下：<br>K - 此映射所维护的键(Key)的类型，相当于目录。<br>V - 映射值(Value)的类型，相当于内容。</li>
<li>该集合中key是不允许重复的，而且一个key只能对应一个value。</li>
</ul>
<p>实现类：HashMap类、TreeMap类、LinkedHashMap类、Hashtable类、Properties类。</p>
<ul>
<li>其中HashMap类的底层是采用哈希表进行数据管理的。 </li>
<li>其中TreeMap类的底层是采用红黑树进行数据管理的。</li>
<li>其中LinkedHashMap类与HashMap类的不同之处在于内部维护了一个双向链表，链表中记录了元素的迭代顺序，也就是元素插入集合中的先后顺序，因此便于迭代。</li>
<li>其中Hashtable类是古老的Map实现类，与HashMap类相比属于线程安全的类，且不允许null作为key或者value的数值。</li>
<li>其中Properties类是Hashtable类的子类，该对象用于处理属性文件，key和value都是String类型的。</li>
</ul>
<p>Map集合是面向查询优化的数据结构, 在大数据量情况下有着优良的查询性能。经常用于根据key检索value的业务场景。</p>
<h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>V put(K key, V value)</td>
<td>将Key-Value对存入Map，若集合中已经包含该Key，则替换该Key所对应的Value，返回值为该Key原来所对应的Value，若没有则返回null</td>
</tr>
<tr>
<td>V remove(Object key)</td>
<td>根据参数指定的key进行删除</td>
</tr>
<tr>
<td>V get(Object key)</td>
<td>返回与参数Key所对应的Value对象，如果不存在则返回null</td>
</tr>
<tr>
<td>boolean containsKey(Object key);</td>
<td>判断集合中是否包含指定的Key</td>
</tr>
<tr>
<td>boolean containsValue (Object value);</td>
<td>判断集合中是否包含指定的Value</td>
</tr>
<tr>
<td>Set keySet()</td>
<td>返回此映射中包含的键的Set视图</td>
</tr>
<tr>
<td>Collection values()</td>
<td>返回此映射中包含的值的Set视图</td>
</tr>
<tr>
<td>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</td>
<td>返回此映射中包含的映射的Set视图</td>
</tr>
</tbody></table>
<p>基本操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; m1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//增改。  无则添加，有则修改</span></span><br><span class="line">m1.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">m1.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;Word&quot;</span>);</span><br><span class="line">m1.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">m1.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;nihao&quot;</span>);</span><br><span class="line">System.out.println(m1);   <span class="comment">//&#123;1=nihao, 2=Word&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除。  有则删，无则不删</span></span><br><span class="line">m1.remove(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">System.out.println(m1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">String s1 = m1.get(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">System.out.println(s1);   <span class="comment">//nihao</span></span><br><span class="line"><span class="keyword">boolean</span> b = m1.containsKey(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">System.out.println(b);    <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>map的三种遍历方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//key的视图</span></span><br><span class="line">Set&lt;String&gt; set1 = m1.keySet();</span><br><span class="line">System.out.println(set1);   <span class="comment">//[1, 3]</span></span><br><span class="line"><span class="keyword">for</span>(String s: set1)&#123;</span><br><span class="line">    System.out.println(s + <span class="string">&quot;对应的值是：&quot;</span> + m1.get(s));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//value的视图</span></span><br><span class="line">Collection&lt;String&gt; co1 = m1.values();</span><br><span class="line">System.out.println(co1);   <span class="comment">//[nihao, abc]</span></span><br><span class="line"><span class="keyword">for</span>(String s: co1)&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//键值映射的视图</span></span><br><span class="line">Set&lt;Map.Entry&lt;String, String&gt;&gt; set2 = m1.entrySet();</span><br><span class="line">System.out.println(set2);   <span class="comment">//[1=nihao, 3=abc]</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, String&gt; me: set2)&#123;</span><br><span class="line">    System.out.println(me);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>元素放入HashMap集合原理</strong></p>
<ul>
<li>使用元素的key调用hashCode方法获取对应的<em>哈希码值</em>，再由某种哈希算法计算在数组中的索引位置。</li>
<li>若该位置没有元素，则将该键值对直接放入即可。</li>
<li>若该位置有元素，则使用key与已有元素依次比较<em>哈希值</em>，若哈希值不相同，则将该元素直接放入。</li>
<li>若key与已有元素的哈希值相同，则使用key调用<em>equals方法</em>与已有元素依次比较。  </li>
<li>若相等则将对应的value修改，否则将键值对直接放入即可</li>
</ul>
<p><strong>相关常量</strong></p>
<ul>
<li>DEFAULT_INITIAL_CAPACITY : HashMap的默认容量是16。</li>
<li>DEFAULT_LOAD_FACTOR：HashMap 的默认加载因子是 0.75 。                    </li>
<li>threshold： 扩 容 的 临 界 值 ， 该 数 值 为 ： 容 量 * 填 充 因 子 ， 也 就 是 12 。 </li>
<li>TREEIFY_THRESHOLD：若Bucket中链表长度大于该默认值则转化为红黑树存储，该数值是8。</li>
<li>MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量，该数值是64。</li>
</ul>
<h3 id="Collections类"><a href="#Collections类" class="headerlink" title="Collections类"></a>Collections类</h3><p>java.util.Collections类主要提供了对集合操作或者返回集合的静态方法。</p>
<h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T max(Collection&lt;? extends T&gt; coll)</td>
<td>根据元素的自然顺序返回给定集合的最大元素</td>
</tr>
<tr>
<td>static T max(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</td>
<td>根据指定比较器引发的顺序返回给定集合的最大元素</td>
</tr>
<tr>
<td>static &lt;T extends Object &amp; Comparable&lt;?super T&gt;&gt; T min(Collection&lt;? extends T&gt; coll)</td>
<td>根据元素的自然顺序返回给定集合的最小元素</td>
</tr>
<tr>
<td>static T min(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</td>
<td>根据指定比较器引发的顺序返回给定集合的最小元素</td>
</tr>
<tr>
<td>static void copy(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src)</td>
<td>将一个列表中的所有元素复制到另一个列表中</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static void reverse(List&lt;?&gt; list)</td>
<td>反转指定列表中元素的顺序</td>
</tr>
<tr>
<td>static void shuﬄe(List&lt;?&gt; list)</td>
<td>使用默认的随机源随机置换指定的列表</td>
</tr>
<tr>
<td>static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List list)</td>
<td>根据其元素的自然顺序将指定列表按升序排序</td>
</tr>
<tr>
<td>static void sort(List list, Comparator&lt;? super T&gt; c)</td>
<td>根据指定比较器指定的顺序对指定列表进行排序</td>
</tr>
<tr>
<td>static void swap(List&lt;?&gt; list, int i, int j)</td>
<td>交换指定列表中指定位置的元素</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; lt1 = Arrays.asList(<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">Integer ia = Collections.max(lt1);</span><br><span class="line">System.out.println(<span class="string">&quot;最大值是&quot;</span> + ia);</span><br><span class="line">ia = Collections.min(lt1);</span><br><span class="line">System.out.println(<span class="string">&quot;最小值是&quot;</span> + ia);</span><br><span class="line"></span><br><span class="line"><span class="comment">//copy将lt1复制到lt2中</span></span><br><span class="line">List&lt;Integer&gt; lt2 = Arrays.asList(<span class="keyword">new</span> Integer[<span class="number">10</span>]);</span><br><span class="line">Collections.copy(lt2, lt1);</span><br><span class="line">System.out.println(lt2);    <span class="comment">//[9, 1, 2, 5, 3, 11, null, null, null, null]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//reverse反转操作</span></span><br><span class="line">Collections.reverse(lt1);</span><br><span class="line">System.out.println(lt1);    <span class="comment">//[11, 3, 5, 2, 1, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sort升序</span></span><br><span class="line">Collections.sort(lt1);</span><br><span class="line">System.out.println(lt1);    <span class="comment">//[1, 2, 3, 5, 9, 11]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//swap交换指定下标元素</span></span><br><span class="line">Collections.swap(lt1, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(lt1);    <span class="comment">//[5, 2, 3, 1, 9, 11]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shuffle随机打乱</span></span><br><span class="line">Collections.shuffle(lt1);</span><br><span class="line">System.out.println(lt1);    <span class="comment">//每次都随机打乱顺序</span></span><br></pre></td></tr></table></figure>

<h1 id="Java核心类库-下"><a href="#Java核心类库-下" class="headerlink" title="Java核心类库(下)"></a>Java核心类库(下)</h1><h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><p><a href="https://imgtu.com/i/7w6SW8"><img src="https://s4.ax1x.com/2022/01/18/7w6SW8.png" alt="7w6SW8.png"></a></p>
<p>异常就是”不正常”的含义，在Java语言中主要指程序执行中发生的不正常情况。</p>
<ul>
<li>java.lang.Throwable类：是Java语言中错误(Error)和异常(Exception)的超类。</li>
<li>Error类：主要用于描述Java虚拟机无法解决的严重错误，通常无法编码解决，如：JVM挂掉了    等。</li>
<li>Exception类：主要用于描述因编程错误或偶然外在因素导致的轻微错误，通常可以编码解决， 如：0作为除数等。</li>
</ul>
<h3 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h3><p>java.lang.Exception类是所有异常的超类，主要分为以下两种： </p>
<ul>
<li>RuntimeException ： 运行时异常，也叫作非检测性异常</li>
<li>IOException和其它异常 ： 其它异常，也叫作检测性异常，所谓检测性异常就是指在编译阶段都能被编译器检测出来的异常。</li>
</ul>
<p>其 中 RuntimeException 类 的 主 要 子 类 ： </p>
<ul>
<li>ArithmeticException类 - 算术异常</li>
<li>ArrayIndexOutOfBoundsException类 - 数组下标越界异常</li>
<li>NullPointerException - 空指针异常</li>
<li>ClassCastException - 类型转换异常</li>
<li>NumberFormatException - 数字格式异常</li>
</ul>
<p><strong>注意：</strong><br>当程序执行过程中发生异常但又没有手动处理时，则由Java虚拟机采用默认方式处理异常，而默认处理方式就是：打印异常的名称、异常发生的原因、异常发生的位置以及终止程序。</p>
<p>在以后的开发中尽量使用if条件判断来避免异常的发生。<br>但是过多的if条件判断会导致程序的代码加长、臃肿，可读性差。</p>
<h3 id="异常的捕获"><a href="#异常的捕获" class="headerlink" title="异常的捕获"></a>异常的捕获</h3><ul>
<li><p>语法格式：<br>try {</p>
<pre><code>编写可能发生异常的代码;
</code></pre>
<p>}<br>catch(异常类型 引用变量名) {</p>
<pre><code>编写针对该类异常的处理代码；
</code></pre>
<p>}<br>…可以有多个catch<br>ﬁnally {</p>
<pre><code>编写无论是否发生异常都要执行的代码；
</code></pre>
<p>}</p>
</li>
<li><p>注意事项<br>a. 当需要编写多个catch分支时，切记小类型应该放在大类型的前面；<br>b. 懒人的写法：catch(Exception e) {}<br>c. ﬁnally通常用于进行善后处理，如：关闭已经打开的文件等。</p>
</li>
<li><p>执行流程<br>try { </p>
<pre><code>a;
b; - 可能发生异常的语句
c;
</code></pre>
<p>}catch(Exception ex) { </p>
<pre><code>d;
</code></pre>
<p>}ﬁnally { </p>
<pre><code>e;
</code></pre>
<p>}<br>当没有发生异常时的执行流程：a b c e;<br>当发生异常时的执行流程：a b d e;</p>
</li>
</ul>
<p><strong>考点</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义如下方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//......可能出错代码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception  e)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法，无论有没有异常，show()的返回值都是3</span></span><br><span class="line"><span class="keyword">int</span> ia = show();</span><br><span class="line">System.out.println(<span class="string">&quot;ia = &quot;</span> + ia);   <span class="comment">//ia = 3</span></span><br></pre></td></tr></table></figure>

<h3 id="异常的抛出"><a href="#异常的抛出" class="headerlink" title="异常的抛出"></a>异常的抛出</h3><p>异常的抛出：在某些特殊情况下有些异常不能处理或者不便于处理时，就可以将该异常转移给该方法的调用者。<br>当方法执行时出现异常，则底层生成一个异常类对象抛出，此时异常代码后续的代码就不再执行</p>
<ul>
<li>语法格式<br>访问权限 返回值类型 方法名称(形参列表) throws 异常类型1,异常类型2,…{ 方法体; }<br>如：<pre><code>public void show() throws IOException&#123;&#125;
</code></pre>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">throws</span> ArithmeticException</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ia = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在main中抛出异常相当于交给jvm虚拟机处理</span></span><br><span class="line"><span class="comment">//不建议在main中抛出异常，jvm的负担很重</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="comment">/*throws ArithmeticException*/</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        show();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法重写的原则<br>a. 要求方法名相同、参数列表相同以及返回值类型相同，从jdk1.5开始支持返回子类类型；<br>b. 要求方法的访问权限不能变小，可以相同或者变大；<br>c. 要求方法<strong>不能抛出更大的异常</strong>；</li>
</ul>
<p>注意：<br>子类重写的方法不能抛出更大的异常、不能抛出平级不一样的异常，但可以抛出一样的异常、更小的异常以及不抛出异常。</p>
<p>经验分享：<br>若父类中被重写的方法没有抛出异常时，则子类中重写的方法只能进行异常的捕获处理。<br>若一个方法内部又以递进方式分别调用了好几个其它方法，则建议这些方法内可以使用抛出 的方法处理到最后一层进行捕获方式处理。</p>
<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>当需要在程序中表达年龄不合理的情况时，而Java官方又没有提供这种针对性的异常，此时就需要程序员自定义异常加以描述。</p>
<ul>
<li>实现流程<br>a. 自定义名为“xxxException”异常类，并继承Exception类或者其子类。<br>b.提供两个版本的构造方法，一个是无参构造方法，另外一个是字符串作为参数的构造方法。 </li>
<li>异常的产生<br>throw new 异常类型(实参);</li>
</ul>
<p>自定义异常类AgeException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgeException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7516993124229948L</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AgeException</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AgeException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>封装Person类，当年龄不合理时抛出AgeException异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> <span class="keyword">throws</span> AgeException</span>&#123;<span class="comment">//抛出异常</span></span><br><span class="line">        setAge(age);</span><br><span class="line">        setName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> <span class="keyword">throws</span> AgeException</span>&#123;<span class="comment">//抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(age&gt;=<span class="number">0</span> &amp;&amp; age &lt;= <span class="number">150</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//抛出自定义的异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AgeException(<span class="string">&quot;年龄不合理哦！&quot;</span>);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Person p1 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        p1 = <span class="keyword">new</span> Person(<span class="string">&quot;zhang&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(AgeException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;p1 = &quot;</span> + p1);</span><br><span class="line">    <span class="comment">//对于自己抛出的异常，需要异常处理，</span></span><br><span class="line">    <span class="comment">//假如在抛出自定义异常时，立马try,catch处理，结果将是：p1 = Person&#123;name=&#x27;zhang&#x27;, age=0&#125;</span></span><br><span class="line">    <span class="comment">//假如如上代码，抛出自定义异常时，再利用throws抛出外面处理，结果将是：null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java采用的异常处理机制是将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简洁、优雅，并易于维护。</p>
<h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>java.io.File类主要用于描述文件或目录路径的抽象表示信息，可以获取文件或目录的特征信息， 如：大小等。</p>
<table>
<thead>
<tr>
<th><strong>方法声明</strong></th>
<th><strong>功能概述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>File(String pathname)</td>
<td>根据参数指定的路径名来构造对象</td>
</tr>
<tr>
<td>File(String parent, String child)</td>
<td>根据参数指定的父路径和子路径信息构造对象</td>
</tr>
<tr>
<td>File(File parent, String child)</td>
<td>根据参数指定的父抽象路径和子路径信息构造对象</td>
</tr>
<tr>
<td>boolean exists()</td>
<td>测试此抽象路径名表示的文件或目录是否存在</td>
</tr>
<tr>
<td>String getName()</td>
<td>用于获取文件的名称</td>
</tr>
<tr>
<td>long length()</td>
<td>返回由此抽象路径名表示的文件的长度</td>
</tr>
<tr>
<td>long lastModiﬁed()</td>
<td>用于获取文件的最后一次修改时间</td>
</tr>
<tr>
<td>String getAbsolutePath()</td>
<td>用于获取绝对路径信息</td>
</tr>
<tr>
<td>boolean delete()</td>
<td>用于删除文件，当删除目录时要求是空目录</td>
</tr>
<tr>
<td>boolean createNewFile()</td>
<td>用于创建新的空文件</td>
</tr>
<tr>
<td>boolean mkdir()</td>
<td>用于创建目录</td>
</tr>
<tr>
<td>boolean mkdirs()</td>
<td>用于创建多级目录</td>
</tr>
<tr>
<td>File[] listFiles()</td>
<td>获取该目录下的所有内容</td>
</tr>
<tr>
<td>boolean isFile()</td>
<td>判断是否为文件</td>
</tr>
<tr>
<td>boolean isDirectory()</td>
<td>判断是否为目录</td>
</tr>
<tr>
<td>File[] listFiles(FileFilter ﬁlter)</td>
<td>获取目录下满足筛选器的所有内容</td>
</tr>
</tbody></table>
<p>文件操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造File类型的对象和“d:/a.txt”相关联</span></span><br><span class="line">    File f1 = <span class="keyword">new</span> File(<span class="string">&quot;d:/a.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(f1.exists())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名称是&quot;</span> + f1.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件长度是&quot;</span> + f1.length());</span><br><span class="line">        <span class="keyword">long</span> l = f1.lastModified();</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(l);</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日，HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;最后一次修改日期&quot;</span> + sdf.format(date));</span><br><span class="line">        System.out.println(<span class="string">&quot;绝对路径是&quot;</span> + f1.getAbsolutePath());</span><br><span class="line">        System.out.println(f1.delete() ? <span class="string">&quot;删除成功&quot;</span> : <span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(f1.createNewFile() ? <span class="string">&quot;创建成功&quot;</span> : <span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目录操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    File f1 = <span class="keyword">new</span> File(<span class="string">&quot;d:/aaa/bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(f1.exists())&#123;</span><br><span class="line">        System.out.println(f1.getName());</span><br><span class="line">        System.out.println(f1.delete() ? <span class="string">&quot;删除成功&quot;</span> : <span class="string">&quot;删除失败&quot;</span>);<span class="comment">//目录为空时才能删除</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(f1.mkdirs() ? <span class="string">&quot;创建成功&quot;</span> : <span class="string">&quot;创建失败&quot;</span>);<span class="comment">//mkdirs()创建多级目录</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历目录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File f1 = <span class="keyword">new</span> File(<span class="string">&quot;d:/aaa&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(f1.exists())&#123;</span><br><span class="line">    File[] f1Array = f1.listFiles();</span><br><span class="line">    <span class="keyword">for</span>(File f : f1Array)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f.isFile())&#123;</span><br><span class="line">            System.out.println(f.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f.isDirectory())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[&quot;</span> + f.getName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用筛选器遍历目录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义筛选器，筛选出以.docx结尾的文件</span></span><br><span class="line">FileFilter ff1 = <span class="keyword">new</span> FileFilter()&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//返回true筛选出来, 返回false不筛选</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file.getName().endsWith(<span class="string">&quot;docx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//lambda表达式定义筛选器</span></span><br><span class="line">FileFilter ff2 = (File file) -&gt; &#123; <span class="keyword">return</span> file.getName().endsWith(<span class="string">&quot;.docx&quot;</span>); &#125;;</span><br><span class="line"></span><br><span class="line">File f1 = <span class="keyword">new</span> File(<span class="string">&quot;d:/aaa&quot;</span>);</span><br><span class="line">File[] f1Array = f1.listFiles(ff1);</span><br><span class="line"><span class="keyword">for</span>(File f : f1Array)&#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历目录及其子目录，可以利用方法的递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印某目录下及其子目录所有的.docx文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String pathName)</span></span>&#123;</span><br><span class="line">    File f1 = <span class="keyword">new</span> File(pathName);</span><br><span class="line">    File[] f1Array = f1.listFiles();</span><br><span class="line">    <span class="keyword">if</span>(f1Array != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(File f : f1Array)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f.isFile() &amp;&amp; f.getName().endsWith(<span class="string">&quot;.docx&quot;</span>))&#123;</span><br><span class="line">                System.out.println(f);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(f.isDirectory())&#123;</span><br><span class="line">                show(f.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试，打印d盘下的所有.docx文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    show(<span class="string">&quot;d:/&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>IO就是Input和Output的简写，也就是输入和输出的含义。</p>
<p>IO流就是指读写数据时像流水一样从一端流到另外一端，因此得名为“流”。</p>
<h3 id="基本分类"><a href="#基本分类" class="headerlink" title="基本分类"></a>基本分类</h3><ul>
<li>按照读写数据的基本单位不同，分为 字节流 和 字符流。<br>字节流主要指以字节为单位进行数据读写的流，可以读写任意类型的文件。<br>字符流主要指以字符(2个字节)为单位进行数据读写的流，只能读写文本文件。</li>
<li>按照读写数据的方向不同，分为 输入流 和 输出流（站在程序的角度）。<br>输入流主要指从文件中读取数据内容输入到程序中，也就是读文件。<br>输出流主要指将程序中的数据内容输出到文件中，也就是写文件。</li>
<li>按照流的角色不同分为节点流和处理流。<br>节点流主要指直接和输入输出源对接的流。<br>处理流主要指需要建立在节点流的基础之上的流。</li>
</ul>
<h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><p><a href="https://imgtu.com/i/74xkgf"><img src="https://s4.ax1x.com/2022/01/23/74xkgf.png" alt="74xkgf.png"></a></p>
<p><a href="https://imgtu.com/i/74xXin"><img src="https://s4.ax1x.com/2022/01/23/74xXin.png" alt="74xXin.png"></a></p>
<h3 id="FileWriter类"><a href="#FileWriter类" class="headerlink" title="FileWriter类"></a>FileWriter类</h3><p>java.io.FileWriter类主要用于将文本内容写入到文本文件。</p>
<p>常用方法</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>FileWriter(String fileName)</td>
<td>根据参数指定的文件名构造对象</td>
</tr>
<tr>
<td>FileWriter(String fileName, boolean append)</td>
<td>以追加的方式根据参数指定的文件名来构造对象</td>
</tr>
<tr>
<td>void write(int c)</td>
<td>写入单个字符</td>
</tr>
<tr>
<td>void write(char[] cbuf, int off, int len)</td>
<td>将指定字符数组中从偏移量off开始的len个字符写入此文件输出流</td>
</tr>
<tr>
<td>void write(char[] cbuf)</td>
<td>将cbuf.length个字符从指定字符数组写入此文件输出流中</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新流</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//1,创建FileWriter类型引用与“d:/aaa.a.txt”相关联</span></span><br><span class="line">    fw= <span class="keyword">new</span> FileWriter(<span class="string">&quot;d:/aaa/a.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//2,通过输出流写入字符</span></span><br><span class="line">    fw.write(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    fw.write(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;写入成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//3,关闭资源</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != fw)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FileReader类"><a href="#FileReader类" class="headerlink" title="FileReader类"></a>FileReader类</h3><p>java.io.FileReader类主要用于从文本文件读取文本数据内容。</p>
<p>常用方法</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>FileReader(String fileName)</td>
<td>根据参数指定的文件名构造对象</td>
</tr>
<tr>
<td>int read()</td>
<td>读取单个字符的数据并返回，返回-1表示读取到末尾</td>
</tr>
<tr>
<td>int read(char[] cbuf, int offset, int length)</td>
<td>从输入流中将最多len个字符的数据读入一个字符数组中，返回读取到的字符个数，返回-1表示读取到末尾</td>
</tr>
<tr>
<td>int read(char[] cbuf)</td>
<td>从此输入流中将最多 cbuf.length 个字符的数据读入字符数组中，返回读取到的字符个数，返回-1表示读取到末尾</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileReader fr = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//1,创建FileReader类型的引用和“d:/aaa/a.txt”相关联</span></span><br><span class="line">    fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;d:/aaa/a.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//2,从输入流中读取数据</span></span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    <span class="keyword">while</span>((result = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读取结果：&quot;</span> + (<span class="keyword">char</span>)result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//3,关闭资源</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != fr)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            fr.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FileOutputStream类"><a href="#FileOutputStream类" class="headerlink" title="FileOutputStream类"></a>FileOutputStream类</h3><p>java.io.FileOutputStream类主要用于将图像数据之类的原始字节流写入到输出流中。</p>
<p>常用方法</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>FileOutputStream(String name)</td>
<td>根据参数指定的文件名来构造对象</td>
</tr>
<tr>
<td>FileOutputStream(String name, boolean append)</td>
<td>以追加的方式根据参数指定的文件名来构造对象</td>
</tr>
<tr>
<td>void write(int b)</td>
<td>将指定字节写入此文件输出流</td>
</tr>
<tr>
<td>void write(byte[] b, int off, int len)</td>
<td>将指定字节数组中从偏移量off开始的len个字节写入此文件输出流</td>
</tr>
<tr>
<td>void write(byte[] b)</td>
<td>将 b.length 个字节从指定字节数组写入此文件输出流中</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新此输出流并强制写出任何缓冲的输出字节</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<h3 id="FileInputStream类"><a href="#FileInputStream类" class="headerlink" title="FileInputStream类"></a>FileInputStream类</h3><p>java.io.FileInputStream类主要用于从输入流中以字节流的方式读取图像数据等。</p>
<p>常用方法</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>FileInputStream(String name)</td>
<td>根据参数指定的文件路径名来构造对象</td>
</tr>
<tr>
<td>int read()</td>
<td>从输入流中读取单个字节的数据并返回，返回-1表示读取到末尾</td>
</tr>
<tr>
<td>int read(byte[] b, int off, int len)</td>
<td>从此输入流中将最多len个字节的数据读入字节数组中，返回读取到的字节个数，返回-1表示读取到末尾</td>
</tr>
<tr>
<td>int read(byte[] b)</td>
<td>从此输入流中将最多 b.length 个字节的数据读入字节数组中，返回读取到的字节个数，返回-1表示读取到末尾</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
<tr>
<td>int available()</td>
<td>获取输入流所关联文件的大小</td>
</tr>
</tbody></table>
<p><strong>FileOutputStream</strong>类和<strong>FileInputStream</strong>类的用法与<strong>FileWriter</strong>类和<strong>FileReader</strong>类的用法差不多</p>
<p>拷贝文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:/aaa/a.png&quot;</span>);</span><br><span class="line">    fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:/aaa/b.png&quot;</span>);</span><br><span class="line">    <span class="comment">/*拷贝方式一：读一个写一个*/</span></span><br><span class="line">    <span class="comment">//int result;</span></span><br><span class="line">    <span class="comment">//while((result = fis.read()) != -1)&#123;</span></span><br><span class="line">    	<span class="comment">//fos.write(result);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">/*拷贝方式二：一次性全部读出来，再全部写进去*/</span></span><br><span class="line">    <span class="comment">//byte[] arr = new byte[fis.available()];</span></span><br><span class="line">    <span class="comment">//fis.read(arr);</span></span><br><span class="line">    <span class="comment">//fos.write(arr);</span></span><br><span class="line">    <span class="comment">/*拷贝方式三：设定合理缓冲区（推荐）*/</span></span><br><span class="line">    <span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = fis.read(arr)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        fos.write(arr, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != fos)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != fis)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BufferedOutputStream类"><a href="#BufferedOutputStream类" class="headerlink" title="BufferedOutputStream类"></a>BufferedOutputStream类</h3><p>java.io.BufferedOutputStream类主要用于描述缓冲输出流，此时不用为写入的每个字节调用底层系统。</p>
<p>常用方法</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>BufferedOutputStream(OutputStream out)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>BufferedOutputStream(OutputStream out, int size)</td>
<td>根据参数指定的引用和缓冲区大小来构造对象</td>
</tr>
<tr>
<td>void write(int b)</td>
<td>写入单个字节</td>
</tr>
<tr>
<td>void write(byte[] b, int off, int len)</td>
<td>写入字节数组中的一部分数据</td>
</tr>
<tr>
<td>void write(byte[] b)</td>
<td>写入参数指定的整个字节数组</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新流</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<h3 id="BufferedInputStream类"><a href="#BufferedInputStream类" class="headerlink" title="BufferedInputStream类"></a>BufferedInputStream类</h3><p>java.io.BufferedInputStream类主要用于描述缓冲输入流。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>BufferedInputStream(InputStream in)</td>
<td>根据参数指定的引用构造对象</td>
</tr>
<tr>
<td>BufferedInputStream(InputStream in, int size)</td>
<td>根据参数指定的引用和缓冲区大小构造对象</td>
</tr>
<tr>
<td>int read()</td>
<td>读取单个字节</td>
</tr>
<tr>
<td>int read(byte[] b, int off, int len)</td>
<td>读取len个字节</td>
</tr>
<tr>
<td>int read(byte[] b)</td>
<td>读取b.length个字节</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<p>以后开发中推荐使用这类带有(Buffered)缓冲区的输入输出流，用法和上面差不多</p>
<p>拷贝文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:/aaa/a.png&quot;</span>));</span><br><span class="line">    bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:/aaa/b.png&quot;</span>));</span><br><span class="line">    <span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = bis.read(arr)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        bos.write(arr, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bos != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            bos.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(bis !=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            bis.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以在代码开头和结尾利用<code>System.currentTimeMillis()</code>测试运行速度，的确快了不少。</p>
<h3 id="BufferedWriter类"><a href="#BufferedWriter类" class="headerlink" title="BufferedWriter类"></a>BufferedWriter类</h3><p>java.io.BufferedWriter类主要用于写入单个字符、字符数组以及字符串到输出流中。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>BufferedWriter(Writer out)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>BufferedWriter(Writer out, int sz)</td>
<td>根据参数指定的引用和缓冲区大小来构造对象</td>
</tr>
<tr>
<td>void write(int c)</td>
<td>写入单个字符到输出流中</td>
</tr>
<tr>
<td>void write(char[] cbuf, int off, int len)</td>
<td>将字符数组cbuf中从下标off开始的len个字符写入输出流中</td>
</tr>
<tr>
<td>void write(char[] cbuf)</td>
<td>将字符串数组cbuf中所有内容写入输出流中</td>
</tr>
<tr>
<td>void write(String s, int off, int len)</td>
<td>将参数s中下标从off开始的len个字符写入输出流中</td>
</tr>
<tr>
<td>void write(String str)</td>
<td>将参数指定的字符串内容写入输出流中</td>
</tr>
<tr>
<td>void newLine()</td>
<td>用于写入行分隔符到输出流中</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新流</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<h3 id="BufferedReader类"><a href="#BufferedReader类" class="headerlink" title="BufferedReader类"></a>BufferedReader类</h3><p>java.io.BufferedReader类用于从输入流中读取单个字符、字符数组以及字符串。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>BufferedReader(Readerin)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>BufferedReader(Readerin, int sz)</td>
<td>根据参数指定的引用和缓冲区大小来构造对象</td>
</tr>
<tr>
<td>int read()</td>
<td>从输入流读取单个字符，读取到末尾则返回-1，否则返回实际读取到的字符内容</td>
</tr>
<tr>
<td>int read(char[] cbuf, int off, int len)</td>
<td>从输入流中读取len个字符放入数组cbuf中下标从off开始的位置上，若读取到末尾则返回-1，否则返回实际读取到的字符个数</td>
</tr>
<tr>
<td>int read(char[] cbuf)</td>
<td>从输入流中读满整个数组cbuf</td>
</tr>
<tr>
<td>String readLine()</td>
<td>读取一行字符串并返回，返回null表示读取到末尾</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<p>拷贝文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;d:/aaa/a.txt&quot;</span>));</span><br><span class="line">    bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;d:/aaa/b.txt&quot;</span>));</span><br><span class="line">    String s;</span><br><span class="line">    <span class="keyword">while</span>((s = br.readLine()) != <span class="keyword">null</span>)&#123;  <span class="comment">//注意放回null才是末尾，而不是-1</span></span><br><span class="line">        bw.write(s);</span><br><span class="line">        bw.newLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != bw)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            bw.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != br)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PrintStream类"><a href="#PrintStream类" class="headerlink" title="PrintStream类"></a>PrintStream类</h3><p>java.io.PrintStream类主要用于更加方便地打印各种数据内容。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>PrintStream(OutputStream out)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>void print(String s)</td>
<td>用于将参数指定的字符串内容打印出来</td>
</tr>
<tr>
<td>void println(String x)</td>
<td>用于打印字符串后并终止该行</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新流</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭输出流并释放有关的资源</td>
</tr>
</tbody></table>
<h3 id="PrintWriter类"><a href="#PrintWriter类" class="headerlink" title="PrintWriter类"></a>PrintWriter类</h3><p>java.io.PrintWriter类主要用于将对象的格式化形式打印到文本输出流。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>PrintWriter(Writer out)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>void print(String s)</td>
<td>将参数指定的字符串内容打印出来</td>
</tr>
<tr>
<td>void println(String x)</td>
<td>打印字符串后并终止该行</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新流</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭流对象并释放有关的资源</td>
</tr>
</tbody></table>
<ul>
<li>案例题目<br>不断地提示用户输入要发送的内容，若发送的内容是”bye”则聊天结束，否则将用户输入的内容写入到文件d:/a.txt中。<br>要求使用PrintStream类负责将数据写入文件 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintWriter pw = <span class="keyword">null</span>;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> who = <span class="keyword">true</span>;</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;d:/aaa/c.txt&quot;</span>, <span class="keyword">true</span>)); <span class="comment">//追加模式</span></span><br><span class="line">    <span class="comment">//聊天开始</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请&quot;</span> + (who?<span class="string">&quot;张三&quot;</span>:<span class="string">&quot;李四&quot;</span>) + <span class="string">&quot;输入聊天内容：&quot;</span>);</span><br><span class="line">        s = sc.next();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(s))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;聊天结束！&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Date d = <span class="keyword">new</span> Date();</span><br><span class="line">        pw.println(sdf.format(d) + (who?<span class="string">&quot;张三&quot;</span>:<span class="string">&quot;李四&quot;</span>) + <span class="string">&quot;说：&quot;</span> + s);</span><br><span class="line">        who = !who;</span><br><span class="line">    &#125;</span><br><span class="line">    pw.println();</span><br><span class="line">    pw.println();</span><br><span class="line">    pw.println();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != pw)&#123;</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="OutputStreamWriter类"><a href="#OutputStreamWriter类" class="headerlink" title="OutputStreamWriter类"></a>OutputStreamWriter类</h3><p>java.io.OutputStreamWriter类主要用于实现从字符流到字节流的转换。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>OutputStreamWriter(OutputStream out)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>OutputStreamWriter(OutputStream out, String charsetName)</td>
<td>根据参数指定的引用和编码构造对象</td>
</tr>
<tr>
<td>void write(String str)</td>
<td>将参数指定的字符串写入</td>
</tr>
<tr>
<td>void flush()</td>
<td>刷新流</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭输出流并释放有关的资源</td>
</tr>
</tbody></table>
<h3 id="InputStreamReader类"><a href="#InputStreamReader类" class="headerlink" title="InputStreamReader类"></a>InputStreamReader类</h3><p>java.io.InputStreamReader类主要用于实现从字节流到字符流的转换。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>InputStreamReader(InputStream in)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>InputStreamReader(InputStream in, String charsetName)</td>
<td>根据参数指定的引用和编码来构造对象</td>
</tr>
<tr>
<td>int read(char[] cbuf)</td>
<td>读取字符数据到参数指定的数组</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭输出流并释放有关的资源</td>
</tr>
</tbody></table>
<h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p><strong>由来</strong></p>
<p>计算机只能识别二进制数据，早期就是电信号。为了方便计算机可以识别各个国家的文字，就需要将各个国家的文字采用数字编号的方式进行描述并建立对应的关系表，该表就叫做编码表。</p>
<p><strong>常见字符编码</strong></p>
<ul>
<li>ASCII：美国标准信息交换码， 使用一个字节的低7位二位进制进行表示。 </li>
<li>ISO8859-1：拉丁码表，欧洲码表，使用一个字节的8位二进制进行表示。</li>
<li>GB2312：中国的中文编码表，最多使用两个字节16位二进制为进行表示。</li>
<li>GBK：中国的中文编码表升级，融合了更多的中文文字符号，最多使用两个字节16位二进制位表示。</li>
<li>Unicode：国际标准码，融合了目前人类使用的所有字符，为每个字符分配唯一的字符码。所有的文字都用两个字节16位二进制位来表示。</li>
</ul>
<p><strong>发展</strong></p>
<ul>
<li>面向传输的众多 UTF（UCS Transfer Format）标准出现了，UTF-8就是每次8个位传输数据，而<br>UTF-16就是每次16个位。这是为传输而设计的编码并使编码无国界，这样就可以显示全世界上所有文化的字符了。</li>
<li>Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯一确定的编号，具体存储成什么样的字节流，取决于字符编码方案。推荐的Unicode编码是UTF-8和UTF-16。</li>
<li>UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</li>
</ul>
<h3 id="DataOutputStream类"><a href="#DataOutputStream类" class="headerlink" title="DataOutputStream类"></a>DataOutputStream类</h3><p>java.io.DataOutputStream类主要用于以适当的方式将基本数据类型写入输出流中。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>DataOutputStream(OutputStream out)</td>
<td>根据参数指定的引用构造对象 OutputStream类是个抽象类，实参需要传递子类对象</td>
</tr>
<tr>
<td>void writeInt(int v)</td>
<td>用于将参数指定的整数一次性写入输出流，优先写入高字节</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭文件输出流并释放有关的资源</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:/aaa/d.txt&quot;</span>));</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">123</span>;</span><br><span class="line">    dos.writeInt(num);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != dos)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DataInputStream类"><a href="#DataInputStream类" class="headerlink" title="DataInputStream类"></a>DataInputStream类</h3><p>java.io.DataInputStream类主要用于从输入流中读取基本数据类型的数据。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>DataInputStream(InputStream in)</td>
<td>根据参数指定的引用来构造对象 InputStream类是抽象类，实参需要传递子类对象</td>
</tr>
<tr>
<td>int readInt()</td>
<td>用于从输入流中一次性读取一个整数数据并返回</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭文件输出流并释放有关的资源</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:/aaa/d.txt&quot;</span>));</span><br><span class="line">    <span class="keyword">int</span> result = dis.readInt();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != dis)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ObjectOutputStream类"><a href="#ObjectOutputStream类" class="headerlink" title="ObjectOutputStream类"></a>ObjectOutputStream类</h3><p>java.io.ObjectOutputStream类主要用于将一个对象的所有内容整体写入到输出流中。</p>
<ul>
<li>只能将支持 java.io.Serializable 接口的对象写入流中。</li>
<li>类通过实现 java.io.Serializable 接口以启用其序列化功能。</li>
<li>所谓<strong>序列化</strong>主要指将一个<strong>对象</strong>需要存储的相关信息有效组织成<strong>字节序列</strong>的转化过程。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>ObjectOutputStream(OutputStream out)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>void writeObject(Object obj)</td>
<td>用于将参数指定的对象整体写入到输出流中</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭输出流并释放有关的资源</td>
</tr>
</tbody></table>
<h3 id="ObjectInputStream类"><a href="#ObjectInputStream类" class="headerlink" title="ObjectInputStream类"></a>ObjectInputStream类</h3><p>java.io.ObjectInputStream类主要用于从输入流中一次性将对象整体读取出来。</p>
<p>所谓<strong>反序列化</strong>主要指将有效组织的<strong>字节序列</strong>恢复为一个<strong>对象</strong>及相关信息的转化过程。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>ObjectInputStream(InputStream in)</td>
<td>根据参数指定的引用来构造对象</td>
</tr>
<tr>
<td>Object readObject()</td>
<td>主要用于从输入流中读取一个对象并返回 无法通过返回值来判断是否读取到文件的末尾</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭输入流并释放有关的资源</td>
</tr>
</tbody></table>
<ul>
<li>案例：<br>自定义Person类，将Person的一个实例对象写入文件中，再从文件读取出来</li>
</ul>
<p>自定义Person类，需要实现Serializable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8693454448435568461L</span>;  <span class="comment">//提供一个版本号</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="comment">/*transient*/</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:/aaa/h.txt&quot;</span>));</span><br><span class="line">    oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;zhang&quot;</span>,<span class="number">18</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != oos)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:/aaa/h.txt&quot;</span>));</span><br><span class="line">    Object obj = ois.readObject();</span><br><span class="line">    System.out.println(obj);   <span class="comment">//结果：Person&#123;name=&#x27;zhang&#x27;, age=18&#125;</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != ois)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>补充</strong></p>
<p>（1）序列化版本号<br>序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。<br>在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，<br>如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常(InvalidCastException)。</p>
<p>（2）transient关键字<br>transient是Java语言的关键字，用来表示一个域不是该对象串行化的一部分。<br>当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。<br>（即被transient修饰的成员不进行序列化，也就是不保存。假设对Person中的age变量用transient修饰，则age变量不会被保存到文件中，读取的时候，age变量也是默认值0。）</p>
<p>（3）经验的分享<br>当希望将多个对象写入文件时，通常建议将多个对象放入一个集合中，<br>然后将集合这个整体看做一个对象写入输出流中，此时只需要调用一次readObject方法就可以将整个集合的数据读取出来，<br>从而避免了通过返回值进行是否达到文件末尾的判断。</p>
<h3 id="RandomAccessFile类"><a href="#RandomAccessFile类" class="headerlink" title="RandomAccessFile类"></a>RandomAccessFile类</h3><p>java.io.RandomAccessFile类主要支持对随机访问文件的读写操作。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>RandomAccessFile(String name, String mode)</td>
<td>根据参数指定的名称和模式构造对象，r: 以只读方式打开，rw：打开以便读取和写入，rwd:打开以便读取和写入，同步文件内容的更新，rws:打开以便读取和写入，同步文件内容和元数据的更新</td>
</tr>
<tr>
<td>int read()</td>
<td>读取单个字节的数据</td>
</tr>
<tr>
<td>void seek(long pos)</td>
<td>用于设置从此文件的开头开始测量的文件指针偏移量</td>
</tr>
<tr>
<td>void write(int b)</td>
<td>将参数指定的单个字节写入</td>
</tr>
<tr>
<td>void close()</td>
<td>用于关闭流并释放有关的资源</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RandomAccessFile raf = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;d:/aaa/a.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    raf.seek(<span class="number">2</span>);   <span class="comment">//光标偏移两个位置</span></span><br><span class="line">    <span class="keyword">int</span> res = raf.read();</span><br><span class="line">    System.out.println((<span class="keyword">char</span>) res);</span><br><span class="line">    raf.write(<span class="string">&#x27;Q&#x27;</span>);   <span class="comment">//相当于改写，覆盖</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != raf)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            raf.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p><strong>程序和进程</strong></p>
<ul>
<li><p>程序：数据结构 + 算法，主要指存放在硬盘上的可执行文件。</p>
</li>
<li><p>进程：主要指运行在内存中的可执行文件。</p>
</li>
</ul>
<p>目前主流的操作系统都支持多进程，为了让操作系统同时可以执行多个任务，但进程是重量级的，也就是新建一个进程会消耗CPU和内存空间等系统资源，因此进程的数量比较局限。</p>
<p>  <strong>线程</strong></p>
<ul>
<li>为了解决上述问题就提出线程的概念，线程就是进程内部的程序流，也就是说操作系统内部支持多进程的，而每个进程的内部又是支持多线程的，线程是轻量的，新建线程会共享所在进程的系统资源，因此目前主流的开发都是采用多线程。</li>
<li>多线程是采用时间片轮转法来保证多个线程的并发执行，所谓并发就是指宏观并行微观串行的机制。</li>
</ul>
<h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><ul>
<li>java.lang.Thread类代表线程，任何线程对象都是Thread类（子类）的实例。</li>
<li>Thread类是线程的模板，封装了复杂的线程开启等操作，封装了操作系统的差异性。</li>
</ul>
<p><strong>相关方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Thread()</td>
<td>使用无参的方式构造对象</td>
</tr>
<tr>
<td>Thread(String name)</td>
<td>根据参数指定的名称来构造对象</td>
</tr>
<tr>
<td>Thread(Runnable target)</td>
<td>根据参数指定的引用来构造对象，其中Runnable是个接口类型</td>
</tr>
<tr>
<td>Thread(Runnable target, String name)</td>
<td>根据参数指定引用和名称来构造对象</td>
</tr>
<tr>
<td>void run()</td>
<td>若使用Runnable引用构造了线程对象，调用该方法时最终调用接口中的版本若没有使用Runnable引用构造线程对象，调用该方法时则啥也不做</td>
</tr>
<tr>
<td>void start()</td>
<td>用于启动线程，Java虚拟机会自动调用该线程的run方法</td>
</tr>
</tbody></table>
<p><strong>创建线程方法</strong></p>
<ul>
<li>自定义类继承Thread类并重写run方法，然后创建该类的对象调用start方法。</li>
<li>自定义类实现Runnable接口并重写run方法，创建该类的对象作为实参来构造Thread类型的对象，然后使用Thread类型的对象调用start方法。</li>
</ul>
<p>继承Thread类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">100</span>; i+=<span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ThreadTest tt = <span class="keyword">new</span> ThreadTest();</span><br><span class="line">    <span class="comment">//直接调用run()方法，和普通的方法一样，应该调用start()方法，才会启动线程。</span></span><br><span class="line">    <span class="comment">//rt.run();   </span></span><br><span class="line">    tt.start();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i+=<span class="number">2</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---主线程&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现Runnable接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">100</span>; i+=<span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RunnableTest rt = <span class="keyword">new</span> RunnableTest();</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(rt);</span><br><span class="line">    t.start();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i+=<span class="number">2</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---主线程&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行流程</strong></p>
<ul>
<li>执行main方法的线程叫做主线程，执行run方法的线程叫做新线程/子线程。</li>
<li>main方法是程序的入口，对于start方法之前的代码来说，由主线程执行一次，当start方法调用成功后线程的个数由1个变成了2个，新启动的线程去执行run方法的代码，主线程继续向下执行，两个线程各自独立运行互不影响。</li>
<li>当run方法执行完毕后子线程结束，当main方法执行完毕后主线程结束。</li>
<li>两个线程执行没有明确的先后执行次序，由操作系统调度算法来决定。</li>
</ul>
<p><strong>两种创建方式的比较</strong></p>
<p>继承Thread类的方式代码简单，但是若该类继承Thread类后则无法继承其它类，<br>而实现Runnable接口的方式代码复杂，但不影响该类继承其它类以及实现其它接口，<br>因此以后的开发中推荐使用第二种方式。</p>
<p><strong>匿名内部类的方式创建</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1,继承Thread方式，的匿名内部类</span></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    t1.start();</span><br><span class="line">    <span class="comment">//简化写法</span></span><br><span class="line">    <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2,实现Runnable接口的，匿名内部类</span></span><br><span class="line">    Runnable r1  = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(r1);</span><br><span class="line">    t2.start();</span><br><span class="line">    <span class="comment">//lambda表达式</span></span><br><span class="line">    Runnable r2 = () -&gt; &#123;System.out.println(<span class="string">&quot;子线程4&quot;</span>);&#125;;</span><br><span class="line">    Thread t3 = <span class="keyword">new</span> Thread(r2);</span><br><span class="line">    t3.start();</span><br><span class="line">    <span class="comment">//再简化写法</span></span><br><span class="line">    <span class="keyword">new</span> Thread( () -&gt; &#123;System.out.println(<span class="string">&quot;子线程5&quot;</span>);&#125; ).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><p><a href="https://imgtu.com/i/HSA0TP"><img src="https://s4.ax1x.com/2022/01/29/HSA0TP.png" alt="HSA0TP.png"></a></p>
<ul>
<li>新建状态：使用new关键字创建之后进入的状态，此时线程并没有开始执行。</li>
<li>就绪状态：调用start方法后进入的状态，此时线程还是没有开始执行。</li>
<li>运行状态：使用线程调度器调用该线程后进入的状态，此时线程开始执行，当线程的时间片执行完毕但任务没有完成时回到就绪状态</li>
<li>消亡状态：当线程的任务执行完成后进入的状态，此时线程已经终止。</li>
<li>阻塞状态：当线程执行的过程中发生了阻塞事件进入的状态，如：sleep方法。<br>阻塞状态解除后进入就绪状态。</li>
</ul>
<h3 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h3><p><strong>线程的编号和名称</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>long getId()</td>
<td>获取调用对象所表示线程的编号</td>
</tr>
<tr>
<td>String getName()</td>
<td>获取调用对象所表示线程的名称</td>
</tr>
<tr>
<td>void setName(String name)</td>
<td>设置/修改线程的名称为参数指定的数值</td>
</tr>
<tr>
<td>static Thread currentThread()</td>
<td>获取当前正在执行线程的引用</td>
</tr>
</tbody></table>
<ul>
<li>案例题目<br>自定义线程类，在run方法中先打印当前线程的编号和名称，然后将线程的名称修改为”zhangfei”后再次打印编号和名称。<br>要求在main方法中也要打印主线程的编号和名称。</li>
</ul>
<p>继承Thread类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test1</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);     <span class="comment">//Thread(String name)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程，编号：&quot;</span> + getId() + <span class="string">&quot;，名称：&quot;</span> + getName());</span><br><span class="line">        setName(<span class="string">&quot;zhangfei&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程，编号：&quot;</span> + getId() + <span class="string">&quot;，名称：&quot;</span> + getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Test1 t = <span class="keyword">new</span> Test1(<span class="string">&quot;guanyu&quot;</span>);  <span class="comment">//设定线程名称，</span></span><br><span class="line">    t.start();</span><br><span class="line"></span><br><span class="line">    Thread t1 = Thread.currentThread();</span><br><span class="line">    System.out.println(<span class="string">&quot;---主线程，编号：&quot;</span> + t1.getId() + <span class="string">&quot;，名称&quot;</span> + t1.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现Runnable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();  <span class="comment">//需要获取当前线程</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子线程，编号&quot;</span> + t.getId() + <span class="string">&quot;，名称：&quot;</span> + t.getName());</span><br><span class="line">        t.setName(<span class="string">&quot;zhangfei&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程，编号&quot;</span> + t.getId() + <span class="string">&quot;，名称：&quot;</span> + t.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Test2 t2 = <span class="keyword">new</span> Test2();</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(t2, <span class="string">&quot;guanyu&quot;</span>);</span><br><span class="line">    t.start();</span><br><span class="line"></span><br><span class="line">    Thread t1 = Thread.currentThread();</span><br><span class="line">    System.out.println(<span class="string">&quot;---主线程，编号&quot;</span> + t1.getId() + <span class="string">&quot;，名称：&quot;</span> + t1.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其他方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>static void yield()</td>
<td>当前线程让出处理器（离开Running状态），使当前线程进入Runnable 状态等待</td>
</tr>
<tr>
<td>static void sleep(times)</td>
<td>使当前线程从 Running 放弃处理器进入Block状态, 休眠times毫秒, 再返回到Runnable如果其他线程打断当前线程的Block(sleep), 就会发生InterruptedException。</td>
</tr>
<tr>
<td>int getPriority()</td>
<td>获取线程的优先级</td>
</tr>
<tr>
<td>void setPriority(int newPriority)</td>
<td>修改线程的优先级。 优先级越高的线程不一定先执行，但该线程获取到时间片的机会会更多一些</td>
</tr>
<tr>
<td>void join()</td>
<td>等待该线程终止</td>
</tr>
<tr>
<td>void join(long millis)</td>
<td>等待参数指定的毫秒数</td>
</tr>
<tr>
<td>boolean isDaemon()</td>
<td>用于判断是否为守护线程</td>
</tr>
<tr>
<td>void setDaemon(boolean on)</td>
<td>用于设置线程为守护线程</td>
</tr>
</tbody></table>
<p><strong>sleep方法的使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            Date d1 = <span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">            System.out.println( sdf.format(d1) );  <span class="comment">//打印当前时间</span></span><br><span class="line">            <span class="comment">//休眠1秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Test3 t = <span class="keyword">new</span> Test3();</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="comment">//主线程等待5秒后结束子线程</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始等待。。&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        t.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>线程优先级管理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程优先级：&quot;</span> + getPriority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Test4 t = <span class="keyword">new</span> Test4();</span><br><span class="line">        <span class="comment">//设置优先级：1到10之间</span></span><br><span class="line">        <span class="comment">//Thread.MAX_PRIORITY(相当于10)</span></span><br><span class="line">        <span class="comment">//Thread.MIN_PRIORITY(相当于1)</span></span><br><span class="line">        <span class="comment">//Thread.NORM_PRIORITY(相当于5)</span></span><br><span class="line">        t.setPriority(<span class="number">10</span>);    <span class="comment">//优先级：1到10之间</span></span><br><span class="line">        t.start();</span><br><span class="line">        Thread  t1 = Thread.currentThread();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程优先级：&quot;</span> + t1.getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>线程的等待</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">        Test5 t = <span class="keyword">new</span> Test5();</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//当前线程（主线程）等待调用线程（子线程）结束，才继续执行下去。</span></span><br><span class="line">            t.join();</span><br><span class="line">            <span class="comment">//t.join(2000);  //最多等指定的毫秒数。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>守护线程</strong></p>
<p>守护线程会随着主线程的结束而结束，默认线程不是守护线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test6</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(isDaemon() ? <span class="string">&quot;是守护线程&quot;</span> : <span class="string">&quot;不是守护线程&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">        Test6 t = <span class="keyword">new</span> Test6();</span><br><span class="line">        <span class="comment">//子线程设为守护线程：随着主线程的结束而结束。</span></span><br><span class="line">        t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h3><ul>
<li>当多个线程同时访问同一种共享资源时，可能会造成数据的覆盖等不一致性问题，此时就需要对线程之间进行通信和协调，该机制就叫做线程的同步机制。</li>
<li>多个线程并发读写同一个临界资源时会发生线程并发安全问题。</li>
<li>异步操作:多线程并发的操作，各自独立运行。</li>
<li>同步操作:多线程串行的操作，先后执行的顺序。</li>
</ul>
<p><strong>问题的产生</strong></p>
<p>当两个线程同时对同一个账户进行取款时，导致最终的账户余额不合理。</p>
<p>引发原因：线程一执行取款时还没来得及将取款后的余额写入后台，线程二就已经开始取款。</p>
<p><strong>解决</strong></p>
<p>在Java语言中使用synchronized关键字来实现同步/对象锁机制从而保证线程执行的原子性，具体方式如下：</p>
<ul>
<li>使用同步代码块的方式实现部分代码的锁定，格式如下：<br>synchronized(类类型的引用) {<pre><code>      编写所有需要锁定的代码；
</code></pre>
 }  </li>
<li>使用同步方法的方式实现所有代码的锁定。<br>直接使用synchronized关键字来修饰整个方法即可该方式等价于:<br>synchronized(this) { 整个方法体的代码 }   </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> money;</span><br><span class="line">    <span class="keyword">private</span> Deom d = <span class="keyword">new</span> Deom();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span> <span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程：&quot;</span> + Thread.currentThread().getId() + <span class="string">&quot;启动中&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span>(d<span class="comment">/*this*/</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tem = money;</span><br><span class="line">            <span class="keyword">if</span>(tem&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;取款中。。 &quot;</span>);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                tem -= <span class="number">200</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            money = tem;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;卡内金额：&quot;</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deom</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Account a = <span class="keyword">new</span> Account(<span class="number">1000</span>);</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(a);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(a);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>静态方法是锁定</strong></p>
<p>当我们对一个静态方法加锁，如:<br>public synchronized static void xxx(){….}<br>那么该方法锁的对象是类对象。每个类都有唯一的一个类对象。获取类对象的方式:类名.class。</p>
<p>静态方法与非静态方法同时使用了synchronized后它们之间是非互斥关系的。<br>原因在于：静态方法锁的是类对象而非静态方法锁的是当前方法所属对象。</p>
<p><strong>注意事项</strong></p>
<p>使用synchronized保证线程同步应当注意: 多个需要同步的线程在访问同步块时，看到的应该是同一个锁对象引用。<br>在使用同步块时应当尽量减少同步范围以提高并发的执行效率。</p>
<p><strong>线程安全和线程不安全</strong></p>
<p>线程安全就是有了锁住代码的特点，串行的操作，虽然变安全了，但是效率降低。</p>
<ul>
<li>StringBuffer类是线程安全的类，但StringBuilder类不是线程安全的类。</li>
<li>Vector类和 Hashtable类是线程安全的类，但ArrayList类和HashMap类不是线程安全的类。</li>
<li>Collections.synchronizedList() 和 Collections.synchronizedMap()等方法实现安全。</li>
</ul>
<p><strong>死锁的概念</strong></p>
<ul>
<li>线程一执行的代码：<br>public void run(){<pre><code>synchronized(a)&#123;    //持有对象锁a，等待对象锁b
   synchronized(b)&#123;
       编写锁定的代码;
   &#125;
&#125;
</code></pre>
}</li>
<li>线程二执行的代码：<br>public void run(){<pre><code>synchronized(b)&#123;    //持有对象锁b，等待对象锁a
   synchronized(a)&#123;
       编写锁定的代码;
   &#125;
&#125;
</code></pre>
}</li>
</ul>
<p>注意：在以后的开发中尽量减少同步的资源，减少同步代码块的嵌套结构的使用！</p>
<p><strong>使用Lock锁实现线程同步</strong></p>
<ul>
<li>从Java5开始提供了更强大的线程同步机制—使用显式定义的同步锁对象来实现。</li>
<li>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。</li>
<li>该接口的主要实现类是ReentrantLock类，该类拥有与synchronized相同的并发性，在以后的线程安全控制中，经常使用ReentrantLock类显式加锁和释放锁。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>ReentrantLock()</td>
<td>使用无参方式构造对象</td>
</tr>
<tr>
<td>void lock()</td>
<td>获取锁</td>
</tr>
<tr>
<td>void unlock()</td>
<td>释放锁</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account3</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> money;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();  <span class="comment">//获取Lock锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account3</span> <span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程：&quot;</span> + Thread.currentThread().getId() + <span class="string">&quot;启动中&quot;</span>);</span><br><span class="line">        <span class="comment">//上锁</span></span><br><span class="line">        lock.lock();   </span><br><span class="line">        <span class="keyword">int</span> tem = money;</span><br><span class="line">        <span class="keyword">if</span>(tem&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;取款中。。 &quot;</span>);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            tem -= <span class="number">200</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        money = tem;</span><br><span class="line">        <span class="comment">//解锁</span></span><br><span class="line">        lock.unlock();   </span><br><span class="line">        System.out.println(<span class="string">&quot;卡内金额：&quot;</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Lock锁与synchronized方式的比较</strong></p>
<ul>
<li>Lock是显式锁，需要手动实现开启和关闭操作，而synchronized是隐式锁，执行锁定代码后自动释放。</li>
<li>Lock只有同步代码块方式的锁，而synchronized有同步代码块方式和同步方法两种锁。</li>
</ul>
<p>使用Lock锁方式时，Java虚拟机将花费较少的时间来调度线程，因此性能更好。</p>
<h3 id="线程之间的通信"><a href="#线程之间的通信" class="headerlink" title="线程之间的通信"></a>线程之间的通信</h3><p><strong>Object的常用方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void wait()</td>
<td>用于使得线程进入等待状态，直到其它线程调用notify()或notifyAll()方法</td>
</tr>
<tr>
<td>void wait(long timeout)</td>
<td>用于进入等待状态，直到其它线程调用方法或参数指定的毫秒数已经过去为止</td>
</tr>
<tr>
<td>void notify()</td>
<td>用于唤醒等待的单个线程</td>
</tr>
<tr>
<td>void notifyAll()</td>
<td>用于唤醒等待的所有线程</td>
</tr>
</tbody></table>
<ul>
<li>案例：<br>两个线程打印0到20，要求：有序的一人打印一下来。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;=<span class="number">20</span>) &#123;</span><br><span class="line">                    notify();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程&quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; : &quot;</span> + i);</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                        wait();   <span class="comment">//进入阻塞状态</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    notify();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test1 t = <span class="keyword">new</span> Test1();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生产者和消费者模型"><a href="#生产者和消费者模型" class="headerlink" title="生产者和消费者模型"></a>生产者和消费者模型</h3><p><a href="https://imgtu.com/i/HSKQPI"><img src="https://s4.ax1x.com/2022/01/29/HSKQPI.png" alt="HSKQPI.png"></a></p>
<p>生产者输入数据到仓库中，消费者从仓库中输出数据。<br>每次操作或访问仓库时应该锁住仓库。<br>当仓库满了，生产者应该停止生产。<br>当仓库空了，消费者应该停止消费。</p>
<p><strong>代码实现如下：</strong></p>
<p>仓库类StoreHouse</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreHouse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;  <span class="comment">//仓库存储量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">                notify();</span><br><span class="line">                <span class="keyword">if</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;生产者线程正在生产第&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">                notify();</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;消费者线程正在消费第&quot;</span> + i + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">                    i--;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生产者线程类ProduceThread</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProduceThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="comment">//声明一个仓库类型的引用作为成员变量，是为了能调用仓库类中的生产方法</span></span><br><span class="line">    <span class="comment">//合成复用原则</span></span><br><span class="line">    <span class="keyword">private</span> StoreHouse s;</span><br><span class="line">    <span class="comment">//为了确保两个线程公用用一个仓库</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProduceThread</span><span class="params">(StoreHouse s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        s.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消费者线程类ConsumerThread</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StoreHouse s;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsumerThread</span><span class="params">(StoreHouse s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        s.consumer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建仓库</span></span><br><span class="line">    StoreHouse sh = <span class="keyword">new</span> StoreHouse();</span><br><span class="line">    <span class="comment">//创建生产者线程</span></span><br><span class="line">    ProduceThread pt = <span class="keyword">new</span> ProduceThread(sh);</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(pt);</span><br><span class="line">    <span class="comment">//创建消费者线程</span></span><br><span class="line">    ConsumerThread ct = <span class="keyword">new</span> ConsumerThread(sh);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(ct);</span><br><span class="line">    <span class="comment">//开始模拟</span></span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Callable接口创建线程"><a href="#Callable接口创建线程" class="headerlink" title="Callable接口创建线程"></a>Callable接口创建线程</h3><p><strong>Callable接口</strong></p>
<p>从Java5开始新增加创建线程的第三种方式为实现java.util.concurrent.Callable接口。</p>
<p>线程实现Callable接口，重写call()方法，call()方法有返回值。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>V call()</td>
<td>计算结果并返回</td>
</tr>
</tbody></table>
<p><strong>FutureTask类</strong></p>
<p>java.util.concurrent.FutureTask类用于描述可取消的异步计算，该类提供了Future接口的基本实现，包括启动和取消计算、查询计算是否完成以及检索计算结果的方法，也可以用于获取方法调用后的返回结果。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>FutureTask(Callable callable)</td>
<td>根据参数指定的引用来创建一个未来任务</td>
</tr>
<tr>
<td>V get()</td>
<td>获取call方法计算的结果</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    CallableTest c = <span class="keyword">new</span> CallableTest();</span><br><span class="line">    FutureTask ft = <span class="keyword">new</span> FutureTask(c);</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(ft);</span><br><span class="line">    t.start();</span><br><span class="line">    Object obj = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        obj = ft.get();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p><strong>由来</strong></p>
<ul>
<li>在服务器编程模型的原理，每一个客户端连接用一个单独的线程为之服务，当与客户端的会话结束时，线程也就结束了，即每来一个客户端连接，服务器端就要创建一个新线程。</li>
<li>如果访问服务器的客户端很多，那么服务器要不断地创建和销毁线程，这将严重影响服务器的性能。</li>
</ul>
<p><strong>原理</strong></p>
<ul>
<li>线程池的概念：首先创建一些线程，它们的集合称为线程池，当服务器接受到一个客户请求后，就从线程池中取出一个空闲的线程为之服务，服务完后不关闭该线程，而是将该线程还回到线程池中。</li>
<li>在线程池的编程模式下，任务是提交给整个线程池，而不是直接交给某个线程，线程池在拿到任务后，它就在内部找有无空闲的线程，再把任务交给内部某个空闲的线程，任务是提交给整个线程池，一个线程同时只能执行一个任务，但可以同时向一个线程池提交多个任务。</li>
</ul>
<p><strong>相关类和方法</strong></p>
<p>从Java5开始提供了线程池的相关类和接口：java.util.concurrent.Executors类和 java.util.concurrent.ExecutorService接口。</p>
<p>其中<strong>Executors</strong>是个工具类和线程池的工厂类，可以创建并返回不同类型的线程池，常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>static ExecutorService newCachedThreadPool()</td>
<td>创建一个可根据需要创建新线程的线程池</td>
</tr>
<tr>
<td>static ExecutorService newFixedThreadPool(int nThreads)</td>
<td>创建一个可重用固定线程数的线程池</td>
</tr>
<tr>
<td>static ExecutorService newSingleThreadExecutor()</td>
<td>创建一个只有一个线程的线程池</td>
</tr>
</tbody></table>
<p>其中<strong>ExecutorService</strong>接口是真正的线程池接口，主要实现类是ThreadPoolExecutor，常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void execute(Runnable command)</td>
<td>执行任务和命令，通常用于执行Runnable</td>
</tr>
<tr>
<td>Future submit(Callable task)</td>
<td>执行任务和命令，通常用于执行Callable</td>
</tr>
<tr>
<td>void shutdown()</td>
<td>启动有序关闭</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1，创建线程池</span></span><br><span class="line">    ExecutorService pool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//2，向线程池布置任务</span></span><br><span class="line">    Test1 t = <span class="keyword">new</span> Test1();</span><br><span class="line">    pool.execute(t);</span><br><span class="line">    pool.execute(t);</span><br><span class="line">    <span class="comment">//3，关闭线程池</span></span><br><span class="line">    pool.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="网络常识"><a href="#网络常识" class="headerlink" title="网络常识"></a>网络常识</h3><p><strong>七层网络模型</strong>：</p>
<ul>
<li>OSI（Open System Interconnect）即开放式系统互联，是ISO（国际标准化组织）在1985年研究的网络互联模型。</li>
<li>OSI七层模型和TCP/IP五层模型的划分如下：</li>
</ul>
<p><a href="https://imgtu.com/i/Hme9fK"><img src="https://s4.ax1x.com/2022/02/05/Hme9fK.png" alt="Hme9fK.png"></a></p>
<ul>
<li>当发送数据时，需要对发送的内容按照上述七层模型进行层层加包后发送出去。</li>
<li>当接收数据时，需要对接收的内容按照上述七层模型相反的次序层层拆包并显示出来。</li>
</ul>
<p><strong>相关协议</strong>：</p>
<p>计算机在网络中实现通信就必须有一些约定或者规则，这种约定和规则就叫做通信协议，通信协议可以对速率、传输代码、代码结构、传输控制步骤、出错控制等制定统一的标准。</p>
<p>（1）TCP协议</p>
<ul>
<li>传输控制协议(Transmission Control Protocol)，是一种面向连接的协议，类似于打电话。 </li>
<li>建立连接 =&gt; 进行通信 =&gt; 断开连接在传输前采用”三次握手”方式。</li>
<li>在通信的整个过程中全程保持连接，形成数据传输通道。</li>
<li>保证了数据传输的<strong>可靠性和有序性</strong>。</li>
</ul>
<p>是一种全双工的字节流通信方式，可以进行大数据量的传输。传输完毕后需要释放已建立的连接，发送数据的<strong>效率比较低</strong>。</p>
<p>（2）UDP协议</p>
<ul>
<li>用户数据报协议(User Datagram Protocol)，是一种非面向连接的协议，类似于写信。</li>
<li>在通信的整个过程中不需要保持连接，其实是不需要建立连接。</li>
<li><strong>不保证数据传输的可靠性和有序性。</strong></li>
<li>是一种全双工的数据报通信方式，每个数据报的大小限制在64K内。</li>
</ul>
<p>发送数据完毕后无需释放资源，开销小，发送数据的<strong>效率比较高，速度快</strong>。</p>
<p><strong>IP地址：</strong></p>
<ul>
<li><p>192.168.1.1  - 是绝大多数路由器的登录地址，主要配置用户名和密码以及Mac过滤。</p>
</li>
<li><p>IP地址是互联网中的唯一地址标识，本质上是由32位二进制组成的整数，叫做IPv4，当然也有128 位二进制组成的整数，叫做IPv6，目前主流的还是IPv4。</p>
</li>
<li><p>日常生活中采用点分十进制表示法来进行IP地址的描述，将每个字节的二进制转化为一个十进制整数，不同的整数之间采用小数点隔开。<br>  如：0x01020304 =&gt; 1.2.3.4   </p>
</li>
<li><p>查看IP地址的方式：<br>Windows系统：在dos窗口中使用ipconfig或ipconfig/all命令即可<br>Unix/linux系统：在终端窗口中使用ifconfig或/sbin/ifconfig命令即可   特殊的地址<br>本地回环地址(hostAddress)：127.0.0.1 主机名(hostName)：localhost</p>
</li>
</ul>
<p><strong>端口号：</strong></p>
<ul>
<li>IP地址 - 可以定位到具体某一台设备。</li>
<li>端口号 - 可以定位到该设备中具体某一个进程。</li>
<li>端口号本质上是16位二进制组成的整数，表示范围是：0 ~ 65535，其中0 ~ 1024之间的端口号通常被系统占用，建议编程从1025开始使用。</li>
<li>特殊的端口：<pre><code>HTTP:80       FTP:21       Oracle:1521       MySQL:3306       Tomcat:8080
</code></pre>
</li>
<li>网络编程需要提供：IP地址 + 端口号，组合在一起叫做网络套接字：Socket。</li>
</ul>
<h3 id="TCP协议的编程模型"><a href="#TCP协议的编程模型" class="headerlink" title="TCP协议的编程模型"></a>TCP协议的编程模型</h3><h4 id="C-S架构介绍"><a href="#C-S架构介绍" class="headerlink" title="C/S架构介绍"></a>C/S架构介绍</h4><ul>
<li>在C/S模式下客户向服务器发出服务请求，服务器接收请求后提供服务。</li>
<li>例如：在一个酒店中，顾客找服务员点菜,服务员把点菜单通知厨师，厨师按点菜单做好菜后让服务员端给客户，这就是一种C/S工作方式。如果把酒店看作一个系统，服务员就是客户端，厨师就是服务器。这种系统分工和协同工作的方式就是C/S的工作方式。</li>
<li>客户端部分：为每个用户所专有的，负责执行前台功能。</li>
<li>服务器部分：由多个用户共享的信息与功能，招待后台服务。</li>
</ul>
<h4 id="编程模型"><a href="#编程模型" class="headerlink" title="编程模型"></a>编程模型</h4><p>服务器：</p>
<ul>
<li>创建ServerSocket类型的对象并提供端口号；</li>
<li>等待客户端的连接请求，调用accept()方法；</li>
<li>使用输入输出流进行通信；</li>
<li>关闭Socket；</li>
</ul>
<p>客户端：</p>
<ul>
<li>创建Socket类型的对象并提供服务器的IP地址和端口号；</li>
<li>使用输入输出流进行通信；</li>
<li>关闭Socket；</li>
</ul>
<h4 id="相关类和方法"><a href="#相关类和方法" class="headerlink" title="相关类和方法"></a>相关类和方法</h4><p><strong>ServerSocket类</strong></p>
<p>java.net.ServerSocket类主要用于描述服务器套接字信息（大插排）。常用的方法如</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>ServerSocket(int port)</td>
<td>根据参数指定的端口号来构造对象</td>
</tr>
<tr>
<td>Socket accept()</td>
<td>侦听并接收到此套接字的连接请求</td>
</tr>
<tr>
<td>void   close()</td>
<td>用于关闭套接字</td>
</tr>
</tbody></table>
<p><strong>Socket类</strong></p>
<p>java.net.Socket类主要用于描述客户端套接字，是两台机器间通信的端点（小插排）。常用的方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Socket(String host, int port)</td>
<td>根据指定主机名和端口来构造对象</td>
</tr>
<tr>
<td>InputStream getInputStream()</td>
<td>用于获取当前套接字的输入流</td>
</tr>
<tr>
<td>OutputStream   getOutputStream()</td>
<td>用于获取当前套接字的输出流</td>
</tr>
<tr>
<td>void   close()</td>
<td>用于关闭套接字</td>
</tr>
</tbody></table>
<p><strong>注意事项</strong></p>
<ul>
<li>客户端 Socket 与服务器端 Socket 对应, 都包含输入和输出流。</li>
<li>客户端的socket.getInputStream() 连接于服务器socket.getOutputStream()。</li>
<li>客户端的socket.getOutputStream()连接于服务器socket.getInputStream()</li>
</ul>
<p>案例：<br>客户端可以发送消息给服务器，服务器接收后回复消息给客户端，直到客户端发送bye时，结束。</p>
<p>服务器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">        Socket s = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1，创建ServerSocket类型的对象并提供端口号；</span></span><br><span class="line">            ss = <span class="keyword">new</span> ServerSocket(<span class="number">3333</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2，等待客户端的连接请求，调用accept()方法；</span></span><br><span class="line">            System.out.println(<span class="string">&quot;等待客户端连接..&quot;</span>);</span><br><span class="line">            s = ss.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端连接成功!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3，使用输入输出流进行通信；</span></span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">            ps = <span class="keyword">new</span> PrintStream(s.getOutputStream());</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String s1 = br.readLine();</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到客户端的消息是：&quot;</span> + s1);</span><br><span class="line">                <span class="comment">//如果是bye，取消循环</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(s1)) <span class="keyword">break</span>;</span><br><span class="line">                ps.println(<span class="string">&quot;收到&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4，关闭Socket；</span></span><br><span class="line">            <span class="keyword">if</span>(ps != <span class="keyword">null</span>)&#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    s.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ss != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Socket s = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1, 创建Socket类型的对象并提供服务器的IP地址和端口号；</span></span><br><span class="line">            s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3333</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功连接服务器&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2, 使用输入输出流进行通信；</span></span><br><span class="line">            ps = <span class="keyword">new</span> PrintStream(s.getOutputStream());</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入内容：&quot;</span>);</span><br><span class="line">                String s1 = sc.next();</span><br><span class="line">                ps.println(s1);</span><br><span class="line">                <span class="comment">//如果是bye，取消循环</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(s1)) <span class="keyword">break</span>;</span><br><span class="line">                String s2 = br.readLine();</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到服务器的消息是：&quot;</span> + s2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//3, 关闭Socket；</span></span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ps != <span class="keyword">null</span>)&#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    s.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基于上面案例，利用多线程，服务器应该如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">        Socket s = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1，创建ServerSocket类型的对象并提供端口号；</span></span><br><span class="line">            ss = <span class="keyword">new</span> ServerSocket(<span class="number">3333</span>);</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">//2，等待客户端的连接请求，调用accept()方法；</span></span><br><span class="line">                System.out.println(<span class="string">&quot;等待客户端连接..&quot;</span>);</span><br><span class="line">                s = ss.accept();</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端连接成功!&quot;</span>);</span><br><span class="line">                <span class="comment">//启动线程</span></span><br><span class="line">                <span class="keyword">new</span> ServerThread(s).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//4，关闭Socket；</span></span><br><span class="line">            <span class="keyword">if</span>(s != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    s.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ss != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerThread</span><span class="params">(Socket s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//3，使用输入输出流进行通信；</span></span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">            ps = <span class="keyword">new</span> PrintStream(s.getOutputStream());</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String s1 = br.readLine();</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到客户端的消息是：&quot;</span> + s1 );</span><br><span class="line">                <span class="comment">//如果是bye，取消循环</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(s1)) <span class="keyword">break</span>;</span><br><span class="line">                ps.println(<span class="string">&quot;收到&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(ps != <span class="keyword">null</span>)&#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UDP协议的编程模型"><a href="#UDP协议的编程模型" class="headerlink" title="UDP协议的编程模型"></a>UDP协议的编程模型</h3><h4 id="编程模型-1"><a href="#编程模型-1" class="headerlink" title="编程模型"></a>编程模型</h4><p>接收方：</p>
<ul>
<li>创建DatagramSocket类型的对象并提供端口号；</li>
<li>创建DatagramPacket类型的对象并提供缓冲区；</li>
<li>通过Socket接收数据内容存放到Packet中，调用receive方法；</li>
<li>关闭Socket；</li>
</ul>
<p>发送方：</p>
<ul>
<li>创建DatagramSocket类型的对象；</li>
<li>创建DatagramPacket类型的对象并提供接收方的通信地址；</li>
<li>通过Socket将Packet中的数据内容发送出去，调用send方法；</li>
<li>关闭Socket；</li>
</ul>
<h4 id="相关类和方法-1"><a href="#相关类和方法-1" class="headerlink" title="相关类和方法"></a>相关类和方法</h4><p><strong>DatagramSocket</strong></p>
<p>java.net.DatagramSocket类主要用于描述发送和接收数据报的套接字(邮局)。换句话说，该类就是包裹投递服务的发送或接收点。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>DatagramSocket()</td>
<td>使用无参的方式构造对象</td>
</tr>
<tr>
<td>DatagramSocket(int port)</td>
<td>根据参数指定的端口号来构造对象</td>
</tr>
<tr>
<td>void   receive(DatagramPacket p)</td>
<td>用于接收数据报存放到参数指定的位置</td>
</tr>
<tr>
<td>void   send(DatagramPacket p)</td>
<td>用于将参数指定的数据报发送出去</td>
</tr>
<tr>
<td>void   close()</td>
<td>关闭Socket并释放相关资源</td>
</tr>
</tbody></table>
<p><strong>DatagramPacket</strong></p>
<p>java.net.DatagramPacket类主要用于描述数据报，数据报用来实现无连接包裹投递服务。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>DatagramPacket(byte[] buf, int length)</td>
<td>根据参数指定的数组来构造对象，用于接收长度为length的数据报</td>
</tr>
<tr>
<td>DatagramPacket(byte[] buf, int length, InetAddress address, int port)</td>
<td>根据参数指定数组来构造对象，将数据报发送到指定地址和端口</td>
</tr>
<tr>
<td>InetAddress   getAddress()</td>
<td>用于获取发送方或接收方的通信地址</td>
</tr>
<tr>
<td>int   getPort()</td>
<td>用于获取发送方或接收方的端口号</td>
</tr>
<tr>
<td>int   getLength()</td>
<td>用于获取发送数据或接收数据的长度</td>
</tr>
</tbody></table>
<p><strong>InetAddress类</strong></p>
<p>java.net.InetAddress类主要用于描述互联网通信地址信息。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>static InetAddress getLocalHost()</td>
<td>用于获取当前主机的通信地址</td>
</tr>
<tr>
<td>static InetAddress getByName(String host)</td>
<td>根据参数指定的主机名获取通信地址</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接收方</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1,创建DatagramSocket类型的对象并提供端口号；</span></span><br><span class="line">            ds = <span class="keyword">new</span> DatagramSocket(<span class="number">3333</span>);</span><br><span class="line">            <span class="comment">//2,创建DatagramPacket类型的对象并提供缓冲区；</span></span><br><span class="line">            System.out.println(<span class="string">&quot;等待接收数据。。&quot;</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] bArr1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            DatagramPacket dp1 = <span class="keyword">new</span> DatagramPacket(bArr1, bArr1.length);</span><br><span class="line">            <span class="comment">//3,通过Socket接收数据内容存放到Packet中，调用receive方法；</span></span><br><span class="line">            ds.receive(dp1);</span><br><span class="line">            System.out.println(<span class="string">&quot;接收的数据：&quot;</span> + <span class="keyword">new</span> String(bArr1, <span class="number">0</span>, dp1.getLength()));</span><br><span class="line">            <span class="comment">//回复数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] bArr2 = <span class="string">&quot;收到！&quot;</span>.getBytes();</span><br><span class="line">            DatagramPacket dp2 = <span class="keyword">new</span> DatagramPacket(bArr2, bArr2.length, dp1.getAddress(), dp1.getPort());</span><br><span class="line">            ds.send(dp2);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(SocketException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//4,关闭Socket；</span></span><br><span class="line">            <span class="keyword">if</span>(ds != <span class="keyword">null</span>)&#123;</span><br><span class="line">                ds.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送方</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1,创建DatagramSocket类型的对象；</span></span><br><span class="line">            ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">            <span class="comment">//2,创建DatagramPacket类型的对象并提供接收方的通信地址；</span></span><br><span class="line">            <span class="keyword">byte</span>[] bArr1 = <span class="string">&quot;hello&quot;</span>.getBytes();</span><br><span class="line">            DatagramPacket dp1 = <span class="keyword">new</span> DatagramPacket(bArr1, bArr1.length, InetAddress.getLocalHost(), <span class="number">3333</span>);</span><br><span class="line">            <span class="comment">//3,通过Socket将Packet中的数据内容发送出去，调用send方法；</span></span><br><span class="line">            ds.send(dp1);</span><br><span class="line">            System.out.println(<span class="string">&quot;发送数据成功！&quot;</span>);</span><br><span class="line">            <span class="comment">//接收回复</span></span><br><span class="line">            <span class="keyword">byte</span>[] bArr2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            DatagramPacket dp2 = <span class="keyword">new</span> DatagramPacket(bArr2, bArr2.length);</span><br><span class="line">            ds.receive(dp2);</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的内容是：&quot;</span> + <span class="keyword">new</span> String(bArr2, <span class="number">0</span>, dp2.getLength()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4,关闭Socket；</span></span><br><span class="line">            <span class="keyword">if</span>(ds != <span class="keyword">null</span>)&#123;</span><br><span class="line">                ds.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="URL类"><a href="#URL类" class="headerlink" title="URL类"></a>URL类</h3><ul>
<li>java.net.URL（Uniform Resource Identifier）类主要用于表示统一的资源定位器，也就是指向万维网上“资源”的指针。这个资源可以是简单的文件或目录，也可以是对复杂对象的引用，例如对数据库或搜索引擎的查询等。</li>
<li>通过URL可以访问万维网上的网络资源，最常见的就是www和ftp站点，浏览器通过解析给定的</li>
<li>URL可以在网络上查找相应的资源。<br>URL的基本结构如下：<br>&lt;传输协议&gt;://&lt;主机名&gt;:&lt;端口号&gt;/&lt;资源地址&gt;</li>
</ul>
<p>URL类的相关方法：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>URL(String spec)</td>
<td>根据参数指定的字符串信息构造对象</td>
</tr>
<tr>
<td>String getProtocol()</td>
<td>获取协议名称</td>
</tr>
<tr>
<td>String getHost()</td>
<td>获取主机名称</td>
</tr>
<tr>
<td>int getPort()</td>
<td>获取端口号</td>
</tr>
<tr>
<td>String getPath()</td>
<td>获取路径信息</td>
</tr>
<tr>
<td>String getFile()</td>
<td>获取文件名</td>
</tr>
<tr>
<td>URLConnection openConnection()</td>
<td>获取URLConnection类的实例</td>
</tr>
</tbody></table>
<p><strong>URLConnection类</strong></p>
<p>java.net.URLConnection类是个抽象类，该类表示应用程序和URL之间的通信链接的所有类的超类，主要实现类有支持HTTP特有功能的HttpURLConnection类。</p>
<p><strong>HttpURLConnection类的常用方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>InputStream getInputStream()</td>
<td>获取输入流</td>
</tr>
<tr>
<td>void disconnect()</td>
<td>断开连接</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        URL url = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            url = <span class="keyword">new</span> URL(<span class="string">&quot;https://www.lagou.com&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;url的协议是：&quot;</span> + url.getProtocol());</span><br><span class="line">        System.out.println(<span class="string">&quot;url的主机是：&quot;</span> + url.getHost());</span><br><span class="line">        System.out.println(<span class="string">&quot;url的端口号是：&quot;</span> + url.getPort());</span><br><span class="line">        System.out.println(<span class="string">&quot;url的路径信息是：&quot;</span> + url.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;url的文件名是：&quot;</span> + url.getFile());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HttpURLConnection con = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = (HttpURLConnection)url.openConnection();</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(con.getInputStream()));</span><br><span class="line">            String s;</span><br><span class="line">            <span class="keyword">while</span>((s = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            con.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><ul>
<li>通常情况下编写代码都是固定的，无论运行多少次执行的结果也是固定的，在某些特殊场合中编写代码时不确定要创建什么类型的对象，也不确定要调用什么样的方法，这些都希望通过运行时传递的参数来决定，该机制叫做动态编程技术，也就是反射机制。</li>
<li>通俗来说，反射机制就是用于动态创建对象并且动态调用方法的机制。</li>
<li>目前主流的框架底层都是采用反射机制实现的。</li>
<li>如：<br>Person p = new Person();  - 表示声明Person类型的引用指向Person类型的对象<br>p.show();                              - 表示调用Person类中的成员方法show</li>
</ul>
<h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><ul>
<li>java.lang.Class类的实例可以用于描述Java应用程序中的类和接口，也就是一种数据类型。</li>
<li>该类没有公共构造方法，该类的实例由Java虚拟机和类加载器自动构造完成，本质上就是加载到内存中的运行时类。</li>
</ul>
<p><strong>获取Class对象的方式</strong></p>
<ul>
<li>使用数据类型.class的方式可以获取对应类型的Class对象（掌握）。</li>
<li>使用引用/对象.getClass()的方式可以获取对应类型的Class对象。</li>
<li>使用包装类.TYPE的方式可以获取对应基本数据类型的Class对象。</li>
<li>使用Class.forName()的方式来获取参数指定类型的Class对象（掌握）。</li>
<li>使用类加载器ClassLoader的方式获取指定类型的Class对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">//1,使用数据类型.class的方式可以获取对应类型的Class对象（掌握）</span></span><br><span class="line">    Class c1 = <span class="keyword">int</span>.class;</span><br><span class="line">    System.out.println(<span class="string">&quot;c1 = &quot;</span>+ c1);    <span class="comment">//int</span></span><br><span class="line">    c1 = String.class;</span><br><span class="line">    System.out.println(<span class="string">&quot;c1 = &quot;</span> + c1);   <span class="comment">//class java.lang.String</span></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2,使用引用/对象.getClass()的方式可以获取对应类型的Class对象</span></span><br><span class="line">    String s = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    c1 = s.getClass();</span><br><span class="line">    System.out.println(<span class="string">&quot;c1 = &quot;</span> + c1);   <span class="comment">//class java.lang.String</span></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3,使用包装类.TYPE的方式可以获取对应基本数据类型的Class对象</span></span><br><span class="line">    c1 = Integer.TYPE;</span><br><span class="line">    System.out.println(<span class="string">&quot;c1 = &quot;</span> + c1);    <span class="comment">//int</span></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//4,使用Class.forName()的方式来获取参数指定类型的Class对象（掌握）。</span></span><br><span class="line">    c1 = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;c1 = &quot;</span> + c1);</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//5,使用类加载器ClassLoader的方式获取指定类型的Class对象。</span></span><br><span class="line">    ClassLoader classLoader = ClassTest.class.getClassLoader();</span><br><span class="line">    c1 = classLoader.loadClass(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;c1 = &quot;</span> + c1);    <span class="comment">//class java.lang.String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>static Class&lt;?&gt; forName(String className)</td>
<td>用于获取参数指定类型对应的Class对象并返回</td>
</tr>
<tr>
<td>T newInstance()</td>
<td>用于创建该Class对象所表示类的新实例，过时</td>
</tr>
</tbody></table>
<h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><p>java.lang.reflect.Constructor类主要用于描述获取到的构造方法信息</p>
<p><strong>Class方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Constructor getConstructor(Class&lt;?&gt;…parameterTypes)</td>
<td>用于获取此Class对象所表示类型中参数指定的公共构造方法</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getConstructors()</td>
<td>用于获取此Class对象所表示类型中所有的公共构造方法</td>
</tr>
</tbody></table>
<p><strong>Constructor方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>T newInstance(Object…initargs)</td>
<td>使用此Constructor对象描述的构造方法来构造Class对象代表类型的新实例</td>
</tr>
<tr>
<td>int getModifiers()</td>
<td>获取方法的访问修饰符</td>
</tr>
<tr>
<td>String getName()</td>
<td>获取方法的名称</td>
</tr>
<tr>
<td>Class&lt;?&gt;[] getParameterTypes()</td>
<td>获取方法所有参数的类型</td>
</tr>
</tbody></table>
<p>获取单个构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  <span class="comment">//测试阶段暂时抛出异常给jvm</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//常规使用构造方法，即创建对象</span></span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;zhangfei&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用反射机制调用构造方法，创建对象</span></span><br><span class="line">    Class c1 = Class.forName(<span class="string">&quot;org.de3.Test_11.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取无参构造方法,并创建对象</span></span><br><span class="line">    Constructor&lt;Person&gt; constructor1 = c1.getConstructor();</span><br><span class="line">    Person p3 = constructor1.newInstance();</span><br><span class="line">    <span class="comment">//获取有参构造方法,并创建对象</span></span><br><span class="line">    Constructor&lt;Person&gt; constructor2 = c1.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">    Person p4 = constructor2.newInstance(<span class="string">&quot;zhangfei&quot;</span>, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取所有构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入类名称：&quot;</span>);</span><br><span class="line">    String s = sc.next();</span><br><span class="line">    Class c1 = Class.forName(s);</span><br><span class="line">    <span class="comment">//获取所有构造方法</span></span><br><span class="line">    Constructor[] constructors = c1.getConstructors();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Constructor constructor : constructors)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法的访问修饰符是：&quot;</span> + constructor.getModifiers());</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法的名称是：&quot;</span> + constructor.getName());</span><br><span class="line">        System.out.print(<span class="string">&quot;构造方法的参数类型是：&quot;</span>);</span><br><span class="line">        Class[] cArr = constructor.getParameterTypes();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Class c: cArr)&#123;</span><br><span class="line">            System.out.print(c+ <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n======================================\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h3><p>java.lang.reflect.Field类主要用于描述获取到的单个成员变量信息。</p>
<p><strong>Class方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Field getDeclaredField(String name)</td>
<td>用于获取此Class对象所表示类中参数指定的单个成员变量信息</td>
</tr>
<tr>
<td>Field[] getDeclaredFields()</td>
<td>用于获取此Class对象所表示类中所有成员变量信息</td>
</tr>
</tbody></table>
<p><strong>Field方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Object get(Object obj)</td>
<td>获取参数对象obj中此Field对象所表示成员变量的数值</td>
</tr>
<tr>
<td>void set(Object obj, Object value)</td>
<td>将参数对象obj中此Field对象表示成员变量的数值修改为参数 value的数值</td>
</tr>
<tr>
<td>void setAccessible(boolean flag)</td>
<td>当实参传递true时，则反射对象在使用时应该取消 Java 语言访问检查</td>
</tr>
<tr>
<td>int getModifiers()</td>
<td>获取成员变量的访问修饰符</td>
</tr>
<tr>
<td>Class&lt;?&gt; getType()</td>
<td>获取成员变量的数据类型</td>
</tr>
<tr>
<td>String getName()</td>
<td>获取成员变量的名称</td>
</tr>
</tbody></table>
<p>获取单个成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//常规访问成员变量</span></span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>);</span><br><span class="line">    System.out.println(p1.name);</span><br><span class="line">    p1.name = <span class="string">&quot;guanyu&quot;</span>;</span><br><span class="line">    System.out.println(p1.name);</span><br><span class="line">    System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用反射访问成员变量</span></span><br><span class="line">    Class c1 = Class.forName(<span class="string">&quot;org.de3.Test_11.Person&quot;</span>);</span><br><span class="line">    <span class="comment">//创建实例对象p2</span></span><br><span class="line">    Constructor&lt;Person&gt; constructor = c1.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">    Person p2 = constructor.newInstance(<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取成员变量Field，即name</span></span><br><span class="line">    Field field = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);   <span class="comment">//是否取消检测访问权限，即可以访问private的成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印对象p2的成员变量field，即name</span></span><br><span class="line">    System.out.println( field.get(p2) );  <span class="comment">//zhang</span></span><br><span class="line">    <span class="comment">//修改对象p2的成员变量field，即name</span></span><br><span class="line">    field.set(p2, <span class="string">&quot;guanyu&quot;</span>);</span><br><span class="line">    System.out.println( field.get(p2) );  <span class="comment">//guanyu</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取所有成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    Class c1 = Class.forName(<span class="string">&quot;org.de3.Test_11.Person&quot;</span>);</span><br><span class="line">    Field[] fArr = c1.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Field field: fArr)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;成员变量的访问权限是：&quot;</span> + field.getModifiers());</span><br><span class="line">        System.out.println(<span class="string">&quot;成员变量的数据类型是：&quot;</span> + field.getType());</span><br><span class="line">        System.out.println(<span class="string">&quot;成员变量的名称是：&quot;</span> + field.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=======================================\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h3><p>java.lang.reflect.Method类主要用于描述获取到的单个成员方法信息。</p>
<p><strong>Class方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td>用于获取该Class对象表示类中名字为name参数为 parameterTypes的指定公共成员方法</td>
</tr>
<tr>
<td>Method[] getMethods()</td>
<td>用于获取该Class对象表示类中所有公共成员方法</td>
</tr>
</tbody></table>
<p><strong>Method方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Object invoke(Object obj, Object… args)</td>
<td>使用对象obj来调用此Method对象所表示的成员方法，实参传递args</td>
</tr>
<tr>
<td>int getModifiers()</td>
<td>获取方法的访问修饰符</td>
</tr>
<tr>
<td>Class&lt;?&gt; getReturnType()</td>
<td>获取方法的返回值类型</td>
</tr>
<tr>
<td>String getName()</td>
<td>获取方法的名称</td>
</tr>
<tr>
<td>Class&lt;?&gt;[] getParameterTypes()</td>
<td>获取方法所有参数的类型</td>
</tr>
<tr>
<td>Class&lt;?&gt;[] getExceptionTypes()</td>
<td>获取方法的异常信息</td>
</tr>
</tbody></table>
<p>获取单个成员方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//常规调用成员方法</span></span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>);</span><br><span class="line">    p1.show(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用反射机制调用成员方法</span></span><br><span class="line">    Class c1 = Class.forName(<span class="string">&quot;org.de3.Test_11.Person&quot;</span>);</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    Constructor&lt;Person&gt; constructor =  c1.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">    Person p2 = constructor.newInstance(<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="comment">//获取成员方法method， 即show()</span></span><br><span class="line">    Method method = c1.getMethod(<span class="string">&quot;show&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">    <span class="comment">//调用对象p2的成员方法method,即show();</span></span><br><span class="line">    method.invoke(p2, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取所有成员方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    Class c1 = Class.forName(<span class="string">&quot;org.de3.Test_11.Person&quot;</span>);</span><br><span class="line">    Method[] methods = c1.getMethods();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Method method: methods)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;成员方法的修饰符是：&quot;</span> + method.getModifiers());</span><br><span class="line">        System.out.println(<span class="string">&quot;成员方法的返回值类型是：&quot;</span> + method.getReturnType());</span><br><span class="line">        System.out.println(<span class="string">&quot;成员方法的名称是：&quot;</span> + method.getName());</span><br><span class="line">        System.out.print(<span class="string">&quot;成员方法的参数类型是： &quot;</span>);</span><br><span class="line">        Class[] cArr = method.getParameterTypes();</span><br><span class="line">        <span class="keyword">for</span>(Class c: cArr)&#123;</span><br><span class="line">            System.out.print(c + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;成员方法的异常类型是： &quot;</span>);</span><br><span class="line">        Class[] cArr2 = method.getExceptionTypes();</span><br><span class="line">        <span class="keyword">for</span>(Class c: cArr2)&#123;</span><br><span class="line">            System.out.print(c + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n==================================\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他结构信息"><a href="#其他结构信息" class="headerlink" title="其他结构信息"></a>其他结构信息</h3><p><strong>Class方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Package getPackage()</td>
<td>获取所在的包信息</td>
</tr>
<tr>
<td>Class&lt;? super T&gt; getSuperclass()</td>
<td>获取继承的父类信息</td>
</tr>
<tr>
<td>Class&lt;?&gt;[] getInterfaces()</td>
<td>获取实现的所有接口</td>
</tr>
<tr>
<td>Annotation[] getAnnotations()</td>
<td>获取注解信息</td>
</tr>
<tr>
<td>Type[] getGenericInterfaces()</td>
<td>获取泛型信息</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    Class c1 = Class.forName(<span class="string">&quot;org.de3.Test_11.Person&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;类的包信息：&quot;</span> + c1.getPackage());</span><br><span class="line">    System.out.println(<span class="string">&quot;类的父类：&quot;</span> + c1.getSuperclass());</span><br><span class="line">    System.out.println(<span class="string">&quot;类的接口：&quot;</span> + c1.getInterfaces());</span><br><span class="line">    System.out.println(<span class="string">&quot;类的注解：&quot;</span> + c1.getAnnotations());</span><br><span class="line">    System.out.println(<span class="string">&quot;类的泛型：&quot;</span> + c1.getGenericInterfaces());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p><strong>代理模式：</strong></p>
<p>当一个对象不能直接使用，可以在客户和目标中间直接创建一个中介，这个中介就是代理。</p>
<p>例：<br>    A类不能直接访问C类，可创建B类为中介，<br>    A类访问B类，B类访问C类，<br>    A类是客户，B类是代理，C类是目标。</p>
<p><strong>作用：</strong></p>
<ul>
<li>控制访问，在代理中，控制是否可以调用目标对象的方法。</li>
<li>功能增强，可以在完成目标方法的调用时，附加一些额外的功能。</li>
</ul>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>代理类是手工实现的java文件，代理的目标对象是固定的</p>
<p><strong>优点</strong>：容易理解，使用方便</p>
<p><strong>缺点</strong>：在目标类比较多时，会产生大量的代理类。</p>
<p>案例：<br>某人到商家买U盘，商家到厂家买U盘。某人是客户，商家是代理，厂家是目标。</p>
<p>销售U盘的接口UsbCell</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsbCell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">cell</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目标类：厂家，UsbFactory1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsbFactory1</span> <span class="keyword">implements</span> <span class="title">UsbCell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cell</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标类中的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">85.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理类：商家，TaoBao1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaoBao1</span> <span class="keyword">implements</span> <span class="title">UsbCell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UsbFactory1 factory = <span class="keyword">new</span> UsbFactory1();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cell</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1，访问目标类方法</span></span><br><span class="line">        <span class="keyword">float</span> price = factory.cell(num);</span><br><span class="line">        <span class="comment">//2，功能增强</span></span><br><span class="line">        price = price + <span class="number">30</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;送一张优惠券！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试，客户买U盘</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TaoBao1 taoBao = <span class="keyword">new</span> TaoBao1();</span><br><span class="line">        <span class="keyword">float</span> price = taoBao.cell(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Usb的价格是：&quot;</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动态代理-1"><a href="#动态代理-1" class="headerlink" title="动态代理"></a>动态代理</h3><p>使用反射机制，在程序执行中，创建代理类对象。</p>
<p>特点：不用创建类文件，代理的目标类是活动的，可设置的</p>
<p><strong>动态代理的实现</strong></p>
<p>jdk动态代理：使用java.lang.reflect包里的三个类：</p>
<p>InvocationHandler，Method， Proxy</p>
<p><strong>InvocationHandler</strong>接口（调用处理器）：接口中就一个invoke()方法，</p>
<ul>
<li>invoke()：表示代理对象要执行的功能代码。代理类要完成的功能就写在invoke方法中。</li>
<li>代理类完成的功能：调用目标类方法，功能增强</li>
</ul>
<p>方法原型：</p>
<p>public Object invoke(Object proxy, Method method, Object[] args)</p>
<p>参数：<br>Object proxy：jdk创建的代理对象，无需赋值<br>Method method：目标类中的方法，jdk提供method对象<br>Object[] args：目标类中的方法的参数</p>
<p>用法：</p>
<p>创建类实现InvocationHandler接口，重写invoke()方法，把代理内容写invoke()方法中。</p>
<p><strong>Proxy</strong>类：中有静态方法 newProxyInstance()，创建代理对象</p>
<p>方法原型：</p>
<p>public static Object newProxyInstance（ClassLoader loader，Class&lt;&gt;[] interfaces, InvocationHandler h）</p>
<p>参数：</p>
<p>ClassLoader loader：类加载器，<br>Class&lt;&gt;[] interfaces：类的接口，<br>InvocationHandler h：我们自己写的，代理类要完成的功能</p>
<p>返回值：就是代理对象</p>
<p><strong>实现动态代理步骤</strong></p>
<p>1，创建接口，定义目标类要完成的功能</p>
<p>2，创建目标类，并实现接口</p>
<p>3，创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能：<br>        调用目标方法，增强功能</p>
<p>4，使用Proxy类的静态方法newProxyInstance()，创建代理对象，并发返回值转化成接口类型</p>
<p>5，使用代理对象调用需要的方法。</p>
<p>案例：<br>以静态代理为例，编写动态代码：</p>
<p>销售U盘的接口：UsbCell</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsbCell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">cell</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目标类：厂家，UsbFactory1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsbFactory1</span> <span class="keyword">implements</span> <span class="title">UsbCell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cell</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标类中的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">85.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建InvocationHandler接口的实现类：重写invoke方法，写代理内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//目标类</span></span><br><span class="line">    <span class="keyword">private</span> UsbCell target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(UsbCell target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理的内容写在invoke方法中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o :代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method：需要执行的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects：参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] objects)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//1, 访问目标类的方法，</span></span><br><span class="line">        <span class="comment">// 动态，因为此时(方法method)，(目标类target)，(参数objects)都还没有确定</span></span><br><span class="line">        Object price = method.invoke(target, objects);</span><br><span class="line">        <span class="comment">//2, 功能增强</span></span><br><span class="line">        <span class="keyword">if</span>(price != <span class="keyword">null</span>)&#123;</span><br><span class="line">            Float f = (<span class="keyword">float</span>)price;</span><br><span class="line">            price = f + <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;赠送一张优惠券！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试，买U盘</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        UsbCell uc = <span class="keyword">new</span> UsbFactory1();</span><br><span class="line">        <span class="comment">//创建invocationHandler对象，目标类target确定为uc</span></span><br><span class="line">        MyInvocationHandler invocationHandler = <span class="keyword">new</span> MyInvocationHandler(uc);</span><br><span class="line">        <span class="comment">//创建动态代理对象</span></span><br><span class="line">        UsbCell proxy = (UsbCell)Proxy.newProxyInstance(uc.getClass().getClassLoader(),</span><br><span class="line">                uc.getClass().getInterfaces(),</span><br><span class="line">                invocationHandler);</span><br><span class="line">        <span class="comment">//方法method确定为cell, 参数objects确定为1</span></span><br><span class="line">        Object price = proxy.cell(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;价格为：&quot;</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>动态代理实际作用</strong></p>
<p>可以在不改变原来的目标方法功能的前提下，在代理中增强自己的功能代码。</p>
<p>比如：在项目中，有一个功能是其他人写好的，我可以使用。但是发现这个功能不能完全满足我的需求，需要增强自己的代码，就可以使用代理，在代理中访问目标类的方法，并且增加自己的代码(增强功能)。</p>
<p>例如：现有接口Hello如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>功能类GongNeng，实现了Hello接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GongNeng</span> <span class="keyword">implements</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在可以使用该GongNeng类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hello h1 = <span class="keyword">new</span> GongNeng();</span><br><span class="line">h1.print(<span class="string">&quot;abc&quot;</span>);  </span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="comment">//abc</span></span><br></pre></td></tr></table></figure>

<p>假如现在不满足我的需求，我需要在打印后，再打印字符串“bye”，可以添加代理：</p>
<p>创建InvocationHandler接口的实现类：重写invoke方法，写代理内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Hello target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Hello target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] objects)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//调用目标类方法</span></span><br><span class="line">        method.invoke(target, objects);</span><br><span class="line">        <span class="comment">//功能增强，增加自己的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Hello h2 = <span class="keyword">new</span> GongNeng();</span><br><span class="line">    MyInvocationHandler invocationHandler = <span class="keyword">new</span> MyInvocationHandler(h2);</span><br><span class="line">    Hello proxy = (Hello)Proxy.newProxyInstance( h2.getClass().getClassLoader(),</span><br><span class="line">                                                h2.getClass().getInterfaces(),</span><br><span class="line">                                                invocationHandler);</span><br><span class="line">    proxy.print(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="comment">//结果：</span></span><br><span class="line">    <span class="comment">//abc</span></span><br><span class="line">    <span class="comment">//bye</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="常用设计原则和设计模式"><a href="#常用设计原则和设计模式" class="headerlink" title="常用设计原则和设计模式"></a>常用设计原则和设计模式</h1><h2 id="常用设计原则"><a href="#常用设计原则" class="headerlink" title="常用设计原则"></a>常用设计原则</h2><p><strong>软件开发流程</strong></p>
<p>需求分析文档、概要设计文档、详细设计文档、编码和测试、安装和调试、维护和升级</p>
<p><strong>常用的设计原则</strong></p>
<ul>
<li>开闭原则（Open Close Principle）<br>对扩展开放对修改关闭，为了使程序的扩展性好，易于维护和升级。</li>
<li>里氏代换原则（Liskov Substitution Principle）<br>任何基类可以出现的地方，子类一定可以出现，多使用多态的方式。</li>
<li>依赖倒转原则（Dependence Inversion Principle）<br>尽量多依赖于抽象类或接口而不是具体实现类，对子类具有强制性和规范性</li>
<li>接口隔离原则（Interface Segregation Principle）<br>尽量多使用小接口而不是大接口，避免接口的污染，降低类之间耦合度。</li>
<li>迪米特法则（ 少知道原则）（Demeter Principle）<br>一个实体应当尽量少与其他实体之间发生相互作用，使系统功能模块相对独立。<br>高内聚，低耦合。</li>
<li>合成复用原则（Composite Reuse Principle）<br>尽量多使用合成/聚合的方式，而不是继承的方式。</li>
</ul>
<h2 id="常用设计模式"><a href="#常用设计模式" class="headerlink" title="常用设计模式"></a>常用设计模式</h2><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p>
<p>设计模式就是一种用于固定场合的固定套路。</p>
<p><strong>基本分类</strong></p>
<ul>
<li>创建型模式 ： 单例设计模式、工厂方法模式、抽象工厂模式、…</li>
<li>结构型模式 ： 装饰器模式、代理模式、…</li>
<li>行为型模式 ： 模板设计模式、…</li>
</ul>
<h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><p>主要分为：饿汉式 和 懒汉式，懒汉式需要对多线程进行同步处理。</p>
<p>饿汉式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2,创建本类类型的引用指向本类类型的对象，private static</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="comment">//1,私有化构造方法，private</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//3,提供共有的成员方法，将本类对象返回出去，public static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>懒汉式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2,创建本类类型的引用指向本类类型的对象，private static</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//1,私有化构造方法，private</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//3,提供共有的成员方法，将本类对象返回出去，public static。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的懒汉式会有线程不安全的情况，优化后如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2,创建本类类型的引用指向本类类型的对象，private static</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//1,私有化构造方法，private</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//3,提供共有的成员方法，将本类对象返回出去，public static。由于线程不安全原因，加上锁synchronized</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p><strong>普通工厂模式</strong></p>
<p> 普通工厂方法模式就是建立一个工厂类，对实现了同一接口的不同实现类进行实例的创建。</p>
<p><a href="https://imgtu.com/i/HgIISg"><img src="https://s4.ax1x.com/2022/02/15/HgIISg.png" alt="HgIISg.png"></a></p>
<p>某发送消息的接口Sender：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*public abstract */</span><span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口Sender的实现类MailSender：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;邮件发送消息。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口Sender的实现类SmsSender：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;短信发送消息。。。 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>普通工厂类SendFactory，专门用来创建Sender接口实现类的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;SmsSender&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;MailSender&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//正常创建对象</span></span><br><span class="line">    Sender s = <span class="keyword">new</span> SmsSender();</span><br><span class="line">    s.send();</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">    <span class="comment">//利用工厂类创建对象</span></span><br><span class="line">    SendFactory sf = <span class="keyword">new</span> SendFactory();</span><br><span class="line">    Sender s1 = sf.produce(<span class="string">&quot;SmsSender&quot;</span>);</span><br><span class="line">    s1.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>缺点</strong>：</p>
<p>在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，并且可能出现空指针异常。</p>
<p><strong>多个工厂方法模式</strong></p>
<p><a href="https://imgtu.com/i/HgHfBj"><img src="https://s4.ax1x.com/2022/02/15/HgHfBj.png" alt="HgHfBj.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>缺点</strong></p>
<p>在多个工厂方法模式中，为了能够正确创建对象，先需要创建工厂类的对象才能调用工厂类中的生产方法。</p>
<p><strong>静态工厂方法模式</strong></p>
<p><a href="https://imgtu.com/i/Hgb4MD"><img src="https://s4.ax1x.com/2022/02/15/Hgb4MD.png" alt="Hgb4MD.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>意义</strong>：</p>
<p>工厂方法模式适合：凡是出现了大量的产品需要创建且具有共同的接口时，可以通过工厂方法模式进行创建。</p>
<p><strong>缺点：</strong></p>
<p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序生产新的产品，就必须对工厂类的代码进行修改，这就违背了开闭原则。</p>
<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p><a href="https://imgtu.com/i/HgqolT"><img src="https://s4.ax1x.com/2022/02/15/HgqolT.png" alt="HgqolT.png"></a></p>
<p>创建对象的工厂类的接口Provider：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Sender工厂类的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Sender <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建MailSender对象的工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainSendFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MainSender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建SmsSender对象的工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSendFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此后假如Sender接口有了新的实现类，为该类添加工厂方法时，可以不用修改原来的代码，直接创建一个新的工厂类，实现工厂类的接口即可。符合了开闭原则。</p>
<h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>装饰器模式就是给一个对象动态的增加一些新功能，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例。</p>
<p><a href="https://imgtu.com/i/HgO7dJ"><img src="https://s4.ax1x.com/2022/02/15/HgO7dJ.png" alt="HgO7dJ.png"></a></p>
<p>某接口Sourceable：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该接口的实现类Source：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现了某个功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要给该实现类添加其他的功能，但是又不能改变原来的代码，创建修饰器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span>  <span class="keyword">implements</span> <span class="title">Sourceable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sourceable source;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Sourceable source)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        source.method();</span><br><span class="line">        System.out.println(<span class="string">&quot;修饰器又添加了一些其他功能！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//正常使用</span></span><br><span class="line">    Sourceable s = <span class="keyword">new</span> Source();</span><br><span class="line">    s.method();      <span class="comment">//实现了某个功能</span></span><br><span class="line">    System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用修饰器</span></span><br><span class="line">    Decorator d = <span class="keyword">new</span> Decorator(<span class="keyword">new</span> Source());</span><br><span class="line">    d.method();      </span><br><span class="line">    <span class="comment">//实现了某个功能</span></span><br><span class="line">    <span class="comment">//修饰器又添加了一些其他功能！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实际意义</strong></p>
<ul>
<li>可以实现一个类功能的扩展。</li>
<li>可以动态的增加功能，而且还能动态撤销（继承不行）。</li>
<li>缺点：产生过多相似的对象，不易排错。</li>
</ul>
<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><ul>
<li>代理模式就是找一个代理类替原对象进行一些操作。</li>
<li>比如我们在租房子的时候找中介，再如我们打官司需要请律师，中介和律师在这里就是我们的代理。</li>
<li><a href="https://imgtu.com/i/HgjwDS"><img src="https://s4.ax1x.com/2022/02/15/HgjwDS.png" alt="HgjwDS.png"></a></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sourceable source = <span class="keyword">new</span> Source();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//访问控制，访问了目标方法</span></span><br><span class="line">        source.method();</span><br><span class="line">        <span class="comment">//增强功能</span></span><br><span class="line">        System.out.println(<span class="string">&quot;代理增加了一些功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//正常使用</span></span><br><span class="line">    Sourceable s = <span class="keyword">new</span> Source();</span><br><span class="line">    s.method();      <span class="comment">//实现了某个功能</span></span><br><span class="line">    System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用代理</span></span><br><span class="line">    Proxy p = <span class="keyword">new</span> Proxy();</span><br><span class="line">    p.method();      </span><br><span class="line">    <span class="comment">//实现了某个功能</span></span><br><span class="line">    <span class="comment">//代理增加了一些功能</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实际意义</strong>     </p>
<ul>
<li>如果在使用的时候需要对原有的方法进行改进，可以采用一个代理类调用原有方法，并且对产生的结果进行控制，这种方式就是代理模式。</li>
<li>使用代理模式，可以将功能划分的更加清晰，有助于后期维护。</li>
</ul>
<p><strong>代理模式和装饰器模式的比较</strong>     </p>
<ul>
<li>装饰器模式通常的做法是将原始对象作为一个参数传给装饰者的构造器，而代理模式通常在一个代理类中创建一个被代理类的对象。</li>
<li>装饰器模式关注于在一个对象上动态的添加方法，然而代理模式关注于控制对对象的访问。</li>
</ul>
<h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>模板方法模式主要指一个抽象类中封装了一个固定流程，流程中的具体步骤可以由不同子类进行不同的实现，通过抽象类让固定的流程产生不同的结果。</p>
<p><a href="https://imgtu.com/i/H2S8qf"><img src="https://s4.ax1x.com/2022/02/15/H2S8qf.png" alt="H2S8qf.png"></a></p>
<p>抽象方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将字符串exp，按照op分割，返回计算结果。如,参数&quot;1+1&quot;,&quot;+&quot;,返回2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">splitExpression</span><span class="params">(String exp, String op)</span></span>&#123;</span><br><span class="line">        String[] sArr = exp.split(op);</span><br><span class="line">        <span class="keyword">return</span> calculate(Integer.parseInt(sArr[<span class="number">0</span>]), Integer.parseInt(sArr[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> ia, <span class="keyword">int</span> ib)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>某一子类，加法运算：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> ia, <span class="keyword">int</span> ib)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ia + ib;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>某一子类，减法运算：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> ia, <span class="keyword">int</span> ib)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ia - ib;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    AbstractCalculator ac = <span class="keyword">new</span> Plus();</span><br><span class="line">    <span class="keyword">int</span> ia = ac.splitExpression(<span class="string">&quot;1+2&quot;</span>, <span class="string">&quot;\\+&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;ia = &quot;</span> + ia);    <span class="comment">//ia = 3</span></span><br><span class="line">    System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    ac = <span class="keyword">new</span> Minus();</span><br><span class="line">    ia = ac.splitExpression(<span class="string">&quot;5-1&quot;</span>, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;ia = &quot;</span> + ia);    <span class="comment">//ia = 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java新特性"><a href="#Java新特性" class="headerlink" title="Java新特性"></a>Java新特性</h1><h2 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h2><p>Java8是 Java 语言的一个重要版本，该版本于2014年3月发布，是自Java5以来 具革命性的版本，这个版本包含语言、编译器、库、工具和JVM等方面的十多个新特性。</p>
<h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><ul>
<li>函数式接口主要指只包含一个抽象方法的接口，如：java.lang.Runnable、java.util.Comparator 接口等。    </li>
<li>Java8提供@FunctionalInterface注解来定义函数式接口，若定义的接口不符合函数式的规范便会报错。</li>
<li>Java8中增加了java.util.function包，该包包含了常用的函数式接口，具体如下：</li>
</ul>
<table>
<thead>
<tr>
<th>接口名称</th>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Consumer</td>
<td>void accept(T t)</td>
<td>根据指定的参数执行操作</td>
</tr>
<tr>
<td>Supplier</td>
<td>T get()</td>
<td>得到一个返回值</td>
</tr>
<tr>
<td>Function&lt;T,R&gt;</td>
<td>R apply(T t)</td>
<td>根据指定的参数执行操作并返回</td>
</tr>
<tr>
<td>Predicate</td>
<td>boolean test(T t)</td>
<td>判断指定的参数是否满足条件</td>
</tr>
</tbody></table>
<h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><ul>
<li>Lambda 表达式是实例化<strong>函数式接口</strong>的重要方式，使用 Lambda 表达式可以使代码变的更加简洁紧凑。</li>
<li>lambda表达式：参数列表、箭头符号-&gt;和方法体组成，而方法体中可以是表达式，也可以是语句块。</li>
<li>语法格式：(参数列表) -&gt; { 方法体; }      </li>
<li>其中()、参数类型、{} 以及return关键字 可以省略。</li>
</ul>
<h3 id="引用方法"><a href="#引用方法" class="headerlink" title="引用方法"></a>引用方法</h3><ul>
<li>方法引用主要指通过方法的名字来指向一个方法而不需要为方法引用提供方法体，该方法的调用交给函数式接口执行。</li>
<li>方法引用使用一对冒号  :: 将类或对象与方法名进行连接，通常使用方式如下：<ul>
<li>对象的非静态方法引用    ObjectName :: MethodName</li>
<li>类的静态方法引用              ClassName :: StaticMethodName</li>
<li>类的非静态方法引用          ClassName :: MethodName </li>
<li>构造器的引用                      ClassName :: new </li>
<li>数组的引用                        TypeName[] :: new</li>
</ul>
</li>
<li>方法引用是在特定场景下lambda表达式的一种简化表示，可以进一步简化代码的编写使代码更加紧凑简洁，从而减少冗余代码。</li>
</ul>
<p>使用案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1,Runnable,抽象方法run无参无返回值</span></span><br><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">Runnable Runnable1 = () -&gt; System.out.println();</span><br><span class="line"><span class="comment">//方法引用</span></span><br><span class="line">Runnable Runnable2 = System.out::println;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2,Consumer,抽象方法accept有参无返回值</span></span><br><span class="line">Consumer consumer  = <span class="keyword">new</span> Consumer() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">Consumer consumer1 = o -&gt; System.out.println(o);</span><br><span class="line"><span class="comment">//方法引用</span></span><br><span class="line">Consumer consumer2 = System.out::println;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3,Supplier，抽象方法get无参有返回值</span></span><br><span class="line">Supplier supplier = <span class="keyword">new</span> Supplier()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">Supplier supplier1 = () -&gt; <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//方法引用</span></span><br><span class="line">Supplier supplier2 = Person::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4, Function, 抽象方法apply有参有返回值</span></span><br><span class="line">Function&lt;String, Integer&gt; function = <span class="keyword">new</span> Function&lt;&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">Function&lt;String, Integer&gt; function1 = s -&gt; Integer.parseInt(s);</span><br><span class="line"><span class="comment">//方法引用</span></span><br><span class="line">Function&lt;String, Integer&gt; functioin2 = Integer::parseInt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5,Predicate, 抽象方法test有参有boolean类型返回值</span></span><br><span class="line">Predicate&lt;Integer&gt; predicate = <span class="keyword">new</span> Predicate&lt;&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Integer age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">Predicate&lt;Integer&gt; predicate1 = age -&gt; age&gt;=<span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<p>1，实现接口，可以创建实现类，但是麻烦，可以利用匿名内部类。</p>
<p>2，在接口是函数式接口的条件下，可以使用lambda表达式。</p>
<p>3，在lambda的特定条件下可以再简化，使用方法引用。<br>      特定条件：重写方法的返回值和参数，跟返回的方法的返回值和参数一致。</p>
<h3 id="Stream接口"><a href="#Stream接口" class="headerlink" title="Stream接口"></a>Stream接口</h3><ul>
<li>案例题目：<br>准备一个List集合并放入Person类型的对象，将集合中所有age&gt;=18过滤出来放到另外一个集合并打印出来。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//准备List</span></span><br><span class="line">List&lt;Person&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;Person&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1,list1添加元素Person</span></span><br><span class="line">list1.add(<span class="keyword">new</span> Person(<span class="string">&quot;zhang&quot;</span>, <span class="number">30</span>));</span><br><span class="line">list1.add(<span class="keyword">new</span> Person(<span class="string">&quot;li&quot;</span>, <span class="number">16</span>));</span><br><span class="line">list1.add(<span class="keyword">new</span> Person(<span class="string">&quot;wang&quot;</span>, <span class="number">10</span>));</span><br><span class="line">list1.add(<span class="keyword">new</span> Person(<span class="string">&quot;liu&quot;</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2，遍历list1，符合条件的添加到list2中</span></span><br><span class="line"><span class="keyword">for</span>(Person p:list1)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p.getAge() &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">        list2.add(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3，遍历打印list2</span></span><br><span class="line"><span class="keyword">for</span>(Person p: list2)&#123;</span><br><span class="line">    System.out.println(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>概念</strong></p>
<ul>
<li>java.util.stream.Stream接口是对集合功能的增强，可以对集合元素进行复杂的查找、过滤、筛选等操作。</li>
<li>Stream接口借助于Lambda 表达式极大的提高编程效率和程序可读性，同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势。</li>
</ul>
<p><strong>步骤</strong></p>
<ul>
<li>创建操作：创建Stream，通过一个数据源来获取一个流。</li>
<li>中间操作：转换Stream，每次转换返回一个新的Stream对象。</li>
<li>终止操作：对Stream进行聚合操作并产生结果。</li>
</ul>
<h4 id="创建操作"><a href="#创建操作" class="headerlink" title="创建操作"></a>创建操作</h4><p>创建流对象</p>
<ul>
<li>方式一：通过调用集合的默认方法来获取流，如：default Stream stream() </li>
<li>方式二：通过数组工具类中的静态方法来获取流，如：static IntStream stream(int[] array) </li>
<li>方式三：通过Stream接口的静态方法来获取流，如：static  Stream of(T… values) </li>
<li>方式四：通过Stream接口的静态方法来获取流，static  Stream generate(Supplier&lt;? extends T&gt; s)</li>
</ul>
<h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><p>从某个流通过变换得到另一个流</p>
<p>筛选与切片的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Stream filter(Predicate&lt;? super T&gt; predicate)</td>
<td>返回一个包含匹配元素的流</td>
</tr>
<tr>
<td>Stream distinct()</td>
<td>返回不包含重复元素的流</td>
</tr>
<tr>
<td>Stream limit(long maxSize)</td>
<td>返回不超过给定元素数量的流</td>
</tr>
<tr>
<td>Stream skip(long n)</td>
<td>返回丢弃前n个元素后的流</td>
</tr>
</tbody></table>
<p>用Stream解决上面案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list1.stream().filter(<span class="keyword">new</span> Predicate&lt;Person&gt;()&#123;  <span class="comment">//从流中，筛选年龄大于等于18</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p.getAge() &gt;= <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).forEach(<span class="keyword">new</span> Consumer&lt;Person&gt;() &#123;    <span class="comment">//从流中，筛选完后，遍历，添加到list2中，并打印</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line">        list2.add(p);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用lambda表达式写法</span></span><br><span class="line">list1.stream().filter(p -&gt; p.getAge()&gt;=<span class="number">18</span>)</span><br><span class="line">    		  .forEach(p -&gt; &#123;</span><br><span class="line">                  list2.add(p);</span><br><span class="line">                  System.out.println(p);</span><br><span class="line">              &#125;);</span><br></pre></td></tr></table></figure>

<p>映射的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Stream map(Function&lt;? super T,? extends R&gt; mapper)</td>
<td>返回每个处理过元素组成的流</td>
</tr>
<tr>
<td>Stream flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)</td>
<td>返回每个被替换过元素组成的流，并将所有流合成一个流</td>
</tr>
</tbody></table>
<p>将Person的age映射出来并打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list1.stream().map(<span class="keyword">new</span> Function&lt;Person, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  person.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).forEach(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">list1.stream().map(p -&gt; p.getAge()).forEach(age -&gt; System.out.println(age));</span><br><span class="line"></span><br><span class="line"><span class="comment">//特定条件，可以再简化，方法引用</span></span><br><span class="line">list1.stream().map(Person::getAge).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>排序的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Stream sorted()</td>
<td>返回经过自然排序后元素组成的流</td>
</tr>
<tr>
<td>Stream sorted(Comparator&lt;? super T&gt; comparator)</td>
<td>返回经过比较器排序后元素组成的流</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自然排序</span></span><br><span class="line">Stream.of(<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>).sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义比较器排序</span></span><br><span class="line">list1.stream().sorted(<span class="keyword">new</span> Comparator&lt;Person&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person p1, Person p2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1.getAge()!=p2.getAge() ?</span><br><span class="line">               p1.getAge()-p2.getAge() :</span><br><span class="line">        	   p1.getName().compareTo(p2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda表达式,只按年龄排</span></span><br><span class="line">list1.stream().sorted((p1,p2) -&gt; p1.getAge()-p2.getAge()).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h4 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h4><p> 匹配与查找的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Optional findFirst()</td>
<td>返回该流的第一个元素</td>
</tr>
<tr>
<td>boolean allMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>返回所有元素是否都匹配</td>
</tr>
<tr>
<td>boolean noneMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>返回所有元素是否都不匹配</td>
</tr>
<tr>
<td>Optional max(Comparator&lt;? super T&gt; comparator)</td>
<td>根据比较器返回 大元素</td>
</tr>
<tr>
<td>Optional min(Comparator&lt;? super T&gt; comparator)</td>
<td>根据比较器返回 小元素</td>
</tr>
<tr>
<td>long count()</td>
<td>返回元素的个数</td>
</tr>
<tr>
<td>void forEach(Consumer&lt;? super T&gt; action)</td>
<td>对流中每个元素执行操作</td>
</tr>
</tbody></table>
<p>规约的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Optional reduce(BinaryOperator accumulator)</td>
<td>返回结合后的元素值</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有年龄累加和</span></span><br><span class="line">Optional&lt;Integer&gt; reduce = list1.stream().map(Person::getAge).reduce(<span class="keyword">new</span> BinaryOperator&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer ia, Integer ib)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.sum(ia,ib);  <span class="comment">//相当于ia + ib</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">Optional&lt;Integer&gt; reduce1 = list1.stream().map(p -&gt; p.getAge()).reduce((ia,ib) -&gt; ia+ib);</span><br><span class="line"></span><br><span class="line"><span class="comment">//再简化，方法引用</span></span><br><span class="line">Optional&lt;Integer&gt; reduce2 = list1.stream().map(Person::getAge).reduce(Integer::sum);</span><br></pre></td></tr></table></figure>

<p>收集的常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;R,A&gt; R collect(Collector&lt;? super T,A,R&gt; collector)</td>
<td>使用收集器对元素进行处理</td>
</tr>
</tbody></table>
<h3 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h3><ul>
<li>java.util.Optional类可以理解为一个简单的容器，其值可能是null或者不是null，代表一个值存在或不存在。</li>
<li>该类的引入很好的解决空指针异常，不用显式进行空值检测。</li>
</ul>
<p>常用方法</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>static Optional ofNullable(T value)</td>
<td>根据参数指定数值来得到Optional类型的对象</td>
</tr>
<tr>
<td>Optional map(Function&lt;? super T,? extends U&gt; mapper)</td>
<td>根据参数指定规则的结果来得到Optional类型的对象</td>
</tr>
<tr>
<td>T orElse(T other)</td>
<td>若该值存在就返回，否则返回other的数值。</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="keyword">null</span>;</span><br><span class="line">Optional&lt;String&gt; optional = Optional.ofNullable(s);</span><br><span class="line">System.out.println(optional.orElse(<span class="string">&quot;没有值&quot;</span>));  <span class="comment">//没有值</span></span><br></pre></td></tr></table></figure>

<h2 id="Java9新特性"><a href="#Java9新特性" class="headerlink" title="Java9新特性"></a>Java9新特性</h2><ul>
<li>Java9发布于2017年9月发布，带来了很多新特性，其中 主要的变化是模块化系统。</li>
</ul>
<p><strong>模块化</strong></p>
<ul>
<li><p>模块就是代码和数据的封装体，模块的代码被组织成多个包，每个包中包含Java类和接口，模块的数据则包括资源文件和其他静态信息。</p>
</li>
<li><p>语法格式：<br>在 module-info.java 文件中，我们可以用新的关键词module来声明一个模块，具体如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> ExamSystemClient &#123;</span><br><span class="line">    <span class="comment">//将org.de.model暴露出去</span></span><br><span class="line">    <span class="keyword">exports</span> org.de.Model;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> ExamSystemServer &#123;</span><br><span class="line">    <span class="comment">//需要该模块所暴露出来的东西</span></span><br><span class="line">    <span class="keyword">requires</span> ExamSystemClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>模块化的优势：</p>
<ul>
<li>减少内存的开销。 </li>
<li>可简化各种类库和大型应用的 开发和维护。</li>
<li>安全性，可维护性，提高性能。</li>
</ul>
<p><strong>砖石操作符</strong></p>
<p>在Java9中允许在匿名内部类的使用中使用钻石操作符。即泛型的菱形特性，可以在匿名内部类中使用。</p>
<p><strong>集合工厂方法</strong></p>
<ul>
<li>Java9的List、Set和Map集合中增加了静态工厂方法of实现不可变实例的创建。</li>
<li>不可变体现在无法添加、修改和删除它们的元素。</li>
<li>不允许添加null元素对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">System.out.println(list);   <span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">//list.add(3);   //异常：java.lang.UnsupportedOperationException</span></span><br></pre></td></tr></table></figure>

<p>意义：</p>
<ul>
<li>保证线程安全：在并发程序中既保证线程安全性，也大大增强了并发时的效率。</li>
<li>被不可信的类库使用时会很安全。</li>
<li>如果一个对象不需要支持修改操作，将会节省空间和时间的开销。</li>
<li>可以当作一个常量来对待，并且这个对象在以后也不会被改变。</li>
</ul>
<p><strong>InputStream的增强</strong></p>
<p>InputStream类中提供了transferTo方法实现将数据直接传输到OutputStream中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  实现d://a.txt拷贝到d://b.txtw</span></span><br><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;d://a.txt&quot;</span>);</span><br><span class="line">    fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d://b.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//将 输入流InputStream数据 直接传输到 输出流OutputStream 中。</span></span><br><span class="line">    fis.transferTo(fos); </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Java10新特性"><a href="#Java10新特性" class="headerlink" title="Java10新特性"></a>Java10新特性</h2><ul>
<li>Java10于2018年3月发布，改进的关键点包括一个本地类型推断、一个垃圾回收的增强。</li>
<li>Java10计划只是一个短期版本，因此公开更新将在六个月内结束，9月份发布的Java11将是Java的长期支持（LTS）版本，LTS版本的发布每三年发布一次。</li>
</ul>
<p><strong>局部变量类型推断</strong></p>
<ul>
<li>Java10可以使用var作为局部变量类型推断标识符，此符号仅适用于局部变量，增强for循环的索引，以及传统for循环的本地变量。</li>
<li>它<strong>不能使用于</strong>方法形式参数，构造函数形式参数，方法返回类型，字段，catch形式参数或任何其他类型的变量声明。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动推断类型</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;            <span class="comment">//a是int类型</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;abc&quot;</span>;        <span class="comment">//b是String类型</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Person(); <span class="comment">//c是Person类型</span></span><br></pre></td></tr></table></figure>

<p>意义：</p>
<ul>
<li>标识符var不是关键字，只是一个保留的类型名称。这意味着var用作变量，<br>方法名或包名的代码不会受到影响，但var不能作为类或则接口的名字。</li>
<li>避免了信息冗余。</li>
<li>对齐了变量名。</li>
<li>更容易阅读。</li>
</ul>
<h2 id="Java11新特性"><a href="#Java11新特性" class="headerlink" title="Java11新特性"></a>Java11新特性</h2><p>Java11于2018年9月正式发布，这是 Java 大版本周期变化 后的第一个长期支持版本，非常值得关注。</p>
<p><strong>简单的编译运行操作</strong></p>
<ul>
<li><p>正常的编译运行操作：<br>javac 文件名.java(将编写的java文件编译成字节码文件)    —&gt;    java 文件名(将编译好的字节码文件解释并运行)</p>
</li>
<li><p>在Java11中可以使用java命令一次性进行编译和运行操作。</p>
</li>
<li><p>执行源文件中的第一个类必须包含主方法。</p>
</li>
<li><p>不可以使用其它源文件中自定义的类。</p>
</li>
</ul>
<p><strong>String类新增方法</strong></p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>boolean isBlank()</td>
<td>判断字符串是否为空或只包含空白代码点</td>
</tr>
<tr>
<td>Optional map(Function&lt;? super T,? extends U&gt; mapper)</td>
<td>根据参数指定规则的结果来得到Optional类型的对象</td>
</tr>
<tr>
<td>T orElse(T other)</td>
<td>若该值存在就返回，否则返回other的数值。</td>
</tr>
</tbody></table>
<h1 id="在线考试系统"><a href="#在线考试系统" class="headerlink" title="在线考试系统"></a>在线考试系统</h1><p>（无）</p>
<h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><p><strong>IO回顾：</strong></p>
<ul>
<li>IO：Input OutPut（输入 输出）</li>
<li>IO技术的作用：解决设备和设备之间的数据传输问题</li>
<li>IO的应用场景：图片上传、下载、打印机打印信息表、解析XML…</li>
</ul>
<p><strong>NIO：</strong></p>
<ul>
<li>即 <code>Java New IO</code></li>
<li>是1个全新的、 <code>JDK 1.4</code>后提供的 <code>IO API</code></li>
<li>Java API中提供了两套NIO，一套是针对<code>标准输入输出NIO</code>，另一套就是<code>网络编程NIO</code></li>
</ul>
<p><strong>作用和区别：</strong></p>
<ul>
<li><code>NIO</code>和<code>IO</code>有相同的作用和目的，但实现方式不同</li>
<li>可替代 标准<code>Java IO</code> 的<code>IO API</code></li>
<li>IO是以<strong>流</strong>的方式处理数据，而NIO是以<strong>块</strong>的方式处理数据。</li>
</ul>
<p><strong>流和块的比较：</strong></p>
<ul>
<li><p>NIO和IO最大的区别是数据打包和传输方式。</p>
</li>
<li><p>IO是以<strong>流</strong>的方式处理数据，而NIO是以<strong>块</strong>的方式处理数据。</p>
</li>
</ul>
<p><strong>面向流</strong>的IO一次一个字节的处理数据，一个输入流产生一个字节，一个输出流就消费一个字节。</p>
<p><strong>面向块</strong>的IO系统以块的形式处理数据。每一个操作都在一步中产生或消费一个数据块。按块要比按流快的多</p>
<p>（举例：拿水龙头来比喻：流就像水龙头滴水，每次只有一滴；块就像水龙头往水壶放水，放满之后对一整个水壶的水进行操作）</p>
<h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><p><code>Java NIO</code>的核心组件 包括：</p>
<ul>
<li><p>缓冲区（<code>Buffer</code>）</p>
</li>
<li><p>通道（<code>Channel</code>）</p>
</li>
<li><p>选择器（<code>Selector</code>）</p>
</li>
</ul>
<p>在NIO中并不是以流的方式来处理数据的，而是以buffer缓冲区和Channel管道<strong>配合使用</strong>来处理数据。</p>
<p>Selector是因为NIO可以使用异步的非阻塞模式才加入的东西</p>
<p>简单理解一下：</p>
<ul>
<li><p>Channel管道比作成铁路，buffer缓冲区比作成火车(运载着货物)<br>而我们的NIO就是<strong>通过Channel管道运输着存储数据的Buffer缓冲区的来实现数据的处理</strong>！</p>
</li>
<li><p>要时刻记住：Channel不与数据打交道，它只负责运输数据。与数据打交道的是Buffer缓冲区</p>
</li>
<li><p><strong>Channel–&gt;运输</strong><br><strong>Buffer–&gt;数据</strong></p>
</li>
</ul>
<p>相对于传统IO而言，<strong>流是单向的</strong>。对于NIO而言，有了Channel管道这个概念，我们的<strong>读写都是双向</strong>的(铁路上的火车能从广州去北京、自然就能从北京返还到广州)！</p>
<h2 id="Buffer缓存区"><a href="#Buffer缓存区" class="headerlink" title="Buffer缓存区"></a>Buffer缓存区</h2><p>作用：缓冲区，用来存放具体要被传输的数据，比如文件、scoket 等。这里将数据装入 Buffer 再通过通道进行传输。</p>
<p>Buffer 就是一个数组，用来保存不同数据类型的数据</p>
<p>在 NIO 中，所有的缓冲区类型都继承于抽象类 Buffer，最常用的就是 ByteBuffer，对于 Java 中的基本类型，基本都有一个具体 Buffer 类型与之相对应，它们之间的继承关系如下图所示</p>
<p><a href="https://imgtu.com/i/b08ppd"><img src="https://s4.ax1x.com/2022/03/05/b08ppd.png" alt="b08ppd.png"></a></p>
<ul>
<li>ByteBuffer：存储字节数据到缓冲区</li>
<li>ShortBuffer：存储字符串数据到缓冲区</li>
<li>CharBuffer： 存储字符数据到缓冲区</li>
<li>IntBuffer：存储整数数据到缓冲区</li>
<li>LongBuffer：存储长整型数据到缓冲区</li>
<li>DoubleBuffer：存储小数到缓冲区</li>
<li>FloatBuffer：存储小数到缓冲区</li>
</ul>
<p>对于 Java 中的基本数据类型，都有一个 Buffer 类型与之相对应，最常用的自然是<strong>ByteBuffer</strong> 类（二进制数据）</p>
<h3 id="ByteBuffer的创建方式"><a href="#ByteBuffer的创建方式" class="headerlink" title="ByteBuffer的创建方式"></a>ByteBuffer的创建方式</h3><ul>
<li><p>在堆中创建缓冲区：allocate(int capacity)， 常用。</p>
</li>
<li><p>在系统内存创建缓冲区：allocateDirect(int capacity)</p>
</li>
<li><p>通过普通数组创建缓冲区：wrap(byte[] arr)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在堆中创建缓冲区：allocate(int capacity)，常用</span></span><br><span class="line">ByteBuffer byteBuffer1 = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在系统内存创建缓冲区：allocateDirect(int capacity)</span></span><br><span class="line">ByteBuffer byteBuffer2 = ByteBuffer.allocateDirect(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过普通数组创建缓冲区：wrap(byte[] arr)</span></span><br><span class="line"><span class="keyword">byte</span>[] bArr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">ByteBuffer byteBuffer3 = ByteBuffer.wrap(bArr);</span><br></pre></td></tr></table></figure>

<h3 id="常用方法-4"><a href="#常用方法-4" class="headerlink" title="常用方法"></a>常用方法</h3><p>拿到一个缓冲区我们往往会做什么？很简单，就是<strong>读取缓冲区的数据/写数据到缓冲区中</strong>。</p>
<p>所以，缓冲区的核心方法就是:</p>
<ul>
<li>put(byte b) : 给缓冲区添加元素</li>
<li>get() :从缓存区获取一个元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Buffer对象</span></span><br><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//put放数据，byte类型数据。</span></span><br><span class="line">byteBuffer.put((<span class="keyword">byte</span>)<span class="number">10</span>);</span><br><span class="line">byteBuffer.put(<span class="string">&quot;nihao&quot;</span>.getBytes());</span><br><span class="line">byteBuffer.put((<span class="keyword">byte</span>)<span class="number">5.12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="keyword">byte</span>[] bArr = byteBuffer.array();</span><br><span class="line">System.out.println(Arrays.toString(bArr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//get取数据</span></span><br><span class="line"><span class="keyword">byte</span> b = byteBuffer.get(<span class="number">0</span>);</span><br><span class="line">System.out.println(b);   <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h3 id="核心变量"><a href="#核心变量" class="headerlink" title="核心变量"></a>核心变量</h3><p>Buffer类维护了4个核心变量属性来提供<strong>关于其所包含的数组的信息</strong>。它们是：</p>
<ul>
<li>容量Capacity<br><strong>缓冲区能够容纳的数据元素的最大数量</strong>。容量在缓冲区创建时被设定，并且永远不能被改变。(不能被改变的原因也很简单，底层是数组嘛)</li>
</ul>
<ul>
<li><p>位置Position<br><strong>下一个要被读或写的元素的位置</strong>。Position会自动由相应的 <code>get( )</code>和 <code>put( )</code>函数更新。</p>
</li>
<li><p>界限Limit<br><strong>缓冲区中可以操作数据的大小</strong>，代表了当前缓冲区中一共有多少数据（从limit开始后面的位置不能操作）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以上三个属性值之间有一些相对大小的关系：0 &lt;= position &lt;= limit &lt;= capacity</span><br><span class="line">例：- 如果我们创建一个新的容量大小为20 的 ByteBuffer 对象，在初始化的时候，position 设置为 0，</span><br><span class="line"> limit 和 capacity 被设置为 10，在以后使用 ByteBuffer对象过程中，capacity 的值不会再发生变化，而其它两个个将会随着使用而变化。</span><br></pre></td></tr></table></figure></li>
</ul>
<p>核心变量值的变化过程如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//初始化的各属性值</span></span><br><span class="line">System.out.println(<span class="string">&quot;capacity = &quot;</span> + byteBuffer.capacity());  <span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="string">&quot;limit    = &quot;</span> + byteBuffer.limit());     <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//put放数据后各属性值的变化,position更新</span></span><br><span class="line"><span class="keyword">byte</span>[] bArr = <span class="string">&quot;javaSE&quot;</span>.getBytes();</span><br><span class="line">byteBuffer.put(bArr);</span><br><span class="line">System.out.println(<span class="string">&quot;capacity = &quot;</span> + byteBuffer.capacity());  <span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//6</span></span><br><span class="line">System.out.println(<span class="string">&quot;limit    = &quot;</span> + byteBuffer.limit());     <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//需要get取数据时，应该调用flip()。使得limit=position=6， position=0</span></span><br><span class="line">byteBuffer.flip();</span><br><span class="line">System.out.println(<span class="string">&quot;capacity = &quot;</span> + byteBuffer.capacity());  <span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="string">&quot;limit    = &quot;</span> + byteBuffer.limit());     <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] bArr2 = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuffer.limit()];  <span class="comment">//因为Buffer对象只有limit个数据</span></span><br><span class="line">byteBuffer.get(bArr2);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(bArr2));   <span class="comment">//javaSE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//get取数据后，各属性值的变化，position更新</span></span><br><span class="line">System.out.println(<span class="string">&quot;capacity = &quot;</span> + byteBuffer.capacity());  <span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//6</span></span><br><span class="line">System.out.println(<span class="string">&quot;limit    = &quot;</span> + byteBuffer.limit());     <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此时，需要put继续放数据，应该调用clear()。使得position=0, limit=capacity=10</span></span><br><span class="line">byteBuffer.clear();</span><br><span class="line">System.out.println(<span class="string">&quot;capacity = &quot;</span> + byteBuffer.capacity());  <span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="string">&quot;limit    = &quot;</span> + byteBuffer.limit());     <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>标记Mark<br>一个备忘位置。<strong>用于记录上一次读写的位置</strong>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//put放数据，position更新</span></span><br><span class="line">byteBuffer.put(<span class="string">&quot;ni&quot;</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用mark()标记此时的position,即2</span></span><br><span class="line">byteBuffer.mark();</span><br><span class="line"></span><br><span class="line"><span class="comment">//继续put放数据，position更新</span></span><br><span class="line">byteBuffer.put(<span class="string">&quot;hao&quot;</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用reset()，将position更新为上次mark()标记位置，即2。</span></span><br><span class="line">byteBuffer.reset();</span><br><span class="line">System.out.println(<span class="string">&quot;position = &quot;</span> + byteBuffer.position());  <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h2 id="Channel通道"><a href="#Channel通道" class="headerlink" title="Channel通道"></a>Channel通道</h2><p>通道（Channel）：由 java.nio.channels 包定义 的。Channel 表示 IO 源与目标打开的连接。 </p>
<p>Channel 类似于传统的“<strong>流</strong>”。</p>
<p>标准的IO基于字节流和字符流进行操作的，而NIO是基于通道（Channel）和缓冲区（Buffer）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中（白话: 就是数据传输用的通道，作用是打开到IO设备的连接，文件、套接字都行）</p>
<p>例：相当于一根管子，buffer中的数据可以通过管子写入被操作的资源当中，也可以将资源通过管子写入到buffer中去</p>
<h3 id="Channel接口"><a href="#Channel接口" class="headerlink" title="Channel接口"></a>Channel接口</h3><p> Java 为 Channel 接口提供的最主要实现类如下：</p>
<p><a href="https://imgtu.com/i/b0GGrt"><img src="https://s4.ax1x.com/2022/03/05/b0GGrt.png" alt="b0GGrt.png"></a></p>
<ul>
<li>FileChannel：用于读取、写入、映射和操作文件的通道。 </li>
<li>DatagramChannel：通过 UDP 读写网络中的数据通道。 </li>
<li>SocketChannel：通过 TCP 读写网络中的数据。 </li>
<li>ServerSocketChannel：可以监听新进来的 TCP 连接，对每一个新进来 的连接都会创建一个 SocketChannel。</li>
</ul>
<h3 id="FileChannel的使用"><a href="#FileChannel的使用" class="headerlink" title="FileChannel的使用"></a>FileChannel的使用</h3><p>使用FileChannel完成，将D://a.txt文件复制到D://b.txt</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException</span>&#123;</span><br><span class="line">    <span class="comment">//将D://a.txt文件复制到D://b.txt</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取输入输出流</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\a.txt&quot;</span>);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将输入输出流转换成FileChannel通道</span></span><br><span class="line">    FileChannel fileChannel1 = fis.getChannel();</span><br><span class="line">    FileChannel fileChannel2 = fos.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用Channel通道，缓冲区Buffer在里面传输数据</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环，读写</span></span><br><span class="line">    <span class="keyword">while</span>(fileChannel1.read(byteBuffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//flip之后，才能从Buffer缓冲区取出数据</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        fileChannel2.write(byteBuffer);</span><br><span class="line">        <span class="comment">//clear之后，才能继续在Buffer缓冲区放数据</span></span><br><span class="line">        byteBuffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    fos.close();</span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基于TCP编程"><a href="#基于TCP编程" class="headerlink" title="基于TCP编程"></a>基于TCP编程</h3><p>服务器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建服务器对象</span></span><br><span class="line">    ServerSocketChannel ssc = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定端口号</span></span><br><span class="line">    ssc.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置为非阻塞，就不会在accept那里一直等待客户端连接</span></span><br><span class="line">    <span class="comment">//ssc.configureBlocking(false);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待客户端连接</span></span><br><span class="line">    SocketChannel sc = ssc.accept();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Channel通道，利用Buffer缓冲区传输数据</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收客户端数据</span></span><br><span class="line">    <span class="keyword">int</span> len = sc.read(byteBuffer);</span><br><span class="line">    <span class="comment">//处理数据</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(byteBuffer.array(), <span class="number">0</span>, len));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反馈消息给客户端</span></span><br><span class="line">    byteBuffer.clear();</span><br><span class="line">    byteBuffer.put(<span class="string">&quot;收到！&quot;</span>.getBytes());</span><br><span class="line">    byteBuffer.flip();</span><br><span class="line">    sc.write(byteBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    sc.close();</span><br><span class="line">    ssc.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建客户端对象</span></span><br><span class="line">    SocketChannel sc = SocketChannel.open();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置连接的服务器的ip，端口</span></span><br><span class="line">    sc.connect(<span class="keyword">new</span> InetSocketAddress(InetAddress.getLocalHost(), <span class="number">8888</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过Channel通道，利用Buffer缓冲区传输数据</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">    byteBuffer.put(<span class="string">&quot;哈哈哈哈哈&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出数据给服务器</span></span><br><span class="line">    byteBuffer.flip();</span><br><span class="line">    sc.write(byteBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收服务器的消息</span></span><br><span class="line">    byteBuffer.clear();</span><br><span class="line">    <span class="keyword">int</span> len = sc.read(byteBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理数据</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(byteBuffer.array(), <span class="number">0</span>, len));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    sc.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Selector选择器"><a href="#Selector选择器" class="headerlink" title="Selector选择器"></a>Selector选择器</h2><p><strong>多路复用</strong>：<br>一个选择器可以同时监听多个服务器端口, 帮多个服务器端口同时等待客户端的访问</p>
<p><strong>关系：</strong></p>
<p>Channel和Buffer比较好理解 ，联系也比较密切，他们的关系简单来说就是：数据总是从通道中读到buffer缓冲区内，或者从buffer写入到通道中。</p>
<p>选择器（Selector） 是 Channel（通道）的多路复用器，Selector 可以同时监控多个 通道的 IO（输入输出） 状况。</p>
<p><strong>作用</strong>：<br>选择器提供选择执行已经就绪的任务的能力。从底层来看，Selector提供了询问通道是否已经准备好执行每个I/O操作的能力。Selector 允许单线程处理多个Channel。仅用单个线程来处理多个Channels的好处是，只需要更少的线程来处理通道。事实上，可以只用一个线程处理所有的通道，这样会大量的减少线程之间上下文切换的开销。</p>
<p><strong>可选择通道</strong></p>
<p>注意：并不是所有的Channel，都是可以被Selector 复用的。比方说，FileChannel就不能被选择器复用。为什么呢？</p>
<p>判断一个Channel 能被Selector 复用，有一个前提：判断他是否继承了一个抽象类SelectableChannel。如果继承了SelectableChannel，则可以被复用，否则不能。</p>
<p>SelectableChannle 的结构如下图：</p>
<p><a href="https://imgtu.com/i/b0YRgJ"><img src="https://s4.ax1x.com/2022/03/05/b0YRgJ.png" alt="b0YRgJ.png"></a></p>
<p>SelectableChannel类提供了实现通道的可选择性所需要的公共方法</p>
<p><strong>通道和选择器注册之后，他们是绑定的关系吗？</strong></p>
<p>答:不是。不是一对一的关系。一个通道可以被注册到多个选择器上，但对每个选择器而言只能被注册一次。</p>
<p>通道和选择器之间的关系，使用注册的方式完成。SelectableChannel可以被注册到Selector对象上，在注册的时候，需要指定通道的哪些操作，是Selector感兴趣的。</p>
<p><a href="https://imgtu.com/i/b0Yq8e"><img src="https://s4.ax1x.com/2022/03/05/b0Yq8e.png" alt="b0Yq8e.png"></a></p>
<h3 id="Channel注册到Selector上"><a href="#Channel注册到Selector上" class="headerlink" title="Channel注册到Selector上"></a>Channel注册到Selector上</h3><p>使用Channel.register（Selector sel，int ops）方法，将一个通道注册到一个选择器时。</p>
<p>​                                         第一个参数：指定通道要注册的选择器是谁</p>
<p>​                                         第二个参数：指定选择器需要查询的通道操作</p>
<p>可以供选择器查询的通道操作，从类型来分，包括以下四种：</p>
<p>​                                        （1）可读 : SelectionKey.OP_READ</p>
<p>​                                        （2）可写 : SelectionKey.OP_WRITE</p>
<p>​                                        （3）连接 : SelectionKey.OP_CONNECT</p>
<p>​                                        （4）接收 : SelectionKey.OP_ACCEPT</p>
<p>如果Selector对通道的多操作类型感兴趣，可以用“位或”操作符来实现：int key = SelectionKey.OP_READ | SelectionKey.OP_WRITE ;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将通道注册到选择器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1，创建Selector选择器</span></span><br><span class="line">    Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2，创建ServerSocketeChannel通道</span></span><br><span class="line">    ServerSocketChannel ssc = ServerSocketChannel.open();</span><br><span class="line">    <span class="comment">//绑定端口号</span></span><br><span class="line">    ssc.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">    <span class="comment">//设置非阻塞</span></span><br><span class="line">    ssc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3，将通道Channel注册到选择器Selector上，并指定监听的事件为“接收”事件</span></span><br><span class="line">    ssc.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面通过调用通道的register()方法会将它注册到一个选择器上。</p>
<p>首先需要注意的是：</p>
<p>与Selector一起使用时，Channel<strong>必须处于非阻塞模式</strong>下，否则将抛出异常IllegalBlockingModeException</p>
<h3 id="选择键SelectionKey"><a href="#选择键SelectionKey" class="headerlink" title="选择键SelectionKey"></a>选择键SelectionKey</h3><p>Channel和Selector的关系确定好后（注册），并且一旦通道处于某种就绪的状态，就可以被选择器查询到。这个工作，使用选择器Selector的select（）方法完成。select方法的作用，对感兴趣的通道操作，进行就绪状态的查询。</p>
<p>Selector可以不断的查询Channel中发生的操作的就绪状态。并且挑选感兴趣的操作就绪状态。一旦通道有操作的就绪状态达成，并且是Selector感兴趣的操作，就会被Selector选中，放入选择键集合中。</p>
<ul>
<li><p>select()：选择器等待客户端连接的方法，<br>阻塞问题:</p>
<pre><code>    1.在开始没有客户访问的时候是阻塞的
    2.在有客户来访问的时候方法会变成非阻塞的
    3.如果客户的访问被处理结束之后,又会恢复成阻塞的
</code></pre>
</li>
<li><p>selectedKeys()：选择器会把被连接的服务端对象放在Set集合中,这个方法就是返回一个Set集合</p>
</li>
</ul>
<h3 id="轮询查询就绪操作"><a href="#轮询查询就绪操作" class="headerlink" title="轮询查询就绪操作"></a>轮询查询就绪操作</h3><p>注册完后，万事俱备，下一步是查询就绪的操作。</p>
<p>通过Selector的 select() 方法，可以查询出已经就绪的通道操作的个数，这些就绪的状态集合，包存在一个元素是SelectionKey对象的Set集合中。</p>
<p>1，select()方法返回的int值，表示有多少通道已经就绪</p>
<p>2，通过调用Selector的selectedKeys()方法来访问已选择键集合，然后迭代集合的每一个选择键元素，根据就绪操作的类型，完成对应的操作：</p>
<p>服务器如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建服务器对象1</span></span><br><span class="line">        ServerSocketChannel ssc1 = ServerSocketChannel.open();</span><br><span class="line">        ssc1.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">5555</span>));</span><br><span class="line">        ssc1.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建服务器对象2</span></span><br><span class="line">        ServerSocketChannel ssc2 = ServerSocketChannel.open();</span><br><span class="line">        ssc2.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">6666</span>));</span><br><span class="line">        ssc2.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建服务器对象3</span></span><br><span class="line">        ServerSocketChannel ssc3 = ServerSocketChannel.open();</span><br><span class="line">        ssc3.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">7777</span>));</span><br><span class="line">        ssc3.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建选择器对象</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将通道分别注册到选择器上，监听的操作都为“接收”事件</span></span><br><span class="line">        ssc1.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        ssc2.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        ssc3.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//selector.select()类监听的事件“准备就绪”的个数</span></span><br><span class="line">        <span class="keyword">while</span>(selector.select() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//准备就绪的事件，会存放在selectedKeys()返回的Set集合中</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys().iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(selectionKeys.hasNext())&#123;</span><br><span class="line">                SelectionKey selectionKey = selectionKeys.next();</span><br><span class="line">                <span class="comment">//判断就绪的事件是什么事件，根据不同的事件执行不同的操作，这里只以“接收”事件为例</span></span><br><span class="line">                <span class="keyword">if</span>(selectionKey.isAcceptable())&#123;</span><br><span class="line">                    <span class="comment">//获取ServerSocketChannel管道</span></span><br><span class="line">                    ServerSocketChannel ssc = (ServerSocketChannel)selectionKey.channel();</span><br><span class="line">                    <span class="comment">//等待客户端连接</span></span><br><span class="line">                    SocketChannel sc = ssc.accept();</span><br><span class="line">                    <span class="comment">//获取数据</span></span><br><span class="line">                    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span>((len = sc.read(byteBuffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                        System.out.println(<span class="keyword">new</span> String(byteBuffer.array(),<span class="number">0</span>, len));</span><br><span class="line">                        byteBuffer.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//移除选择建</span></span><br><span class="line">                selectionKeys.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，可以创建多个客户端来访问这个服务器，端口为5555，6666，7777，都可以同时连接得上。</p>
]]></content>
      <categories>
        <category>jave</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>单体架构项目</title>
    <url>/2022/07/14/%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>一个javaWeb项目实战，教育课程管理系统，前后端分离开发。</p>
<span id="more"></span>

<h1 id="前后端分离开发"><a href="#前后端分离开发" class="headerlink" title="前后端分离开发"></a>前后端分离开发</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>前后端分离已成为互联网项目开发的业界标准使用方式，将前端和后端的开发进行解耦。并且前后端分离会为以后的大型分布式架构、微服务架构、多端化服务（各种客户端，比如浏览器、车载终端、安卓、IOS等）打下坚实的基础。</p>
<p><a href="https://imgtu.com/i/jWO7nK"><img src="https://s1.ax1x.com/2022/07/14/jWO7nK.jpg" alt="jWO7nK.jpg"></a></p>
<h2 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h2><p><strong>什么是接口文档</strong></p>
<p>​    在我们的项目中使用的是前后端分离开发方式，需要由前后端工程师共同定义接口，编写接口文档，之后大家都根据这个接口文档进行开发，到项目结束前都要一直进行接口文档的维护。 </p>
<p><strong>为什么要写接口文档</strong></p>
<ol>
<li>项目开发过程中前后端工程师有一个统一的文件进行沟通交流,并行开发</li>
<li>项目维护中或者项目人员更迭，方便后期人员查看、维护 </li>
</ol>
<p><strong>接口规范是什么</strong> </p>
<p>一个接口的描述至少包括下面几项:</p>
<ul>
<li><p>名称: <strong>findCourseList</strong></p>
</li>
<li><p>描述:  根据条件查询课程信息</p>
</li>
<li><p>URL: <a href="http://localhost:8080/lagou_edu_home/course/">http://localhost:8080/lagou_edu_home/course/</a></p>
</li>
<li><p>请求方式: GET</p>
</li>
<li><p>请求参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">methodName:&quot;findCourseList&quot;;</span><br></pre></td></tr></table></figure></li>
<li><p>响应结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;status&quot;: &quot;0&quot;,</span><br><span class="line">    &quot;msg&quot;: &quot;success&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p><strong>前后端耦合的开发方式</strong></p>
<p>​    这种方式中 Java程序员又当爹又当妈，又搞前端，又搞后端。 正所谓术业有专攻，一个人如果什么都会，那么他肯定也什么都不精. </p>
<p><strong>前后端分离的开发方式</strong></p>
<ol>
<li>前后端分离的模式下，如果发现Bug，可以快速定位是谁的问题，不会出现互相踢皮球的现象 </li>
<li>前后端分离可以减少后端服务器的并发/负载压力。除了接口以外的其他所有HTTP请求全部转移到前端Nginx上，接口的请求则转发调用Tomcat.</li>
<li>前后端分离的模式下，即使后端服务器暂时超时或宕机了，前端页面也会正常访问，只不过数据刷不出来而已。 </li>
<li>前后端分离会更加合理的分配团队的工作量，减轻后端团队的工作量，提高了性能和可扩展性。 </li>
</ol>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p><strong>后端</strong></p>
<table>
<thead>
<tr>
<th>后端技术</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Web层</strong></td>
<td>a) Servlet：前端控制器<br />b) Filter：过滤器 <br />c) BeanUtils：数据封装</td>
</tr>
<tr>
<td><strong>Service层</strong></td>
<td>a) 业务处理</td>
</tr>
<tr>
<td><strong>dao层</strong></td>
<td>a) Mysql：数据库<br />b) Druid：数据库连接池<br />c) DBUtils: 操作数据库</td>
</tr>
</tbody></table>
<p><strong>前端</strong></p>
<table>
<thead>
<tr>
<th>前端技术</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Vue.js</strong></td>
<td>是一套用于构建用户界面的渐进式<strong>JavaScript框架</strong></td>
</tr>
<tr>
<td><strong>Element UI库</strong></td>
<td>element-ui 是饿了么前端出品的基于 Vue.js的 后台组件库，<br>方便程序员进行页面快速布局和构建</td>
</tr>
<tr>
<td><strong>node.js</strong></td>
<td>简单的说 Node.js 就是运行在服务端的 JavaScript 运行环境 .</td>
</tr>
<tr>
<td><strong>axios</strong></td>
<td>对ajax的封装, 简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，</td>
</tr>
</tbody></table>
<h2 id="项目开发环境"><a href="#项目开发环境" class="headerlink" title="项目开发环境"></a>项目开发环境</h2><ul>
<li>开发工具<ul>
<li>后端: IDEA 2019</li>
<li>前端: VS code</li>
<li>数据库: SQLYog</li>
</ul>
</li>
<li>开发环境<ul>
<li>JDK 11</li>
<li>Maven 3.6.3</li>
<li>MySQL 5.7</li>
</ul>
</li>
</ul>
<h1 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h1><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p><strong>介绍</strong></p>
<p>​    Maven是一个跨平台的项目管理工具。作为Apache组织的一个颇为成功的开源项目，其主要服务于基于Java平台的项目创建，依赖管理和项目信息管理。maven是Apache的顶级项目，解释为“专家，内行”，它是一个项目管理的工具，maven自身是纯java开发的，可以使用maven对java项目进行构建、依赖管理。</p>
<p><strong>Maven作用</strong></p>
<ul>
<li>依赖管理<ul>
<li>依赖指的就是是 我们项目中需要使用的第三方Jar包, 一个大一点的工程往往需要几十上百个Jar包,按照我们之前的方式,每使用一种Jar,就需要导入到工程中,还要解决各种Jar冲突的问题.</li>
<li>Maven可以对Jar包进行统一的管理,包括快速引入Jar包,以及对使用的 Jar包进行统一的版本控制</li>
</ul>
</li>
<li>一键构建项目<ul>
<li>之前我们创建项目,需要确定项目的目录结构,比如<code>src</code> 存放Java源码, <code>resources</code>存放配置文件,还要配置环境比如JDK的版本等等,如果有多个项目 那么就需要每次自己搞一套配置,十分麻烦</li>
<li>Maven为我们提供了一个标准化的Java项目结构,我们可以通过Maven快速创建一个标准的Java项目.</li>
</ul>
</li>
</ul>
<h3 id="下载和配置"><a href="#下载和配置" class="headerlink" title="下载和配置"></a>下载和配置</h3><ul>
<li>下载：</li>
</ul>
<p>使用 Maven 管理工具，我们首先要到官网去下载它的安装软件。<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a> </p>
<p><a href="https://imgtu.com/i/jWXRDf"><img src="https://s1.ax1x.com/2022/07/14/jWXRDf.png" alt="jWXRDf.png"></a></p>
<ul>
<li>下载完成：</li>
</ul>
<p><a href="https://imgtu.com/i/jWXhVS"><img src="https://s1.ax1x.com/2022/07/14/jWXhVS.png" alt="jWXhVS.png"></a></p>
<ul>
<li>安装：</li>
</ul>
<p>Maven 下载后，将 Maven 解压到一个没有中文没有空格的路径下，比如D:\SoftwareStudy\maven 下面。 解压后目录结构如下：</p>
<ol>
<li>bin:存放了 maven 的命令</li>
<li>boot:存放了一些 maven 本身的引导程序，如类加载器等</li>
<li>conf:存放了 maven 的一些配置文件，如 setting.xml 文件 </li>
<li>lib:存放了 maven 本身运行所需的一些 jar 包 </li>
</ol>
<ul>
<li>配置环境变量：</li>
</ul>
<ol>
<li><p>配置 MAVEN_HOME ，变量值就是你的 maven 安装的路径（bin 目录之前一级目录） </p>
</li>
<li><p>将MAVEN_HOME 添加到Path系统变量，指定到bin目录</p>
</li>
</ol>
<ul>
<li>测试</li>
</ul>
<p>打开命令行，输入 mvn –v命令。<br>看到 maven 的版本为 3.6.3 及 java 版本为 jdk-11 即为安装 成功。 </p>
<h3 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h3><ul>
<li><strong>本地仓库</strong>:    位于自己计算机中的仓库, 用来存储从远程仓库或中央仓库下载的插件和 jar 包，</li>
<li><strong>远程仓库</strong>:    需要联网才可以使用的仓库，阿里提供了一个免费的maven 远程仓库。</li>
<li><strong>中央仓库</strong>:    在 maven 软件中内置一个远程仓库地址 <a href="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</a> ，它是中 央仓库，服务于整个互联网，它是由 Maven 团队自己维护，里面存储了非常全的 jar 包，它包 含了世界上大部分流行的开源项目构件</li>
</ul>
<p><strong>Maven 本地仓库的配置</strong> </p>
<ol>
<li><p>maven仓库默认是在 C盘  .m2 目录下,我们不要将仓库放在C盘,所以重新配置一下.</p>
</li>
<li><p>创建一个文件夹作为本地仓库，如D:\SoftwareStudy\maven\repository（注意最好放在没有中文及空格的目录下）。 </p>
</li>
<li><p>在maven安装目录中,进入 conf\settings.xml 文件中, 我们在这个文件中, 进行本地仓库的配置，如下:</p>
</li>
</ol>
<p><a href="https://imgtu.com/i/jWjodO"><img src="https://s1.ax1x.com/2022/07/14/jWjodO.png" alt="jWjodO.png"></a></p>
<p><strong>配置阿里云远程仓库</strong></p>
<p>Maven默认的远程仓库是在国外, 所以下载jar包时速度会非常慢, 这里推荐大家使用我大天朝的阿里云仓库</p>
<ol>
<li>打开 settings.xml,找到 mirrors 标签 , 下面的内容复制到  mirrors中 即可</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">        http://maven.aliyun.com/nexus/content/groups/public/</span><br><span class="line">    <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h3><h4 id="IDEA中配置Maven"><a href="#IDEA中配置Maven" class="headerlink" title="IDEA中配置Maven"></a><strong>IDEA中配置Maven</strong></h4><ol>
<li><p>打开IDEA 创建一个新的project</p>
</li>
<li><p>首先打开IDEA 选择File –&gt; Settings  –&gt; 搜素maven,就会看到如下界面，修改</p>
</li>
</ol>
<p><a href="https://imgtu.com/i/jWvEyq"><img src="https://s1.ax1x.com/2022/07/14/jWvEyq.png" alt="jWvEyq.png"></a></p>
<h4 id="创建Maven工程"><a href="#创建Maven工程" class="headerlink" title="创建Maven工程"></a><strong>创建Maven工程</strong></h4><ol>
<li>创建module，选中创建一个 maven 工程，点击 Next填写项目信息 </li>
</ol>
<p><a href="https://imgtu.com/i/jWv3lR"><img src="https://s1.ax1x.com/2022/07/14/jWv3lR.png" alt="jWv3lR.png"></a></p>
<ol start="2">
<li>创建好的工程,长这个样子</li>
</ol>
<p><a href="https://imgtu.com/i/jWvGOx"><img src="https://s1.ax1x.com/2022/07/14/jWvGOx.png" alt="jWvGOx.png"></a></p>
<p>目录说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java 		 —— 存放项目的.java 文件 </span><br><span class="line">src/main/resources 	 —— 存放项目资源文件，如数据库的配置文件 </span><br><span class="line">src/test/java 		—— 存放所有单元测试.java 文件，如 JUnit 测试类 </span><br><span class="line">target 			    —— 项目输出位置，编译后的class 文件会输出到此目录 </span><br><span class="line">pom.xml              ——maven 项目核心配置文件 </span><br></pre></td></tr></table></figure>



<h4 id="Maven工程改造"><a href="#Maven工程改造" class="headerlink" title="Maven工程改造"></a><strong>Maven工程改造</strong></h4><p>当前创建的maven项目是一个 普通的Java项目,不是web项目,我们要进行一下改造</p>
<ol>
<li><p>在main目录下创建一个webapp文件夹</p>
</li>
<li><p>选择  project Structure —&gt; facets—&gt; 点击+号 添加web —&gt; 选择当前工程hello_maven</p>
</li>
<li><p>修改路径信息，修改为 刚刚创建的webapp目录</p>
</li>
</ol>
<p><a href="https://imgtu.com/i/jWvD1A"><img src="https://s1.ax1x.com/2022/07/14/jWvD1A.png" alt="jWvD1A.png"></a></p>
<ol start="4">
<li>点击ok 后，项目就变为了web项目,webapp目录图标有个蓝色圆圈, 在webapp目录下再创建一个 index.jsp,就OK了</li>
</ol>
<h4 id="pom核心配置文件"><a href="#pom核心配置文件" class="headerlink" title="pom核心配置文件"></a><strong>pom核心配置文件</strong></h4><p>一个 maven 工程都有一个 pom.xml 文件，通过 pom.xml 文件定义项目的信息、项目依赖、引入插件等等。</p>
<p>1)坐标概念</p>
<p>一个Maven工程就是由<code>groupId</code>，<code>artifactId </code>和 <code>version</code> 作为唯一标识, 我们在引用其他第三方库的时候，也是通过这3个变量确定。</p>
<p>在maven中坐标就是为了定位一个唯一确定的jar包。</p>
<p>Maven坐标主要组成(GAV) - 确定一个jar在互联网位置 </p>
<table>
<thead>
<tr>
<th>标签</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>groupId</strong></td>
<td>定义当前Maven组织名称,通常是公司名</td>
</tr>
<tr>
<td><strong>artifactId</strong></td>
<td>定义实际项目名称</td>
</tr>
<tr>
<td><strong>version</strong></td>
<td>定义当前项目的当前版本</td>
</tr>
<tr>
<td><strong>packaging</strong></td>
<td>打包类型<br />jar：执行 package 会打成 jar 包       war：执行 package 会打成 war 包</td>
</tr>
<tr>
<td><strong>dependency</strong></td>
<td>使用 <code>&lt;dependency&gt; </code>声明一个依赖后，Maven就会自动下载这个依赖包</td>
</tr>
</tbody></table>
<ol start="2">
<li>pom.xml 文件中引入依赖包的坐标，例如servlet的jar包</li>
</ol>
<table>
<thead>
<tr>
<th>标签</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>dependencies</strong></td>
<td>表示依赖关系</td>
</tr>
<tr>
<td><strong>dependency</strong></td>
<td>使用 <code>&lt;dependency&gt; </code>声明一个依赖后，Maven就会自动下载这个依赖包</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>依赖范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>compile</td>
<td>编译范围，指 A在编译时依赖 B，此范围为默认依赖范围。编译范围的依赖会用在 编译、测试、运行，由于运行时需要所以编译范围的依赖会被打包。</td>
</tr>
<tr>
<td>provided</td>
<td>provided 依赖只有在当 JDK 或者一个容器已提供该依赖之后才使用， provided 依 赖在编译和测试时需要，在运行时不需要，比如：servlet api 被 tomcat 容器提供。</td>
</tr>
<tr>
<td>runtime</td>
<td>runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如：jdbc 的驱动包。由于运行时需要所以 runtime 范围的依赖会被打包。</td>
</tr>
<tr>
<td>test</td>
<td>test 范围依赖 在编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用， 比如：junit。由于运行时不需要所以test范围依赖不会被打包。</td>
</tr>
<tr>
<td>system</td>
<td>system 范围依赖与 provided 类似，但是你必须显式的提供一个对于本地系统中 JAR 文件的路径，需要指定 systemPath 磁盘路径，system依赖不推荐使用。</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 项目名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 模块名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 版本信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖范围 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...其他依赖包坐标</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>坐标查找：</p>
<p>输入网址,进入网址<a href="https://mvnrepository.com/">https://mvnrepository.com/</a> , 进行查询：</p>
<p><a href="https://imgtu.com/i/jWzSPg"><img src="https://s1.ax1x.com/2022/07/14/jWzSPg.png" alt="jWzSPg.png"></a></p>
<p>点击进入后,可以看到各个版本的信息,选择3.1.0</p>
<p><a href="https://imgtu.com/i/jWzCxs"><img src="https://s1.ax1x.com/2022/07/14/jWzCxs.png" alt="jWzCxs.png"></a></p>
<p>3)添加编译插件,  设置 jdk 编译版本 </p>
<p>本教程使用 jdk11，需要设置编译版本为 11，这里需要使用 maven 的插件来设置</p>
<p>在pom中加入如下配置: </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- properties 是全局设置,可以设置整个maven项目的编译器 JDK版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 重点  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在build中 我们需要指定一下项目的JDK编译版本,maven默认使用1.5版本进行编译</span></span><br><span class="line"><span class="comment">    注意 build 与 dependencies是平级关系,标签不要写错位置  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">release</span>&gt;</span>11<span class="tag">&lt;/<span class="name">release</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="运行Maven项目"><a href="#运行Maven项目" class="headerlink" title="运行Maven项目"></a><strong>运行Maven项目</strong></h4><ol>
<li><p>写项目代码</p>
</li>
<li><p>配置tomcat ,部署项目</p>
</li>
<li><p>运行项目, 默认访问 index.jsp</p>
</li>
</ol>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h4><ol>
<li>一个maven项目生命周期</li>
</ol>
<p>使用 maven 完成项目的构建，项目构建包括：清理、编译、测试、部署等过程，maven 将这些 过程规范为一个生命周期</p>
<p>maven 通过执行一些简单命令即可实现上边生命周期的各个过程</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>mvn compile</strong></td>
<td>完成编译操作 , 执行完毕后，会生成target目录，该目录中存放了编译后的字节码文件。</td>
</tr>
<tr>
<td><strong>mvn clean</strong></td>
<td>执行完毕后，会将target目录删除.</td>
</tr>
<tr>
<td><strong>mvn test</strong></td>
<td>执行完毕后，会在target目录中生成三个文件夹：<br />surefire、surefire-reports（测试报告）、test-classes（测试的字节码文件）</td>
</tr>
<tr>
<td><strong>mvn package</strong></td>
<td>完成打包操作, 执行完毕后，会在target目录中生成一个文件，该文件可能是 jar、war</td>
</tr>
<tr>
<td><strong>mvn install</strong></td>
<td>执行 mvn install命令，完成将打好的jar包安装到本地仓库的操作 ,<br /> 执行完毕后，会在本地仓库中出现安装后的jar包，方便其他工程引用</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<ol start="2">
<li>idea中安装好maven后, 在界面左侧有一个maven视图, 里面有对应的命令插件,可以执行上面表格中的命令</li>
</ol>
<p><a href="https://imgtu.com/i/jWzowV"><img src="https://s1.ax1x.com/2022/07/14/jWzowV.png" alt="jWzowV.png"></a></p>
<ol start="3">
<li>工具栏介绍</li>
</ol>
<p><a href="https://imgtu.com/i/jfSife"><img src="https://s1.ax1x.com/2022/07/14/jfSife.png" alt="jfSife.png"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.根据pom.xml文件重新导入所有Maven项目和依赖,刷新</span><br><span class="line">2.创建源码（重新编译）并更新目录</span><br><span class="line">3.下载源码或文档</span><br><span class="line">4.添加Maven项目</span><br><span class="line">5.执行生命周期中的阶段，选中lifecycle选项中生命周期中的一个阶段（phase），才能点击执行。</span><br><span class="line">6.运行Maven生命周期或插件</span><br><span class="line">7.切换离线模式，就是关闭和远程仓库的链接，从本地仓库中获取，也不能将jar包提交到远程仓库</span><br><span class="line">8.是否跳过测试，点击选中就可以跳过测试，在点击选择取消跳过测试</span><br><span class="line">9.展示当前选中的maven项目jar包的依赖，并且可以直接在图形化依赖图上进行排除依赖操作</span><br><span class="line">10.收起下面展开的视图</span><br><span class="line">11.跳转到maven的Setting页面</span><br></pre></td></tr></table></figure>

<h2 id="后端搭建"><a href="#后端搭建" class="headerlink" title="后端搭建"></a>后端搭建</h2><p><strong>创建数据库</strong></p>
<p>使用SQLYog 执行SQL脚本 ,导入数据库及表</p>
<p><a href="https://imgtu.com/i/jfS51H"><img src="https://s1.ax1x.com/2022/07/14/jfS51H.png" alt="jfS51H.png"></a></p>
<p><strong>创建项目</strong></p>
<p>1）创建maven项目</p>
<p>2）改造成web项目</p>
<p>3）添加其他目录</p>
<p><a href="https://imgtu.com/i/jfplE6"><img src="https://s1.ax1x.com/2022/07/14/jfplE6.png" alt="jfplE6.png"></a></p>
<p><strong>导入</strong></p>
<p>1）导入pom.xml（全局配置，依赖包，插件）</p>
<p>2）导入工具类及配置文件</p>
<p>3）导入表对应的实体类</p>
<p>Lombok介绍<br>在项目中使用Lombok可以减少很多重复代码的书写。比如说getter/setter/toString等方法的编写。</p>
<p>IDEA中安装 lombok插件<br>打开IDEA的Setting –&gt; 选择Plugins选项 –&gt; 搜索lombok –&gt; 点击安装 –&gt; 安装完成重启IDEA </p>
<p>在项目中添加Lombok依赖jar，在pom.xml文件中添加如下部分:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Lombok常用注解</p>
<ul>
<li><p>@Getter/@Setter:   作用类上，生成所有成员变量的getter/setter方法</p>
</li>
<li><p>@ToString :  作用于类，覆盖默认的toString()方法 ,可以通过of属性限定显示某些字段，通过exclude属性排除某些字段</p>
</li>
<li><p>@AllArgsConstructor：生成全参构造器</p>
</li>
<li><p>@NoArgsConstructor：生成无参构造器</p>
</li>
<li><p>@Data:  该注解使用在<strong>类</strong>上，该注解会提供 <code>getter</code>、<code>setter</code>、<code>equals</code>、<code>hashCode</code>、<code>toString</code> 方法。</p>
</li>
</ul>
<p><strong>添加通用的Servlet</strong></p>
<p>每个模块下都有很多的功能, 比如课程模块 的 新建课程, 上架课程,下架课程,根据课程名查询等等功能 , 每一个功能都是一个Servlet.</p>
<p>问题:<br>一个功能就是一个Servlet, 那么一个项目下有海量的Servlet, 这种方式好吗 ?<br>Servlet太多了,不好管理, 而且Servlet越多 服务器运行就越慢,资源消耗就越多.</p>
<p>解决：<br>我们使用一个Servlet对应一个模块的方式进行开发，包含多个功能</p>
<p>要求请求参数要包含methodName。表示方法名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  模拟课程模块 ,模块中有很多功能</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  doGet()方法作为调度器 控制器,根据请求的功能不同,调用对应的方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取参数</span></span><br><span class="line">        <span class="comment">//获取要调用的方法名</span></span><br><span class="line">        String methodName = req.getParameter(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.业务处理</span></span><br><span class="line">        <span class="comment">//判断 执行对应的方法</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;addCourse&quot;</span>.equals(methodName))&#123;</span><br><span class="line">            addCourse(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;findByStatus&quot;</span>.equals(methodName))&#123;</span><br><span class="line">            findByName(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;findByStatus&quot;</span>.equals(methodName))&#123;</span><br><span class="line">            findByStatus(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;访问的功能不存在!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  2.模块对应的功能部分</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCourse</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新建课程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByStatus</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;根据状态查询&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByName</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;根据课程名称查询&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：有多少功能，就要写多少个if判断，扩展性差，效率低</p>
<p>解决：可以使用反射去对代码进行优化, 提升代码的可维护性/可扩展性.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把if判断那部分，用反射代替</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取参数</span></span><br><span class="line">    <span class="comment">//获取要调用的方法名</span></span><br><span class="line">    String methodName = req.getParameter(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.业务处理</span></span><br><span class="line">    <span class="keyword">if</span>(methodName != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//通过反射优化代码,提升代码的可维护性</span></span><br><span class="line">        <span class="comment">//1.获取字节码对象  this = TestServlet对象</span></span><br><span class="line">        Class c = <span class="keyword">this</span>.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.根据传入的方法名, 获取对应方法对象,执行方法即可</span></span><br><span class="line">        Method method = c.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.调用Method对象的 invoke()方法,执行对应的功能</span></span><br><span class="line">        method.invoke(<span class="keyword">this</span>,req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请求的功能不存在! !&quot;</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：每个Servlet都需要写一份相同的反射代码，效率底</p>
<p>解决：将反射相关的代码抽取到一个类中 <strong>BaseServlet</strong>, 让BaseServlet去继承HTTPServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取参数</span></span><br><span class="line">            <span class="comment">//获取要调用的方法名</span></span><br><span class="line">            String methodName = req.getParameter(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.业务处理</span></span><br><span class="line">            <span class="keyword">if</span>(methodName != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//通过反射优化代码,提升代码的可维护性</span></span><br><span class="line">                <span class="comment">//1.获取字节码对象  this = TestServlet对象</span></span><br><span class="line">                Class c = <span class="keyword">this</span>.getClass();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.根据传入的方法名, 获取对应方法对象,执行方法即可</span></span><br><span class="line">                Method method = c.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//3.调用Method对象的 invoke()方法,执行对应的功能</span></span><br><span class="line">                method.invoke(<span class="keyword">this</span>,req,resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请求的功能不存在! !&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1）以后写的servlet类，都去继承BaseServlet。</p>
<p>2）Servlet中只保留 业务相关代码。</p>
<p>3）当有请求访问到 Servlet时, 发现没有doGet和doPost方法,就会去父类中找,从而执行BaseServlet中的<br>doGet方法。</p>
<p>例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;...添加功能执行中。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;...更新功能执行中。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;...查询功能执行中。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>添加filter</strong></p>
<p>给所有url添加请求和响应的编码设置，解决乱码问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Filter 解决乱码</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest request= (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response= (HttpServletResponse)servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决请求乱码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决响应乱码</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>目前, 前后端的ajax通讯几乎用的都是json格式的了,所以在开发的过程中,我们经常会涉及到JSON数据的转换</p>
<p>JSON的特点:</p>
<ul>
<li>JSON 是一种轻量级的数据交换格式。</li>
<li>JSON采用完全独立于语言的文本格式，就是说不同的编程语言JSON数据是一致的。</li>
<li>JSON易于人阅读和编写，同时也易于机器解析和生成(一般用于提升网络传输速率)。</li>
</ul>
<p>XML与JSON的区别：</p>
<ul>
<li><p>XML : 可扩展标记语言，是一种用于标记电子文件使其具有结构性的标记语言。 </p>
</li>
<li><p>JSON:  (JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。</p>
</li>
<li><p>相同点:  </p>
<ul>
<li>它们都可以作为一种数据交换格式。</li>
</ul>
</li>
<li><p>二者区别:</p>
<ul>
<li><p>XML是重量级的，JSON是轻量级的,XML在传输过程中比较占带宽，JSON占带宽少，易于压缩。</p>
</li>
<li><p>XML和json都用在项目交互下，XML多用于做配置文件，JSON用于数据交互</p>
</li>
<li><p>JSON独立于编程语言存在,任何编程语言都可以去解析json</p>
</li>
</ul>
</li>
</ul>
<p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;id&quot;: 110,</span><br><span class="line">	&quot;name&quot;: &quot;李会长&quot;,</span><br><span class="line">	&quot;age&quot;: 24</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//自定义JSON数据格式 (Java中的对象)</span><br><span class="line">&#123;&quot;name&quot;:&quot;tom&quot;,&quot;sex&quot;:&quot;女&quot;, &quot;age&quot;:12&#125;;</span><br><span class="line"></span><br><span class="line">//数组格式</span><br><span class="line">&#123;&quot;person&quot;:[&#123;&quot;name&quot;:&quot;tom&quot;,&quot;sex&quot;:&quot;女&quot;, &quot;age&quot;:12&#125;,&#123;&quot;name&quot;:&quot;jack&quot;,&quot;sex&quot;:&quot;男&quot;, &quot;age&quot;:22&#125;]&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//集合</span><br><span class="line">[&#123;&quot;name&quot;:&quot;老五&quot;,&quot;sex&quot;:&quot;女&quot;, &quot;age&quot;:12&#125;,&#123;&quot;name&quot;:&quot;会长&quot;,&quot;sex&quot;:&quot;男&quot;, &quot;age&quot;:12&#125;];</span><br></pre></td></tr></table></figure>



<h3 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h3><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p>
<p>FastJson特点如下：</p>
<ul>
<li> 能够支持将java bean序列化成JSON字符串，也能够将JSON字符串反序列化成Java bean。</li>
<li> 顾名思义，FastJson操作JSON的速度是非常快的。</li>
<li> 无其他包的依赖, 使用比较方便。</li>
</ul>
<p><strong>引入</strong></p>
<p>在Maven项目中使用FastJson库，需要提前在Maven的配置文件中添加此FastJson包的依赖 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.colobu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson-jaxrs-json-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>java对象转JSON格式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = JSON.toJSONString(person);</span><br><span class="line"></span><br><span class="line">String s = JSON.toJSONString(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//SimplePropertyPreFilter 可以指定要转换的JSON字段</span></span><br><span class="line">SimplePropertyPreFilter filter = </span><br><span class="line"><span class="keyword">new</span> SimplePropertyPreFilter(Person.class,<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">String s = JSON.toJSONString(person, filter);</span><br></pre></td></tr></table></figure>



<p><strong>@JSONField 注解</strong></p>
<p>通过 @JSONField 我们可以自定义字段的名称进行输出，并控制字段的排序，还可以进行序列化标记。</p>
<p>注解添加到封装对象的成员变量上</p>
<ul>
<li>指定name属性, 字段的名称     </li>
<li>使用 ordinal属性, 指定字段的顺序</li>
<li>使用 serialize属性, 指定字段是否序列化</li>
</ul>
<p><strong>JSON格式转java对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person = JSON.parseObject(jsonString, Person.class);</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; list  = JSON.parseArray(jsonString, Person.class);</span><br></pre></td></tr></table></figure>

<h2 id="课程管理模块开发"><a href="#课程管理模块开发" class="headerlink" title="课程管理模块开发"></a>课程管理模块开发</h2><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><p><strong>需求分析</strong></p>
<p><strong>数据库表分析</strong></p>
<p><strong>Dao接口及实现类编写</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程模块 DAO层接口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CourseDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程模块 DAO层实现类</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseDaoImpl</span> <span class="keyword">implements</span> <span class="title">CourseDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Service接口及实现类编写</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  课程模块 Service层 接口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CourseService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程模块Service层 实现类</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseServiceImpl</span> <span class="keyword">implements</span> <span class="title">CourseService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Servlet编写</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name=&quot;courseServlet&quot;,value=&quot;/course&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="功能一：查询课程列表信息"><a href="#功能一：查询课程列表信息" class="headerlink" title="功能一：查询课程列表信息"></a>功能一：查询课程列表信息</h3><h3 id="功能二：多条件查询课程信息"><a href="#功能二：多条件查询课程信息" class="headerlink" title="功能二：多条件查询课程信息"></a>功能二：多条件查询课程信息</h3><p>通过课程名，和状态查询课程。</p>
<p>两个条件随机出现，所以需要拼接sql语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2,存放sql</span></span><br><span class="line">StringBuffer sql = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;SELECT \n&quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;id,\n&quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;course_name,\n&quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;price,\n&quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;sort_num,\n&quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;STATUS\n&quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;FROM course\n&quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;WHERE 1=1 and is_del = ? &quot;</span>);  <span class="comment">//细节1=1</span></span><br><span class="line"><span class="comment">//存放参数</span></span><br><span class="line">List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//若有课程名，就把课程名的sql和参数添加进来</span></span><br><span class="line"><span class="keyword">if</span>(course_name != <span class="keyword">null</span>)&#123;</span><br><span class="line">    sql.append(<span class="string">&quot;and course_name LIKE ? &quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;%&quot;</span> + course_name + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//若有状态，就把状态的sql和参数添加进来</span></span><br><span class="line"><span class="keyword">if</span>(status != <span class="keyword">null</span>)&#123;</span><br><span class="line">    sql.append(<span class="string">&quot;and STATUS = ? &quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> i = Integer.parseInt(status);</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"> List&lt;Course&gt; courseList = qr.query(sql.toString(), <span class="keyword">new</span> BeanListHandler&lt;Course&gt;(Course.class), list.toArray());</span><br></pre></td></tr></table></figure>



<h3 id="功能三：新建课程营销"><a href="#功能三：新建课程营销" class="headerlink" title="功能三：新建课程营销"></a>功能三：新建课程营销</h3><p>涉及到图片文件上传。</p>
<p><strong>前端</strong></p>
<p>前端要执行的三要素</p>
<ul>
<li>1.表单提交方式: <strong>post</strong> (get方式提交有大小限制,post没有) </li>
<li>2.表单的enctype属性:必须设置为   <strong>multipart/form-data.</strong>  <ul>
<li>enctype就是encodetype就是编码类型的意思.</li>
<li>multipart/form-data是多部件文件上传 , 指表单数据有多部分构成，既有文本数据，又有文件等二进制数据的意思。</li>
</ul>
</li>
<li>3.表单必须有文件上传项: **file **,必须要有name属性和值 </li>
</ul>
<p><strong>后端</strong></p>
<p>1）将图片上传到tomcat服务器上</p>
<p>将部署方式改变为 war模式,把项目部署在tomcat的webapps下</p>
<ul>
<li>idea中部署项目两种方式<ul>
<li>war模式：将项目以war包的形式上传真实到服务器的webapps目录中；</li>
<li>war exploded模式：仅仅是目录的映射，就相当于tomcat在项目源文件夹中启动一样；</li>
</ul>
</li>
</ul>
<p>2）在webapps中创建upload目录</p>
<p>upload目录专门用来保存上传过来的图片</p>
<p>3）编写Servlet，无法直接通过request直接获取参数，所以不能继承BaseServlet</p>
<p><strong>准备工作</strong></p>
<p>FileUpload工具类，可以很容易地将文件上传到你的Web应用程序.</p>
<p>导入FileUpload依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>BeanUtils工具类，用于简化JavaBean封装数据的操作</p>
<p>导入BeanUtils依赖包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.8</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将map中的数据封装到person中</span></span><br><span class="line">BeanUtils.populate(person, map);</span><br></pre></td></tr></table></figure>

<p>编写Servlet，图片会保存到tomcat目录中webapps\upload下，数据库保存图片的路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/courseSalesInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseSalesInfoServlet</span>  <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存课程营销信息</span></span><br><span class="line"><span class="comment">     *      收集表单数据,封装到course对象中,将图片上传到tomcat服务器中</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Course对象</span></span><br><span class="line">            Course course = <span class="keyword">new</span> Course();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建Map集合,用来收集数据</span></span><br><span class="line">            Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.创建磁盘工厂对象</span></span><br><span class="line">            DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.文件上传核心对象</span></span><br><span class="line">            ServletFileUpload fileUpload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//5.解析request对象,获取表单项集合</span></span><br><span class="line">            List&lt;FileItem&gt; list = fileUpload.parseRequest(req);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//6.遍历集合 判断哪些是普通的表单项,那些是文件表单项</span></span><br><span class="line">            <span class="keyword">for</span> (FileItem item : list) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">boolean</span> formField = item.isFormField();</span><br><span class="line">                <span class="keyword">if</span>(formField)&#123;</span><br><span class="line">                    <span class="comment">//是普通表单项,获取表单项中的数据,保存到map</span></span><br><span class="line">                    String fieldName = item.getFieldName();</span><br><span class="line">                    String value = item.getString(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                    <span class="comment">//使用map收集数据</span></span><br><span class="line">                    map.put(fieldName,value);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//文件上传项</span></span><br><span class="line">                    <span class="comment">//获取文件名</span></span><br><span class="line">                    String fileName = item.getName();</span><br><span class="line">                    String newFileName = UUIDUtils.getUUID()+<span class="string">&quot;_&quot;</span>+fileName;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//获取输入流</span></span><br><span class="line">                    InputStream in = item.getInputStream();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//获取webapps的目录路径</span></span><br><span class="line">                    String realPath = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                    String wabappsPath = realPath.substring(<span class="number">0</span>, realPath.indexOf(<span class="string">&quot;lagou_edu_home&quot;</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//创建输出流</span></span><br><span class="line">                    OutputStream out = <span class="keyword">new</span> FileOutputStream(wabappsPath+<span class="string">&quot;/upload/&quot;</span> + newFileName);</span><br><span class="line"></span><br><span class="line">                    IOUtils.copy(in,out);</span><br><span class="line">                    out.close();</span><br><span class="line">                    in.close();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//将图片路径进行保存</span></span><br><span class="line">                    map.put(<span class="string">&quot;course_img_url&quot;</span>, <span class="string">&quot;http://localhost:8080&quot;</span>+<span class="string">&quot;/upload/&quot;</span>+newFileName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将map保存的数据全部封装到course中</span></span><br><span class="line">            BeanUtils.populate(course, map);</span><br><span class="line">            CourseService courseService = <span class="keyword">new</span> CourseServiceImpl();</span><br><span class="line">            String result;  <span class="comment">//存放结果</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断sourse中是否有id</span></span><br><span class="line">            <span class="keyword">if</span>(course.getId() == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//没有id，表示新建课程营销信息</span></span><br><span class="line">                result = courseService.insertCourseSalasInfo(course);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//有id，表示修改课程营销信息</span></span><br><span class="line">                result = courseService.updateCourseSalasInfo(course);</span><br><span class="line">            &#125;</span><br><span class="line">            resp.getWriter().print(result);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）将tomcat作为图片服务器使用时，存储上传的图片后,如果想要图片可以访问,需要在idea中进行配置:<br>在部署中，选择external source —&gt; 找到webapps目录下的的upload文件夹</p>
<p><strong>接口测试</strong></p>
<p>postman测试上传文件：</p>
<ol>
<li><p>接口地址填写正确</p>
</li>
<li><p>将请求方式设置为POST</p>
</li>
<li><p>需要上传文件, 设置Headers:  <strong>“key”:”Content-Type”, “value”:”multipart/form-data”</strong> </p>
</li>
<li><p>Body选择form-data</p>
</li>
<li><p>key 右侧下拉选择file；value 点击Select Files选择文件 , 按照接口文档,补全测试参数</p>
</li>
</ol>
<h3 id="功能四：修改课程营销"><a href="#功能四：修改课程营销" class="headerlink" title="功能四：修改课程营销"></a>功能四：修改课程营销</h3><p>1，数据回显</p>
<p>2，修改课程信息</p>
<p>新建营销信息和修改营销信息,访问的是同一个接口,所以在<strong>CourseSalesInfoServlet</strong>中,我们需要进行一下判断</p>
<ul>
<li>携带id 就是修改操作</li>
<li>未携带id就是新增操作</li>
</ul>
<h3 id="功能五：修改课程状态"><a href="#功能五：修改课程状态" class="headerlink" title="功能五：修改课程状态"></a>功能五：修改课程状态</h3><h2 id="课程内容管理模块开发"><a href="#课程内容管理模块开发" class="headerlink" title="课程内容管理模块开发"></a>课程内容管理模块开发</h2><h3 id="开发流程-1"><a href="#开发流程-1" class="headerlink" title="开发流程"></a>开发流程</h3><p><strong>实体类一对多关系的表述</strong></p>
<p>一个课程下对应多个章节，一个章节只属于一个课程下的。</p>
<p> 在 Course 类中定义一个List集合,并指定List的泛型是 Course_Section 类型,表示 一个课程中可以包<br>含多个章节.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Course类 </span><br><span class="line">    <span class="comment">//添加list集合 泛型是 Course_Section </span></span><br><span class="line">    List&lt;Course_Section&gt; sectionList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>

<p>在 Course_Section 类中,定义一个Course类型的属性, 用来保存章节所对应的具体的课程信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Course_Section 类 </span><br><span class="line">    <span class="comment">//添加一个Course类型的属性 </span></span><br><span class="line">    <span class="keyword">private</span> Course course;</span><br></pre></td></tr></table></figure>



<p>章节与课时关系表述也是如此。一对多关系。</p>
<h3 id="功能一：展示课程内容"><a href="#功能一：展示课程内容" class="headerlink" title="功能一：展示课程内容"></a>功能一：展示课程内容</h3><p>分析: 要展示的内容是对应课程下的 章节与课时</p>
<p>数据库中可以用连接查询找到，但是开发中尽量避免使用连接查询</p>
<p>dao层编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过 课程id 查询 章节列表信息，每个章节中又要包含课时信息列表</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Course_Section&gt; <span class="title">findSectionListByCourseId</span><span class="params">(<span class="keyword">int</span> courseId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建QueryRunner</span></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.准备sql</span></span><br><span class="line">        String sql = <span class="string">&quot;SELECT \n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;course_id,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;section_name,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;description,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;order_num,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;STATUS,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;create_time,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;update_time,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;is_del\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;FROM course_section\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;WHERE course_id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.执行sql</span></span><br><span class="line">        List&lt;Course_Section&gt; sectionList = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Course_Section&gt;(Course_Section.class), courseId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Course_Section section : sectionList)&#123;</span><br><span class="line">            <span class="comment">//通过章节id找到相关章节的课时列表信息</span></span><br><span class="line">            List&lt;Course_Lesson&gt; lessonList = findLessonListBySectionId( section.getId() );</span><br><span class="line">            <span class="comment">//章节添加相关的课时列表</span></span><br><span class="line">            section.setLessonList(lessonList);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sectionList;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 章节id 查询 课时列表信息</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Course_Lesson&gt; <span class="title">findLessonListBySectionId</span><span class="params">(<span class="keyword">int</span> sectionId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取QueryRunner</span></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.准备sql</span></span><br><span class="line">        String sql = <span class="string">&quot;SELECT \n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;course_id,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;section_id,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;theme,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;duration,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;is_free,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;order_num,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;STATUS,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;create_time,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;update_time,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;is_del\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;FROM course_lesson\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;WHERE section_id = ?;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.执行sql</span></span><br><span class="line">        List&lt;Course_Lesson&gt; lessonList = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Course_Lesson&gt;(Course_Lesson.class), sectionId);</span><br><span class="line">        <span class="keyword">return</span> lessonList;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="功能二：新建章节信息"><a href="#功能二：新建章节信息" class="headerlink" title="功能二：新建章节信息"></a>功能二：新建章节信息</h3><p>POST 请求方法常用的三种数据提交格式</p>
<table>
<thead>
<tr>
<th><strong>格式</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Content-Type : application/x-www-formurlencoded</td>
<td>请求体中的数据会以普通表单形式  （键值对）发送到后端。</td>
</tr>
<tr>
<td>Content-Type  : application/json ; charset=utf-8</td>
<td>请求体中的数据会以json字符串的形式发送到后端。</td>
</tr>
<tr>
<td>Content-Type : multipart/form-data</td>
<td>多部件上传既可以上传键值对 也可以上传文件。</td>
</tr>
</tbody></table>
<p>注意: 第二种JSON格式与第三种多部件上传,使用 getParameter() 方法都无法获取数据</p>
<p><strong>修改BaseServlet</strong></p>
<p>如果请求参数是键值对，那么还是使用getParameter() 方法获取参数。<br>如果请求参数是JSON格式的数, 我们可以通过获取一个流对象来进行读取.</p>
<p>修改后的BaseServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String methodName = <span class="keyword">null</span>;</span><br><span class="line">        String contentType = req.getHeader(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;application/json&quot;</span>.equals(contentType))&#123;</span><br><span class="line">            <span class="comment">//是json格式的请求数据</span></span><br><span class="line">            String postJSON = getPostJSON(req);</span><br><span class="line">            <span class="comment">//将JSON格式的字符串转化为map</span></span><br><span class="line">            Map&lt;String, Object&gt; map = JSON.parseObject(postJSON, Map.class);</span><br><span class="line">            <span class="comment">//从map集合中获取 methodName</span></span><br><span class="line">            methodName = (String)map.get(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">            <span class="comment">//将获取到的数据,保存到request域对象中</span></span><br><span class="line">            req.setAttribute(<span class="string">&quot;map&quot;</span>, map);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            methodName = req.getParameter(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(methodName != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//通过反射优化代码 提升代码的可维护性</span></span><br><span class="line">                Class c = <span class="keyword">this</span>.getClass();</span><br><span class="line">                Method method = c.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">                method.invoke(<span class="keyword">this</span>, req, resp);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;访问不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPostJSON</span><span class="params">(HttpServletRequest req)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.从request中获取 字符缓冲输入流对象</span></span><br><span class="line">            BufferedReader reader = req.getReader();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建 StringBuffer,用来保存读取出的数据</span></span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.循环读取</span></span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>( (line=reader.readLine()) != <span class="keyword">null</span> )&#123;</span><br><span class="line">                sb.append(line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4,返回字符串</span></span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果servlet中的请求方式是json格式，照样继承BaseServlet，可以这样获取请求参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获取参数 从域对象中获取 </span></span><br><span class="line">Map&lt;String,Object&gt; map = (Map)request.getAttribute(<span class="string">&quot;map&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建Course_Section </span></span><br><span class="line">Course_Section section = <span class="keyword">new</span> Course_Section(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//3.使用BeanUtils工具类,将map中的数据封装到 section </span></span><br><span class="line">BeanUtils.populate(section,map);</span><br></pre></td></tr></table></figure>



<p><strong>接口测试</strong></p>
<ol>
<li>选择POST请求方式,</li>
</ol>
<p>2)设置Headers为：Content-Type = application/json</p>
<p>3)在body中，选择raw</p>
<p>4)填写JSON格式数据</p>
<h3 id="功能三-章节信息修改"><a href="#功能三-章节信息修改" class="headerlink" title="功能三: 章节信息修改"></a>功能三: 章节信息修改</h3><p>新建章节信息和修改章节信息,访问的是同一个接口,所以在<strong>saveOrUpdateSection</strong>方法中中,我们要进行一下判断</p>
<ul>
<li>携带id 就是修改章节操作</li>
<li>未携带id就是新增章节操作</li>
</ul>
<h3 id="功能四-章节状态管理"><a href="#功能四-章节状态管理" class="headerlink" title="功能四: 章节状态管理"></a>功能四: 章节状态管理</h3><h1 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h1><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>可以轻松实现异步请求。即局部刷新，异步操作</p>
<p><strong>Get请求方式语法</strong></p>
<p>$.get(url, data, callback, type)</p>
<ul>
<li>参数1:  <code>url</code>     请求路径</li>
<li>参数2:  <code>data</code>     请求时携带的数据<br>格式:   <code>key=value</code>  或者  {username=’baby’,pwd:666}</li>
<li>参数3: <code>callback</code>  响应成功后的回调函数</li>
<li>参数4:  <code>type</code>     响应的数据类型 text html xml json</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.参数1 url</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;/login&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.参数2 数据</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">username</span>:<span class="string">&quot;jack&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.发送get请求</span></span><br><span class="line">$.get(url, data, <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//data响应回来的内容体</span></span><br><span class="line">    alert(<span class="string">&quot;响应成功! 响应数据: &quot;</span> + param);</span><br><span class="line">&#125;, <span class="string">&quot;text&quot;</span>);</span><br></pre></td></tr></table></figure>



<p><strong>POST请求方式</strong></p>
<p>$.post(url, data, callback, type)<br>里面的四个参数和get方式是一样, 不一样的是请求方式的不同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.参数1 url</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;/login&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.参数2 数据</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">username</span>:<span class="string">&quot;lucy&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.发送post请求</span></span><br><span class="line">$.post(url, data, <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//data响应回来的内容体</span></span><br><span class="line">    alert(<span class="string">&quot;响应成功! 响应数据: &quot;</span> + param);</span><br><span class="line">&#125;, <span class="string">&quot;text&quot;</span>);</span><br></pre></td></tr></table></figure>



<p><strong>Ajax请求方式</strong></p>
<ul>
<li>方式1:  jQuery.ajax({[settings]})</li>
<li>方式2: $.ajax({})</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">async</span>:<span class="literal">true</span>, <span class="comment">//是否异步</span></span><br><span class="line">    <span class="attr">data</span>:&#123;<span class="attr">username</span>:<span class="string">&quot;tom&quot;</span>&#125;,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>, <span class="comment">//请求方式</span></span><br><span class="line">    <span class="attr">dataType</span>:<span class="string">&quot;text&quot;</span>, <span class="comment">//返回数据的数据类型</span></span><br><span class="line">    <span class="attr">success</span>:<span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;响应成功!! &quot;</span> + param)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;响应失败!!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p><strong>案例</strong></p>
<p>用户名输入框，输入用户名后，失去焦点就立马发送请求，判断用户名是否存在。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#username&quot;</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取用户名</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> name = $(<span class="built_in">this</span>).val();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断用户名不为空</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(name != <span class="literal">null</span> &amp;&amp; name != <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>:<span class="string">&quot;/checkName&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>:<span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">data</span>:&#123;<span class="attr">username</span>:name&#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">success</span>:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(data.flag)&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//设置span内容体</span></span></span><br><span class="line"><span class="javascript">                            $(<span class="string">&quot;#spanMsg&quot;</span>).html(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;</span> + data.msg+ <span class="string">&quot;&lt;/font&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!data.flag)&#123;</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">&quot;#spanMsg&quot;</span>).html(<span class="string">&quot;&lt;font color=&#x27;green&#x27;&gt;&quot;</span>+ data.msg + <span class="string">&quot;&lt;/font&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">error</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&quot;请求处理失败!&quot;</span>)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;spanMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Postman搭建mock-server"><a href="#Postman搭建mock-server" class="headerlink" title="Postman搭建mock server"></a>Postman搭建mock server</h2><ul>
<li>Mock server就是模拟一个服务器，我们使用Mock server可以模拟后台接口,对请求进行响应.</li>
<li>在前后端分离的开发中 前端利用mockeserver模拟出对应接口，拿到返回数据来调试，无需等后端开发人员完成工作</li>
</ul>
<p>步骤：</p>
<ol>
<li>使用postman模拟出一个server：new&gt;&gt;Mock Server</li>
<li> 打开窗口中，填写请求路径，响应结果，下一步，取名，下一步</li>
<li>获取Mock Server的url<br><a href="https://imgtu.com/i/vpzdHJ"><img src="https://s1.ax1x.com/2022/07/28/vpzdHJ.png" alt="vpzdHJ.png"></a></li>
</ol>
<h2 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h2><p>当我们在前端项目中,向后端发送请求的获取课程数据的时候,出现了跨域问题:</p>
<p>已被CORS策略阻止：请求的资源上没有’ Access-Control-Allow-Origin’标头（跨域请求失败）</p>
<p><a href="https://imgtu.com/i/vpz4UA"><img src="https://s1.ax1x.com/2022/07/28/vpz4UA.png" alt="vpz4UA.png"></a></p>
<p><strong>什么是跨域</strong><br>跨域是指通过JS在不同的域之间进行数据传输或通信，比如用ajax向一个不同的域请求数据，只要协议、域名、端口有任何一个不同，都被当作是不同的域,浏览器就不允许跨域请求。</p>
<p><strong>解决</strong></p>
<ol>
<li><p>在后端的pom.xml文件中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 解决跨域问题所需依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thetransactioncompany<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cors-filter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在web.xml中 配置跨域 filter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置跨域过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>corsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.thetransactioncompany.cors.CORSFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>corsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="课程管理页面"><a href="#课程管理页面" class="headerlink" title="课程管理页面"></a>课程管理页面</h2><ol>
<li>首先导入前端项目到 VSCode</li>
<li>运行项目.</li>
</ol>
<h3 id="获取课程列表"><a href="#获取课程列表" class="headerlink" title="获取课程列表"></a>获取课程列表</h3><p>页面一打开就请求课程列表信息，可以把加载课程放在钩子函数created()中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//钩子函数 </span></span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123; </span><br><span class="line">    <span class="built_in">this</span>.loadCourses(); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="条件查询课程信息"><a href="#条件查询课程信息" class="headerlink" title="条件查询课程信息"></a>条件查询课程信息</h3><h3 id="新建课程营销"><a href="#新建课程营销" class="headerlink" title="新建课程营销"></a>新建课程营销</h3><p>js中的跳转其他组件，携带参数courseId：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(&#123; <span class="attr">name</span>: <span class="string">&quot;CourseItem&quot;</span>, <span class="attr">params</span>: &#123; <span class="attr">courseId</span>: <span class="string">&quot;new&quot;</span> &#125; &#125;);</span><br></pre></td></tr></table></figure>

<p>到了其他组件，可以接收参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获取路由传递的参数</span></span><br><span class="line"><span class="keyword">const</span> id = <span class="built_in">this</span>.$route.params.courseId;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.判断id是否有值,没有值跳转到 错误页面</span></span><br><span class="line"><span class="keyword">if</span> (!id) <span class="keyword">return</span> <span class="built_in">this</span>.redirectToError();</span><br></pre></td></tr></table></figure>

<p>图片和表单上传操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FormData存放请求参数，钩子函数中定义好</span></span><br><span class="line"><span class="built_in">this</span>.params = <span class="keyword">new</span> FormData()</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1: 保存和修改课程信息</span></span><br><span class="line"><span class="function"><span class="title">handleSave</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//验证表单是否合法</span></span><br><span class="line">    <span class="built_in">this</span>.$refs.form.validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!valid) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.设置Content-Type为 多部件上传 </span></span><br><span class="line">        <span class="keyword">let</span> config = &#123; </span><br><span class="line">            <span class="attr">headers</span>: &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data&quot;</span> &#125; </span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取表单中的数据,保存到params (params 就是 FromData对象)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> <span class="built_in">this</span>.course)&#123;</span><br><span class="line">            <span class="built_in">this</span>.params.append(key, <span class="built_in">this</span>.course[key])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.发送请求，保存或修改课程信息</span></span><br><span class="line">        <span class="keyword">return</span> axios.post(<span class="string">&quot;/courseSalesInfo&quot;</span>, <span class="built_in">this</span>.params, config)</span><br><span class="line">            .then(<span class="function">(<span class="params">resp</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(resp.data.status === <span class="string">&quot;0&quot;</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.$message(<span class="string">&quot;保存成功&quot;</span>)</span><br><span class="line">                <span class="built_in">this</span>.$router.back()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.$message.error(<span class="string">&quot;保存失败&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).catch(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.$message.error(error)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件上传</span></span><br><span class="line"><span class="function"><span class="title">onchange</span>(<span class="params">file</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(file != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.params.append(<span class="string">&quot;file&quot;</span>, file.raw, file.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="修改课程营销"><a href="#修改课程营销" class="headerlink" title="修改课程营销"></a>修改课程营销</h3><p>在钩子函数created()中可以判断有没有id，有就是修改，执行回显操作</p>
<h3 id="修改课程状态"><a href="#修改课程状态" class="headerlink" title="修改课程状态"></a>修改课程状态</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将返回的状态字段,封装到对象中 </span></span><br><span class="line"><span class="built_in">Object</span>.assign(item, res.data); </span><br><span class="line"></span><br><span class="line"><span class="comment">//重新加载页面 </span></span><br><span class="line"><span class="built_in">window</span>.location.reload;</span><br></pre></td></tr></table></figure>

<h2 id="课程内容管理页面"><a href="#课程内容管理页面" class="headerlink" title="课程内容管理页面"></a>课程内容管理页面</h2><h3 id="展示课程内容"><a href="#展示课程内容" class="headerlink" title="展示课程内容"></a>展示课程内容</h3><h3 id="新建章节信息"><a href="#新建章节信息" class="headerlink" title="新建章节信息"></a>新建章节信息</h3><h3 id="修改章节信息"><a href="#修改章节信息" class="headerlink" title="修改章节信息"></a>修改章节信息</h3><h3 id="章节状态管理"><a href="#章节状态管理" class="headerlink" title="章节状态管理"></a>章节状态管理</h3><h1 id="项目上线部署发布"><a href="#项目上线部署发布" class="headerlink" title="项目上线部署发布"></a>项目上线部署发布</h1><p>进入Linux系统，检查环境</p>
<ol>
<li><p>查看Java版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li>
<li><p>查看tomcat是否能够正常启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入到tomcat目录 </span><br><span class="line">cd /usr/tomcat/ </span><br><span class="line"></span><br><span class="line"># 启动tomcat </span><br><span class="line">./bin/startup.sh </span><br><span class="line"></span><br><span class="line"># 关闭tomcat </span><br><span class="line">./bin/shutdown.sh</span><br></pre></td></tr></table></figure></li>
<li><p>登录MySQL,检查数库连接是否正常</p>
</li>
<li><p>关闭防火墙，或者开启相关端口</p>
</li>
</ol>
<h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><p>使用SQLYog连接Linux上的MySQL, 导入SQL脚本 创建项目所需的数据库</p>
<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ol>
<li><p>修改项目的数据库配置文件, 数据库的IP ,用户名 密码都要修改.</p>
</li>
<li><p>修改后端保存图片的url</p>
</li>
<li><p>修改后启动项目,测试一下 保证数据库连接没有问题</p>
</li>
<li><p>检查POM文件,打包方式必须是war,编译版本为JDK11</p>
</li>
<li><p>执行打包命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//清除target文件夹 </span><br><span class="line">clean </span><br><span class="line">//打包 ,跳过测试 ,按那个小闪电</span><br><span class="line">package</span><br></pre></td></tr></table></figure></li>
<li><p> 复制出target目录下的 war包，修改成想要的名称</p>
</li>
<li><p>上传到Linux中tomcat中webapps目录下，启动测试（记住创建upload文件夹存放图片）</p>
</li>
<li><p>访问接口：<code>http://Liunx系统ip地址:8080/lagou_edu_home/course?methodName=findCourseList</code></p>
</li>
</ol>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>Linux系统中复制一份tomcat为tomcat2，前端项目放在tomcat2里面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//复制一份tomcat </span><br><span class="line">cp -r /usr/tomcat/ /usr/tomcat2</span><br></pre></td></tr></table></figure>

<p> 修改tomcat2的server.xml 配置文件,修改3个端口,避免与tomcat1冲突<br><a href="https://imgtu.com/i/v9FXQI"><img src="https://s1.ax1x.com/2022/07/28/v9FXQI.png" alt="v9FXQI.png"></a></p>
<p><a href="https://imgtu.com/i/v9kAln"><img src="https://s1.ax1x.com/2022/07/28/v9kAln.png" alt="v9kAln.png"></a></p>
<p>前端项目的配置文件有两个,一个是开发环境的配置文件,一个是生产环境的配置文件. </p>
<ol>
<li><p>我们先修改一下开发环境文件的 后端服务器访问地址,然后进行一下测试（测试）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">env.development 文件 </span><br><span class="line">VUE_APP_API_BASE = http://Liunx系统ip地址:8080/lagou_edu_home</span><br></pre></td></tr></table></figure></li>
<li><p>修改生产环境的配置文件（主要）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//.env.production 文件</span><br><span class="line">VUE_APP_API_BASE = http://Liunx系统ip地址:8080/lagou_edu_home</span><br></pre></td></tr></table></figure></li>
<li><p>修改 <strong>vue.confifig.js</strong> 配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123; </span><br><span class="line">    <span class="comment">// relative path for dev </span></span><br><span class="line">    <span class="attr">publicPath</span>: process.env.NODE_ENV === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;/edu-boss/&quot;</span> : <span class="string">&quot;./&quot;</span>, </span><br><span class="line">    <span class="comment">// for gh-pages </span></span><br><span class="line">    <span class="attr">indexPath</span>: <span class="string">&quot;index.html&quot;</span>, </span><br><span class="line">    <span class="attr">assetsDir</span>: <span class="string">&quot;static&quot;</span>, </span><br><span class="line">    <span class="attr">lintOnSave</span>: process.env.NODE_ENV !== <span class="string">&quot;production&quot;</span>, </span><br><span class="line">    <span class="attr">productionSourceMap</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="attr">css</span>: &#123; </span><br><span class="line">        <span class="comment">// sourceMap: process.env.NODE_ENV !== &#x27;production&#x27; </span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>: &#123; </span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="attr">port</span>: <span class="number">8081</span> </span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p> 执行下面的打包命令，在项目下会生成一个 dist 目录</p>
</li>
</ol>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>可以将生成的dist 目录，放到本地tomcat/webapps中测试一下</p>
</li>
<li><p>验证没有问题后,将list目录改名压缩,上传到Linux系统的tomcat2/webapps后，解压</p>
</li>
</ol>
<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>启动mysql服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>

<p>运行后端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//进入tomcat1,启动项目 </span><br><span class="line">./bin/startup.sh</span><br><span class="line"></span><br><span class="line">//动态查看日志 </span><br><span class="line">tail -f logs/catalina.out</span><br></pre></td></tr></table></figure>

<p>运行前端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//进入tomcat2,启动项目 </span><br><span class="line">./bin/startup.sh </span><br><span class="line"></span><br><span class="line">//动态查看日志 </span><br><span class="line">tail -f logs/catalina.out</span><br></pre></td></tr></table></figure>

<p>关闭防火墙或开启端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service </span><br><span class="line"></span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>浏览器访问前端项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.146.128:8081/edu-boss/</span><br></pre></td></tr></table></figure>

































]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>web</tag>
        <tag>实战项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2022/07/08/Linux/</url>
    <content><![CDATA[<p>使用VMware虚拟机，安装CentOS版本的Linux系统。</p>
<p>使用Xshell和Xftp管理Linux系统。</p>
<span id="more"></span>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>计算机体系结构</strong></p>
<ul>
<li>计算机由计算机硬件和计算机软件两个部分组成，其中计算机软件(Computer Software)可分为系统软件和应用软件，系统软件就是操作系统，是其他软件的基础。</li>
<li>目前主流的操作系统有：Windows系列、Unix系列、Linux系列、Android系列、IOS系列、…</li>
</ul>
<p><strong>Linux概述</strong></p>
<ul>
<li>Linux系统诞生于1991年，在林纳斯·托瓦兹（Linus Torvalds）上大学期间因不满意教学中使用的MINIX操作系统并出于个人爱好设计和研发的。</li>
<li>Linux系统是一套免费、自由、开发源代码的类Unix操作系统，是一个基于Posix(PortableOperating System Interface)标准和多用户、多任务、支持多线程的操作系统。</li>
<li>Linux能运行主要的Unix工具软件、应用程序和网络协议，支持32位和64位硬件。</li>
</ul>
<p><strong>Linux主要发行版本</strong></p>
<p><a href="https://imgtu.com/i/jBtXKU"><img src="https://s1.ax1x.com/2022/07/08/jBtXKU.png" alt="jBtXKU.png"></a></p>
<ul>
<li>Redhat：目前最大的Linux发行商，功能全面并且稳定，于2018年10月被IBM以340亿美元的价格收购。</li>
<li>Ubuntu：目前最好的Linux桌面版，拥有很人性化的亮丽的交互界面，强大的软件源支持。</li>
<li>CentOS：是RHEL的克隆版本，可以认为是免费版本的Redhat系统。（学习）</li>
</ul>
<h1 id="CentOS系统安装"><a href="#CentOS系统安装" class="headerlink" title="CentOS系统安装"></a>CentOS系统安装</h1><p>先安装VMware虚拟机，在虚拟机中安装CentOS系统。</p>
<p><strong>Vmware的下载和安装</strong></p>
<p>下载地址：<a href="https://www.vmware.com/cn.html">https://www.vmware.com/cn.html</a><br>按照安装教程一步步操作即可。</p>
<p><strong>CentOS系统的下载和安装</strong></p>
<p>下载地址：<a href="https://www.centos.org/">https://www.centos.org/</a><br>按照安装教程通过Vmware软件进行CentOS系统的安装。</p>
<p><strong>目录结构</strong></p>
<table>
<thead>
<tr>
<th>目录名称</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>/bin</td>
<td>binarie:存放二进制可执行文件 (例如tomcat的bin目录)</td>
</tr>
<tr>
<td>/sbin</td>
<td>super  binaries:存放二进制文件,只有root用户才能访问</td>
</tr>
<tr>
<td>/boot</td>
<td>系统启动核心目录,存放系统启动程序文件，例:查看启动文件的大小</td>
</tr>
<tr>
<td>/dev</td>
<td>devices:用于存放硬件设备文件</td>
</tr>
<tr>
<td>/etc</td>
<td>etcetera:存放系统配置文件(字体文件等)</td>
</tr>
<tr>
<td>/home</td>
<td>家目录,每一个用户都有一个”家”，用户的起始目录,创建用户跟随创建相应的家目录</td>
</tr>
<tr>
<td>/lib</td>
<td>library:系统资源文件类库</td>
</tr>
<tr>
<td>/proc</td>
<td>内存映射目录,可以查看系统相关硬件的信息</td>
</tr>
<tr>
<td>/var</td>
<td>variable:可变的,变量.  部署项目用的</td>
</tr>
<tr>
<td>/tmp</td>
<td>temporary:用来存放临时文件</td>
</tr>
<tr>
<td>/root</td>
<td>超级用户root的家目录</td>
</tr>
<tr>
<td>/usr</td>
<td>unix  shared resouce: 存放unix共享系统资源，类似于” C:/ Program Files”,用于安装各种软件</td>
</tr>
</tbody></table>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p> <strong>Shell的概念</strong></p>
<p>Shell俗称外壳，是提供用户使用界面的一种软件，叫做命令解释器。<br>主要负责接受用户输入的命令，然后调用相应的应用程序，最后向用户输出程序运行的结果。</p>
<p><strong>命令的格式</strong><br>命令 [-选项] [参数]<br>命令区分大小写，其中选项和参数是可选的，中间采用空格隔开。</p>
<p><strong>常用命令详解</strong></p>
<p><strong>(1)查看目录下文件/目录</strong>  </p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>ls</td>
<td>list显示文件</td>
</tr>
<tr>
<td>ls -l 或  ll</td>
<td>list  -list显示详细信息</td>
</tr>
<tr>
<td>ls -a</td>
<td>list  -all显示全部(包含隐藏文件)文件</td>
</tr>
<tr>
<td>ls -al</td>
<td>list  -all list 上两个合体</td>
</tr>
<tr>
<td>ls 目录名</td>
<td>查看目录下有什么东西</td>
</tr>
</tbody></table>
<p><strong>(2)目录切换</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>cd ..</td>
<td>上一级目录</td>
</tr>
<tr>
<td>cd dirname</td>
<td>进入目录</td>
</tr>
<tr>
<td>cd 或  cd ~</td>
<td>直接回到用户的家目录</td>
</tr>
<tr>
<td>cd /</td>
<td>回到系统根目录</td>
</tr>
</tbody></table>
<p><strong>(3)查看完整路径</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>pwd</td>
<td>查看当前目录所在的位置</td>
</tr>
</tbody></table>
<p><strong>(4)查看当前用户</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th></th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>whoami</td>
<td></td>
<td>查看当前用户的名称</td>
</tr>
</tbody></table>
<p><strong>(5)用户切换</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>su</td>
<td>普通用户切换到root用户</td>
</tr>
<tr>
<td>su root</td>
<td>切换到root用户</td>
</tr>
<tr>
<td>su 用户名</td>
<td>切换到普通用户</td>
</tr>
<tr>
<td>exit</td>
<td>退回到原来用户</td>
</tr>
</tbody></table>
<p>最好使用su和exit搭配使用，否则多次使用 ”su用户“ 会导致用户的”叠加”。</p>
<p><strong>(6)管理用户</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>useradd xxx</td>
<td>创建用户</td>
</tr>
<tr>
<td>passwd xxx</td>
<td>为创建的用户设置密码</td>
</tr>
<tr>
<td>userdel</td>
<td>删除用户</td>
</tr>
</tbody></table>
<p><strong>(7)查看命令的所在目录</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>which 命令</td>
<td>查看指定命令所在的路径信息</td>
</tr>
</tbody></table>
<p><strong>(8)文件操作</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>touch fileName</td>
<td>创建名字为fileName的文件</td>
</tr>
<tr>
<td>touch dir/fileName</td>
<td>在dir目录下创建名字为fileName的文件</td>
</tr>
<tr>
<td>echo 内容  &gt; fileName</td>
<td>把内容覆盖写到文件中，若文件不存在则创建</td>
</tr>
<tr>
<td>echo 内容  &gt;&gt; fileName</td>
<td>把内容追加到文件中</td>
</tr>
<tr>
<td>cat fileName</td>
<td>打印文件内容到终端</td>
</tr>
<tr>
<td>more fileName</td>
<td>分屏查看文件各行内容，不支持回看</td>
</tr>
<tr>
<td>less fileName</td>
<td>查看文件各部分内容，支持回看</td>
</tr>
<tr>
<td>head -n fileName</td>
<td>查看文件的前n行内容</td>
</tr>
<tr>
<td>tail -n fileName</td>
<td>查看文件末尾n行内容</td>
</tr>
<tr>
<td>wc fileName</td>
<td>查看文件的行数</td>
</tr>
</tbody></table>
<p><strong>(9)目录操作</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>mkdir 目录名</td>
<td>创建普通文件夹</td>
</tr>
<tr>
<td>mkdir -p 目录/目录/目录</td>
<td>递归方式创建多级父子文件夹</td>
</tr>
<tr>
<td>mv dir1 dir2</td>
<td>将dir1移动到dir2中</td>
</tr>
<tr>
<td>mv dir1/dir2 ./</td>
<td>将dir1中dir2移动到当前目录下</td>
</tr>
<tr>
<td>mv dir1 name</td>
<td>将dir1改名为name</td>
</tr>
<tr>
<td>cp dir1 name</td>
<td>将dir1拷贝为name</td>
</tr>
<tr>
<td>cp -r dir1 dir2</td>
<td>需要设置参数  -r (recursive递归) 无视目录层次</td>
</tr>
<tr>
<td>rm 文件</td>
<td>删除文件</td>
</tr>
<tr>
<td>rm -r 目录</td>
<td>递归删除目录(无视目录层次)</td>
</tr>
<tr>
<td>rm -rf 文件/目录</td>
<td>-r  force(强制) 删除文件/目录</td>
</tr>
</tbody></table>
<p><strong>(10)查找操作</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>find / -name passwd[完整名称]</td>
<td>查找根目录下的passwd文件</td>
</tr>
<tr>
<td>find ./ -name “p*”</td>
<td>查找当前目录下带”p”的文件</td>
</tr>
<tr>
<td>find ./ -type f或d</td>
<td>查找当前目录下所有文件或目录</td>
</tr>
<tr>
<td>grep 内容  fileName</td>
<td>从指定文件中查找指定的内容</td>
</tr>
</tbody></table>
<p><strong>(11)权限管理</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>chmod 权限 文件/目录名</td>
<td>管理指定文件的权限信息，r读:4 w写:2  x执行:1</td>
</tr>
</tbody></table>
<p>ls -l 可以查看详细信息，包括权限信息。即属主，属组，其他组权限。<br>例：更改a.txt文件的属主，属组，其他组的权限都为rwx：<code>chmod 777 a.txt</code></p>
<p><strong>(12)进程管理</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>ps</td>
<td>查看当前终端窗口里的进程</td>
</tr>
<tr>
<td>ps -aux</td>
<td>查看系统中的所有进程</td>
</tr>
<tr>
<td>ps -ef</td>
<td>查看进程列表</td>
</tr>
<tr>
<td>kill 进程号</td>
<td>杀死指定的进程</td>
</tr>
<tr>
<td>kill -9 进程号</td>
<td>强制杀死指定的进程</td>
</tr>
</tbody></table>
<p><strong>(13)其他命令</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>ifconfig</td>
<td>查看当前系统的IP地址等信息</td>
</tr>
<tr>
<td>tar zcvf 压缩文件名.tar.gz  路径1 路径2  …</td>
<td>实现一组文件或文件夹的压缩</td>
</tr>
<tr>
<td>tar zxvf 压缩文件名.tar.gz</td>
<td>实现缩解包的解压</td>
</tr>
<tr>
<td>man [章节号]  命令/函数名</td>
<td>查询指定的命令或函数</td>
</tr>
</tbody></table>
<p><strong>开放防火墙的某个端口</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 端口号 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h1 id="vi工具"><a href="#vi工具" class="headerlink" title="vi工具"></a>vi工具</h1><p>vi和vim是Linux系统命令行下的文本编辑器，通常格式为：vi 文件名 或 vim 文件名。</p>
<p><strong>三种模式</strong></p>
<p><a href="https://imgtu.com/i/jB0lDK"><img src="https://s1.ax1x.com/2022/07/08/jB0lDK.png" alt="jB0lDK.png"></a></p>
<p><strong>命令模式</strong></p>
<p>删除命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x 删除一个字符 </span><br><span class="line">dw 删除当前词 </span><br><span class="line">3dw 删除三个词 </span><br><span class="line">dd 删除当前行 </span><br><span class="line">5dd 删除五行</span><br></pre></td></tr></table></figure>

<p>修改命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r 替换一个字符 </span><br><span class="line">cw 替换一个单词 </span><br><span class="line">cc 替换一行 </span><br><span class="line">C 替换从光标至行尾</span><br></pre></td></tr></table></figure>

<p>拷贝命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yw 拷贝词 </span><br><span class="line">yy 拷贝行(或Y) </span><br><span class="line">dd 剪切行 </span><br><span class="line">p 当前行下粘贴 </span><br><span class="line">u 撤销 </span><br><span class="line">ctrl+r 取消撤销</span><br></pre></td></tr></table></figure>



<p><strong>编辑模式</strong></p>
<p>命令模式按a/i/o键转换编辑模式，编辑模式按Esc键返回命令模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i：在当前位置之前插入 </span><br><span class="line">a：在当前位置之后插入 </span><br><span class="line">o：在当前行下插入</span><br></pre></td></tr></table></figure>



<p><strong>底行模式</strong></p>
<p>命令模式按：键转换底行模式，底行模式按Enter键失效并返回命令模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:w 保存 </span><br><span class="line">:w newfile 另存为 </span><br><span class="line">:q 退出</span><br><span class="line">:wq 保存并退出Vi(或ZZ，或:x) </span><br><span class="line">:q! 强行退出不保存 </span><br><span class="line">:1,2co3 拷贝行1，行2在行3之后 </span><br><span class="line">:4,5mo6 移动行4，行5在行6之后 </span><br><span class="line">:%s /源字符串/目标字符串     替换每一行中第一个匹配字符串</span><br><span class="line">:%s /源字符串/目标字符串/g   替换每一行中的所有匹配字符串</span><br></pre></td></tr></table></figure>



<p><strong>注意</strong></p>
<p>使用vimtutor 命令用来练习vi命令。</p>
<p>用户主目录下.vimrc文件可以实现vi的简单设置。</p>
<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><h2 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h2><p>Xshell用来连接远程的Linux服务器并操作。</p>
<p><strong>下载和安装Xshell</strong></p>
<p>下载地址：<a href="https://www.netsarang.com/zh/">https://www.netsarang.com/zh/</a><br>安装方式：直接一路点击下一步即可，安装过程选择免费版。</p>
<p><strong>配置Linux服务器</strong></p>
<p>（1）设置网络连接模式为NAT模式，如下图：</p>
<p><a href="https://imgtu.com/i/jBrU29"><img src="https://s1.ax1x.com/2022/07/08/jBrU29.png" alt="jBrU29.png"></a></p>
<p>（2）修改配置文件：</p>
<p>使用root用户打开/etc/sysconfig/network-scripts/ifcfg-eno16777736文件，修改添加内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">修改内容</span><br><span class="line">BOOTPROTO=static </span><br><span class="line">ONBOOT=yes </span><br><span class="line"></span><br><span class="line">添加内容</span><br><span class="line">IPADDR=IP地址</span><br><span class="line">GATEWAY=网关IP</span><br><span class="line">NETMASK=子网掩码</span><br><span class="line">DNS1=114.114.114.114</span><br></pre></td></tr></table></figure>

<p> 使用命令使得配置文件生效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<p>查看相关IP，如图：</p>
<p><a href="https://imgtu.com/i/jBya0x"><img src="https://s1.ax1x.com/2022/07/08/jBya0x.png" alt="jBya0x.png"></a></p>
<p><strong>使用Xshell连接远程Linux服务器</strong></p>
<p><a href="https://imgtu.com/i/jB6cPU"><img src="https://s1.ax1x.com/2022/07/08/jB6cPU.png" alt="jB6cPU.png"></a></p>
<h2 id="Xftp"><a href="#Xftp" class="headerlink" title="Xftp"></a>Xftp</h2><p>下载和安装好Xftp，用来本地和远程连接服务器的文件传输         </p>
<h2 id="JDK的下载和安装"><a href="#JDK的下载和安装" class="headerlink" title="JDK的下载和安装"></a>JDK的下载和安装</h2><p><strong>下载和安装</strong></p>
<p>下载地址：<a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a><br>安装方式：将下载好的jdk安装包(Linux版本) 通过Xftp工具传输到CentOS系统中，使用tar命令解压即可。<br>习惯：将jdk移动到/usr/目录下，并改名为javajdk</p>
<p><strong>配置环境变量</strong></p>
<p>使用root用户打开配置文件/etc/profile，向文件末尾追加内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/javajdk   即jdk安装路径</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>保存退出后让文件生效并验证是否配置成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile    </span><br><span class="line">javac -version			</span><br></pre></td></tr></table></figure>

<h2 id="Tomcat的下载和安装"><a href="#Tomcat的下载和安装" class="headerlink" title="Tomcat的下载和安装"></a>Tomcat的下载和安装</h2><p><strong>下载和安装方式</strong></p>
<p>下载地址：<a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a><br>安装方式：将下载好的Tomcat安装包(Linux版本) 通过Xftp工具传输到CentOS系统中，使用tar命令解压即可。<br>习惯：将解压文件移动到/usr/目录下，并改名为tomcat</p>
<p><strong>启动和关闭</strong></p>
<p>在tomcat安装目录的bin目录下执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./startup.sh   启动</span><br><span class="line">./shutdown.sh  关闭</span><br></pre></td></tr></table></figure>

<p><strong>开放防火墙端口</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开启8080端口（暂时开通）</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT </span><br></pre></td></tr></table></figure>

<p><strong>配置环境变量（不建议配置）</strong><br>使用root用户打开配置文件/etc/profile，向文件末尾追加内容。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export CATALINA_HOME=/usr/tomcat </span><br><span class="line">export PATH=$CATALINA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>保存退出后让文件生效并验证是否配置成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile </span><br><span class="line">startup.sh</span><br></pre></td></tr></table></figure>

<p><strong>发部web项目</strong></p>
<p>将Web项目打成war包，通过Xftp工具将war包放在tomcat安装目录下的webapps目录，并启动tomcat即可。</p>
<h2 id="MySQL的下载和安装"><a href="#MySQL的下载和安装" class="headerlink" title="MySQL的下载和安装"></a>MySQL的下载和安装</h2><p><strong>下载和安装</strong></p>
<p>先在/usr目录下新建mysql文件夹，并进入</p>
<p>（1）下载Mysql的repo源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>（2）安装rpm包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>（3）安装Mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-server</span><br></pre></td></tr></table></figure>

<p>遇到以下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The GPG keys listed for the &quot;MySQL 5.7 Community Server&quot; repository are already installed but they are not correct for this package.</span><br><span class="line">Check that the correct key URLs are configured for this repository.</span><br><span class="line"> Failing package is: mysql-community-client-5.7.38-1.el7.x86_64</span><br><span class="line"> GPG Keys are configured as: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>

<p>解决：输入以下代码后，重新执行yum -y install mysql-server</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br></pre></td></tr></table></figure>

<p><strong>启动服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld start           启动mysql服务</span><br><span class="line">systemctl status mysqld		   查看服务状态</span><br></pre></td></tr></table></figure>

<p><strong>第一次登入mysql</strong></p>
<p>查看自动生成的临时密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep password /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<p>使用root用户登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p 输入密码</span><br></pre></td></tr></table></figure>

<p>修改临时密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;De@123456&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="图形化界面访问远程数据库"><a href="#图形化界面访问远程数据库" class="headerlink" title="图形化界面访问远程数据库"></a>图形化界面访问远程数据库</h2><p><strong>配置远程服务器的数据库允许外界访问</strong></p>
<p>使用root权限登录数据库后选择mysql库，并将user表的user字段为root的记录的host字段改为%</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set host=&#x27;%&#x27; where user=&#x27;root&#x27;;</span><br><span class="line">flush privileges;  刷新</span><br></pre></td></tr></table></figure>

<p><strong>开放防火墙端口号</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">开启3306端口（暂时开通）</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT </span><br></pre></td></tr></table></figure>

<p><strong>启动图形化界面工具SQLyog连接虚拟机中Mysql数据库</strong></p>
<p>输入服务器IP地址，用户名，密码，端口号，连接即可。</p>
<h2 id="防火墙相关设置"><a href="#防火墙相关设置" class="headerlink" title="防火墙相关设置"></a>防火墙相关设置</h2><p><strong>端口设置：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看已经开放的端口：</span> </span><br><span class="line">firewall-cmd --list-ports </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">1，开启端口(永久)</span> </span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent </span><br><span class="line"><span class="meta">#</span><span class="bash">命令含义：</span> </span><br><span class="line">–zone #作用域 </span><br><span class="line">–add-port=8080/tcp #添加端口，格式为：端口/通讯协议 </span><br><span class="line">–permanent #永久生效，没有此参数重启后失效 </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">2，开启端口（暂时开通，重启失效）</span></span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>防火墙设置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span></span><br><span class="line">firewall-cmd --state </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启防火墙</span> </span><br><span class="line">firewall-cmd --reload #重启firewall </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭防火墙</span> </span><br><span class="line">systemctl stop firewalld.service #停止firewall </span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动 </span><br></pre></td></tr></table></figure>

<h1 id="shell编程-熟悉"><a href="#shell编程-熟悉" class="headerlink" title="shell编程(熟悉)"></a>shell编程(熟悉)</h1><p><strong>概念</strong></p>
<p>Shell是一个命令行解释器，可以接收应用程序或用户命令，然后访问操作系统内核。<br>Shell是一个功能相当强大的编程语言，易编写、易调试、灵活性强；</p>
<p><strong>编写第一个程序</strong></p>
<p>使用vi工具创建xxx.sh的文件。<br>以#!/bin/bash开头并编写代码后保存。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo hellowrod!</span><br></pre></td></tr></table></figure>



<p><strong>执行shell程序</strong></p>
<p>方式一：<code>./文件名</code>，此方式需要执行权限。</p>
<p>方式二：<code>/bin/bash 文件名</code>，或者<code>bash 文件名</code>，或者<code>sh 文件名</code>。此方式不需要执行权限。</p>
<p><strong>变量的定义</strong></p>
<p>格式：<br>定义变量：变量=值<br>撤销变量：unset 变量</p>
<p>定义规则：<br>变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。<br>不能使用bash里的关键字。<br>中间不能有空格，可以有下划线。<br>在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。<br>变量的值如果有空格，需要使用双引号或单引号括起来。</p>
<p><strong>常用运算符</strong></p>
<p>算术运算符</p>
<p><a href="https://imgtu.com/i/jBh5lT"><img src="https://s1.ax1x.com/2022/07/08/jBh5lT.png" alt="jBh5lT.png"></a></p>
<p>关系运算符</p>
<p><a href="https://imgtu.com/i/jBhoXF"><img src="https://s1.ax1x.com/2022/07/08/jBhoXF.png" alt="jBhoXF.png"></a></p>
<p><strong>条件语句</strong></p>
<p>if判断</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ 条件判断式 ] </span><br><span class="line">	then</span><br><span class="line">		程序 </span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>case判断</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case $变量名 in </span><br><span class="line">	&quot;值1&quot;） </span><br><span class="line">		如果变量的值等于值1，则执行程序1 </span><br><span class="line">		;; </span><br><span class="line">	&quot;值2&quot;） </span><br><span class="line">		如果变量的值等于值2，则执行程序2 </span><br><span class="line">		;;</span><br><span class="line">	*）</span><br><span class="line">		如果变量的值都不是以上的值，则执行此程序 </span><br><span class="line">		;; </span><br><span class="line">esac</span><br></pre></td></tr></table></figure>



<p><strong>循环语句</strong></p>
<p>for循环</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for (( 初始值;循环控制条件;变量变化 )) </span><br><span class="line">	do</span><br><span class="line">		程序 </span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>while循环</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while [ 条件判断式 ] </span><br><span class="line">	do</span><br><span class="line">		程序 </span><br><span class="line">done</span><br></pre></td></tr></table></figure>



<p>函数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ function ] funname[()]     中括号部分可以省略</span><br><span class="line">&#123; </span><br><span class="line">	Action; </span><br><span class="line">	[return int;] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funname</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>javaWeb</title>
    <url>/2022/06/14/javaWeb/</url>
    <content><![CDATA[<p>一篇关于java web的笔记</p>
<span id="more"></span>

<h1 id="Servlet核心技术（上）"><a href="#Servlet核心技术（上）" class="headerlink" title="Servlet核心技术（上）"></a>Servlet核心技术（上）</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>C/S架构</strong></p>
<ul>
<li><p>C/S架构（Client/Server，客户端/服务器模式），是一种比较早的软件体系结构，也是生活中很常见的结构。这种结构将需要处理的业务合理地分配到客户端和服务器端，客户端通常负责完成与用户的交互任务，服务器通常负责数据的管理。</p>
</li>
<li><p>C/S架构的主要优点如下：<br>客户端的界面和功能可以很丰富。<br>应用服务器的负荷较轻。<br>响应速度较快。</p>
</li>
<li><p>C/S架构的主要缺点如下：<br>适用面窄，用户群固定。<br>维护和升级的成本高，所有的客户端都需要更新版本。</p>
</li>
</ul>
<p><strong>B/S架构</strong></p>
<ul>
<li><p>B/S架构（Browser/Server，浏览器/服务器模式），是互联网兴起后的软件体系结构，该结构将系统功能实现的主要业务逻辑集中到服务器端，极少数业务逻辑在浏览器实现，浏览器通常负责完<br>成与用户的交互任务，服务器通常负责数据的管理。</p>
</li>
<li><p>B/S架构的主要优点如下：<br>无需安装客户端，只要有浏览器即可。<br>适用面广，用户群不固定。<br>通过权限控制实现多客户访问的目的，交互性较强。<br>维护和升级的成本低，无需更新所有客户端版本。</p>
</li>
<li><p>B/S架构的主要缺点如下：<br>应用服务器的负荷较重。<br>浏览器的界面和功能想要达到客户端的丰富程度需要花费大量的成本。<br>在跨浏览器上不尽如人意，适配比较麻烦。</p>
</li>
</ul>
<p><strong>java web</strong></p>
<ul>
<li><p>Web本意为网页的含义，这里表示互联网上供外界访问的资源。</p>
</li>
<li><p>互联网上供外界访问的资源主要分为以下两种：<br>静态资源：主要指Web页面中供人们浏览的数据始终是不变。<br>动态资源：主要指Web页面中供人们浏览的数据由程序产生，不同时间点访问页面看到的内容各不相同。</p>
</li>
<li><p>JavaWeb主要指使用Java语言进行动态Web资源开发技术的统称，是解决相关Web互联网领域的技术总和。</p>
</li>
<li><p>早期B/S架构<br><a href="https://imgtu.com/i/X4F1PJ"><img src="https://s1.ax1x.com/2022/06/14/X4F1PJ.png" alt="X4F1PJ.png"></a></p>
</li>
<li><p>后来的B/S架构<br><a href="https://imgtu.com/i/X4FNqK"><img src="https://s1.ax1x.com/2022/06/14/X4FNqK.png" alt="X4FNqK.png"></a></p>
</li>
</ul>
<p><strong>HTTP协议</strong></p>
<ul>
<li><p>HTTP协议（HyperText Transfer Protocol，超文本传输协议）是由W3C（万维网联盟）组织制定的一种应用层协议，是用来规范浏览器与Web服务器之间如何通讯的数据格式，主要涉及浏览器的发请求格式和服务器的响应格式。</p>
</li>
<li><p>HTTP协议通常承载于TCP协议之上，而承载于TLS或SSL协议层之上的协议就是常说的HTTPS协议。</p>
</li>
<li><p>HTTP默认的端口号为80，HTTPS默认的端口号为443。</p>
</li>
<li><p>HTTP协议请求格式：<br>客户端发送一个HTTP请求到服务器的请求消息主要包括：请求行、请求头、空白行和请求体。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,请求行用来说明请求类型和要访问的资源以及所使用的HTTP版本，格式如下： </span><br><span class="line">	请求类型 请求的路径 协议的版本(1.1) </span><br><span class="line">2,请求头是紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息，格式 （key:value）： 	主机 请求长度 请求的浏览器相关信息 </span><br><span class="line">2,空白行就是请求头部的空行，即使后面的请求数据为空则必须有空行。 </span><br><span class="line">4,请求体也叫请求数据，可以添加任意的其他数据。</span><br></pre></td></tr></table></figure>

<p>举例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /task01_demo01/demo1.html HTTP/1.1 </span><br><span class="line">Host: localhost:8088 </span><br><span class="line">Content-Length: 21 </span><br><span class="line">Cache-Control: max-age=0 </span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64)</span><br><span class="line"></span><br><span class="line">name=scott&amp;pwd=123456</span><br></pre></td></tr></table></figure></li>
<li><p>HTTP响应格式:<br>通常情况下服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息，主要包括：响应行、响应头、空白行和响应体。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,响应行用来说明HTTP协议版本号和状态码以及状态消息，格式如下： </span><br><span class="line">	协议的版本(1.0 1.1) 状态码 (200 成功 404 路径错误 500 服务错误) 状态信息 </span><br><span class="line">2,响应头用来说明客户端要使用的一些附加信息，格式（key:value）。 </span><br><span class="line">3,空白行就是响应头部的空行，即使后面的请求数据为空则必须有空行。 </span><br><span class="line">3,响应体用来服务器返回给客户端的文本信息。</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK </span><br><span class="line">Content-Type: text/html </span><br><span class="line">Content-Length: 588 </span><br><span class="line">Date: Thu, 08 Sep 2021 12:59:54 GMT </span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;&lt;title&gt;示例1&lt;/title&gt;&lt;/head&gt; </span><br><span class="line">	&lt;body&gt;&lt;h1&gt;这是一个HTML页面&lt;/h1&gt;&lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Tomcat服务器"><a href="#Tomcat服务器" class="headerlink" title="Tomcat服务器"></a>Tomcat服务器</h2><ul>
<li>Tomcat本意为公猫的含义，最初是由Sun公司的软件架构师詹姆斯·邓肯·戴维森开发的，后来他帮助将其变为开源项目并由Sun公司贡献给Apache软件基金会。</li>
<li>Tomcat 服务器是一个开源的轻量级Web应用服务器，在中小型系统和并发量小的场合下被普遍使用，是开发和调试Servlet、JSP 程序的首选。</li>
</ul>
<p>下载地址：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p>
<p><strong>目录解构</strong></p>
<p>bin 主要存放二进制可执行文件和脚本。<br>conf 主要存放各种配置文件。<br>lib 主要用来存放Tomcat运行需要加载的jar包。<br>logs 主要存放Tomcat在运行过程中产生的日志文件。<br>temp 主要存放Tomcat在运行过程中产生的临时文件。<br>webapps 主要存放应用程序，当Tomcat启动时会去加载该目录下的应用程序。<br>work 主要存放tomcat在运行时的编译后文件，例如JSP编译后的文件。</p>
<p><strong>启动和关闭</strong></p>
<p>启动：使用bin目录下的批处理文件startup.bat来启动Tomcat服务器，若出现一个毫秒数说明启动成功。</p>
<p>关闭：使用bin目录下的批处理文件shutdown.bat来关闭Tomcat服务器。 </p>
<p>注意：1，启动之前首先安装JDK并配置环境变量JAVA_HOME。<br>2，若希望Tomcat服务器可以在任意路径启动，则需要配置环境变量CATALINA_HOME。</p>
<p><strong>配置文件</strong></p>
<ul>
<li><p>启动信息乱码的处理方式：logging.properties文件修改为java.util.logging.ConsoleHandler.encoding = GBK</p>
</li>
<li><p>server.xml文件是服务器的主配置文件，可以设置端口号、设置域名或IP、默认加载的项目、请求编码等。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8888&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>tomcat-users.xml文件用来配置管理Tomcat服务器的用户与权限 。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>IDEA创建java web项目</strong></p>
<p><a href="https://imgtu.com/i/X4nHV1"><img src="https://s1.ax1x.com/2022/06/14/X4nHV1.png" alt="X4nHV1.png"></a></p>
<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><ul>
<li>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，是Java语言编写的服务器端程序，换句话说，Servlet就是运行在服务器上的Java类。</li>
<li>Servlet用来完成B/S架构下客户端请求的响应处理，也就是交互式地浏览和生成数据，生成动态Web内容。</li>
</ul>
<h3 id="Servlet编程步骤"><a href="#Servlet编程步骤" class="headerlink" title="Servlet编程步骤"></a>Servlet编程步骤</h3><ul>
<li><p>建立一个Java Web Application项目并配置Tomcat服务器。</p>
</li>
<li><p>自定义类实现Servlet接口，或继承GenericServlet类，或继承 HttpServlet类（推荐） 。</p>
</li>
<li><p>将自定义类的信息配置到 web.xml文件并启动项目，配置方式如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Servlet --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- HelloServlet是Servlet类的别名 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span> HelloServlet <span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- com.lagou.task01.HelloServlet是包含路径的真实的Servlet类名 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span> com.lagou.task01.HelloServlet <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 映射Servlet --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- HelloServlet是Servlet类的别名，与上述名称必须相同 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span> HelloServlet <span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- /hello是供浏览器使用的地址 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span> /hello <span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在浏览器访问地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/工程路径/hello</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Servlet接口"><a href="#Servlet接口" class="headerlink" title="Servlet接口"></a>Servlet接口</h3><p>javax.servlet.Servlet接口用于定义所有servlet必须实现的方法。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void init(ServletConfig config)</td>
<td>由servlet容器调用，以向servlet指示servlet正在  被放入服务中</td>
</tr>
<tr>
<td>void service(ServletRequest req, ServletResponse res)</td>
<td>由servlet容器调用，以允许servlet响应请求</td>
</tr>
<tr>
<td>ServletConfig getServletConfig()</td>
<td>返回ServletConfig对象，该对象包含此servlet的初始化和启动参数</td>
</tr>
<tr>
<td>String getServletInfo()</td>
<td>返回有关servlet的信息，如作者、版本和版权</td>
</tr>
<tr>
<td>void destroy()</td>
<td>由servlet容器调用，以向servlet指示该servlet正  在退出服务</td>
</tr>
</tbody></table>
<h3 id="GenericServlet类"><a href="#GenericServlet类" class="headerlink" title="GenericServlet类"></a>GenericServlet类</h3><ul>
<li>javax.servlet.GenericServlet抽象类主要用于定义一个通用的、与协议无关的servlet，该类实现了Servlet接口。</li>
<li>若编写通用servlet，只需重写service抽象方法即可。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>abstract void service(ServletRequest req, ServletResponse  res)</td>
<td>由servlet容器调用允许servlet响应  请求</td>
</tr>
</tbody></table>
<h3 id="HttpServlet类"><a href="#HttpServlet类" class="headerlink" title="HttpServlet类"></a>HttpServlet类</h3><ul>
<li>javax.servlet.http.HttpServlet类是个抽象类并继承了GenericServlet类。</li>
<li>用于创建适用于网站的HTTP Servlet，该类的子类必须至少重写一个方法。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void doGet(HttpServletRequest req, HttpServletResponse  resp)</td>
<td>处理客户端的GET请求</td>
</tr>
<tr>
<td>void doPost(HttpServletRequest req, HttpServletResponse  resp)</td>
<td>处理客户端的POST请求</td>
</tr>
<tr>
<td>void init()</td>
<td>进行初始化操作</td>
</tr>
<tr>
<td>void service(HttpServletRequest req, HttpServletResponse  resp)</td>
<td>根据请求决定调用doGet还是 doPost方法</td>
</tr>
<tr>
<td>void destroy()</td>
<td>删除实例时释放资源</td>
</tr>
</tbody></table>
<h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><p><a href="https://imgtu.com/i/X43Paj"><img src="https://s1.ax1x.com/2022/06/14/X43Paj.png" alt="X43Paj.png"></a></p>
<p>构造方法只被调用一次，当第一次请求Servlet时调用构造方法来创建Servlet的实例。</p>
<p>init方法只被调用一次，当创建好Servlet实例后立即调用该方法实现Servlet的初始化。</p>
<p>service方法被多次调用，每当有请求时都会调用service方法来用于请求的响应。</p>
<p>destroy方法只被调用一次，当该Servlet实例所在的Web应用被卸载前调用该方法来释放当前占用的资源。</p>
<h3 id="POST和GET请求"><a href="#POST和GET请求" class="headerlink" title="POST和GET请求"></a>POST和GET请求</h3><p>发出GET请求的主要方式： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）在浏览器输入URL按回车 </span><br><span class="line">（2）点击&lt;a&gt;超链接 </span><br><span class="line">（3）点击submit按钮，提交 &lt;form method=“get”&gt;表单 </span><br><span class="line">GET请求特点： 会将请求数据添加到请求URL地址的后面，只能提交少量的数据、不安全</span><br></pre></td></tr></table></figure>

<p>发出POST请求的方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> (1)点击submit按钮，提交 &lt;form method=“post”&gt;表单 </span><br><span class="line">POST请求的特点： 请求数据添加到HTTP协议体中，可提交大量数据、安全性好</span><br></pre></td></tr></table></figure>

<h3 id="ServletRequest接口"><a href="#ServletRequest接口" class="headerlink" title="ServletRequest接口"></a>ServletRequest接口</h3><ul>
<li>javax.servlet.ServletRequest接口主要用于向servlet提供客户端请求信息，可以从中获取到任何请求信息。</li>
<li>Servlet容器创建一个ServletRequest对象，并将其作为参数传递给Servlet的service方法。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>String getParameter(String name)</td>
<td>以字符串形式返回请求参数的值，如果该参数不存在，则返回空值</td>
</tr>
<tr>
<td>String[] getParameterValues( String name)</td>
<td>返回一个字符串对象数组，其中包含给定请求参数所具有的所有值，如果该参数不存在，则返回空值</td>
</tr>
<tr>
<td>Enumeration getParameterNames()</td>
<td>返回包含此请求中包含的参数名称的字符串对象的枚举。如果请求没有参数，则方法返回空枚举</td>
</tr>
<tr>
<td>Map&lt;String, String[]&gt; getParameterMap()</td>
<td>返回请求参数的键值对，一个键可以对应多个值</td>
</tr>
<tr>
<td>String getRemoteAddr()</td>
<td>返回发送请求的客户端或最后一个代理的IP地址</td>
</tr>
<tr>
<td>int getRemotePort()</td>
<td>返回发送请求的客户端或最后一个代理的端口号</td>
</tr>
</tbody></table>
<h3 id="HttpServletRequest接口"><a href="#HttpServletRequest接口" class="headerlink" title="HttpServletRequest接口"></a>HttpServletRequest接口</h3><ul>
<li>javax.servlet.http.HttpServletRequest接口是ServletRequest接口的子接口，主要用于提供HTTP请求信息的功能。</li>
<li>不同于表单数据，在发送HTTP请求时，HTTP请求头直接由浏览器设置。</li>
<li>可直接通过HttpServletRequest对象提供的一系列get方法获取请求头数据。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>String getRequestURI()</td>
<td>返回此请求的资源路径信息</td>
</tr>
<tr>
<td>StringBuffer getRequestURL()</td>
<td>返回此请求的完整路径信息</td>
</tr>
<tr>
<td>String getMethod()</td>
<td>返回发出此请求的HTTP方法的名称，例如GET、POST</td>
</tr>
<tr>
<td>String getQueryString()</td>
<td>返回路径后面请求中附带的参数</td>
</tr>
<tr>
<td>String getServletPath()</td>
<td>返回此请求中调用servlet的路径部分</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet6</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String user = request.getParameter(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名是：&quot;</span> + user);</span><br><span class="line"></span><br><span class="line">        String[] values = request.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;爱好：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String value:values)&#123;</span><br><span class="line">            System.out.print(value + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; names = request.getParameterNames();</span><br><span class="line">        System.out.print(<span class="string">&quot;参数名：&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(names.hasMoreElements())&#123;</span><br><span class="line">            System.out.print(names.nextElement() + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line">        Set&lt;Map.Entry&lt;String, String[]&gt;&gt; set = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, String[]&gt; me : set)&#123;</span><br><span class="line">            System.out.print(me.getKey() + <span class="string">&quot;对应的值是：&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(String i:me.getValue())&#123;</span><br><span class="line">                System.out.print(i+<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;客户端IP地址&quot;</span> + request.getRemoteAddr());</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端端口号&quot;</span> + request.getRemotePort());</span><br><span class="line">        System.out.println(<span class="string">&quot;资源路径&quot;</span> + request.getRequestURI());</span><br><span class="line">        System.out.println(<span class="string">&quot;资源完整路径&quot;</span> + request.getRequestURL());</span><br><span class="line">        System.out.println(<span class="string">&quot;请求方式&quot;</span> + request.getMethod());</span><br><span class="line">        System.out.println(<span class="string">&quot;请求附带参数&quot;</span> + request.getQueryString());</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet的路径部分&quot;</span> + request.getServletPath());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>解决请求乱码</strong></p>
<p>post请求乱码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接收之前设置编码方式： </span></span><br><span class="line">request.setCharacterEncoding(“utf-<span class="number">8</span>”) </span><br><span class="line"><span class="comment">//提示：必须在调用request.getParameter(“name”)之前设置</span></span><br></pre></td></tr></table></figure>

<p>get请求乱码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将接收到的中文乱码重新编码: </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到get请求的中文字符串 </span></span><br><span class="line">String name = request.getParameter(<span class="string">&quot;name&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 将中文字符重新编码，默认编码为ISO-8859-1 </span></span><br><span class="line">String userName = <span class="keyword">new</span> String(name.getBytes(“ISO-<span class="number">8859</span>-<span class="number">1</span>”),“utf-<span class="number">8</span><span class="string">&quot;);</span></span><br></pre></td></tr></table></figure>

<h3 id="ServletResponse接口"><a href="#ServletResponse接口" class="headerlink" title="ServletResponse接口"></a>ServletResponse接口</h3><ul>
<li>javax.servlet.ServletResponse接口用于定义一个对象来帮助Servlet向客户端发送响应。</li>
<li>Servlet容器创建ServletResponse对象，并将其作为参数传递给servlet的service方法。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>PrintWriter getWriter()</td>
<td>返回可向客户端发送字符文本的PrintWriter对象</td>
</tr>
<tr>
<td>String  getCharacterEncoding()</td>
<td>获取响应内容的编码方式</td>
</tr>
<tr>
<td>void  setContentType(String type)</td>
<td>如果尚未提交响应，则设置发送到客户端响应的内容类型。内容类型可以包括字符编码规范，例如text/html;charset=UTF-8</td>
</tr>
</tbody></table>
<h3 id="HttpServletResponse接口"><a href="#HttpServletResponse接口" class="headerlink" title="HttpServletResponse接口"></a>HttpServletResponse接口</h3><ul>
<li>javax.servlet.http.HttpServletResponse接口继承ServletResponse接口，以便在发送响应时提供特定于HTTP的功能。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void  sendRedirect(String location)</td>
<td>使用指定的重定向位置URL向客户端发送临时重定向响应</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//设置编码方式</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">	<span class="comment">//查看编码方式</span></span><br><span class="line">    System.out.println(<span class="string">&quot;编码方式：&quot;</span> + response.getCharacterEncoding());</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//获取输出流</span></span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">//利用输出流输出信息</span></span><br><span class="line">    out.println(<span class="string">&quot;&lt;h1&gt;你好呀&lt;h1&gt;&quot;</span>);</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ServletConfig接口"><a href="#ServletConfig接口" class="headerlink" title="ServletConfig接口"></a>ServletConfig接口</h3><p>javax.servlet.ServletConfifig接口用于描述Servlet本身的相关配置信息，在初始化期间用于将信息传递给Servlet配置对象。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>String getServletName()</td>
<td>返回Servlet的别名</td>
</tr>
<tr>
<td>String  getInitParameter(String  name)</td>
<td>返回包含初始化参数值的字符串，如果该参数不存在，则返回null</td>
</tr>
<tr>
<td>Enumeration  getInitParameterNames()</td>
<td>将servlet的初始化参数的名称作为字符串对象的枚举返回，如果 servlet没有初始化参数，则返回空枚举</td>
</tr>
<tr>
<td>ServletContext getServletContext()</td>
<td>返回对调用方正在其中执行的ServletContext的引用</td>
</tr>
</tbody></table>
<p>注意每个Servlet有自己的ServletConfig</p>
<p>配置方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在web.xml中配置ServletConfig初始化参数 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>actionservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.lagou.demo01.ActionServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 配置 Serlvet 的初始化参数 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 参数名 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 参数值 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>zhangSan<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ServletConfig servletConfig = getServletConfig();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;别名&quot;</span> + servletConfig.getServletName());</span><br><span class="line"></span><br><span class="line">    String name = servletConfig.getInitParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name：&quot;</span> + name);</span><br><span class="line"></span><br><span class="line">    Enumeration&lt;String&gt; names = servletConfig.getInitParameterNames();</span><br><span class="line">    <span class="keyword">while</span>(names.hasMoreElements())&#123;</span><br><span class="line">        System.out.print(names.nextElement() + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ServletContext servletContext = servletConfig.getServletContext();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ServletContext接口"><a href="#ServletContext接口" class="headerlink" title="ServletContext接口"></a>ServletContext接口</h3><ul>
<li>javax.servlet.ServletContext接口主要用于定义一组方法，Servlet使用这些方法与它的Servlet容器通信。</li>
<li>服务器容器在启动时会为每个项目创建唯一的一个ServletContext对象，用于实现多个Servlet之间的信息共享和通信。</li>
<li>在Servlet中通过this.getServletContext()方法可以获得ServletContext对象。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>String  getInitParameter(String  name)</td>
<td>返回包含初始化参数值的字符串，如果该参数不存在，则返回  null</td>
</tr>
<tr>
<td>Enumeration  getInitParameterNames()</td>
<td>将servlet的初始化参数的名称作为字符串对象的枚举返回，如果servlet没有初始化参数，则返回空枚举</td>
</tr>
<tr>
<td>String getRealPath(String path)</td>
<td>返回包含给定虚拟路径的实际路径的字符串</td>
</tr>
<tr>
<td>String getContextPath()</td>
<td>返回与此上下文关联的主路径</td>
</tr>
<tr>
<td>InputStream  getResourceAsStream(String path)</td>
<td>将位于指定路径的资源作为InputStream对象返回</td>
</tr>
<tr>
<td>void setAttribute(String name, Object object)</td>
<td>将指定的属性名和属性值绑定到当前对象</td>
</tr>
<tr>
<td>Object getAttribute(String name)</td>
<td>根据执行的属性名获取属性值</td>
</tr>
<tr>
<td>void removeAttribute(String name)</td>
<td>删除指定的属性名信息</td>
</tr>
</tbody></table>
<p>注意，所有Servlet共享一个ServletContext</p>
<p>配置方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在web.xml中配置ServletContext初始化参数 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>liShi<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>age<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>21<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ServletContext servletContext = getServletContext();</span><br><span class="line"></span><br><span class="line">    String name = servletContext.getInitParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span> + name);</span><br><span class="line"></span><br><span class="line">    Enumeration&lt;String&gt; names = servletContext.getInitParameterNames();</span><br><span class="line">    <span class="keyword">while</span>(names.hasMoreElements())&#123;</span><br><span class="line">        System.out.print(names.nextElement() + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;实际部署的路径&quot;</span> + servletContext.getRealPath(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;工程的路径&quot;</span> + servletContext.getContextPath());</span><br><span class="line"></span><br><span class="line">    servletContext.setAttribute(<span class="string">&quot;name&quot;</span> , <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;属性name的值为&quot;</span> + servletContext.getAttribute(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    servletContext.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Servlet-核心技术（下）"><a href="#Servlet-核心技术（下）" class="headerlink" title="Servlet 核心技术（下）"></a>Servlet 核心技术（下）</h1><h2 id="Servlet-JDBC应用"><a href="#Servlet-JDBC应用" class="headerlink" title="Servlet+JDBC应用"></a>Servlet+JDBC应用</h2><ul>
<li>在Servlet中可以使用JDBC技术访问数据库，常见功能如下：<br>查询DB数据，然后生成显示页面，例如：列表显示功能。<br>接收请求参数，然后对DB操作，例如：注册、登录、修改密码等功能。</li>
<li>为了方便重用和便于维护等目的，经常会采用DAO（Data Access Object）模式对数据库操作进行独立封装。<br><a href="https://imgtu.com/i/jmYtC4"><img src="https://s1.ax1x.com/2022/06/29/jmYtC4.png" alt="jmYtC4.png"></a></li>
<li>DAO工厂(工厂模式)<br>工厂类：封装了对象的创建细节，为调用者提供符合要求的对象。</li>
</ul>
<p><strong>注册案例</strong></p>
<p>register.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登入&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>model.User模型类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//提供共有的get和set方法。。。。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>until.JDBCUntil工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUntil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVERNAME = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/de?characterEncoding=UTF-8&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PWD = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(DRIVERNAME);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection connection = DriverManager.getConnection(URL, USER, PWD);</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, PreparedStatement ps)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>dao.UserDao类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">register</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUntil.getConnection();</span><br><span class="line">            String sql = <span class="string">&quot;insert into user (userName, password) value (?,?)&quot;</span>;</span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, user.getUserName());</span><br><span class="line">            ps.setString(<span class="number">2</span>,user.getPassword());</span><br><span class="line">            <span class="keyword">int</span> i = ps.executeUpdate();</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUntil.close(connection, ps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>test.UserDaoTest测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserDao userDao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        <span class="keyword">int</span> i = userDao.register(<span class="keyword">new</span> User(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;12555&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;注册成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;注册失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>servlet.RegisterServlet类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String userName = request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名：&quot;</span> + userName + <span class="string">&quot;, 密码：&quot;</span> + password);</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User(userName, password);</span><br><span class="line">        UserDao userDao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        <span class="keyword">int</span> i = userDao.register(user);</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            writer.print(<span class="string">&quot;&lt;h1&gt;注册成功！&quot;</span> + userName + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            writer.print(<span class="string">&quot;&lt;h1&gt;注册失败&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>web.xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RegisterServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.de.servlet.RegisterServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RegisterServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/register<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>导入数据库jar包省略。。。</p>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>首先客户浏览器发送http请求，当web服务器接受后发送302状态码响应及对应新的location给客户浏览器，客户浏览器发现是302响应，则自动再发送一个新的http请求，请求url是新的location地址，服务器根据此请求寻找资源并发送给客户。</p>
<ul>
<li>实现重定向需要借助javax.servlet.http.HttpServletResponse接口中的以下方法：</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void sendRedirect(String location)</td>
<td>使用指定的重定向位置URL向客户端发送临时重定向响应</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/jmNYc9"><img src="https://s1.ax1x.com/2022/06/29/jmNYc9.png" alt="jmNYc9.png"></a></p>
<p><strong>特点</strong></p>
<p>重定向之后，浏览器地址栏的URL会发生改变。<br>重定向过程中会将前面Request对象销毁，然后创建一个新的Request对象。<br>重定向的URL可以是其它项目工程。</p>
<h2 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h2><p>一个Web组件（Servlet/JSP）将未完成的处理通过容器转交给另外一个Web组件继续处理，转发的各个组件会共享Request和Response对象。</p>
<ul>
<li>request中获取转发器对象</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>RequestDispatcher   getRequestDispatcher(String  path)</td>
<td>返回一个RequestDispatcher对象，该对象充当位于给定路径上的资源的包装器</td>
</tr>
</tbody></table>
<ul>
<li>转发器对象转发操作</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th></th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void forward(ServletRequest request,  ServletResponse response)</td>
<td></td>
<td>将请求从一个servlet转发到服务器上的另一个资源（Servlet、JSP文件或HTML文件）</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RequestDispatcher zhuanServlet = request.getRequestDispatcher(<span class="string">&quot;zhuanServlet&quot;</span>);</span><br><span class="line">zhuanServlet.forward(request, response);</span><br></pre></td></tr></table></figure>

<p><strong>特点</strong></p>
<p>转发之后浏览器地址栏的URL不会发生改变。<br>转发过程中共享Request对象。<br>转发的URL不可以是其它项目工程。</p>
<p>重定向和转发区别</p>
<p><a href="https://imgtu.com/i/jmNx4U"><img src="https://s1.ax1x.com/2022/06/29/jmNx4U.png" alt="jmNx4U.png"></a></p>
<h2 id="Serblet线程安全"><a href="#Serblet线程安全" class="headerlink" title="Serblet线程安全"></a>Serblet线程安全</h2><ul>
<li>服务器在收到请求之后，会启动一个线程来进行相应的请求处理。</li>
<li>默认情况下，服务器为每个Servlet只创建一个对象实例。当多个请求访问同一个Servlet时，会有多个线程访问同一个Servlet对象，此时就可能发生线程安全问题。</li>
<li>多线程并发逻辑，需要使用synchronized对代码加锁处理，但尽量避免使用。</li>
</ul>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">src</span>=<span class="string">&quot;threadServlet?name=&#x27;zhangfei&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span>		<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">src</span>=<span class="string">&quot;threadServlet?name=&#x27;liubei&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">src</span>=<span class="string">&quot;threadServlet?name=&#x27;guanyu&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            System.out.println(name);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">            PrintWriter writer = response.getWriter();</span><br><span class="line">            writer.print(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><ul>
<li>Web程序基于HTTP协议通信，而HTTP协议是”无状态”的协议，一旦服务器响应完客户的请求之后，就断开连接，而同一个客户的下一次请求又会重新建立网络连接。</li>
<li>服务器程序有时是需要判断是否为同一个客户发出的请求，比如客户的多次选购商品。因此，有必要跟踪同一个客户发出的一系列请求。</li>
<li>把浏览器与服务器之间多次交互作为一个整体，将多次交互所涉及的数据保存下来，即状态管理。</li>
<li>多次交互的数据状态可以在客户端保存，也可以在服务器端保存。状态管理主要分为以下两类：<br>客户端管理：将状态保存在客户端。基于Cookie技术实现。<br>服务器管理：将状态保存在服务器端。基于Session技术实现。</li>
</ul>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ul>
<li>Cookie本意为”饼干“的含义，在这里表示客户端以“名-值”形式进行保存的一种技术。</li>
<li>浏览器向服务器发送请求时，服务器将数据以Set-Cookie消息头的方式响应给浏览器，然后<strong>浏览器</strong>会将这些数据以文本文件的方式<strong>保存</strong>起来。</li>
<li>当浏览器再次访问服务器时，会将这些数据以Cookie消息头的方式发送给服务器。</li>
</ul>
<p><strong>相关方法</strong></p>
<ul>
<li>使用javax.servlet.http.Cookie类的构造方法实现Cookie的创建。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Cookie(String name, String value)</td>
<td>根据参数指定数值构造对象</td>
</tr>
</tbody></table>
<ul>
<li>使用javax.servlet.http.HttpServletResponse接口的成员方法实现Cookie的添加，响应。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void addCookie(Cookie cookie)</td>
<td>添加参数指定的对象到响应</td>
</tr>
</tbody></table>
<ul>
<li>使用javax.servlet.http.HttpServletRequest接口的成员方法实现Cookie对象的获取。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Cookie[] getCookies()</td>
<td>返回此请求中包含的所有Cookie对象</td>
</tr>
</tbody></table>
<ul>
<li>使用javax.servlet.http.Cookie类的构造方法实现Cookie对象中属性的获取和修改。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>String getName()</td>
<td>返回此Cookie对象中的名字</td>
</tr>
<tr>
<td>String getValue()</td>
<td>返回此Cookie对象的数值</td>
</tr>
<tr>
<td>void setValue(String newValue)</td>
<td>设置Cookie的数值</td>
</tr>
</tbody></table>
<ul>
<li>Cookie生命周期，通过Cookie类的成员方法实现。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>int getMaxAge()</td>
<td>返回cookie的最长使用期限（以秒为单位）</td>
</tr>
<tr>
<td>void setMaxAge(int expiry)</td>
<td>设置cookie的最长保留时间（秒），负数表示关闭浏览器失效，0表示立马失效，正数表示多少秒后失效</td>
</tr>
</tbody></table>
<ul>
<li>Cookie的路径问题  <ul>
<li>浏览器在访问服务器时，会比较Cookie的路径与请求路径是否匹配，只有匹配的Cookie才会发送给服务器。</li>
<li>Cookie的默认路径等于添加这个Cookie信息时的组件路径，例如：/项目名/目录/add.do请求添加了一个Cookie信息，则该Cookie的路径是 /项目名/目录。</li>
<li>访问的请求地址必须符合Cookie的路径或者其子路径时，浏览器才会发送Cookie信息。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void setPath(String uri)</td>
<td>设置cookie的路径信息</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建并发送cookie给浏览器</span></span><br><span class="line"></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangfei&quot;</span>);</span><br><span class="line"><span class="comment">//cookie.setMaxAge(-1);</span></span><br><span class="line"><span class="comment">//cookie.setPath(request.getContextPath() + &quot;/hello&quot;);</span></span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接收浏览器的cookie</span></span><br><span class="line"></span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">    System.out.println( cookie.getName() );</span><br><span class="line">    System.out.println( cookie.getValue() );</span><br><span class="line">    cookie.setValue(<span class="string">&quot;liubei&quot;</span>);</span><br><span class="line">    System.out.println( cookie.getMaxAge() );</span><br><span class="line">    System.out.println( cookie.getPath() );</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>Cookie特点</strong></p>
<p>Cookie技术不适合存储所有数据，程序员只用于存储少量、非敏感信息，原因如下：</p>
<p>将状态数据保存在浏览器端，不安全。<br>保存数据量有限制，大约4KB左右。<br>只能保存字符串信息。<br>可以通过浏览器设置为禁止使用。</p>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><ul>
<li>Session本意为”会话”的含义，是用来维护一个客户端和服务器关联的一种技术。</li>
<li>浏览器访问服务器时，服务器会为每一个浏览器都在服务器端的内存中分配一个空间，用于创建一个Session对象，该对象有一个id属性且该值唯一，我们称为SessionId，并且服务器会将这个SessionId以Cookie方式发送给浏览器存储。</li>
<li>浏览器再次访问服务器时会将SessionId发送给服务器，服务器可以依据SessionId查找相对应的Session对象</li>
</ul>
<p><strong>相关方法</strong></p>
<ul>
<li>使用javax.servlet.http.HttpServletRequest接口的成员方法实现Session的获取。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>HttpSession getSession()</td>
<td>返回此请求关联的当前Session，若此请求没有则创建一个</td>
</tr>
</tbody></table>
<ul>
<li>使用javax.servlet.http.HttpSession接口的成员方法实现判断和获取。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>boolean isNew()</td>
<td>判断是否为新创建的Session</td>
</tr>
<tr>
<td>String getId()</td>
<td>获取Session的编号</td>
</tr>
</tbody></table>
<ul>
<li>使用javax.servlet.http.HttpSession接口的成员方法实现属性的管理。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Object getAttribute(String name)</td>
<td>返回在此会话中用指定名称绑定的对象，如果没有对象在该名称下绑定，则返回空值</td>
</tr>
<tr>
<td>void setAttribute(String name,  Object value)</td>
<td>使用指定的名称将对象绑定到此会话</td>
</tr>
<tr>
<td>void removeAttribute(String name)</td>
<td>从此会话中删除与指定名称绑定的对象</td>
</tr>
</tbody></table>
<ul>
<li>Session的生命周期<ul>
<li>为了节省服务器内存空间资源，服务器会将空闲时间过长的Session对象自动清除掉，服务器默认的超时限制一般是30分钟。</li>
<li>使用javax.servlet.http.HttpSession接口的成员方法实现失效实现的获取和设置。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>int getMaxInactiveInterval()</td>
<td>获取失效时间  （秒）</td>
</tr>
<tr>
<td>void setMaxInactiveInterval(int interval)</td>
<td>设置失效时间  （秒）</td>
</tr>
</tbody></table>
<ul>
<li>可以配置web.xml文件修改失效时间。（分）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br><span class="line">System.out.println( session.isNew() ? <span class="string">&quot;新创建的&quot;</span> : <span class="string">&quot;不是新创建的&quot;</span>);</span><br><span class="line">System.out.println( <span class="string">&quot;session的id：&quot;</span> + session.getId() );</span><br><span class="line">session.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;liubei&quot;</span>);</span><br><span class="line">session.setMaxInactiveInterval(<span class="number">60</span> * <span class="number">60</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br><span class="line">System.out.println( session.getAttribute(<span class="string">&quot;name&quot;</span>) );  <span class="comment">//liubei</span></span><br><span class="line">System.out.println( session.getMaxInactiveInterval() ); <span class="comment">//3600</span></span><br></pre></td></tr></table></figure>



<p><strong>Session特点</strong></p>
<p>数据比较安全。<br>能够保存的数据类型丰富，而Cookie只能保存字符串。<br>能够保存更多的数据，而Cookie大约保存4KB。<br>数据保存在服务器端会占用服务器的内存空间，如果存储信息过多、用户量过大，会严重影响服务器的性能。</p>
<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><ul>
<li>JSP是Java Server Pages的简称，跟Servlet一样可以动态生成HTML响应， JSP文件命名为xxx.jsp。 </li>
<li>与Servlet不同，JSP文件以HTML标记为主，然后内嵌Java代码段，用于处理动态内容。</li>
</ul>
<p>jsp和servlet关系：</p>
<p>客户端–&gt;jsp页面–&gt;转译，编译成Serblet–&gt;响应</p>
<h2 id="jsp语法解构"><a href="#jsp语法解构" class="headerlink" title="jsp语法解构"></a>jsp语法解构</h2><p>声明区</p>
<p>程序代码区</p>
<p>表达式</p>
<p>注释</p>
<p>指令和动作</p>
<p>内置对象</p>
<h2 id="声明区"><a href="#声明区" class="headerlink" title="声明区"></a>声明区</h2><p>基本语法：<code>&lt;%!  %&gt;</code></p>
<p>说明：可以定义全局变量、方法、类。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%! </span><br><span class="line">    <span class="keyword">int</span> i; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">()</span></span>&#123;… …&#125; </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h2 id="程序代码区"><a href="#程序代码区" class="headerlink" title="程序代码区"></a>程序代码区</h2><p>基本语法：<code>&lt;%    %&gt;</code></p>
<p>说明：可以定义局部变量以及放入任何的Java程序代码。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">    <span class="keyword">int</span> j; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">10</span>; k++) &#123; … … &#125; </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>基本语法：<code>&lt;%=  %&gt;</code></p>
<p>说明：可以输出一个变量或一个具体内容，但=后面必须是字符串变量或者可以被转换成字符串的表达式。</p>
<p>注意：不需要以;结束，只有一行</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%= “hello world” %&gt; </span><br><span class="line">&lt;%= i+<span class="number">1</span> %&gt;</span><br></pre></td></tr></table></figure>



<p>案例：使用for循环输出一个html语言的表格，： </p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;id&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;name&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;age&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;salary&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;% <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++)&#123; %&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=i%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=i%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=i%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=i%&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式： </span><br><span class="line">&lt;!--… …--&gt; HTML文件的注释，浏览器可以查看到 </span><br><span class="line">&lt;%--… …--%&gt; JSP文件的注释，浏览器看不到 </span><br><span class="line">&lt;% //… … %&gt; Java语言中的单行注释，浏览器看不到 </span><br><span class="line">&lt;% /*… …*/ %&gt; Java语言中的多行注释，浏览器看不到 </span><br><span class="line"></span><br><span class="line">注释的内容不会被执行</span><br></pre></td></tr></table></figure>

<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><ul>
<li>指令格式：<code>&lt;%@ 指令 属性=&quot;属性值&quot; %&gt;</code></li>
<li>指令的属性可以设定多个。</li>
<li>JSP常用指令有：page、taglib、include。 </li>
</ul>
<p><strong>page指令</strong></p>
<p>page指令用于导包和设置一些页面属性，常用属性如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import        导入相应的包，惟一允许在同一文档中多次出现的属性 </span><br><span class="line">contentType   设置Content-Type响应报头，标明即将发送到浏览器的文档类型 </span><br><span class="line">pageEncoding  设置页面的编码 </span><br><span class="line">language      指定页面使用的语言 </span><br><span class="line">session       控制页面是否参与HTTP会话 </span><br><span class="line">errorPage     处理当前页面中抛出但未被捕获的任何异常 </span><br><span class="line">isErrorPage   当前页是否可以作为其他页面的错误处理页面</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>



<p><strong>taglib指令</strong></p>
<p>taglib指令用来扩展JSP程序的标签元素，引入其他功能的标签库文件。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- uri属性用于指定库的标识 --&gt; </span><br><span class="line">&lt;!-- prefix属性用于指定库前缀 --&gt; </span><br><span class="line"></span><br><span class="line">&lt;%@ taglib uri=“tagLibary” prefix=“prefix” %&gt;</span><br></pre></td></tr></table></figure>



<p><strong>include指令</strong></p>
<p>include指令用于引入另一个JSP程序或HTML文件等</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">&quot;被包含的文件地址&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>

<p>JSP引擎会在JSP文件的转换时期先把file属性设定的文件包含进来，然后开始执行转换及编译的工作。</p>
<h2 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h2><p><strong>jsp:include / jsp:param</strong></p>
<p>jsp:include动作用于引入另一个JSP程序或HTML文件等。<br>执行到include时，被include的文件才会被编译。<br>如果include的是jsp文件，那它不会被转换成Servlet文件。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:include page=“URLSpec” flush=“<span class="keyword">true</span>”/&gt; </span><br><span class="line"></span><br><span class="line">&lt;jsp:include page=“URLSpec” flush=“<span class="keyword">true</span>”&gt; </span><br><span class="line">    &lt;jsp:param name=“key” value=“value”/&gt; </span><br><span class="line">&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure>

<p>include指令和include动作的区别：</p>
<p>1，include指令是在JSP程序的转换时期就将fifile属性所指定的程序内容嵌入再编译执行（静态包含）。</p>
<p>2，include动作在转换时期是不会被编译的，只有在客户端请求时期被执行到才会被动态的编译载入（动态包含，推荐）。</p>
<p><strong>jsp:forward / jsp:param</strong></p>
<p>forward动作用于在JSP中实现转发，将请求转发到另一个指定的JSP程序或者Servlet中处理。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:forward page=“urlSpec” flush=“<span class="keyword">true</span>”/&gt; </span><br><span class="line"></span><br><span class="line">&lt;jsp:forward page=“urlSpec”&gt; </span><br><span class="line">    &lt;!-- 用于指定参数和其对应的值 --&gt; </span><br><span class="line">    &lt;jsp:param name=“key” value=“value”/&gt; </span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>

<h2 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h2><ul>
<li>在JSP程序中有9个内置对象由容器为用户进行实例化，程序员可以不用定义就直接使用这些变量。</li>
<li>在JSP转换成Servlet后，会自动追加这些变量的定义，使用内置对象可以简化JSP的开发。</li>
</ul>
<table>
<thead>
<tr>
<th>对象变量</th>
<th>对象类型</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>out</td>
<td>JSPWriter</td>
<td>输出流</td>
</tr>
<tr>
<td>request</td>
<td>HttpServletRequest</td>
<td>请求信息</td>
</tr>
<tr>
<td>response</td>
<td>HttpServletResponse</td>
<td>响应信息</td>
</tr>
<tr>
<td>session</td>
<td>HttpSession</td>
<td>会话</td>
</tr>
<tr>
<td>application</td>
<td>ServletContext</td>
<td>全局的上下文对象</td>
</tr>
<tr>
<td>pageContext</td>
<td>PageContext</td>
<td>JSP页面上下文</td>
</tr>
<tr>
<td>page</td>
<td>Object</td>
<td>JSP页面本身</td>
</tr>
<tr>
<td>config</td>
<td>ServletConfig</td>
<td>Servlet配置对象</td>
</tr>
<tr>
<td>exception</td>
<td>Throwable</td>
<td>捕获网页异常</td>
</tr>
</tbody></table>
<h3 id="out内置对象"><a href="#out内置对象" class="headerlink" title="out内置对象"></a>out内置对象</h3><p>out内置对象是一个缓冲的输出流，用来给客户端输出信息。</p>
<p>常用方法：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void println(String x)</td>
<td>向客户端输出各种类型数据</td>
</tr>
<tr>
<td>void newLine()</td>
<td>输出一个换行符</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭输出流</td>
</tr>
<tr>
<td>int getBufferSize()</td>
<td>返回缓冲区的大小</td>
</tr>
<tr>
<td>int getRemaining()</td>
<td>返回缓冲区中未使用的字节数</td>
</tr>
<tr>
<td>void flush()</td>
<td>输出缓冲区里的数据</td>
</tr>
<tr>
<td>void clearBuffer()</td>
<td>清除缓冲区里的数据，同时把数据输出到客户端</td>
</tr>
<tr>
<td>void clear()</td>
<td>清除缓冲区里的数据，但不把数据输出到客户端</td>
</tr>
</tbody></table>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    String s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    out.println(<span class="string">&quot;&lt;h1&gt;&quot;</span>+s+<span class="string">&quot;&lt;h1&gt;&quot;</span>);</span><br><span class="line">    out.newLine();</span><br><span class="line">    out.println( <span class="string">&quot;缓存大小：&quot;</span> + out.getBufferSize() );</span><br><span class="line">    out.println( <span class="string">&quot;未使用的缓存大小：&quot;</span> + out.getRemaining() );</span><br><span class="line">    out.println( <span class="string">&quot;已使用的缓存大小&quot;</span> + (out.getBufferSize() - out.getRemaining()) );</span><br><span class="line">    <span class="comment">//out.flush();</span></span><br><span class="line">    <span class="comment">//out.clear();</span></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h3 id="request内置对象"><a href="#request内置对象" class="headerlink" title="request内置对象"></a>request内置对象</h3><ul>
<li>request对象封装的是调用JSP页面的请求信息，它是HttpServletRequest接口的一个实例。</li>
<li>该对象的属性值只在一个请求中保存。</li>
</ul>
<p>常用方法：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>String getMethod()</td>
<td>返回客户端向服务器端传送数据的方式</td>
</tr>
<tr>
<td>String getParameter(String name)</td>
<td>返回客户端向服务器端传送的参数值</td>
</tr>
<tr>
<td>String[] getParameterValues( String name)</td>
<td>获得指定参数的所有值</td>
</tr>
<tr>
<td>String getRequestURI()</td>
<td>获得请求地址</td>
</tr>
<tr>
<td>String getRemoteAddr()</td>
<td>返回发送请求的客户端或最后一个代理的IP地址</td>
</tr>
<tr>
<td>int getRemotePort()</td>
<td>返回发送请求的客户端或最后一个代理的端口号</td>
</tr>
<tr>
<td>String getServerName()</td>
<td>获取服务器的名字</td>
</tr>
<tr>
<td>int getServerPort()</td>
<td>获取服务器端的端口</td>
</tr>
<tr>
<td>void setAttribute(String name,Object o)</td>
<td>在此请求中存储属性。属性在请求之间重置</td>
</tr>
<tr>
<td>Object getAttribute(String name)</td>
<td>将指定属性的值作为对象返回，若不存在则返回空值</td>
</tr>
</tbody></table>
<h3 id="response内置对象"><a href="#response内置对象" class="headerlink" title="response内置对象"></a>response内置对象</h3><ul>
<li>response对象用于给客户端相应输出处理结果，它是HttpServletResponse接口的一个实例。</li>
<li>经常用于设置HTTP标题，添加cookie、设置响应内容的类型和状态、发送HTTP重定向和编码URL。</li>
</ul>
<p>常用方法：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void addCookie(Cookie cookie)</td>
<td>添加一个Cookie对象，用于在客户端保存特定的信息</td>
</tr>
<tr>
<td>void addHeader(String name, String value)</td>
<td>添加HTTP头信息，该Header信息将发送到客户端</td>
</tr>
<tr>
<td>boolean containsHeader(String name)</td>
<td>判断指定名字的HTTP文件头是否存在</td>
</tr>
<tr>
<td>void sendRedirect(String location)</td>
<td>重定向JSP文件</td>
</tr>
<tr>
<td>void setContentType(String type)</td>
<td>设置类型与编码方式</td>
</tr>
</tbody></table>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    response.addHeader(<span class="string">&quot;refresh&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd  HH:mm:ss&quot;</span>);</span><br><span class="line">    out.println(<span class="string">&quot;&lt;h1&gt;&quot;</span> + sdf.format(date) + <span class="string">&quot;&lt;h1&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h3 id="session内置对象"><a href="#session内置对象" class="headerlink" title="session内置对象"></a>session内置对象</h3><ul>
<li>session对象表示浏览器和服务器之间的一次会话，一次会话可以包含多次请求，在多次请求之间可以借助session对象存储信息，它是HttpSession类型的一个实例。</li>
<li>该对象的属性值在一次会话范围中保存，保存在服务器端，只要不关闭浏览器，默认半个小时内都可以访问。</li>
</ul>
<p>常用方法:</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void setAttribute(String name, Object value)</td>
<td>使用指定的名称将对象绑定到此会话</td>
</tr>
<tr>
<td>Object getAttribute(String name)</td>
<td>返回在此会话中用指定名称绑定的对象，如果没有对象在该名称下绑定则返回空值</td>
</tr>
</tbody></table>
<h3 id="application内置对象"><a href="#application内置对象" class="headerlink" title="application内置对象"></a>application内置对象</h3><ul>
<li>application对象是一个web程序的全局变量，它是ServletContext类型的一个实例。</li>
<li>在整个服务器上保存数据，所有用户共享。</li>
</ul>
<p>常用方法:</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void setAttribute(String name, Object object)</td>
<td>将对象绑定到此servlet上下文中的给定属性名</td>
</tr>
<tr>
<td>Object getAttribute(String name)</td>
<td>返回给定名称的servlet容器属性，若没有该名称的属性返回null</td>
</tr>
</tbody></table>
<h3 id="pageContext内置对象"><a href="#pageContext内置对象" class="headerlink" title="pageContext内置对象"></a>pageContext内置对象</h3><ul>
<li>pageContext对象是PageContext类型的对象，可以使用这个对象来管理其他的隐含对象。</li>
<li>只在一个页面中保存数据。</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void setAttribute(String name, Object value, int scope)</td>
<td>使用适当的作用域设置指定的名称和值</td>
</tr>
<tr>
<td>Object getAttribute(String name, int scope)</td>
<td>返回指定作用域中名称关联的对象，若找不到则返回null</td>
</tr>
<tr>
<td>ServletRequest getRequest()</td>
<td>获取请求对象</td>
</tr>
<tr>
<td>ServletResponse getResponse()</td>
<td>获取响应对象</td>
</tr>
<tr>
<td>HttpSession getSession()</td>
<td>获取会话对象</td>
</tr>
<tr>
<td>ServletConfig getServletConfig()</td>
<td>获取配置对象</td>
</tr>
<tr>
<td>JspWriter getOut()</td>
<td>获取输出对象</td>
</tr>
<tr>
<td>Object getPage()</td>
<td>获取页面对象</td>
</tr>
<tr>
<td>Exception getException()</td>
<td>获取异常对象</td>
</tr>
</tbody></table>
<h3 id="exception内置对象"><a href="#exception内置对象" class="headerlink" title="exception内置对象"></a>exception内置对象</h3><ul>
<li>exception 对象是Throwable的实例，表示的是JSP的异常信息。</li>
<li>如果要使用它，必须将对应页面page指令的isErrorPage属性设置成true，表示异常处理页面。</li>
</ul>
<p>error.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isErrorPage=<span class="string">&quot;true&quot;</span> %&gt;  &lt;%-- 可以为其他页面处理异常的页面 --%&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;处理其他页面异常的页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">if</span>(exception != <span class="keyword">null</span>)&#123;</span><br><span class="line">            out.println(<span class="string">&quot;错误内容为：&quot;</span> + exception.getMessage() );</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>某个页面的异常需要交给异常处理页面处理，需要指定：</p>
<p>1，单个页面的处理方式：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page errorPage=<span class="string">&quot;error.jsp&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>

<p>2，在web.xml中配置统一的异常处理页面：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Throwable<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="JavaBean组件"><a href="#JavaBean组件" class="headerlink" title="JavaBean组件"></a>JavaBean组件</h2><ul>
<li>JavaBean 是使用 Java 语言开发的一个可重用的组件，在 JSP 开发中可以使用 JavaBean 减少重复代码，使整个 JSP 代码的开发更加简洁。</li>
<li>JavaBean本质上就是Java类，通常要求如下：<br>1，属性：全部私有化，通过get和set方法进行访问。<br>2，方法：必须是public关键字修饰。<br>3，构造器 ：必须有无参构造方法。</li>
</ul>
<p><strong>常规方式操作对象</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">&quot;zhang&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    out.println(user.getName());</span><br><span class="line">    out.println(user.getAge());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>



<p><strong>使用组件操作对象</strong></p>
<ul>
<li>使用jsp:useBean的方式创建javaBean实例</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:useBean id=“对象名” scope=“保存范围 <span class="class"><span class="keyword">class</span></span>=“包名.类名” /&gt; </span><br><span class="line"></span><br><span class="line">保存范围有：page|request|sessin|application，默认为page范围。</span><br></pre></td></tr></table></figure>

<ul>
<li>使用jsp:setProperty的方式设置javaBean的属性值</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;对象名&quot;</span> property=<span class="string">&quot;属性名&quot;</span> value=<span class="string">&quot;属性值&quot;</span> param=<span class="string">&quot;参数名&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用jsp:getProperty的方式获取javaBean的属性值</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:getProperty name=<span class="string">&quot;对象名&quot;</span> property=<span class="string">&quot;属性名&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除某范围内的javaBean实例</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% 内置对象.removeAttribute(“JavaBean的对象名”); %&gt;</span><br></pre></td></tr></table></figure>



<p>例如在test1.jsp文件中创建user1：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">&quot;user1&quot;</span> scope=<span class="string">&quot;session&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.de.User&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;user1&quot;</span> property=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;zhang&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;user1&quot;</span> property=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;12&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>在test2.jsp文件中可以访问得到：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">&quot;user1&quot;</span> scope=<span class="string">&quot;session&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.de.User&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">user的姓名：&lt;jsp:getProperty name=<span class="string">&quot;user1&quot;</span> property=<span class="string">&quot;name&quot;</span>/&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">user的年龄：&lt;jsp:getProperty name=<span class="string">&quot;user1&quot;</span> property=<span class="string">&quot;age&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">	session.removeAttribute(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h1 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h1><ul>
<li>MVC是模型(Model)和视图(View)以及控制器(Controller)的简写，是一种将数据、界面显示和业务逻辑进行分离的组织方式，这样在改进界面及用户交互时，不需要重新编写业务逻辑，从而提高了代码的可维护性。</li>
<li>M：主要用于封装业务数据的JavaBean(Bean) 和 业务逻辑的JavaBean(Service)及访问数据库的DAO对象。</li>
<li>V：主要负责数据收集 和 数据展现，通常由JSP文件完成。</li>
<li>C：主要负责流程控制 和 页面跳转，通常由Servlet完成。</li>
</ul>
<p><a href="https://imgtu.com/i/jnlTYj"><img src="https://s1.ax1x.com/2022/06/29/jnlTYj.png" alt="jnlTYj.png"></a></p>
<p><strong>登入案例</strong></p>
<p>login.jsp登入页面</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;用户登入&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;loginServlet&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;p&gt;用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userName&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;密&amp;nbsp;&amp;nbsp;&amp;nbsp;码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color:red&quot;</span>&gt;&lt;%=</span><br><span class="line">        request.getAttribute(<span class="string">&quot;error&quot;</span>)==<span class="keyword">null</span>?<span class="string">&quot;&quot;</span>:request.getAttribute(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">        %&gt;&lt;/span&gt;</span><br><span class="line">        &lt;p&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登入&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>bean.User或model.User模型类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//公有的get和set方法.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>until.JDBCUntil工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUntil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVERNAME = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/de?characterEncoding=UTF-8&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PWD = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(DRIVERNAME);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(URL, USER, PWD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con, PreparedStatement ps)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ps.close();</span><br><span class="line">        con.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dao.UserDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">loginDao</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = JDBCUntil.getConnection();</span><br><span class="line">            String sql = <span class="string">&quot;select * from user where userName=? and password=?&quot;</span>;</span><br><span class="line">            ps = con.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, user.getUserName());</span><br><span class="line">            ps.setString(<span class="number">2</span>, user.getPassword());</span><br><span class="line">            ResultSet resultSet = ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> User(resultSet.getString(<span class="string">&quot;userName&quot;</span>) , resultSet.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JDBCUntil.close(con, ps);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>test.UserDaoTest测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginDaoTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserDao userDao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        User user = userDao.loginDao(<span class="keyword">new</span> User(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>factory.UserDaoFactory工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getUserDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDao();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service.UserService，降低servlet和dao的耦合度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = UserDaoFactory.getUserDao();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">loginService</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.loginDao(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LoginServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String userName = request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(userName + <span class="string">&quot;,  &quot;</span> + password);</span><br><span class="line"></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserService();</span><br><span class="line">        User user = userService.loginService( <span class="keyword">new</span> User(userName, password) );</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登入成功！&quot;</span>);</span><br><span class="line">            request.getSession().setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;home.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户或密码错误！&quot;</span>);</span><br><span class="line">            request.setAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;用户名或密码错误！&quot;</span>);</span><br><span class="line">            RequestDispatcher requestDispatcher = request.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>);</span><br><span class="line">            requestDispatcher.forward(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>web.xml配置servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.de.servlet.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/loginServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：导入相关jar包。创建相关数据库。</p>
<h1 id="EL"><a href="#EL" class="headerlink" title="EL"></a>EL</h1><p>EL（Expression Language）表达式提供了在JSP中简化表达式的方法，可以方便地访问各种数据并输出。</p>
<p>即 &lt;%= 表达式 %&gt; 的写法，简化成${  }</p>
<p><strong>功能</strong></p>
<p>依次访问pageContext、request、session和application作用域对象存储的数据。<br>获取请求参数值。<br>访问Bean对象的属性。<br>访问集合中的数据。<br>输出简单的运算结果。</p>
<h2 id="访问内置对象"><a href="#访问内置对象" class="headerlink" title="访问内置对象"></a>访问内置对象</h2><ul>
<li>&lt;%= request.getAttribute(“ varName”) %&gt;</li>
<li>用EL实现: ${ varName }</li>
</ul>
<p>执行流程：依次访问pageContext、request、session和application作用域对象存储的数据。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--  原始方式  --%&gt;</span><br><span class="line">&lt;%= request.getAttribute(<span class="string">&quot;name&quot;</span>) %&gt;</span><br><span class="line">&lt;%= session.getAttribute(<span class="string">&quot;age&quot;</span>) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--   EL   --%&gt;</span><br><span class="line">$&#123; name &#125;</span><br><span class="line">$&#123; age &#125;</span><br></pre></td></tr></table></figure>

<h2 id="访问请求参数"><a href="#访问请求参数" class="headerlink" title="访问请求参数"></a>访问请求参数</h2><ul>
<li>在EL之前使用下列方式访问请求参数的数据<br>request.getParameter(name);<br>request.getParameterValues(name);</li>
<li>在EL中使用下列方式访问请求参数的数据<br>${ param.参数 }：接收的参数只有一个值。<br>${ paramValues.参数 }：接受的参数有多个值。</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--原始方式--%&gt;</span><br><span class="line">&lt;%= request.getParameter(<span class="string">&quot;name&quot;</span>) %&gt;</span><br><span class="line">&lt;%= Arrays.toString( request.getParameterValues(<span class="string">&quot;hobby&quot;</span>) ) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--EL--%&gt;</span><br><span class="line">$&#123; param.name &#125;</span><br><span class="line">$&#123; paramValues.hobby[<span class="number">0</span>] &#125;</span><br></pre></td></tr></table></figure>

<h2 id="访问Bean对象的属性"><a href="#访问Bean对象的属性" class="headerlink" title="访问Bean对象的属性"></a>访问Bean对象的属性</h2><p>方式一： $ { 对象名 . 属性名 }，例如：${ user.name }</p>
<p>方式二： $ { 对象名 [“属性名”] }，例如：${ user[“name”] }</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--原始方式--%&gt;</span><br><span class="line">&lt;%= ((Person)request.getAttribute(<span class="string">&quot;person&quot;</span>)).getName() %&gt;</span><br><span class="line">&lt;%= ((Person)request.getAttribute(<span class="string">&quot;person&quot;</span>)).getAge() %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--EL--%&gt;</span><br><span class="line">$&#123; person.name &#125;</span><br><span class="line">$&#123; person[<span class="string">&quot;age&quot;</span>] &#125;</span><br></pre></td></tr></table></figure>

<p>两种方式区别：</p>
<ul>
<li>当要存取的属性名中包含一些特殊字符，如： . 或 ,等并非字母或数字的符号，就一定要使用 [ ]而不是.的方式</li>
<li>使用[]的方式可以动态取值，具体方式如下：</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">	request.setAttribute(<span class="string">&quot;var&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">    $&#123; person[<span class="keyword">var</span>] &#125;   相当于     $&#123; person[<span class="string">&quot;age&quot;</span>] &#125;</span><br></pre></td></tr></table></figure>

<h2 id="访问集合中的数据"><a href="#访问集合中的数据" class="headerlink" title="访问集合中的数据"></a>访问集合中的数据</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--  原始方式  --%&gt;</span><br><span class="line">&lt;%= ( (List)request.getAttribute(<span class="string">&quot;list&quot;</span>) ).get(<span class="number">0</span>) %&gt;</span><br><span class="line">&lt;%= ( (Map)request.getAttribute(<span class="string">&quot;map&quot;</span>) ).get(<span class="string">&quot;one&quot;</span>) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--  EL  --%&gt;</span><br><span class="line">$&#123; list[<span class="number">0</span>] &#125;</span><br><span class="line">$&#123; map[<span class="string">&quot;one&quot;</span>] &#125;</span><br></pre></td></tr></table></figure>

<h2 id="常用内置对象"><a href="#常用内置对象" class="headerlink" title="常用内置对象"></a>常用内置对象</h2><table>
<thead>
<tr>
<th>类别</th>
<th>标识符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>JSP</td>
<td>pageContext</td>
<td>PageContext  处理当前页面</td>
</tr>
<tr>
<td>作用域</td>
<td>pageScope</td>
<td>同页面作用域属性名称和值有关的Map类</td>
</tr>
<tr>
<td></td>
<td>requestScope</td>
<td>同请求作用域属性的名称和值有关的Map类</td>
</tr>
<tr>
<td></td>
<td>sessionScope</td>
<td>同会话作用域属性的名称和值有关的Map类</td>
</tr>
<tr>
<td></td>
<td>applicationScope</td>
<td>同应用程序作用域属性的名称和值有关的Map类</td>
</tr>
<tr>
<td>请求参数</td>
<td>param</td>
<td>根据名称存储请求参数的值的Map类</td>
</tr>
<tr>
<td></td>
<td>paramValues</td>
<td>把请求参数的所有值作为一个String数组来存储的Map类</td>
</tr>
<tr>
<td>请求头</td>
<td>header</td>
<td>根据名称存储请求头主要值的Map类</td>
</tr>
<tr>
<td></td>
<td>headerValues</td>
<td>把请求头的所有值作为一个String数组来存储的Map类</td>
</tr>
<tr>
<td>Cookie</td>
<td>cookie</td>
<td>根据名称存储请求附带的cookie的Map类</td>
</tr>
<tr>
<td>初始化参数</td>
<td>initParam</td>
<td>根据名称存储Web应用程序上下文初始化参数的Map类</td>
</tr>
</tbody></table>
<h2 id="常用运算符"><a href="#常用运算符" class="headerlink" title="常用运算符"></a>常用运算符</h2><p><strong>算术运算符</strong></p>
<table>
<thead>
<tr>
<th>算术运算符</th>
<th>说 明</th>
<th>范 例</th>
<th>运算结果</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
<td>${1+2}</td>
<td>3</td>
</tr>
<tr>
<td>－</td>
<td>减</td>
<td>${2-1}</td>
<td>1</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>${2*3}</td>
<td>6</td>
</tr>
<tr>
<td>/ 或  div</td>
<td>除</td>
<td>${16/5}或${16div5}</td>
<td>3.2</td>
</tr>
<tr>
<td>% 或  mod</td>
<td>取余</td>
<td>${16%5}或${16mod5}</td>
<td>1</td>
</tr>
</tbody></table>
<p><strong>关系运算符</strong></p>
<table>
<thead>
<tr>
<th>关系运算符</th>
<th>说 明</th>
<th>范 例</th>
<th>运算结果</th>
</tr>
</thead>
<tbody><tr>
<td>==或eq</td>
<td>等于</td>
<td>${1==2}或${1 eq 2}</td>
<td>false</td>
</tr>
<tr>
<td>!= 或ne</td>
<td>不等于</td>
<td>${2!=1}或${1 ne 2}</td>
<td>true</td>
</tr>
<tr>
<td>&lt; 或lt</td>
<td>小于</td>
<td>${2&lt;3}或${2 lt 3 }</td>
<td>true</td>
</tr>
<tr>
<td>&gt; 或  gt</td>
<td>大于</td>
<td>${16&gt;5}或${16 gt 5}</td>
<td>true</td>
</tr>
<tr>
<td>&lt;= 或  le</td>
<td>小于等于</td>
<td>${16&lt;=5}或${16 le 5}</td>
<td>false</td>
</tr>
<tr>
<td>&gt;= 或  ge</td>
<td>大于等于</td>
<td>${16&gt;=5}或${16 ge 5}</td>
<td>true</td>
</tr>
</tbody></table>
<p><strong>逻辑运算符</strong></p>
<table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>说 明</th>
<th>范 例</th>
<th>运算结果</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp; 或  and</td>
<td>与运算</td>
<td>${true&amp;&amp;true}或${true and true}</td>
<td>true</td>
</tr>
<tr>
<td>|| 或or</td>
<td>或运算</td>
<td>${true||false}或${true or false}</td>
<td>true</td>
</tr>
<tr>
<td>! 或not</td>
<td>非运算</td>
<td>${!true}或${not true }</td>
<td>false</td>
</tr>
</tbody></table>
<p><strong>条件运算符</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123; 条件表达式 ? 语句<span class="number">1</span> : 语句<span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>验证运算符</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;empty 表达式&#125; </span><br><span class="line">返回布尔值判断表达式是否为<span class="string">&quot;空&quot;</span>值，<span class="keyword">null</span>值、无元素的集合或数组、长度为零的String被认为是空值。</span><br></pre></td></tr></table></figure>

<h1 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h1><ul>
<li>JSTL( JSP Standard Tag Library ) 被称为JSP标准标签库。</li>
<li>开发人员可以利用这些标签取代JSP页面上的Java代码，从而提高程序的可读性，降低程序的维护难度。</li>
</ul>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul>
<li><p>下载JSTL的jar包并添加到项目中，下载地址为：<a href="https://tomcat.apache.org/download-taglibs.cgi">https://tomcat.apache.org/download-taglibs.cgi</a><br><a href="https://imgtu.com/i/jNSU0O"><img src="https://s1.ax1x.com/2022/07/05/jNSU0O.png" alt="jNSU0O.png"></a></p>
</li>
<li><p>在JSP页面中使用taglib指令引入jstl标签库，方式为：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- prefix属性用于指定库前缀 --&gt; </span><br><span class="line">&lt;!-- uri属性用于指定库的标识 --&gt; </span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="常用核心标签"><a href="#常用核心标签" class="headerlink" title="常用核心标签"></a>常用核心标签</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>

<p><strong>输出标签</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:out&gt;&lt;/c:out&gt; 用来将指定内容输出的标签</span><br></pre></td></tr></table></figure>

<p><strong>设置标签</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:set&gt;&lt;/c:set&gt; 用来设置属性范围值的标签</span><br></pre></td></tr></table></figure>

<p><strong>删除标签</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:remove&gt;&lt;/c:remove&gt; 用来删除指定数据的标签</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--  设置session中，name值为zhangfei  --%&gt;</span><br><span class="line">    &lt;c:set <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;zhangfei&quot;</span> scope=<span class="string">&quot;session&quot;</span>&gt;&lt;/c:set&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;&lt;/c:out&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--  设置对象的属性值 --%&gt;&lt;hr/&gt;&lt;hr/&gt;</span><br><span class="line">    &lt;jsp:useBean id=<span class="string">&quot;person&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;Bean.Person&quot;</span> scope=<span class="string">&quot;session&quot;</span>&gt;&lt;/jsp:useBean&gt;</span><br><span class="line">    &lt;c:set property=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;liubei&quot;</span> target=<span class="string">&quot;$&#123;person&#125;&quot;</span>&gt;&lt;/c:set&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;person.name&#125;&quot;</span>&gt;&lt;/c:out&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- 删除 --%&gt;</span><br><span class="line">    &lt;c:remove <span class="keyword">var</span>=<span class="string">&quot;person&quot;</span> scope=<span class="string">&quot;session&quot;</span>&gt;&lt;/c:remove&gt;</span><br></pre></td></tr></table></figure>

<p><strong>单条件判断标签</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test =“EL条件表达式”&gt; </span><br><span class="line">    满足条件执行 </span><br><span class="line">&lt;/c:<span class="keyword">if</span> &gt;</span><br></pre></td></tr></table></figure>

<p><strong>多条件判断标签</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:choose &gt; </span><br><span class="line">    &lt;c:when test =“EL表达式”&gt; </span><br><span class="line">        满足条件执行 </span><br><span class="line">    &lt;/c:when&gt; </span><br><span class="line">    …</span><br><span class="line">    &lt;c:otherwise&gt; </span><br><span class="line">        不满足上述when条件时执行 </span><br><span class="line">    &lt;/c:otherwise&gt; </span><br><span class="line">&lt;/c:choose &gt;</span><br></pre></td></tr></table></figure>

<p><strong>循环标签</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach <span class="keyword">var</span>=“循环变量” items=“集合”&gt; </span><br><span class="line">    … </span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>

<h2 id="常用函数标签"><a href="#常用函数标签" class="headerlink" title="常用函数标签"></a>常用函数标签</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fn&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% pageContext.setAttribute(<span class="string">&quot;str&quot;</span>, <span class="string">&quot;Hello Word!&quot;</span>); %&gt;</span><br><span class="line">$&#123;fn:contains(str, <span class="string">&quot;ord&quot;</span>)&#125;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">$&#123;fn:toUpperCase(str)&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常用格式化标签"><a href="#常用格式化标签" class="headerlink" title="常用格式化标签"></a>常用格式化标签</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;date&quot;</span>, date);</span><br><span class="line">%&gt;</span><br><span class="line">系统时间：$&#123;date&#125;</span><br><span class="line">&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">格式化后的系统时间：</span><br><span class="line">&lt;fmt:formatDate value=<span class="string">&quot;$&#123;date&#125;&quot;</span> pattern=<span class="string">&quot;yyyy-MM-dd  HH-mm-ss&quot;</span>&gt;&lt;/fmt:formatDate&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h2><ul>
<li>如果上面几个标签不能满足需求，程序员也可以自定义标签，步骤如下：</li>
<li>编写标签类继承SimpleTagSupport类重写doTag()方法或继承TagSupport类重写doStartTag()方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</span><br><span class="line">        JspWriter out = <span class="keyword">this</span>.getJspContext().getOut();</span><br><span class="line">        out.println(<span class="string">&quot;自定义标签哦！&quot;</span>);</span><br><span class="line">        out.print( getName() );</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>定义标签库文件（tld标签库文件）并配置标签说明文件到到WEB-INF下：<br><a href="https://imgtu.com/i/jNEE9S"><img src="https://s1.ax1x.com/2022/07/05/jNEE9S.png" alt="jNEE9S.png"></a></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span>	<span class="comment">&lt;!-- 版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">short-name</span>&gt;</span>my<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span>   <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uri</span>&gt;</span>http://de.com<span class="tag">&lt;/<span class="name">uri</span>&gt;</span>			<span class="comment">&lt;!-- uri --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Invoke &#x27;Generate&#x27; action to add tags or functions --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>helloTag<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     <span class="comment">&lt;!-- 标签名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>tag.HelloTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span>  <span class="comment">&lt;!-- 真实类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>empty<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span>&gt;</span>    <span class="comment">&lt;!-- 定义属性，必填 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">required</span>&gt;</span>true<span class="tag">&lt;/<span class="name">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用自定义标签</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;my&quot;</span> uri=<span class="string">&quot;http://de.com&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;my:helloTag name=<span class="string">&quot;zhangsan&quot;</span>&gt;&lt;/my:helloTag&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><ul>
<li>Filter本意为”过滤“的含义，是JavaWeb的三大组件之一，三大组件为：Servlet、Filter、Listener。</li>
<li>过滤器是向 Web 应用程序的请求和响应处理添加功能的 Web 服务组件。</li>
<li>过滤器相当于浏览器与Web资源之间的一道过滤网，在访问资源之前通过一系列的过滤器对请求进行修改、判断以及拦截等，也可以对响应进行修改、判断以及拦截等。</li>
</ul>
<p><a href="https://imgtu.com/i/jNE6jH"><img src="https://s1.ax1x.com/2022/07/05/jNE6jH.png" alt="jNE6jH.png"></a></p>
<h2 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h2><ul>
<li><p>自定义类实现Filter接口并重写doFilter方法。</p>
</li>
<li><p>在web.xml文件中配置过滤器。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LoginFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.lagou.LoginFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LoginFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>案例：</p>
<p>要求：访问主页home.jsp时，使用过滤器：判断是否登入，若登入可以访问，没登入转发到登入页面<br>思路：登入成功，session中会保存User对象，否则不保存。过滤器中判断session中有无User对象，有则放行，无则转发到登入页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//获取session</span></span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpSession session = httpServletRequest.getSession();</span><br><span class="line">        <span class="comment">//获取session中的user</span></span><br><span class="line">        User user = (User)session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">		<span class="comment">//判断是否有user对象</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//无则转发登入页面</span></span><br><span class="line">            RequestDispatcher requestDispatcher = servletRequest.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>);</span><br><span class="line">            requestDispatcher.forward(servletRequest, servletResponse);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//有则放行</span></span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在web.xml中配置过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LoginFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.de.filter.LoginFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LoginFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/home.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Filter接口"><a href="#Filter接口" class="headerlink" title="Filter接口"></a>Filter接口</h2><p>javax.servlet.Filter接口主要用于描述过滤器对象，可以对资源的请求和资源的响应操作进行筛选操作。</p>
<p>常用方法：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void init(FilterConfig filterConfig)</td>
<td>实现过滤器的初始化操作</td>
</tr>
<tr>
<td>void doFilter(ServletRequest request, ServletResponse  response, FilterChain chain)</td>
<td>执行过滤操作的功能</td>
</tr>
<tr>
<td>void destroy()</td>
<td>实现过滤器的销毁操作</td>
</tr>
</tbody></table>
<p>启动服务器时，init()执行一次，<br>关闭服务器时，destroy()执行一次，<br>访问n次过滤器配置的页面时，doFilter()执行n次。</p>
<h2 id="FilterConfig接口"><a href="#FilterConfig接口" class="headerlink" title="FilterConfig接口"></a>FilterConfig接口</h2><p>javax.servlet.FilterConfifig接口主要用于描述过滤器的配置信息。</p>
<p>常用方法：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>String getFilterName()</td>
<td>获取过滤器的名字</td>
</tr>
<tr>
<td>String getInitParameter(String name)</td>
<td>获取指定的初始化参数信息</td>
</tr>
<tr>
<td>Enumeration getInitParameterNames()</td>
<td>获取所有的初始化操作名称</td>
</tr>
<tr>
<td>ServletContext getServletContext()</td>
<td>获取ServletContext对象</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println( filterConfig.getFilterName() );</span><br><span class="line">    System.out.println( filterConfig.getInitParameter(<span class="string">&quot;name&quot;</span>) );</span><br><span class="line"></span><br><span class="line">    Enumeration&lt;String&gt; initParameterNames = filterConfig.getInitParameterNames();</span><br><span class="line">    <span class="keyword">while</span> (initParameterNames.hasMoreElements())&#123;</span><br><span class="line">        System.out.println( initParameterNames.nextElement() );</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println( filterConfig.getServletContext() );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多个过滤器的使用"><a href="#多个过滤器的使用" class="headerlink" title="多个过滤器的使用"></a>多个过滤器的使用</h2><p>如果有多个过滤器都满足过滤的条件，则容器依据配置文件中<strong>映射的先后顺序</strong>来调用各个过滤器。</p>
<p><a href="https://imgtu.com/i/jNZOhV"><img src="https://s1.ax1x.com/2022/07/05/jNZOhV.png" alt="jNZOhV.png"></a></p>
<h2 id="过滤器优点"><a href="#过滤器优点" class="headerlink" title="过滤器优点"></a>过滤器优点</h2><ul>
<li>实现代码的“可插拔性”，即增加或减少某个功能模块，不会影响程序的正常执行。</li>
<li>可以将多个相同处理逻辑的模块集中写在过滤器里面，可实现重复利用、也方便代码的维护。</li>
</ul>
<h1 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h1><ul>
<li>Servlet规范中定义的一种特殊的组件，用来监听Servlet容器产生的事件并进行相应的处理。</li>
<li>容器产生的事件分类如下：<br>生命周期相关的事件。<br>属性状态相关的事件。<br>存值状态相关的事件。</li>
<li>底层原理是采用接口回调的方式实现。</li>
</ul>
<p><strong>基本分类：</strong></p>
<table>
<thead>
<tr>
<th>监听器类型</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>javax.servlet.ServletRequestListener</td>
<td>监听request作用域的创建和销毁</td>
</tr>
<tr>
<td>javax.servlet.ServletRequestAttributeListener</td>
<td>监听request作用域的属性状态变化</td>
</tr>
<tr>
<td>javax.servlet.http.HttpSessionListener</td>
<td>监听session作用域的创建和销毁</td>
</tr>
<tr>
<td>javax.servlet.http.HttpSessionAttributeListener</td>
<td>监听session作用域的属性状态变化</td>
</tr>
<tr>
<td>javax.servlet.ServletContextListener</td>
<td>监听application作用域的创建和销毁</td>
</tr>
<tr>
<td>javax.servlet.ServletContextAttributeListener</td>
<td>监听application作用域的属性状态变化</td>
</tr>
<tr>
<td>javax.servlet.http.HttpSessionBindingListener</td>
<td>监听对象与session的绑定和解除</td>
</tr>
<tr>
<td>javax.servlet.http.HttpSessionActivationListener</td>
<td>监听session数值的钝化和活化</td>
</tr>
</tbody></table>
<p>自定义类实现上面接口，在web.xml文件中配置监听器。</p>
<h2 id="监听器详解"><a href="#监听器详解" class="headerlink" title="监听器详解"></a>监听器详解</h2><p><strong>(1)ServletRequestListener监听器</strong></p>
<ul>
<li>在ServletRequest创建和关闭时都会通知ServletRequestListener监听器。</li>
<li>常用方法如下：</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void requestInitialized(ServletRequestEvent sre)</td>
<td>实现ServletRequest对象的初始化</td>
</tr>
<tr>
<td>void requestDestroyed(ServletRequestEvent sre)</td>
<td>实现ServletRequest对象的销毁</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestLestener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建了一个request&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁了一个request&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在web.xml文件中配置监听器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>listener.RequestLestener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>(2)ServletRequestAttributeListener监听器</strong></p>
<ul>
<li>向ServletRequest添加、删除或者替换一个属性的时候，将会通知ServletRequestAttributeListener监听器。</li>
<li>常用方法如下：</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void attributeAdded(ServletRequestAttributeEvent srae)</td>
<td>增加属性时触发</td>
</tr>
<tr>
<td>void attributeReplaced(ServletRequestAttributeEvent srae)</td>
<td>修改属性时触发</td>
</tr>
<tr>
<td>void attributeRemoved(ServletRequestAttributeEvent srae)</td>
<td>删除属性时触发</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestAttributeListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestAttributeListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletRequestAttributeEvent servletRequestAttributeEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加了属性&quot;</span> + servletRequestAttributeEvent.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletRequestAttributeEvent servletRequestAttributeEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了属性&quot;</span> + servletRequestAttributeEvent.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletRequestAttributeEvent servletRequestAttributeEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了属性&quot;</span> + servletRequestAttributeEvent.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>listener.RequestAttributeListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>(3)HttpSessionListener监听器</strong>     </p>
<ul>
<li>当一个HttpSession刚被创建或者失效（invalidate）的时候，将会通知HttpSessionListener监听器。</li>
<li>常用方法如下：</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void  sessionCreated(HttpSessionEvent se)</td>
<td>当一个HttpSession对象被创建时会调用这个方法</td>
</tr>
<tr>
<td>void sessionDestroyed(HttpSessionEvent se)</td>
<td>当一个HttpSession超时或者调用HttpSession的 invalidate()方法让它销毁时，将会调用这个方法</td>
</tr>
</tbody></table>
<p><strong>(4)HttpSessionAttributeListener监听器</strong></p>
<ul>
<li>HttpSession中添加、删除或者替换一个属性的时候，将会通知HttpSessionAttributeListener监听器。</li>
<li>常用方法如下：</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void attributeAdded(HttpSessionBindingEvent se)</td>
<td>当往会话中加入一个属性的时候会调用这个方法</td>
</tr>
<tr>
<td>void  attributeRemoved(HttpSessionBindingEvent se)</td>
<td>当从会话中删除一个属性的时候会调用这个方法</td>
</tr>
<tr>
<td>void  attributeReplaced(HttpSessionBindingEvent  se)</td>
<td>当改变会话中的属性的时候会调用这个方法</td>
</tr>
</tbody></table>
<p><strong>(5)ServletContextListener监听器</strong>     </p>
<ul>
<li>在ServletContext创建和关闭时都会通知ServletContextListener监听器。</li>
<li>常用方法如下：</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void  contextInitialized(ServletContextEvent sce)</td>
<td>当ServletContext创建的时候，将会调用这个方法</td>
</tr>
<tr>
<td>void  contextDestroyed(ServletContextEvent sce)</td>
<td>当ServletContext销毁的时候（例如关闭应用服务器或者重新加载应用），将会调用这个方法</td>
</tr>
</tbody></table>
<p><strong>(6)ServletContextAttributeListener监听器</strong>     </p>
<ul>
<li>向ServletContext添加、删除或者替换一个属性的时候，将会通知ServletContextAttributesListener监听器</li>
<li>常用方法如下：</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void attributeAdded(ServletContextAttributeEvent scae)</td>
<td>往ServletContext中加入一个属性的时  候触发</td>
</tr>
<tr>
<td>void  attributeRemoved(ServletContextAttributeEvent scae)</td>
<td>从ServletContext中删除一个属性的时  候触发</td>
</tr>
<tr>
<td>void attributeReplaced(ServletContextAttributeEvent scae)</td>
<td>改变ServletContext中属性的时候触发</td>
</tr>
</tbody></table>
<p><strong>(7)HttpSessionBindingListener监听器</strong>     </p>
<ul>
<li>HttpSession中绑定和解除绑定时，将会通知HttpSessionListener监听器。</li>
<li>常用方法如下：</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void valueBound(HttpSessionBindingEvent event)</td>
<td>有对象绑定时调用该方法</td>
</tr>
<tr>
<td>void valueUnbound(HttpSessionBindingEvent event)</td>
<td>有对象解除绑定时调用该方法</td>
</tr>
</tbody></table>
<p>bean.Person类实现接口，当session绑定和解绑该类时，会被监听到，不需要配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">HttpSessionBindingListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//有参、无参构造方法。。。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//公有get()和set()方法。。。</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueBound</span><span class="params">(HttpSessionBindingEvent httpSessionBindingEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;session绑定了对象&quot;</span> + httpSessionBindingEvent.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueUnbound</span><span class="params">(HttpSessionBindingEvent httpSessionBindingEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;session解绑了对象&quot;</span> + httpSessionBindingEvent.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">	<span class="comment">//session绑定person</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;person&quot;</span>, person);  </span><br><span class="line">	<span class="comment">//session解绑person</span></span><br><span class="line">    session.removeAttribute(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>



<p><strong>(8)HttpSessionActivationListener监听器</strong>     </p>
<ul>
<li>当有session数值的钝化和活化操作时，将会通知HttpSessionActivationListener监听器。<br>钝化：内存中的session数据，保存到硬盘中<br>活化：硬盘中的数据，保存到内存session中</li>
<li>常用方法如下：</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>void sessionWillPassivate(HttpSessionEvent se)</td>
<td>有钝化操作时调用该方法</td>
</tr>
<tr>
<td>void sessionDidActivate(HttpSessionEvent se)</td>
<td>有活化操作时调用该方法</td>
</tr>
</tbody></table>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>要求：利用监听器，显示用户在线人数</p>
<p>思路：<br>一个用户，相当于一个浏览器，相当于一个session。<br>所以有session创建时，在线人数加一，有session销毁时，在线人数减一。需要监听session。<br>在线人数数据保存在servletContext中，需要监听servletContext。</p>
<p>监听器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineUser</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span>, <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servletContext创建了&quot;</span>);</span><br><span class="line">        servletContext = servletContextEvent.getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servletContext销毁了&quot;</span>);</span><br><span class="line">        servletContext = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一个session创建了&quot;</span>);</span><br><span class="line">        Object count = servletContext.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="keyword">null</span>)&#123;</span><br><span class="line">            servletContext.setAttribute(<span class="string">&quot;count&quot;</span> , <span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Integer integer = (Integer) count;</span><br><span class="line">            integer++;</span><br><span class="line">            servletContext.setAttribute(<span class="string">&quot;count&quot;</span>, integer);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;在线人数&quot;</span> + servletContext.getAttribute(<span class="string">&quot;count&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;一个session销毁了&quot;</span> );</span><br><span class="line">        Object count = servletContext.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        Integer integer = (Integer)count;</span><br><span class="line">        integer--;</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;count&quot;</span>, integer);</span><br><span class="line">        System.out.println(<span class="string">&quot;在线人数&quot;</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 监听器配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>listener.OnlineUser<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- session失效时间设置为1分钟 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>前端界面：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;在线人数$&#123;applicationScope.count&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>vue</title>
    <url>/2022/07/26/vue/</url>
    <content><![CDATA[<p>记录了vue的使用方法，基本语法，利用vueCli脚手架管理项目</p>
<span id="more"></span>

<p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计 为可以自底向上逐层应用.</p>
<p>Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一 方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
<p>自底向上逐层应用：作为渐进式框架要实现的目标就是方便项目增量开发(即插即用)。</p>
<p><strong>优点</strong></p>
<ul>
<li>声明式渲染: 前后端分离是未来趋势</li>
<li>渐进式框架: 适用于各种业务需求</li>
<li>简单易学: 国人开发,中文文档,不存在语言障碍,易于理解和学习</li>
</ul>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><ul>
<li>1，在html页面使用script引入vue.js的库即可使用。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//远程CDN </span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&quot;</span>&gt;&lt;/script&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">//本地</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>2，Vue-CLI脚手架:使用vue.js官方提供的CLI脚本架很方便去创建vue.js工程雏形</li>
</ul>
<h2 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h2><p>1、定义html，引入vue.js<br>2、定义id=app的div，此区域作为vue的接管区域<br>3、定义Vue实例，接管id=app的区域。<br>4、定义model（数据对象）<br>5、在app中展示数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ....省略</span><br><span class="line">    <span class="comment">&lt;!-- 1、定义html，引入vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. 定义id=app的div，此区域作为vue的接管区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 5.在app中展示数据 --&gt;</span></span><br><span class="line">        &#123;&#123;name&#125;&#125;   <span class="comment">&lt;!-- 插值表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//3. 创建vue实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//定义 Vue实例挂载的元素节点,表示vue接管该div</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//4.定义model模型数据对象</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:<span class="string">&quot;zhangfei&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>两对花括号: 插值表达式</strong><br>通常用来获取Vue实例中定义的数据(data)<br>属性节点中 不能够使用插值表达式</p>
</li>
<li><p><strong>el: 挂载点</strong><br>定义 Vue实例挂载的元素节点,表示vue接管该区域</p>
</li>
<li><p><strong>data: 数据对象</strong></p>
<p>Vue中用到的数据定义在data中 </p>
<p>data中可以写复杂类型</p>
<p>渲染复杂类型数据的时候,遵守js语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;雷霆八嘎&quot;</span>,</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//对象类型数据 </span></span><br><span class="line">    <span class="attr">school</span>:&#123; <span class="attr">name</span>:<span class="string">&quot;拉钩教育&quot;</span>, <span class="attr">mobile</span>:<span class="string">&quot;1001001&quot;</span> &#125;,</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//数组类型 </span></span><br><span class="line">    <span class="attr">names</span>:[<span class="string">&quot;小斌&quot;</span>,<span class="string">&quot;张百万&quot;</span>,<span class="string">&quot;刘能&quot;</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h2><p>作用: 获取data数据, 设置标签的内容.</p>
<p>注意: 默认写法会替换全部内容,使用插值表达式可以替换指定内容.</p>
<h2 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h2><p>作用: 设置元素的 innerHTML (可以向元素中写入新的标签)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">msg</span>:<span class="string">&quot;&lt;h1&gt;你好呀！&lt;/h1&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-on-指令"><a href="#v-on-指令" class="headerlink" title="v-on 指令"></a>v-on 指令</h2><p>作用: 为元素绑定事件, 比如: v-on:事件=”方法”,可以简写为 @事件=”方法”</p>
<p>绑定的方法定义在 Vue实例的, methods属性中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;test1&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test1&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test2(123)&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">test1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;test1&quot;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">test2</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(a)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>事件修饰符</strong></p>
<p>对事件触发的方式进行限制</p>
<p>@事件.stop：阻止事件冒泡<br>@keyup.enter：键盘弹起为回车键</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;test2(&#x27;外部&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;test2(&#x27;内部&#x27;)&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;test1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="案例：计数器"><a href="#案例：计数器" class="headerlink" title="案例：计数器"></a>案例：计数器</h2><p>要求：<br>按＋按钮，数值加一，到十最大<br>按 - 按钮，数值减一，到零最小</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">num</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">add</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(<span class="built_in">this</span>.num&lt;<span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.num++</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">sub</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(<span class="built_in">this</span>.num&gt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.num--</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>作用: v-show指令, 根据真假值,切换元素的显示状态</p>
<h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p>作用: 根据表达值的真假,切换元素的显示和隐藏( 操纵dom 元素 )</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeFlag&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 存在dom，只是style=&quot;display: none;&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>v-show测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 直接不存在dom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>v-if测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">flag</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">changeFlag</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag  <span class="comment">//取反操作</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>v-show</strong> <strong>指令总结</strong></p>
<p>原理是修改元素的display,实现显示或者隐藏<br>指令后面的内容,最终会解析为 布尔值<br>值为true 显示, 为false 则隐藏<br>数据改变之后,显示的状态会同步更新</p>
<p><strong>v-if 指令总结</strong></p>
<p>v-if 指令的作用: 根据表达式的真假切换元素的显示状态<br>本质是通过操作dom元素,来切换显示状态<br>表达式为true 元素存在与dom树,为false从dom树中移除<br>频繁切换使用 v-show ,反之使用v-if</p>
<h2 id="v-bind-指令"><a href="#v-bind-指令" class="headerlink" title="v-bind 指令"></a>v-bind 指令</h2><p>作用:  为元素绑定属性 （比如:src,title,class）</p>
<p>语法格式: <code>v-bind:属性名=&quot;表达式&quot;</code>，可简写为<code>:属性名=&quot;表达式&quot;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgSrc&quot;</span> <span class="attr">:alt</span>=<span class="string">&quot;imgAlt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123; fontSize:mySize+&#x27;px&#x27; &#125;&quot;</span>&gt;</span>你好呀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">imgSrc</span>:<span class="string">&quot;./image/1.png&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">imgAlt</span>:<span class="string">&quot;高清大图&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">mySize</span>:<span class="number">300</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-for-指令"><a href="#v-for-指令" class="headerlink" title="v-for 指令"></a>v-for 指令</h2><p>作用: 根据数据生成列表结构</p>
<p>语法是: <code>v-for=&quot;(item,index) in 数据&quot;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in arr&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;index+1&#125;&#125; === &#123;&#123;item&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">arr</span>:[<span class="string">&quot;上海&quot;</span>,<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;天津&quot;</span>,<span class="string">&quot;南昌&quot;</span>]</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>数组经常和 v-for结合使用,数组有两个常用方法:<br>push() 向数组末尾添加一个或多个元素<br>shift() 把数组中的第一个元素删除<br>splice()删除数组的指定元素</p>
<p>数组的长度变化,会同步更新到页面上,是响应式的</p>
<h2 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h2><p>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式.</p>
<p>MVVM模式将页面,分层了 M 、V、和VM ,解释为：</p>
<ul>
<li>Model: 负责数据存储，即data:{}</li>
<li>View: 负责页面展示，即id=“app”的div</li>
<li>View Model: 负责业务逻辑处理（比如Ajax请求等），对数据进行加工后交给视图展示，<br>即Vue的实例，var VM = new Vue()</li>
</ul>
<p><a href="https://imgtu.com/i/jxIPkd"><img src="https://s1.ax1x.com/2022/07/26/jxIPkd.png" alt="jxIPkd.png"></a></p>
<p>首先，我们将上图中的DOM Listeners和Data Bindings看作两个工具，它们是实现双向绑定的关键。 </p>
<ul>
<li>从View侧看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据； </li>
<li>从Model侧看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。</li>
</ul>
<p>MVVM的思想,主要是为了让我们的开发更加的方便,因为MVVM提供了<strong>数据的双向绑定</strong></p>
<h2 id="v-mode-指令"><a href="#v-mode-指令" class="headerlink" title="v-mode 指令"></a>v-mode 指令</h2><p>作用: 获取和设置表单元素的值(实现双向数据绑定)</p>
<ul>
<li>单向绑定: 就是把Model绑定到View，当我们用JavaScript代码更新Model时，View就会自动更新。</li>
<li>双向绑定: 用户更新了View，Model的数据也自动被更新了，这种情况就是双向绑定。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单项绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;name1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name1&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 双向绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name1</span>:<span class="string">&quot;zhangfei&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">name2</span>:<span class="string">&quot;guanyu&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="案例：记事本"><a href="#案例：记事本" class="headerlink" title="案例：记事本"></a>案例：记事本</h2><p>要求：<br>展示事情，添加事情，删除事情</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;add&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按回车添加&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 展示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;index+1&#125;&#125;__&#123;&#123;item&#125;&#125; </span><br><span class="line">        <span class="comment">&lt;!-- 删除按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(index)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>共&#123;&#123;list.length&#125;&#125;条事情<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;delAll&quot;</span>&gt;</span>全部清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">list</span>:[<span class="string">&quot;写代码&quot;</span>, <span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">inputValue</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">add</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//添加</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.list.push(<span class="built_in">this</span>.inputValue)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.inputValue=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">del</span>:<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//删除</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.list.splice(index,<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">delAll</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.list=[]</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>Ajax回顾：Ajax 是指一种创建交互式网页应用的开发技术。Ajax = 异步 JavaScript 和 XML。</p>
<p>axios：在浏览器中可以帮助我们完成 ajax异步请求的发送. 其内部还是ajax,进行封装之后使用更加方便</p>
<p><strong>导入包</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 官网提供的 axios 在线地址 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 本地 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>GET请求</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.get</span><br><span class="line">(地址?key=value&amp;key2=value2)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;<span class="comment">/* 成功回调函数 */</span>&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;<span class="comment">/* 失败回调函数 */</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.get</span><br><span class="line">(地址,&#123;<span class="attr">params</span>:&#123;<span class="attr">key</span>:value,<span class="attr">key2</span>:value2&#125;&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;<span class="comment">/* 成功回调函数 */</span>&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;<span class="comment">/* 失败回调函数 */</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>POST请求</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.post</span><br><span class="line">(地址,&#123;<span class="attr">key</span>:value,<span class="attr">key2</span>:value2&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;<span class="comment">/* 成功回调函数 */</span>&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;<span class="comment">/* 失败回调函数 */</span>&#125;)</span><br></pre></td></tr></table></figure>



<p><strong>根据接口文档, 访问测试接口,进行测试：</strong></p>
<p>1，接口: 随机获取一条笑话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请求地址:https://autumnfish.cn/api/joke </span><br><span class="line">请求方法:get </span><br><span class="line">请求参数:无 </span><br><span class="line">响应内容:随机笑话</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getJoke&quot;</span>&gt;</span>获取笑话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;joke&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">joke</span>:<span class="string">&quot;笑口常开&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">getJoke</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> that = <span class="built_in">this</span></span></span><br><span class="line"><span class="javascript">                axios.get(<span class="string">&quot;https://autumnfish.cn/api/joke&quot;</span>)</span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(resp)</span></span></span><br><span class="line"><span class="javascript">                    that.joke = resp.data</span></span><br><span class="line"><span class="javascript">                &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(error)</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，接口：查询输入城市的天气</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请求地址:http://wthrcdn.etouch.cn/weather_mini </span><br><span class="line">请求方法:get </span><br><span class="line">请求参数:city (要查询的城市名称) </span><br><span class="line">响应内容:天气信息</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;query&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 展示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in info&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;item.date&#125;&#125;,&#123;&#123;item.high&#125;&#125;,&#123;&#123;item.low&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">city</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">info</span>:[]</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">query</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                axios.get(<span class="string">&quot;http://wthrcdn.etouch.cn/weather_mini&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">city</span>:<span class="built_in">this</span>.city</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function">(<span class="params">resp</span>)=&gt;</span>&#123;  <span class="comment">//es6新语法，可以不用that</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//console.log(resp.data.data.forecast)</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.info = resp.data.data.forecast</span></span><br><span class="line"><span class="javascript">                &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(error)</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>案例总结</strong></p>
<p>axios回调函数中this指向已经改变,无法访问data中的数据<br>解决：将this进行保存,回调函数中直接使用保存的this即可<br>解决：使用es6语法，（）=&gt; {}，可以不用担心该问题了</p>
<h2 id="页面闪烁问题"><a href="#页面闪烁问题" class="headerlink" title="页面闪烁问题"></a>页面闪烁问题</h2><p>问题：我们发现访问天气预报案例页面时, 使用插值表达式的地方出现了闪烁问题,如何解决呢?</p>
<p>原因：当网络较慢，网页还在加载 Vue.js ，而导致 Vue 来不及渲染，这时页面就会显示出 Vue 源代码。</p>
<p>解决：</p>
<ol>
<li>在id=app的div中添加 v-cloak</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置样式</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> </span></span><br><span class="line"><span class="css">    <span class="comment">/* 通过属性选择器,设置 添加了v-cloak */</span> </span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span>&#123; </span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: none; </span></span><br><span class="line"><span class="css">    &#125; </span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed 计算属性"></a>computed 计算属性</h2><p>作用: 减少运算次数, 缓存运算结果. 运用于重复相同的计算.</p>
<p>computed与method区别：</p>
<ul>
<li>定义函数也可以实现与 计算属性相同的效果,都可以简化运算。</li>
<li>不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 虽然conputed计算属性调用三次，但是结果都一样，所以sum只执行了一次 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 假如是method方法，调用三次，不管结果是不是一样，都会执行三次 --&gt;</span></span><br><span class="line">    &#123;&#123;sum&#125;&#125; <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    &#123;&#123;sum&#125;&#125; <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    &#123;&#123;sum&#125;&#125; <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">a</span>:<span class="number">10</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">b</span>:<span class="number">20</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">sum</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;执行了sum计算属性&quot;</span>)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="built_in">this</span>.b</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>过滤器是对即将显示的数据做进一步的筛选处理，然后进行显示</p>
<p>值得注意的是过滤器并没有改变原来的数据，只是在原数据的基础上产生新的数据。</p>
<p>数据加工车间,对值进行筛选加工.</p>
<p><strong>使用位置</strong></p>
<ol>
<li><p>双括号插值内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; msg | filterA &#125;&#125; </span><br><span class="line">msg是需要处理的数据, </span><br><span class="line">filterA是过滤器, </span><br><span class="line">| 这个竖线是管道,通过这个管道 将数据传输给过滤器进行过滤 加工操作</span><br></pre></td></tr></table></figure></li>
<li><p>v-bind绑定的值的地方。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 v-bind:id=&quot; msg | filterA&quot;&gt; &#123;&#123; msg &#125;&#125; &lt;/h1&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>过滤器</strong></p>
<p>1，局部过滤器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;price | addIcon&#125;&#125;</span><br><span class="line">       </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">price</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 局部过滤器</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">addIcon</span>(<span class="params">value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//给值前面加个￥符号</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="string">&quot;￥&quot;</span>+value</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，全局过滤器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123;name | changeName&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 在创建Vue实例之前 创建全局过滤器</span></span><br><span class="line">    Vue.filter(<span class="string">&quot;changeName&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    	<span class="comment">//首字母大写</span></span><br><span class="line">        <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="watch-侦听器"><a href="#watch-侦听器" class="headerlink" title="watch 侦听器"></a>watch 侦听器</h2><p>Vue.js 提供了一个方法 watch，它用于观察Vue实例上的数据变动。</p>
<p>作用: 当你有一些数据需要随着其它数据变动而变动时，可以使用侦听属性</p>
<p>案例：监听姓名变化,实时显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123;fullName&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">fullName</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//监听器，程序在运行的时候，实时监听</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//监听firstName，发生变化执行函数</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//参数说明：1、新值，2、旧值</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:<span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.lastName + newValue</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>:<span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fullName = newValue + <span class="built_in">this</span>.firstName</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul>
<li>组件（Component）是自定义封装的功能。在前端开发过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同样的功能。</li>
<li>我们将相同的功能进行抽取,封装为组件,这样，前端人员就可以在组件化开发时，只需要书写一次代码，随处引入即可使用。</li>
<li>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树</li>
</ul>
<p><strong>局部组件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标签形式引用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello-word</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-word</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 局部组件</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;hello-word&quot;</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>:<span class="string">&quot;HTML代码&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">msg</span>:<span class="string">&quot;局部组件&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>:&#123;&#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>全局组件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标签形式引用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello-word</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-word</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 全局组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;hello-word&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>:<span class="string">&quot;&lt;div&gt;&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;&lt;/div&gt;&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">msg</span>:<span class="string">&quot;全局组件&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;&#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<p>1.组件名以小写开头，采用短横线分割命名: 例如 <strong>hello-Word</strong> </p>
<p>2.组件中的data 必须是一个函数,注意与Vue实例中的data区分</p>
<p>3.在template模板中, 只能有一个根元素</p>
<p><strong>组件与模板(template)分离</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hello-word</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-word</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将模板写在HTML中, 给模板指定一个ID --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;tem1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;hello-word&quot;</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>:<span class="string">&quot;#tem1&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">msg</span>:<span class="string">&quot;组件与模板分离&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>:&#123;&#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>上面这种写法，浏览器会把 html 里的 template 标签过滤掉。所以 template 标签的内容是不会在页面中展示的。直到它被 JS 中的 Vue 调用。</li>
<li>在 html 中，template 标签一定要有一个 id，因为通过 id 是最直接被选中的。 data 和 methods等 参数，全部都要放到 Vue 实例里面写</li>
</ul>
<h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p>每个Vue实例在被<strong>创建</strong>之前都要经过一系列的初始化过程,这个过程就是vue的生命周期</p>
<p>生命周期到了某个阶段就会触发对应的钩子函数</p>
<table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>beforeCreate()</strong></td>
<td>在<strong>创建Vue实例之前</strong>,可以执行这个方法. 例如 加载动画操作</td>
</tr>
<tr>
<td><strong>created()</strong></td>
<td><strong>Vue实例创建完成</strong>,属性绑定好了,但是DOM还没有生成.</td>
</tr>
<tr>
<td><strong>beforeMount()</strong></td>
<td>模板已经在内存中编辑完成了，尚<strong>未被渲染到页面中</strong>.</td>
</tr>
<tr>
<td><strong>mounted()</strong></td>
<td>内存中的模板<strong>已经渲染到页面</strong>，用户已经可以看见内容.</td>
</tr>
<tr>
<td><strong>beforeUpdate()</strong></td>
<td><strong>数据更新的前</strong>一刻 ,  组件在发生更新之前,调用的函数</td>
</tr>
<tr>
<td><strong>updated()</strong></td>
<td>updated执行时，内存中的<strong>数据已更新</strong>，并且页面已经被渲染</td>
</tr>
<tr>
<td><strong>beforeDestroy</strong> ()</td>
<td>钩子函数在<strong>实例销毁之前</strong>调用</td>
</tr>
<tr>
<td><strong>destroyed</strong> ()</td>
<td>钩子函数在Vue  <strong>实例销毁后</strong>调用</td>
</tr>
</tbody></table>
<h2 id="Router-路由"><a href="#Router-路由" class="headerlink" title="Router 路由"></a>Router 路由</h2><ul>
<li>在Web开发中，路由是指根据URL分配到对应的处理程序。 路由允许我们通过不同的 URL 访问不同的内容。</li>
<li>通过 Vue.js 可以实现多视图单页面web应用（single page web application，SPA）</li>
</ul>
<p>单页应用：</p>
<ul>
<li>不存在页面跳转，它本身只有一个HTML页面。我们传统意义上的页面跳转在单页应用的概念下转变为了body 内某些元素的替换和更新，举个例子:</li>
<li>整个body的内容从登录组件变成了欢迎页组件, 从视觉上感受页面已经进行了跳转。但实际上，页面只是随着用户操作，实现了局部内容更新,依然还是在index.html 页面中。</li>
</ul>
<p>单页面应用的好处: </p>
<ol>
<li><p>用户操作体验好，用户不用刷新页面，整个交互过程都是通过Ajax来操作。</p>
</li>
<li><p>适合前后端分离开发，服务端提供http接口，前端请求http接口获取数据，使用JS进行客户端渲染。</p>
</li>
</ol>
<p><strong>路由相关概念</strong></p>
<ul>
<li>router :<br>是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用（SPA）变得易<br>如反掌 ,router 就相当于一个管理者，它来管理路由。</li>
<li>route:<br> router相当于路由器, route就相当于一条路由.比如: Home按钮  =&gt; home内容， 这是一条route,<br> news按钮 =&gt; news内容， 这是另一条路由。</li>
<li>routes :<br>是一组route路由，把上面的每一条路由组合起来，形成一个数组。[{home 按钮 =&gt;home内容 }， {<br>about按钮 =&gt; about 内容}]</li>
<li>router-link组件: router-link 是一个组件，是对标签的一个封装. 该组件用于设置一个导航链接，切换不同 HTML内容。 to 属性为目标地址， 即要显示的内容</li>
<li>router-view 组件:<br>路由导航到指定组件后,进行渲染显示页面.</li>
</ul>
<p><strong>路由的使用</strong></p>
<p>1）引入相关库</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//方式1: 本地导入 </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">//方式2: CDN </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>定义使用路由步骤</li>
</ol>
<ol>
<li>定义路由所需的组件</li>
<li>定义路由 每个路由都由两部分 path (路径) 和component (组件) </li>
<li>创建router路由器实例 ,管理路由</li>
<li>创建Vue实例, 注入路由对象, 使用$mount() 指定挂载点</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//1,准备组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> home = &#123; <span class="attr">template</span> : <span class="string">&quot;&lt;h1&gt;home主页面&lt;/h1&gt;&quot;</span> &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> news = &#123; <span class="attr">template</span> : <span class="string">&quot;&lt;h3&gt;news新闻页面&lt;/h3&gt;&quot;</span> &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> play = &#123; <span class="attr">template</span> : <span class="string">&quot;&lt;h3&gt;play娱乐页面&lt;/h3&gt;&quot;</span> &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2,定义routes对象，里面是一个个route对象</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//route对象有两部分，path和component，</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> routes = [</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">path</span>:<span class="string">&quot;/&quot;</span>, <span class="attr">component</span>:home&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">path</span>:<span class="string">&quot;/news&quot;</span>, <span class="attr">component</span>:news&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">path</span>:<span class="string">&quot;/play&quot;</span>, <span class="attr">component</span>:play&#125;</span></span><br><span class="line"><span class="javascript">    ]</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//3,创建router路由管理器，管理toutes对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">routes</span>:routes</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//4,创建vue实例，使用mount挂载函数，注入router</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        router,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;&#125;</span></span><br><span class="line"><span class="javascript">    &#125;).$mount(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）html区域展示效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用 router-link 组件来导航,to属性指定链接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/news&quot;</span>&gt;</span>新闻页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/play&quot;</span>&gt;</span>娱乐页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由的出口, 路由匹配到的组件(页面)将渲染在这里 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>路由总结：</p>
<ol>
<li>router是Vue中的路由管理器对象,用来管理路由. </li>
<li>route是路由对象,一个路由就对应了一条访问路径,一组路由用routes表示</li>
<li>每个路由对象都有两部分 path(路径)和component (组件) </li>
<li>router-link 是对a标签的封装,通过to属性指定连接</li>
<li>router-view 路由访问到指定组件后,进行页面展示</li>
</ol>
<h1 id="Vue-cli"><a href="#Vue-cli" class="headerlink" title="Vue-cli"></a>Vue-cli</h1><p>Vue cli是基于Vue的应用开发提供的一个标准的脚手架工具.为应用搭建基础的框架结构,提供插件、开发服务、Preset、构建打包功能</p>
<p>Vue cli 背后集成了现代化开发的诸多功能,通过简单的命令就可以完成 “零配置”的项目环境搭建</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>1）下载对应你系统的Node.js版本:<br><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>
<p>2） 测试: 在命令提示符下输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v //会显示当前node的版本</span><br></pre></td></tr></table></figure>

<h3 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h3><p>npm全称Node Package Manager，他是node包管理和分发的工具，使用NPM可以对应用的依赖进行管理，NPM 的功能和服务端项目构建工具maven的依赖管理功能差不多，我们通过npm 可以很方便地下载js库，打包js文件。</p>
<p>node.js已经集成了npm工具，自动安装好了。</p>
<p>在命令提示符下输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v //可查看当前npm版本</span><br></pre></td></tr></table></figure>



<p><strong>查看包管理路径</strong></p>
<p>包路径就是npm从远程下载的js包所存放的路径。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config ls  </span><br></pre></td></tr></table></figure>

<p> NPM默认的管理包路径在c盘下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\17536\AppData\Roaming\npm</span><br></pre></td></tr></table></figure>



<p><strong>设置包管理路径</strong></p>
<p>1）选择一个路径,专门存放这些依赖包.我选择创建一个目录: <code>.........\nodejs_package</code></p>
<p>2）在该路径下再创建 npm_modules 文件夹 和 npm_cache 文件夹 </p>
<p>3）执行以下的命令,设置为自定义的包管理路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;.......\nodejs_package\npm_modules&quot; </span><br><span class="line">npm config set cache &quot;........\nodejs_package\npm_cache&quot;</span><br></pre></td></tr></table></figure>

<p>4）此时再使用 npm config ls 查询NPM管理包路径发现路径已更改</p>
<p><strong>NPM环境变量配置</strong></p>
<ol>
<li>查看npm的全局路径是什么，即刚刚创建的<code>.....\nodejs_package\npm_modules</code>路径</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config get prefix</span><br></pre></td></tr></table></figure>

<p>2)配置PATH环境变量</p>
<ul>
<li>添加新的系统变量: key=NODE_HOME , value= …….\nodejs_package</li>
<li>path中添加 %NODE_HOME%\npm_modules</li>
</ul>
<p><strong>安装cnpm</strong></p>
<p>npm默认会去国外的镜像去下载js包，网不好很慢，在开发中通常我们使用国内镜像，这里我们使用淘宝镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//安装 </span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org </span><br><span class="line"></span><br><span class="line">//查看cnpm的版本 </span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>

<h3 id="安装Vue-cli"><a href="#安装Vue-cli" class="headerlink" title="安装Vue-cli"></a>安装Vue-cli</h3><p>目前主流版本是 2.x 和 3.x 版本,安装3.x 以上的版本是因为该版本既可以创建2.x项目与3.x 项目</p>
<p>安装命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue     //查看vue命令</span><br><span class="line"></span><br><span class="line">vue -V  //查看版本</span><br></pre></td></tr></table></figure>

<h2 id="快速构建Vue项目"><a href="#快速构建Vue项目" class="headerlink" title="快速构建Vue项目"></a>快速构建Vue项目</h2><p><strong>构建</strong></p>
<p>1）在存放Vue项目的路径下，进入cmd</p>
<p>2）执行下面的命令，创建项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//文件名 不支持驼峰（含大写字母）使用短横线方式 </span><br><span class="line">vue create my-project</span><br></pre></td></tr></table></figure>

<p>3）默认还是自定义安装，自定义</p>
<p><a href="https://imgtu.com/i/jzIjY9"><img src="https://s1.ax1x.com/2022/07/26/jzIjY9.png" alt="jzIjY9.png"></a></p>
<p>4）选择我们要安装的组件，使用空格键选择，选好后回车确认。（Babel、Router）</p>
<p><a href="https://imgtu.com/i/jzoVfA"><img src="https://s1.ax1x.com/2022/07/26/jzoVfA.png" alt="jzoVfA.png"></a></p>
<p>5）提示选择什么模式的路由,我们输入 n (表示选择hash模式) </p>
<p>6）选择项目配置文件单独存放<br><a href="https://imgtu.com/i/jzoWnK"><img src="https://s1.ax1x.com/2022/07/26/jzoWnK.png" alt="jzoWnK.png"></a></p>
<p>7）是否保存模板，保存后下次创建项目可以使用该模板。</p>
<p>8）安装完成</p>
<p>9）进入项目目录，<code>cd my-project</code></p>
<p>10）启动项目，<code>npm run serve</code></p>
<p>11）访问项目: <a href="http://localhost:8080/">http://localhost:8080/</a></p>
<p><strong>项目结构介绍</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|--- my-project 项目名称 </span><br><span class="line">    |--- node_modules 存放依赖包的目录 </span><br><span class="line">    |--- public 静态资源管理目录 </span><br><span class="line">    |--- src 组件源码目录(我们写的代码) </span><br><span class="line">        |--- assets 存放静态图片资源(CSS也可以放在这里) </span><br><span class="line">        |--- components 存放各种组件(一个页面可以看做一个组件)，各个组件联系在一起组成一个 完整的项目</span><br><span class="line">        |--- router 存放了项目路由文件 </span><br><span class="line">        |--- views 放置的为公共组件(主要还是各个主要页面) </span><br><span class="line">        |--- App.vue app.vue可以当做是网站首页，是一个vue项目的主组件，页面入口文件 </span><br><span class="line">        |--- main.js 打包运行的入口文件，引入了vue模块和app.vue组件以及路由route </span><br><span class="line">    |--- babel.config.js babel配置文件, 对源代码进行转码(把es6=&gt;es5) </span><br><span class="line">    |--- package.json 项目及工具的依赖配置文件 </span><br><span class="line">    |--- paxkage-lock.json 依赖配置文件 </span><br><span class="line">    |--- README.md 项目说明</span><br></pre></td></tr></table></figure>



<p><strong>自定义配置</strong></p>
<p>package.json 介绍：</p>
<p>每个项目的根目录下面，一般都有一个 package.json 文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。 npm install 命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。</p>
<p>注意：</p>
<p>可以在package.json中自定义配置，但是不建议<br>我们将Vue脚手架相关的配置单独定义到 自己创建的vue.config.js 配置文件中</p>
<p>vue.config.js中写内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">module.exports = &#123; </span><br><span class="line">    devServer:&#123; </span><br><span class="line">        open:<span class="literal">true</span>,	 <span class="comment">//打包完成自动打开浏览器	</span></span><br><span class="line">        port:<span class="number">8081</span>    <span class="comment">//端口</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><p>组件化是Vue的精髓，Vue项目就是由一个一个的组件构成的。 我们主要的工作就是开发的组件.</p>
<p>我们用 vue-cli 脚手架搭建的项目，里面有很多，如 index.vue 或者 App.vue 这一类的文件.</p>
<p>每一个*.vue 文件都是一个组件 ，是一个自定义的文件类型, 比如 App.vue 就是整个项目的<strong>根组件</strong>。</p>
<p>常见的组件：</p>
<ul>
<li>页面级别的组件<br>页面级别的组件，通常是 views 目录下的.vue组件，是组成整个项目的各个主要页面</li>
<li>业务上可复用的基础组件<br>这一类组件通常是在业务中被各个页面复用的组件，这一类组件通常都写到 components 目<br>录下，然后通过import在各个页面中使用</li>
</ul>
<p>组件的组成部分，即.vue文件：<br>template : 组件的HTML部分<br>script: 组件的JS脚本 (使用ES6语法编写)<br>style: 组件的CSS样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Header&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 加上scoped 表示样式就只在当前组件有效 --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="项目运行流程"><a href="#项目运行流程" class="headerlink" title="项目运行流程"></a>项目运行流程</h2><ol>
<li><p>项目运行 会加载入口文件 main.js</p>
</li>
<li><p>App.vue 是vue项目的主组件，是页面入口文件 ，所有页面都是在App.vue下进行切换的</p>
</li>
<li><p>找到路由文件,来看一下具体的路由配置</p>
</li>
<li><p>默认访问的是Home.vue 首页</p>
</li>
<li><p>HelloWorld.vue 组件页面</p>
</li>
</ol>
<h2 id="组件使用案例"><a href="#组件使用案例" class="headerlink" title="组件使用案例"></a>组件使用案例</h2><p>1，在components 目录下创建 Header.vue<br>编写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123;msg1&#125;&#125;&#123;&#123;msg2&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Header&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg1:&quot;头部分&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    props:[&quot;msg2&quot;]  //说明msg2需要传参来确定</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>2，修改About.vue，在About.vue中使用Header.vue组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;about&quot;&gt;</span><br><span class="line">    &lt;h1&gt;This is an about page&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;&lt;hr&gt;</span><br><span class="line">    &lt;!-- 3,标签形式使用组件 --&gt;</span><br><span class="line">    &lt;Header msg2=&quot;你好呀&quot;&gt;&lt;/Header&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//1,导入需要的组件</span><br><span class="line">import Header from &quot;@/components/Header.vue&quot;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;About&#x27;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    //2,再默认导出</span><br><span class="line">    Header:Header</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



<p><strong>路由方式使用组件</strong></p>
<p>1，编写一个组件，如Longin.vue</p>
<p>2，添加该组件路由，在router/index.js文件下添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1,导入Longin.vue</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;@/components/Login.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2,在const routes=[]数组下添加路由</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;login&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>:Login</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加子路由,使用 children属性 来表示子路由</span></span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">      	<span class="comment">//子路由跟路由定义差不多</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">	<span class="attr">redirect</span>:<span class="string">&quot;login&quot;</span>  <span class="comment">//重定向到login</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>3，使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1，直接访问url</span><br><span class="line">2，html中：&lt;router-link to=&quot;/login&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line">3，js代码中跳转：this.$router.push(&quot;/login&quot;)</span><br><span class="line">4，其他</span><br></pre></td></tr></table></figure>

<p>4，在<code>&lt;router-view&gt;&lt;/router-view&gt;</code>标签下展示访问的组件</p>
<h1 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h1><p>element-ui 是饿了么前端出品的基于 Vue.js的 后台组件库，方便程序员进行页面快速布局和构建<br>Element-UI官方站点：<br><a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1，当前项目下打开终端, 安装依赖包 ,执行下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>

<p>2，打开 main.js , 导入Element-UI 相关资源.<br>main.js是工程的入口文件，在此文件中加载了很多第三方组件，如：Element-UI、Base64、 VueRouter等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入组件库 </span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//导入组件相关样式 </span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//配置Vue插件 将El安装到Vue上 </span></span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure>

<p>3，从官网中复制组件相关代码，如Element 按钮样式，到vue文件中</p>
<p>4，启动项目 npm run serve, 查看页面</p>
<p>总结：</p>
<p>使用ElementUI时，主要是从官网中复制代码，粘贴过来，修改相关代码成我们需要的内容。</p>
<h2 id="用户登入界面制作"><a href="#用户登入界面制作" class="headerlink" title="用户登入界面制作"></a>用户登入界面制作</h2><p><strong>准备工作</strong></p>
<p>新建工程后，改造Vue-CLI工程，<br>1）components和views目录下的组件全删掉。<br>2）删除router文件下的路由文件 index.js的部分内容，不需要的路由删掉<br>3）删除App.vue中的部分内容，保留到id=app的div</p>
<p>安装axios：<br>1）使用npm下载axios包 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure>

<p>2）在main.js文件中导入axios 相关资源</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入axios </span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//Vue对象使用axios </span></span><br><span class="line">Vue.prototype.axios = axios;</span><br></pre></td></tr></table></figure>



<p><strong>用户登入界面制作</strong></p>
<p>1）从官网中复制一个模板，Dialog对话框组件</p>
<p>2） 在components 下创建Login.vue，并粘贴Dialog对话框组件内容</p>
<p>3）配置路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1,导入Longin.vue</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;@/components/Login.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2,在const routes=[]数组下添加一个路由</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;login&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>:Login</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）修改App.vue，在App.vue中展示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在id=app的div下添加标签 --&gt; </span><br><span class="line">&lt;!-- router-view 的作用是根据访问的路径,渲染路径匹配到的视图组件 --&gt; </span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>

<p>5）启动项目 npm run serve, 查看对话款</p>
<p>6）根据需求修改Login.vue中的对话款</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-dialog title=&quot;用户登入&quot; :show-close=false :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br><span class="line">        &lt;el-form :model=&quot;user&quot;&gt;</span><br><span class="line">          &lt;!-- 用户名 --&gt;</span><br><span class="line">          &lt;el-form-item label=&quot;用户名&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.userName&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">          &lt;!-- 密码 --&gt;</span><br><span class="line">          &lt;el-form-item label=&quot;密码&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.password&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-form&gt;</span><br><span class="line">        &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">            &lt;el-button type=&quot;primary&quot; @click=&quot;login&quot;&gt;登 入&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;/el-dialog&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        dialogFormVisible: true,</span><br><span class="line">        user: &#123;</span><br><span class="line">          userName:&quot;&quot;,</span><br><span class="line">          password:&quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        formLabelWidth: &#x27;100px&#x27;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      login:function()&#123;</span><br><span class="line">        var url = &quot;!@@#$$%%^%$%^&amp;*&amp;%^%/login&quot;</span><br><span class="line">        this.axios.get(url, &#123;</span><br><span class="line">          params:&#123;</span><br><span class="line">            userName:this.user.userName,</span><br><span class="line">            password:this.user.password</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).then((resp) =&gt; &#123;</span><br><span class="line">          console.log(resp.data)</span><br><span class="line">          this.$message(&quot;登入成功&quot;)</span><br><span class="line">          this.dialogFormVisible = false</span><br><span class="line">          //跳转到/index组件</span><br><span class="line">          this.$router.push(&quot;/index&quot;)</span><br><span class="line">        &#125;).catch((error) =&gt; &#123;</span><br><span class="line">          this.$message.error(error)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



































































































































































































































]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>前端框架</tag>
        <tag>vue</tag>
        <tag>vueCli</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm</title>
    <url>/2022/08/04/ssm/</url>
    <content><![CDATA[<p>针对与javaWeb的：表现层(Servlet)、业务层(Service)、持久层(Dao)，分别提供了框架：SpringMVC、Spring、Mybatis，简称ssm。</p>
<span id="more"></span>

<h1 id="框架介绍"><a href="#框架介绍" class="headerlink" title="框架介绍"></a>框架介绍</h1><p><strong>三层架构</strong></p>
<p>软件开发常用的架构是三层架构，之所以流行是因为有着清晰的任务划分。一般包括以下三层：</p>
<ul>
<li>持久层：主要完成与数据库相关的操作，即对数据库的增删改查。<br>因为数据库访问的对象一般称为Data Access Object（简称DAO），所以有人把持久层叫做DAO层。</li>
<li>业务层：主要根据功能需求完成业务逻辑的定义和实现。<br>因为它主要是为上层提供服务的，所以有人把业务层叫做Service层或Business层。</li>
<li>表现层：主要完成与最终软件使用用户的交互，需要有交互界面（UI）。<br>因此，有人把表现层称之为web层或View层。</li>
</ul>
<p>三层架构之间调用关系为：表现层调用业务层，业务层调用持久层。</p>
<p>各层之间必然要进行数据交互，我们一般使用java实体对象（javaBean）来传递数据。<br><a href="https://imgtu.com/i/veAZ5j"><img src="https://s1.ax1x.com/2022/08/04/veAZ5j.png" alt="veAZ5j.png"></a></p>
<p><strong>常见框架</strong></p>
<ul>
<li>持久层框架：专注于解决数据持久化的框架。<br>常用的有mybatis、hibernate、spring jdbc等等。</li>
<li>表现层框架：专注于解决与用户交互的框架。<br>常见的有struts2、spring mvc等等。</li>
<li>全栈框架: 能在各层都给出解决方案的框架。<br>比较著名的就是spring。</li>
</ul>
<p>我们选择的框架组合是：Spring + Spring MVC + mybatis（SSM） </p>
<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p><strong>原始jdbc开发的问题</strong></p>
<p>1，数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能<br>2，sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变java代码。<br>3，查询操作时，需要手动将结果集中的数据手动封装到实体中。</p>
<p>解决方案：</p>
<p>1，使用数据库连接池初始化连接资源<br>2，将sql语句抽取到xml配置文件中<br>3，使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射</p>
<p><strong>Mybatis介绍</strong></p>
<p>MyBatis是一个优秀的基于<strong>ORM</strong>的<strong>半自动轻量级</strong>持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。</p>
<p>半自动：sql代码不是自动生成<br>轻量级：消耗内存少</p>
<p>Github地址：<a href="https://github.com/mybatis/mybatis-3/">https://github.com/mybatis/mybatis-3/</a></p>
<p>MyBatis官网地址：<a href="http://www.mybatis.org/mybatis-3/">http://www.mybatis.org/mybatis-3/</a></p>
<h2 id="ORM思想"><a href="#ORM思想" class="headerlink" title="ORM思想"></a>ORM思想</h2><p>ORM（Object Relational Mapping）对象关系映射</p>
<ul>
<li>O（对象模型）：<br>实体对象，即我们在程序中根据数据库表结构建立的一个个实体javaBean</li>
<li>R（关系型数据库的数据结构）：<br>关系数据库领域的Relational（建立的数据库表）</li>
<li>M（映射）：<br>从R（数据库）到O（对象模型）的映射，可通过XML文件映射</li>
</ul>
<p>实现：</p>
<ul>
<li>让实体类和数据库表进行一一对应关系<br> 先让实体类和数据库表对应<br> 再让实体类属性和表里面字段对应</li>
<li>不需要直接操作数据库表，直接操作表对应的实体类对象<br>一个实体对应一张表<br>一个实例对象对应一条记录</li>
</ul>
<p>ORM作为是一种思想：</p>
<ul>
<li>帮助我们跟踪实体的变化,并将实体的变化翻译成sql脚本,执行到数据库中去,也就是将实体的变化映射到了表的变化。</li>
<li>mybatis采用ORM思想解决了实体和数据库映射的问题，对jdbc 进行了封装，屏蔽了jdbc api 底层访问细节，使我们不用与jdbc api 打交道，就可以完成对数据库的持久化操作</li>
</ul>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>案例需求：通过mybatis查询数据库user表的所有记录，封装到User对象中，打印到控制台上</p>
<p>步骤分析：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 创建数据库及user表 </span><br><span class="line"></span><br><span class="line">2. 创建maven工程，导入依赖（MySQL驱动、mybatis、junit） </span><br><span class="line"></span><br><span class="line">3. 编写User实体类 </span><br><span class="line"></span><br><span class="line">4. 编写UserMapper.xml映射配置文件（ORM思想） </span><br><span class="line"></span><br><span class="line">5. 编写SqlMapConfig.xml核心配置文件 数据库环境配置 映射关系配置的引入(引入映射配置文件的路径) </span><br><span class="line"></span><br><span class="line">6. 编写测试代码 </span><br><span class="line">// 1.加载核心配置文件 </span><br><span class="line">// 2.获取sqlSessionFactory工厂对象 </span><br><span class="line">// 3.获取sqlSession会话对象 </span><br><span class="line">// 4.执行sql </span><br><span class="line">// 5.打印结果 </span><br><span class="line">// 6.释放资源</span><br></pre></td></tr></table></figure>

<p>代码实现:</p>
<p>1，创建表（省略）</p>
<p>2，创建maven工程，pom.xml导入相关依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定编码和版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--单元测试坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3，编写javaBean实体类（省略）</p>
<p>4，编写UserMapper.xml映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  查询所有user  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.de.domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from User</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5，编写MyBatis核心文件，sqlMapConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--环境配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///ssm_test&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--加载映射文件配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6，编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 加载核心配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 获取SqlSessionFactory工厂对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line"><span class="comment">// 获取SqlSession会话对象</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行sql，“命名空间.id”定位到sql语句</span></span><br><span class="line">List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;UserMapper.findAll&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动提交事务，增删改需要</span></span><br><span class="line"><span class="comment">//sqlSession.commit();</span></span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">sqlSession.close()</span><br></pre></td></tr></table></figure>



<p><strong>其他增删改操作</strong></p>
<p>UserMapper.xml映射文件中编写：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  新增  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.de.domain.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user (username, birthday, sex, address)</span><br><span class="line">    values (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 插入语句使用insert标签 </span><br><span class="line">- 在映射文件中使用parameterType属性指定要插入的数据类型 </span><br><span class="line">- Sql语句中使用#&#123;实体属性名&#125;方式引用实体中的属性值 </span><br><span class="line">- 插入操作使用的API是sqlSession.insert(“命名空间.id”,实体对象); </span><br><span class="line">- 插入操作涉及数据库数据变化，所以要使用sqlSession对象显示的提交事务，即 sqlSession.commit()</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  修改  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.de.domain.User&quot;</span>&gt;</span></span><br><span class="line">    update user set username=#&#123;username&#125;,birthday=#&#123;birthday&#125;</span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 修改语句使用update标签 </span><br><span class="line">- 修改操作使用的API是sqlSession.update(“命名空间.id”,实体对象);</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  删除  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id=#&#123;aaa&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 删除语句使用delete标签 </span><br><span class="line">- Sql语句中使用#&#123;任意字符串&#125;方式引用传递的单个参数 </span><br><span class="line">- 删除操作使用的API是sqlSession.delete(“命名空间.id”,Object);</span><br></pre></td></tr></table></figure>

<h2 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h2><p>配置文档的顶层结构如下：有先后顺序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">    properties（属性）</span><br><span class="line">    settings（设置）</span><br><span class="line">    typeAliases（类型别名）</span><br><span class="line">    typeHandlers（类型处理器）</span><br><span class="line">    objectFactory（对象工厂）</span><br><span class="line">    plugins（插件）</span><br><span class="line">    environments（环境配置）</span><br><span class="line">        environment（环境变量）</span><br><span class="line">            transactionManager（事务管理器）</span><br><span class="line">            dataSource（数据源）</span><br><span class="line">    databaseIdProvider（数据库厂商标识）</span><br><span class="line">    mappers（映射器）</span><br></pre></td></tr></table></figure>

<h3 id="environments标签"><a href="#environments标签" class="headerlink" title="environments标签"></a>environments标签</h3><p>数据库环境的配置，支持多环境配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--环境配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  <span class="comment">&lt;!--指定默认的环境名称--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  <span class="comment">&lt;!--环境名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span>  <span class="comment">&lt;!--事物管理器类型是JDBC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span>  <span class="comment">&lt;!--数据源类型是连接池--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据库基本参数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///ssm_test&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="properties标签"><a href="#properties标签" class="headerlink" title="properties标签"></a>properties标签</h3><p>实际开发中，习惯将数据源的配置信息单独抽取成一个properties文件，该标签可以加载额外配置的properties</p>
<p>JDBC.properties：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span> = <span class="string">jdbc:mysql:///ssm_test</span></span><br><span class="line"><span class="meta">jdbc.username</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span> = <span class="string">root</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  加载外部的properties文件  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;JDBC.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--环境配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="typeAliases标签"><a href="#typeAliases标签" class="headerlink" title="typeAliases标签"></a>typeAliases标签</h3><p>原来的类型名称要全限定名称，例如com.de.domain.User，java.lang.Integer</p>
<p>该标签为类型别名是 Java 类型设置一个短的名字。</p>
<p>为了简化映射文件 Java 类型设置，mybatis框架为我们设置好的一些常用的类型的别名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">别名------数据类型</span><br><span class="line">string -- String</span><br><span class="line">long ---- Long</span><br><span class="line">int  ---- Integer</span><br><span class="line">double -- Double</span><br><span class="line">boolean---Boolean</span><br><span class="line">list -----List</span><br></pre></td></tr></table></figure>

<p>配置typeAliases，为com.lagou.domain.User定义别名为user：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  给类取别名  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  单个类取别名   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.de.domain.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  给一个包下所有类取别名，即类名自身，且不区分大小写  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.de.domain&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="mappers标签"><a href="#mappers标签" class="headerlink" title="mappers标签"></a>mappers标签</h3><p>该标签的作用是加载映射文件的，加载方式有如下几种：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1. 使用相对于类路径的资源引用，例如： </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/de/mapper/UserMapper.xml&quot;</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line">2. 使用完全限定资源定位符（URL），可引用项目外路径,例如： </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/userMapper.xml&quot;</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">《下面两种mapper代理开发中使用》 </span><br><span class="line">3. 使用映射器接口实现类的完全限定类名，例如： </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.de.mapper.UserMapper&quot;</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line">4. 将包内的映射器接口实现全部注册为映射器，例如： </span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.de.mapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="plugins-标签"><a href="#plugins-标签" class="headerlink" title="plugins 标签"></a>plugins 标签</h3><p>MyBatis 可以使用第三方的插件来对功能进行扩展</p>
<p>例如：分页助手PageHelper 是将分页的复杂操作进行封装，使用简单的方式即可获得分页的相关数据</p>
<p>步骤：</p>
<p>1，pox.xml导入通用PageHelper 的坐标依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页助手 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，使用plugins标签，在mybatis 核心配置文件中配置PageHelper 插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  使用第三方的插件  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分页助手插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定mysql的方言 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3，测试分页数据获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行sql</span></span><br><span class="line">List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;UserMapper.findAll&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他分页的数据</span></span><br><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;User&gt;(userList);</span><br><span class="line">System.out.println(<span class="string">&quot;总条数：&quot;</span>+pageInfo.getTotal());</span><br><span class="line">System.out.println(<span class="string">&quot;总页数：&quot;</span>+pageInfo.getPages());</span><br><span class="line">System.out.println(<span class="string">&quot;当前页：&quot;</span>+pageInfo.getPageNum());</span><br><span class="line">System.out.println(<span class="string">&quot;每页显示长度：&quot;</span>+pageInfo.getPageSize());</span><br><span class="line">System.out.println(<span class="string">&quot;是否第一页：&quot;</span>+pageInfo.isIsFirstPage());</span><br><span class="line">System.out.println(<span class="string">&quot;是否最后一页：&quot;</span>+pageInfo.isIsLastPage());</span><br></pre></td></tr></table></figure>

<h2 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h2><p><strong>SqlSession工厂构建器SqlSessionFactoryBuilder</strong></p>
<p>常用API：SqlSessionFactory build(InputStream inputStream)</p>
<p>通过加载mybatis的核心文件的输入流的形式构建一个SqlSessionFactory对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 加载核心配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 获取SqlSessionFactory工厂对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br></pre></td></tr></table></figure>



<p><strong>SqlSession工厂对象SqlSessionFactory</strong></p>
<p>SqlSessionFactory 有多个个方法创建SqlSession 实例。常用的有如下两个： </p>
<table>
<thead>
<tr>
<th>构造方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>openSession()</td>
<td>默认开启一个事物，但事物不会自动提交，意味着增删改操作需要手动提交事物</td>
</tr>
<tr>
<td>openSession(boolean autoCommit)</td>
<td>参数为是否自动提交事物，true为自动提交，不需要手动提交</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取SqlSession会话对象</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br></pre></td></tr></table></figure>



<p><strong>SqlSession会话对象</strong></p>
<p>SqlSession 实例在 MyBatis 中是非常强大的一个类。在这里你会看到所有执行语句、提交或回滚事务和获取映射器实例的方法。</p>
<p>执行语句的方法主要有：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement, Object parameter)</span> </span></span><br><span class="line"><span class="function">&lt;E&gt; List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement, Object parameter)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement, Object parameter)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement, Object parameter)</span></span></span><br></pre></td></tr></table></figure>

<p>操作事务的方法主要有：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h2 id="传统Dao开发"><a href="#传统Dao开发" class="headerlink" title="传统Dao开发"></a>传统Dao开发</h2><p>步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1，编写dao接口</span><br><span class="line">2，编写dao接口实现类</span><br><span class="line">3，编写映射配置文件</span><br><span class="line">4，测试</span><br></pre></td></tr></table></figure>

<p>1，编写UserDao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2，编写UserDaoImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取SqlSessionFactory工厂对象</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">       	<span class="comment">// 获取SqlSe会话对象</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行sql</span></span><br><span class="line">        List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;UserMapper.findAll&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3，编写UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  查询所有user  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;UsEr&quot;</span>&gt;</span></span><br><span class="line">        select * from User</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4，测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = userDao.findAll();</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>问题</strong></p>
<p>1.实现类中，存在mybatis模板代码重复<br>2.实现类调用方法时，xml中的sql statement 硬编码到java代码中</p>
<p>思考：能否只写接口，不写实现类。只编写接口和Mapper.xml即可？</p>
<p>解决：因为在dao的实现类中对sqlsession的使用方式很类似。因此mybatis提供了接口的动态代理。</p>
<h2 id="代理开发方式"><a href="#代理开发方式" class="headerlink" title="代理开发方式"></a>代理开发方式</h2><p>采用 Mybatis 的基于接口代理方式实现 持久层 的开发，这种方式是我们后面进入企业的主流。</p>
<p>基于接口代理方式的开发只需要程序员编写 Mapper 接口，Mybatis 框架会为我们动态生成实现类的对象。</p>
<p><strong>遵循规范</strong></p>
<ul>
<li><p>映射文件和接口路径形式相同</p>
</li>
<li><p>Mapper.xml映射文件中的namespace与mapper接口的全限定名相同</p>
</li>
<li><p>Mapper.xml映射文件中定义的每个statement的id和Mapper接口抽象方法名相同</p>
</li>
<li><p>mapper.xml映射文件中定义的每个sql的parameterType的类型和Mapper接口方法的输入参数类型相同</p>
</li>
<li><p>mapper.xml映射文件中定义的每个sql的resultType的类型和Mapper接口方法的输出参数类型相同</p>
</li>
</ul>
<p><a href="https://imgtu.com/i/veMnJS"><img src="https://s1.ax1x.com/2022/08/04/veMnJS.png" alt="veMnJS.png"></a></p>
<p>Mapper 接口开发方法只需要程序员编写Mapper 接口（相当于Dao 接口），由Mybatis 框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。</p>
<p>步骤：</p>
<p>1，编写接口，java路径下com.de.mapper.UserMapper.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有用户，代理开发，不需要写实现类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">finAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2，编写映射文件，resources路径下com.de.mapper.UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.de.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;finAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from User</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3，测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获得Mapper代理对象</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">//代理对象执行方法</span></span><br><span class="line">    List&lt;User&gt; userList = mapper.finAll();</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sqlSession.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h2><h3 id="ResutlMap-属性"><a href="#ResutlMap-属性" class="headerlink" title="ResutlMap 属性"></a>ResutlMap 属性</h3><ul>
<li>resultType<br>如果实体的属性名与表中字段名一致，将查询结果自动封装到实体类中</li>
<li>ResutlMap<br>如果实体的属性名与表中字段名不一致，可以使用ResutlMap 实现手动封装到实体类中</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;usernameabc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthdayabc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sexabc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;addressabc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h3><p>需求：根据id 和username 查询 user 表</p>
<p><strong>方式一</strong></p>
<p>使用 <code>#&#123;arg0&#125;-#&#123;argn&#125;</code> 或者 <code>#&#123;param1&#125;-#&#123;paramn&#125;</code> 获取参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByIdAndUsername1</span><span class="params">(Integer id, String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIdAndUsername1&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- select * from user where id=#&#123;arg0&#125; and username=#&#123;arg1&#125; --&gt;</span></span><br><span class="line">    select * from user where id=#&#123;param1&#125; and username=#&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>方式二：</strong></p>
<p>使用注解，引入 <code>@Param()</code> 注解获取参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByIdAndUsername2</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id, <span class="meta">@Param(&quot;username&quot;)</span> String username)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIdAndUsername2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id=#&#123;id&#125; and username=#&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>方式三：</strong></p>
<p>使用javaBean对象传递参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByIdAndUsername3</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIdAndUsername3&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id=#&#123;id&#125; and username=#&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>根据username 模糊查询user 表</p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方式一：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsername&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user where username like #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; userList = mapper.findByUsername(<span class="string">&quot;%小%&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方式二：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsername&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		推荐使用，concat() 字符串拼接函数</span></span><br><span class="line"><span class="comment">		注意：在 Oracle 中，concat() 函数只能传递二次参数，我们解决方案是嵌套拼接</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    select * from user where username like concat( concat(&quot;%&quot;,#&#123;username&#125;) ,&quot;%&quot;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; userList = mapper.findByUsername(<span class="string">&quot;小&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="和-区别"><a href="#和-区别" class="headerlink" title="#{}和${}区别"></a><code>#&#123;&#125;</code>和<code>$&#123;&#125;</code>区别</h3><p>${} 与 #{} 区别【面试题】</p>
<p>同：都可以接收简单类型值或 pojo 属性值。</p>
<p>异：</p>
<ul>
<li>#{} :表示一个占位符号<br>1，通过#{} 可以实现 preparedStatement 向占位符中设置值，自动进行 java 类型和 jdbc 类型转换，#{}可以有效防止sql 注入。<br>2，如果 parameterType 传输单个简单类型值， #{} 括号中可以任意名称。</li>
<li>${} :表示拼接sql 串<br>1，通过${} 可以将 parameterType 传入的内容拼接在 sql 中且不进行jdbc 类型转换，会出现 sql 注入问题。<br>2，如果 parameterType 传输单个简单类型值， ${} 括号中只能是value。</li>
</ul>
<h2 id="映射文件深入"><a href="#映射文件深入" class="headerlink" title="映射文件深入"></a>映射文件深入</h2><h3 id="返回主键"><a href="#返回主键" class="headerlink" title="返回主键"></a>返回主键</h3><p>主键自动生成时，向数据库插入一条记录后，希望能立即拿到这条记录在数据库中的主键值。</p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//新增user，并返回自动生成的主键</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>映射文件：</p>
<p>1，只适用于主键自增的数据库，mysql 和 sqlserver 支持，oracle 不支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	useGeneratedKeys=&quot;true&quot; 声明返回主键</span></span><br><span class="line"><span class="comment">    keyProperty=&quot;id&quot; 把返回主键的值，封装到实体的id 属性中	</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into user (username, birthday, sex, address)</span><br><span class="line">    values (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，selectKey适用范围广，支持所有类型数据库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    keyColumn=&quot;id&quot; 指定主键列名</span></span><br><span class="line"><span class="comment">    keyProperty=&quot;id&quot; 指定主键封装到实体的 id 属性中</span></span><br><span class="line"><span class="comment">    resultType=&quot;int&quot; 指定主键类型</span></span><br><span class="line"><span class="comment">    order=&quot;AFTER&quot; 设置在 sql 语句执行前（后），执行此语句</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">        select last_insert_id();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into user (username, birthday, sex, address)</span><br><span class="line">    values (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="动态sql之if"><a href="#动态sql之if" class="headerlink" title="动态sql之if"></a>动态sql之if</h3><p>需求：根据id 和username 查询，但是不确定两个都有值。</p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIdAndUsernameIf</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>映射文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIdAndUsernameIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="comment">&lt;!-- where 标签相当于 where 1=1，但是如果没有条件，就不会拼接where 关键字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null and id != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and username=#&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="动态sql之set"><a href="#动态sql之set" class="headerlink" title="动态sql之set"></a>动态sql之set</h3><p>需求：动态更新user 表数据，如果该属性有值就更新，没有值不做处理。</p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIf</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>映射文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    update user</span><br><span class="line">    <span class="comment">&lt;!-- 自动加上set 关键字，然后去掉最后一个条件的逗号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            username=#&#123;username&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;birthday != null&quot;</span>&gt;</span></span><br><span class="line">            birthday=#&#123;birthday&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="动态sql之foreach"><a href="#动态sql之foreach" class="headerlink" title="动态sql之foreach"></a>动态sql之foreach</h3><p>foreach 主要是用来做数据的循环遍历</p>
<p>例如：select * from user where id in (1,2,3) 在这样的语句中，传入的参数部分必须依靠foreach 遍历才能实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;foreach&gt;标签用于遍历集合，它的属性：</span><br><span class="line">• collection：代表要遍历的集合元素</span><br><span class="line">• open：代表语句的开始部分</span><br><span class="line">• close：代表结束部分</span><br><span class="line">• item：代表遍历集合的每个元素，生成的变量名</span><br><span class="line">• sperator：代表分隔符</span><br></pre></td></tr></table></figure>



<p>1，接口，参数是list集合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//参数是list集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIdList</span><span class="params">(List&lt;Integer&gt; ids)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>映射文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--参数是集合：collection属性值为list或者collection--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIdList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;a&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;a&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2，接口，参数是array数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//参数是array数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIdArray</span><span class="params">(Integer[] ids)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>映射文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--参数是array数组，collection属性值为array--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIdArray&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;a&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;a&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3,参数是自定义的Bean类的话，collection属性值为Bean类的属性名</p>
<h3 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h3><p>映射文件中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 重用的目的</p>
<p>提取sql：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引用sql：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>关系型数据库表关系分为：</p>
<ul>
<li>一对一（多对一）：一人一身份证，每个订单所属一个用户</li>
<li>一对多：一个用户拥有多个订单</li>
<li>多对多：用户可以是多个角色，角色可以被多个用户选</li>
</ul>
<p>准备工作：建立相关表，用户表，订单表，角色表，用户角色关系表</p>
<p><a href="https://imgtu.com/i/ve5d91"><img src="https://s1.ax1x.com/2022/08/04/ve5d91.png" alt="ve5d91.png"></a></p>
<h3 id="一对一-多对一"><a href="#一对一-多对一" class="headerlink" title="一对一(多对一)"></a>一对一(多对一)</h3><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户</p>
<p>需求：查询所有订单，与此同时查询出该订单所属的用户</p>
<p><strong>Order实体类</strong>，需要要添加成员属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示当前订单属于哪个用户</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br></pre></td></tr></table></figure>

<p><strong>接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findAllWithUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>映射文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderWithUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        一对一（多对一）使用association 标签关联</span></span><br><span class="line"><span class="comment">        property=&quot;user&quot; 封装实体的属性名</span></span><br><span class="line"><span class="comment">        javaType=&quot;user&quot; 封装实体的属性类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.de.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllWithUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderWithUserMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT u.*, o.id oid, o.ordertime ordertime, o.total total</span><br><span class="line">    FROM orders o LEFT JOIN user u</span><br><span class="line">    ON u.id = o.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户</p>
<p>需求：查询所有用户，与此同时查询出该用户具有的订单</p>
<p><strong>User实体类</strong>，需要添加成员属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代表当前用户具有的所有订单</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br></pre></td></tr></table></figure>

<p><strong>接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllWithOrder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>映射文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userWithOrderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.de.domain.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        一对多使用 collection 标签关联</span></span><br><span class="line"><span class="comment">        property=&quot;orderList&quot; 封装到集合的属性名</span></span><br><span class="line"><span class="comment">        ofType=&quot;order&quot; 封装集合的泛型类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orderList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllWithOrder&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userWithOrderMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT u.*, o.id oid, o.ordertime ordertime, o.total total, o.uid uid</span><br><span class="line">    FROM user u LEFT JOIN orders o</span><br><span class="line">    ON u.id = o.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用</p>
<p>需求：查询所有用户同时查询出该用户的所有角色</p>
<p><strong>User实体类</strong>，需要添加成员属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代表当前用户关联的所有角色</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Role&gt; roleList;</span><br></pre></td></tr></table></figure>

<p><strong>接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllWithRole</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>映射文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userWithRoleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--封装关联的RoleList，和一对多基本一样--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;RoleList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;SysRole&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;rolename&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rolename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleDesc&quot;</span> <span class="attr">column</span>=<span class="string">&quot;roleDesc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllWithRole&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userWithRoleMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT u.*, sr.id rid, sr.rolename rolename, sr.roleDesc roleDesc</span><br><span class="line">    FROM user u LEFT JOIN sys_user_role sur</span><br><span class="line">    ON u.id = sur.userid</span><br><span class="line">    LEFT JOIN sys_role sr</span><br><span class="line">    ON sur.roleid = sr.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 一对一(多对一)配置：使用&lt;resultMap&gt;+&lt;association&gt;做配置</span><br><span class="line"></span><br><span class="line">* 一对多配置：使用&lt;resultMap&gt;+&lt;collection&gt;做配置</span><br><span class="line"></span><br><span class="line">* 多对多配置：使用&lt;resultMap&gt;+&lt;collection&gt;做配置</span><br><span class="line"></span><br><span class="line">* 多对多的配置跟一对多很相似，难度在于SQL 语句的编写。</span><br></pre></td></tr></table></figure>

<h2 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h2><p>嵌套查询就是将原来多表查询中的联合查询语句拆成单个表的查询，再使用 mybatis 的语法嵌套在一起</p>
<p>举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 需求：查询一个订单，与此同时查询出该订单所属的用户</span><br><span class="line">联合查询</span><br><span class="line">SELECT * FROM orders o LEFT JOIN USER u ON o.`uid`=u.`id`;</span><br><span class="line"></span><br><span class="line">嵌套查询</span><br><span class="line">1 先查询订单</span><br><span class="line">SELECT * FROM orders</span><br><span class="line">2 再根据订单uid 外键，查询用户</span><br><span class="line">SELECT * FROM `user` WHERE id = #&#123;根据订单查询的 uid&#125;</span><br><span class="line">3 最后使用mybatis，将以上二步嵌套起来</span><br></pre></td></tr></table></figure>

<h3 id="一对一-多对一-1"><a href="#一对一-多对一-1" class="headerlink" title="一对一(多对一)"></a>一对一(多对一)</h3><p>需求：查询所有订单，与此同时查询出该订单所属的用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先查询订单</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="comment">-- 再根据订单 uid 外键，查询用户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> id <span class="operator">=</span> #&#123;订单的uid&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>OrderMapper接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findAllWithUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>OrderMapper.xml映射文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderWithUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据订单中 uid 外键，查询用户表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;user&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;com.de.mapper.UserMapper.findById&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllWithUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderWithUserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from orders</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>UserMapper 接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml映射文件</strong> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="一对多-1"><a href="#一对多-1" class="headerlink" title="一对多"></a>一对多</h3><p>需求：查询一个用户，与此同时查询出该用户具有的订单</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先查询用户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="comment">-- 再根据用户 id 主键，查询订单列表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">where</span> uid <span class="operator">=</span> #&#123;用户 id&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>UserMapper接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllWithOrder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml配置文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userWithOrderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据用户 id，查询订单表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orderList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;order&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.de.mapper.OrderMapper.findByUid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllWithOrder&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userWithOrderMap&quot;</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>OrderMapper接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>OrderMapper.xml映射文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">    select * from orders where uid=#&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="多对多-1"><a href="#多对多-1" class="headerlink" title="多对多"></a>多对多</h3><p>需求：查询用户同时查询出该用户的所有角色</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先查询用户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="comment">-- 再根据用户 id 主键，查询角色列表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> role r <span class="keyword">INNER</span> <span class="keyword">JOIN</span> user_role ur <span class="keyword">ON</span> r.`id` <span class="operator">=</span> ur.`rid`</span><br><span class="line"><span class="keyword">WHERE</span> ur.`uid` <span class="operator">=</span> #&#123;用户 id&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>UserMapper接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllWithRole</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml映射文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userWithRoleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据用户 id，查询角色列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;RoleList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;sysRole&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.de.mapper.SysRoleMapper.findByUid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllWithRole&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userWithRoleMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>SysRoleMapper接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysRoleMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysRole&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SysRoleMapper.xml映射文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;sysRole&quot;</span>&gt;</span></span><br><span class="line">    select * from</span><br><span class="line">    sys_user_role sur left join sys_role sr</span><br><span class="line">    on sur.roleid = sr.id</span><br><span class="line">    where sur.userid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一对一配置：使用&lt;resultMap&gt;+&lt;association&gt;做配置，通过column 条件，执行 select 查询</span><br><span class="line"></span><br><span class="line">一对多配置：使用&lt;resultMap&gt;+&lt;collection&gt;做配置，通过column 条件，执行 select 查询</span><br><span class="line"></span><br><span class="line">多对多配置：使用&lt;resultMap&gt;+&lt;collection&gt;做配置，通过column 条件，执行 select 查询</span><br><span class="line"></span><br><span class="line">优点：简化多表查询操作</span><br><span class="line">缺点：执行多次sql 语句，浪费数据库性能</span><br></pre></td></tr></table></figure>

<h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><p>一对一，一对多，多对多的查询时，可以实现对象的关联查询。</p>
<p>不需要总是在加载用户信息时就一定要加载他的订单信息。</p>
<p><strong>延迟加载</strong></p>
<p>就是查询用户信息时，在需要用到订单信息时才进行加载，不需要用到订单信息时不加载数据。<br>延迟加载也称懒加载。</p>
<p><strong>优点</strong></p>
<p>先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表 速度要快。</p>
<p><strong>缺点</strong></p>
<p>因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗时 间，所以可能造成用户等待时间变长，造成用户体验下降。</p>
<p><strong>结论</strong></p>
<p>一对多，多对多：通常情况下采用延迟加载<br>一对一（多对一）：通常情况下采用立即加载<br>延迟加载是基于嵌套查询来实现的</p>
<h3 id="全局延迟加载"><a href="#全局延迟加载" class="headerlink" title="全局延迟加载"></a>全局延迟加载</h3><p>默认，全局是立即加载</p>
<p>在Mybatis的核心配置文件中可以使用setting标签修改全局的加载策略。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--开启全局延迟加载功能--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="局部延迟加载"><a href="#局部延迟加载" class="headerlink" title="局部延迟加载"></a>局部延迟加载</h3><p>局部的加载策略优先级高于全局的加载策略。</p>
<p>在映射文件中，association和collection标签中都有一个fetchType属性，通过修改它的值，可以修改局部的加载策略。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userWithOrderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据用户 id，查询订单表--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        fetchType=&quot;lazy&quot; 懒加载策略 </span></span><br><span class="line"><span class="comment">        fetchType=&quot;eager&quot; 立即加载策略 </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orderList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;order&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.de.mapper.OrderMapper.findByUid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllWithOrder&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userWithOrderMap&quot;</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="触发延迟加载的方法"><a href="#触发延迟加载的方法" class="headerlink" title="触发延迟加载的方法"></a>触发延迟加载的方法</h3><p>调用当前对象的equals、clone、hashCode、toString方法时也会触发关联对象表的查询。</p>
<p>可以在核心配置文件中使用lazyLoadTriggerMethods配置项覆盖掉上面四个方法。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--所有方法都会延迟加载--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;toString()&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//延迟加载测试</span></span><br><span class="line"><span class="comment">//查询所有用户，此同时查询出该用户具所有订单</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; userList = mapper.findAllWithOrder();</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);  <span class="comment">//无订单信息</span></span><br><span class="line">        <span class="comment">//有需求时,才触发关联对象表的查询</span></span><br><span class="line">        System.out.println( user.getOrderList() );<span class="comment">//订单信息出现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>一级缓存是SqlSession级别的缓存，是默认开启的</p>
<p>使用同一个SqlSession对象调用一个Mapper方法，参数和SQL完全一样的情况下，往往只执行一次SQL，因为使用SelSession第一次查询后，MyBatis会将其放在一级缓存中，以后再查询的时候，如果没有声明需要刷新，并且缓存没有超时的情况下，SqlSession都会取出当前缓存的数据，而不会再次发送SQL到数据库。</p>
<p><strong>清空缓存</strong></p>
<p>一级缓存是SqlSession范围的缓存，执行SqlSession的C（增加）U（更新）D（删除）操作，或者调用clearCache()、commit()、close()方法，都会清空缓存。</p>
<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>二级缓存是namspace(mapper)级别（跨sqlSession）的缓存，是默认不开启的。</p>
<p>二级缓存的开启需要进行配置，实现二级缓存的时候，MyBatis要求返回的POJO必须是可序列化的。也就是要求实现Serializable接口。</p>
<p><a href="https://imgtu.com/i/vn1CQS"><img src="https://s1.ax1x.com/2022/08/05/vn1CQS.png" alt="vn1CQS.png"></a></p>
<p><strong>开启二级缓存</strong></p>
<p>核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        因为cacheEnabled的取值默认就为true，所以这一步可以省略不配置。 </span></span><br><span class="line"><span class="comment">        为true代表可以开启二级缓存；为false代表不可以开启二级缓存。 </span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lagou.dao.UserMapper&quot;</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--当前映射文件开启二级缓存--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		&lt;select&gt;标签中设置useCache=”true”代表当前这个statement要使用二级缓存。 	</span></span><br><span class="line"><span class="comment">		如果不使用二级缓存可以设置为false  </span></span><br><span class="line"><span class="comment">	--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span> &gt;</span> </span><br><span class="line">        SELECT * FROM `user` where id = #&#123;id&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改User实体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; </span><br><span class="line">	<span class="comment">//需要实现可序列化Serializable接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>二级缓存的问题</strong></p>
<p>二级缓存是mapper映射级别的缓存，多个SqlSession去操作同一个Mapper映射的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p>
<p><a href="https://imgtu.com/i/vn3l1f"><img src="https://s1.ax1x.com/2022/08/05/vn3l1f.png" alt="vn3l1f.png"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 映射语句文件中的所有select语句将会被缓存。 </span><br><span class="line">2. 映射语句文件中的所有insert、update和delete语句会刷新缓存。</span><br></pre></td></tr></table></figure>

<p>mybatis的二级缓存因为是namespace级别，所以在进行多表查询时会产生脏读问题</p>
<p>举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1，sqlSession1执行userMappper查询用户及相关的所有订单，结果会存放在userMapper二级缓存中。</span><br><span class="line">2，sqlSession2执行orderMapper修改订单信息，由于修改操作，会清空orderMapper二级缓存。</span><br><span class="line">3，sqlSession3执行userMappper查询用户及相关的所有订单，会从userMapper二级缓存中拿结果。</span><br><span class="line">4，sqlSession3拿到的结果出现问题，产生脏读。</span><br></pre></td></tr></table></figure>

<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. mybatis的缓存，都不需要我们手动存储和获取数据。mybatis自动维护的。 </span><br><span class="line"></span><br><span class="line">2. mybatis开启了二级缓存后，那么查询顺序：二级缓存--》一级缓存--》数据库</span><br><span class="line"></span><br><span class="line">3. 注意：mybatis的二级缓存会存在脏读问题，需要使用第三方的缓存技术解决问题。</span><br></pre></td></tr></table></figure>

<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Mybatis也可以使用注解开发方式，这样我们就可以减少编写Mapper映射文件了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* @Insert：实现新增，代替了&lt;insert&gt;&lt;/insert&gt;</span><br><span class="line">* @Delete：实现删除，代替了&lt;delete&gt;&lt;/delete&gt; </span><br><span class="line">* @Update：实现更新，代替了&lt;update&gt;&lt;/update&gt; </span><br><span class="line">* @Select：实现查询，代替了&lt;select&gt;&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">* @Results：可以与@Result 一起使用，封装多个结果集，代替了&lt;resultMap&gt;&lt;/resultMap&gt; </span><br><span class="line">* @Result：实现结果集封装，代替了&lt;result&gt;&lt;/result&gt; </span><br><span class="line"></span><br><span class="line">* @One：实现一对一结果集封装，代替了&lt;association&gt;&lt;/association&gt; </span><br><span class="line">* @Many：实现一对多结果集封装，代替了&lt;collection&gt;&lt;/collection&gt;</span><br></pre></td></tr></table></figure>

<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><p>编写接口，注解中写sql语句，不需要编写映射文件</p>
<p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">	<span class="comment">//增</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user (username,birthday,sex,address) &quot; +</span></span><br><span class="line"><span class="meta">            &quot; values (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//改</span></span><br><span class="line">    <span class="meta">@Update(&quot;update user set username=#&#123;username&#125;,birthday=#&#123;birthday&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//查</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--我们使用了注解替代的映射文件，所以我们只需要加载使用了注解的Mapper接口或所在包即可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--扫描使用注解的Mapper类--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.de.mapper.UserMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--扫描使用注解的Mapper类所在的包--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.de.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试代码一样</p>
<h3 id="复杂映射"><a href="#复杂映射" class="headerlink" title="复杂映射"></a>复杂映射</h3><p>之前我们在映射文件中通过配置 resultMap、association、collection 来实现复杂关系映射。</p>
<p>使用注解开发后，我们可以使用 @Results、@Result，@One、@Many 注解组合完成复杂关系的配置。</p>
<h3 id="一对一-多对一-2"><a href="#一对一-多对一-2" class="headerlink" title="一对一(多对一)"></a>一对一(多对一)</h3><p>需求：查询所有订单，与此同时查询出该订单所属的用户</p>
<p>OrderMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from orders&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">        @Result(property=&quot;id&quot;, column=&quot;id&quot;, id=true),</span></span><br><span class="line"><span class="meta">        @Result(property=&quot;ordertime&quot;, column=&quot;ordertime&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property=&quot;total&quot;, column=&quot;total&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property=&quot;uid&quot;, column=&quot;uid&quot;),</span></span><br><span class="line"><span class="meta">        //封装关联的User</span></span><br><span class="line"><span class="meta">        @Result(property=&quot;user&quot;, javaType= User.class, column=&quot;uid&quot;,</span></span><br><span class="line"><span class="meta">                one=@One(select=&quot;com.de.mapper.UserMapper.findById&quot;) )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findAllWithUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询user</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<h3 id="一对多-2"><a href="#一对多-2" class="headerlink" title="一对多"></a>一对多</h3><p>需求：查询所有用户，此同时查询出该用户具所有订单</p>
<p>UserMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(property=&quot;id&quot;, column=&quot;id&quot;, id=true),</span></span><br><span class="line"><span class="meta">            @Result(property=&quot;username&quot;, column=&quot;username&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property=&quot;birthday&quot;, column=&quot;birthday&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property=&quot;sex&quot;, column=&quot;sex&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property=&quot;address&quot;, column=&quot;address&quot;),</span></span><br><span class="line"><span class="meta">            //封装关联的orderList</span></span><br><span class="line"><span class="meta">            @Result(property=&quot;orderList&quot;, javaType= List.class, column=&quot;id&quot;,</span></span><br><span class="line"><span class="meta">                    many=@Many(select=&quot;com.de.mapper.OrderMapper.findByUid&quot;))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllWithOrder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>OrderMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//根据uid查询订单</span></span><br><span class="line">	<span class="meta">@Select(&quot;select * from orders where uid=#&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多对多-2"><a href="#多对多-2" class="headerlink" title="多对多"></a>多对多</h3><p>需求：查询所有用户，同时查询出该用户的所有角色</p>
<p>UserMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(property=&quot;id&quot;, column=&quot;id&quot;, id=true),</span></span><br><span class="line"><span class="meta">            @Result(property=&quot;username&quot;, column=&quot;username&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property=&quot;birthday&quot;, column=&quot;birthday&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property=&quot;sex&quot;, column=&quot;sex&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property=&quot;address&quot;, column=&quot;address&quot;),</span></span><br><span class="line"><span class="meta">            //封装关联的RoleList</span></span><br><span class="line"><span class="meta">            @Result(property=&quot;RoleList&quot;, javaType=List.class, column=&quot;id&quot;,</span></span><br><span class="line"><span class="meta">                    many=@Many(select=&quot;com.de.mapper.SysRoleMapper.findByUid&quot;))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllWithRole</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SysRoleMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysRoleMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注解方式:根据userId查询对应的所有角色信息</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from sys_user_role sur left join sys_role sr &quot; +</span></span><br><span class="line"><span class="meta">            &quot;on sur.roleid = sr.id where sur.userid = #&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysRole&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><strong>注解方式开启二级缓存</strong></p>
<p>核心配置文件支持开启二级缓存情况下，<br>在UserMapper接口中使用注解配置二级缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheNamespace</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>



<p><strong>注解方式开启延迟加载</strong></p>
<p>不管是一对一还是一对多 ，在注解配置中都有fetchType的属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* fetchType = FetchType.LAZY 表示懒加载 </span><br><span class="line"></span><br><span class="line">* fetchType = FetchType.EAGER 表示立即加载 </span><br><span class="line"></span><br><span class="line">* fetchType = FetchType.DEFAULT 表示使用全局配置的加载方式</span><br></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">one=<span class="meta">@One(select=&quot;......&quot;, fetchType=FetchType.LAZY)</span></span><br></pre></td></tr></table></figure>



<p><strong>小结</strong></p>
<p>注解开发和xml配置优劣分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.注解开发和xml配置相比，从开发效率来说，注解编写更简单，效率更高。 </span><br><span class="line">2.从可维护性来说，注解如果要修改，必须修改源码，会导致维护成本增加。xml维护性更强。</span><br></pre></td></tr></table></figure>

<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>Spring是分层的 Java SE/EE应用 <strong>full-stack(全栈式)</strong> <strong>轻量级开源框架</strong>。</p>
<p>提供了<strong>表现层</strong> SpringMVC和<strong>持久层</strong> Spring JDBC Template以及 <strong>业务层</strong> 事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架。</p>
<p><strong>两大核心</strong>：<br>以 <strong>IOC</strong>（Inverse Of Control：控制反转）和 <strong>AOP</strong>（Aspect Oriented Programming：面向切面编程）为内核。</p>
<p><strong>Spring优势</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）方便解耦，简化开发 </span><br><span class="line">    Spring就是一个容器，可以将所有对象创建和关系维护交给Spring管理 什么是耦合度？对象之间的关系，通常说当一个模块(对象)更改时也需要更改其他模块(对象)，这就是 耦合，耦合度过高会使代码的维护成本增加。要尽量解耦 </span><br><span class="line"></span><br><span class="line">2）AOP编程的支持 </span><br><span class="line">	Spring提供面向切面编程，方便实现程序进行权限拦截，运行监控等功能。 </span><br><span class="line"></span><br><span class="line">3）声明式事务的支持 </span><br><span class="line">	通过配置完成事务的管理，无需手动编程 </span><br><span class="line"></span><br><span class="line">4）方便测试，降低JavaEE API的使用 </span><br><span class="line">	Spring对Junit4支持，可以使用注解测试 </span><br><span class="line"></span><br><span class="line">5）方便集成各种优秀框架 </span><br><span class="line">	不排除各种优秀的开源框架，内部提供了对各种优秀框架的直接支持</span><br></pre></td></tr></table></figure>



<p><strong>Spring体系结构</strong></p>
<p><img src="https://s2.loli.net/2022/08/18/7OmKf1DXeRCi4yM.png" alt="image.png"></p>
<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>控制反转（Inverse Of Control）</strong>不是什么技术，而是一种设计思想。它的目的是指导我们设计出更加松耦合的程序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 控制：在java中指的是对象的控制权限（创建、销毁）</span><br><span class="line">- 反转：指的是对象控制权由原来 由开发者在类中手动控制 反转到 由Spring容器控制</span><br></pre></td></tr></table></figure>

<p><strong>举个例子</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 传统方式 </span><br><span class="line">	之前我们需要一个userDao实例，需要开发者自己手动创建 new UserDao(); </span><br><span class="line"></span><br><span class="line">* IOC方式 </span><br><span class="line">	现在我们需要一个userDao实例，对象的创建权交给了spring控制，直接从spring的IOC容器获得</span><br></pre></td></tr></table></figure>

<h3 id="自定义IOC"><a href="#自定义IOC" class="headerlink" title="自定义IOC"></a>自定义IOC</h3><p>传统写Service层，调用Dao层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">        userDao.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>问题</strong>：因为对象是new出来的，所以当前service对象和dao对象耦合度太高，而且每次new的都是一个新的对象，导致服务器压力过大。</p>
<p><strong>解决</strong>：利用反射机制，创建对象，解耦合<br>解耦合的原则是编译期不依赖，而运行期依赖就行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line"><span class="comment">//new创建对象的方式 改成 反射创建对象</span></span><br><span class="line"></span><br><span class="line">UserDao userDao = (UserDao)Class.forName(<span class="string">&quot;com.de.dao.impl.UserDaoImpl&quot;</span>).newInstance();</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>优化</strong>：利用 配置文件+反射，代码如下：</p>
<p>1，编写beans.xml配置文件，把所有需要创建对象的信息定义在配置文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.service.impl.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，编写BeanFactory工具类，工具类解析配置文件，创建相应的对象，保存到IOC容器中(map)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于IOC容器，保存创建的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; iocMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 程序启动时，初始化对象实例</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.读取配置文件</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">            <span class="comment">// 2.解析xml</span></span><br><span class="line">            SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            Document document = saxReader.read(in);</span><br><span class="line">            <span class="comment">// 4.获取所有的bean标签，通过xpath表达式</span></span><br><span class="line">            List&lt;Element&gt; nodes = document.selectNodes(<span class="string">&quot;//bean&quot;</span>);</span><br><span class="line">            <span class="comment">// 5.遍历并创建对象实例，设置到map集合中</span></span><br><span class="line">            <span class="keyword">for</span> (Element node : nodes) &#123;</span><br><span class="line">                String id = node.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String className = node.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                Object object = Class.forName(className).newInstance();</span><br><span class="line">                iocMap.put(id, object);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取指定id的对象实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> iocMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3，需要对象时，直接从BeanFactory工具类的IOC容器中获取即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        UserDao userDao = (UserDao)BeanFactory.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4，测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    UserService userService = (UserService)BeanFactory.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>小结</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 其实优化后的BeanFactory就是一个简单的Spring的IOC容器所具备的功能。 </span><br><span class="line"></span><br><span class="line">* 之前我们需要一个userDao实例，需要开发者自己手动创建 new UserDao(); </span><br><span class="line"></span><br><span class="line">* 现在我们需要一个userdao实例，直接从spring的IOC容器获得，对象的创建权交给了spring控制 </span><br><span class="line"></span><br><span class="line">* 最终目标：代码解耦合</span><br></pre></td></tr></table></figure>

<h3 id="Spring的IOC"><a href="#Spring的IOC" class="headerlink" title="Spring的IOC"></a>Spring的IOC</h3><p>需求：借助spring的IOC实现service层与dao层代码解耦合</p>
<p>1）创建java项目，导入spring开发基本坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）编写Dao接口和实现类，省略。。。</p>
<p>3）创建spring核心配置文件，applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建userDao对象交给IOC--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4）使用spring相关API获得Bean实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//加载spring核心配置文件</span></span><br><span class="line">    ApplicationContext applicationContext = </span><br><span class="line">        <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//通过getBean获取IOC容器中的对象</span></span><br><span class="line">    UserDao userDao = (UserDao)applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    userDao.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Spring相关API"><a href="#Spring相关API" class="headerlink" title="Spring相关API"></a>Spring相关API</h3><p>Spring的API体系异常庞大，我们现在只关注两个BeanFactory和ApplicationContext</p>
<p><img src="https://s2.loli.net/2022/08/18/ohAZpy2b4XH3rNl.png" alt="image.png"></p>
<h4 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h4><p>BeanFactory是 IOC 容器的核心接口，它定义了IOC的基本功能。</p>
<p>特点：在第一次调用getBean()方法时，创建指定对象的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BeanFactory beanFactory = </span><br><span class="line">    <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;applicationContext.xml&quot;</span>));</span><br></pre></td></tr></table></figure>



<h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p>代表应用上下文对象，可以获得spring中IOC容器的Bean对象。</p>
<p>特点：在spring容器启动时，加载并创建所有对象的实例</p>
<p><strong>常用实现类</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> ClassPathXmlApplicationContext </span><br><span class="line">它是从类的根路径下加载配置文件 推荐使用这种。 </span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> FileSystemXmlApplicationContext </span><br><span class="line">它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。 </span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> AnnotationConfigApplicationContext </span><br><span class="line">当使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = </span><br><span class="line">    <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>



<p><strong>常用方法</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> Object getBean(String name); </span><br><span class="line">根据Bean的id从容器中获得Bean实例，返回是Object，需要强转。 </span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">2. &lt;T&gt; T getBean(Class&lt;T&gt; requiredType); </span></span><br><span class="line"><span class="code">根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时，则此方法会报错。 </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> <span class="xml"><span class="tag">&lt;<span class="name">T</span>&gt;</span></span> T getBean(String name,Class<span class="xml"><span class="tag">&lt;<span class="name">T</span>&gt;</span></span> requiredType); </span><br><span class="line">根据Bean的id和类型获得Bean实例，解决容器中相同类型Bean有多个情况。</span><br></pre></td></tr></table></figure>

<h3 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h3><h4 id="Bean标签基本配置"><a href="#Bean标签基本配置" class="headerlink" title="Bean标签基本配置"></a>Bean标签基本配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">* 用于配置对象交由Spring来创建。</span><br><span class="line"></span><br><span class="line">* 基本属性： </span><br><span class="line">id：Bean实例在Spring容器中的唯一标识 </span><br><span class="line">class：Bean的全限定名 </span><br><span class="line"></span><br><span class="line">* 默认情况下它调用的是类中的 无参构造函数，</span><br><span class="line">  如果没有无参构造函数则不能创建成功。</span><br></pre></td></tr></table></figure>

<h4 id="Bean标签范围配置"><a href="#Bean标签范围配置" class="headerlink" title="Bean标签范围配置"></a>Bean标签范围配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>scope属性指对象的作用范围，取值如下：</p>
<table>
<thead>
<tr>
<th><strong>取值范围</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>singleton</strong></td>
<td>默认值，单例的</td>
</tr>
<tr>
<td><strong>prototype</strong></td>
<td>多例的</td>
</tr>
<tr>
<td>request</td>
<td>WEB项目中，Spring创建一个Bean的对象，将对象存入到request域中</td>
</tr>
<tr>
<td>session</td>
<td>WEB项目中，Spring创建一个Bean的对象，将对象存入到session域中</td>
</tr>
<tr>
<td>global session</td>
<td>WEB项目中，应用在Portlet环境，如果没有Portlet环境那么globalSession 相当于 session</td>
</tr>
</tbody></table>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 当scope的取值为singleton时 </span><br><span class="line"><span class="code">	Bean的实例化个数：1个 </span></span><br><span class="line"><span class="code">	Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例 </span></span><br><span class="line"><span class="code">	Bean的生命周期： </span></span><br><span class="line"><span class="code">		对象创建：当应用加载，创建容器时，对象就被创建了 </span></span><br><span class="line"><span class="code">		对象运行：只要容器在，对象一直活着 </span></span><br><span class="line"><span class="code">		对象销毁：当应用卸载，销毁容器时，对象就被销毁了 </span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="code">2. 当scope的取值为prototype时 </span></span><br><span class="line"><span class="code">	Bean的实例化个数：多个 </span></span><br><span class="line"><span class="code">	Bean的实例化时机：当调用getBean()方法时实例化</span></span><br><span class="line"><span class="code">	Bean Bean的生命周期： </span></span><br><span class="line"><span class="code">		对象创建：当使用对象时，创建新的对象实例 </span></span><br><span class="line"><span class="code">		对象运行：只要对象在使用中，就一直活着 </span></span><br><span class="line"><span class="code">		对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了</span></span><br></pre></td></tr></table></figure>

<h4 id="Bean生命周期配置"><a href="#Bean生命周期配置" class="headerlink" title="Bean生命周期配置"></a>Bean生命周期配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">* init-method：指定类中的初始化方法名称 </span><br><span class="line">* destroy-method：指定类中销毁方法名称</span><br></pre></td></tr></table></figure>

<h4 id="Bean实例化三种方式"><a href="#Bean实例化三种方式" class="headerlink" title="Bean实例化三种方式"></a>Bean实例化三种方式</h4><p>无参构造方法实例化<br>工厂静态方法实例化<br>工厂普通方法实例化</p>
<p><strong>无参构造方法实例化</strong></p>
<p>它会根据默认无参构造方法来创建类对象，如果bean中没有默认无参构造函数，将会创建失败</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;userDao&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.de.dao.impl.UserDaoImpl&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>



<p><strong>工厂静态方法实例化</strong></p>
<p>应用场景：A类中有静态方法m1，m1方法的返回值是B对象。<br>需求：B对象的创建权交给Spring的IOC容器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">daoFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.factory.daoFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> <strong>工厂普通方法实例化</strong></p>
<p>应用场景：A类中有普通非静态方法m1，m1方法的返回值是B对象。<br>需求：B对象的创建权交给Spring的IOC容器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">daoFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">getDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;daoFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.factory.daoFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;daoFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Bean依赖注入方式"><a href="#Bean依赖注入方式" class="headerlink" title="Bean依赖注入方式"></a>Bean依赖注入方式</h4><p><strong>依赖注入DI（Dependency Injection）</strong>：它是 Spring 框架核心 IOC 的具体实现。</p>
<p>在编写程序时，通过控制反转，把对象的创建交给了 Spring。对象创建时，对象的某些成员变量需要赋值。<br>例如：业务层会调用持久层。<br>那这种业务层和持久层的依赖关系，在使用 Spring 之后，就让 Spring 来维护了。</p>
<p><strong>有参构造方法注入</strong></p>
<p>在UserServiceImpl中创建有参构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置Spring容器调用有参构造时进行注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>set方法注入</strong></p>
<p>在UserServiceImpl中创建set方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置Spring容器调用set方法进行注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>P命名空间注入</strong></p>
<p>P命名空间注入本质也是set方法注入，但比起上述的set方法注入更加方便，主要体现在配置文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;-- 1，首先，需要引入P命名空间 --&gt;</span><br><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"></span><br><span class="line">&lt;-- 1，其次，需要修改注入方式 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.service.impl.UserServiceImpl&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">p:userDao-ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Bean依赖注入的数据类型"><a href="#Bean依赖注入的数据类型" class="headerlink" title="Bean依赖注入的数据类型"></a>Bean依赖注入的数据类型</h4><p>普通数据类型<br>引用数据类型<br>集合数据类型</p>
<p>下面将以set方法注入为例，演示各种数据类型的注入。</p>
<p><strong>注入普通数据类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三丰&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>注入引用数据类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>注入集合数据类型</strong></p>
<p>1）List集合注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）Set集合注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set set;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSet</span><span class="params">(Set set)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.set = set;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）Array数组注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] array;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArray</span><span class="params">(Object[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4）Map集合注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;k1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;k2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5）Properties配置注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k1&quot;</span>&gt;</span>v1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k2&quot;</span>&gt;</span>v2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置文件模块化"><a href="#配置文件模块化" class="headerlink" title="配置文件模块化"></a>配置文件模块化</h4><p>实际开发中，Spring的配置内容非常多，这就导致Spring配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，也就是所谓的<strong>配置文件模块化</strong>。 </p>
<p><strong>并列加载多个配置文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = </span><br><span class="line">    <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>, </span><br><span class="line">                                       <span class="string">&quot;applicationContext-xxx.xml&quot;</span>,</span><br><span class="line">                                       <span class="string">&quot;...&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>主配置文件导入从配置文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-xxx.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：<br>同一个xml中不能出现相同名称的bean,如果出现会报错<br>多个xml如果出现相同名称的bean，不会报错，但是后加载的会覆盖前加载的bean</p>
<h3 id="IOC实战"><a href="#IOC实战" class="headerlink" title="IOC实战"></a>IOC实战</h3><p>基于Spring的xml配置实现用户表的案例</p>
<p>1）准备数据库</p>
<p>2）创建项目，导入坐标，编写实体类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）编写UserDao接口和UserDaoImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQueryRunner</span><span class="params">(QueryRunner queryRunner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queryRunner = queryRunner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from user where id=?&quot;</span>;</span><br><span class="line">        User user = queryRunner.query(sql, <span class="keyword">new</span> BeanHandler&lt;User&gt;(User.class), id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）编写UserService接口和UserServiceImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span>  <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5）编写spring核心配置文件applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--把数据库连接池交给IOC容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm_test&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--把QueryRunner交给IOC容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;queryRunner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbutils.QueryRunner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;ds&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--把UserDao交给IOC容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;queryRunner&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;queryRunner&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--把UserService交给IOC容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6）测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext applicationContext = </span><br><span class="line">        <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line">    UserService userService = (UserService)applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        User user = userService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>优化</strong>：抽取jdbc配置文件</p>
<p>applicationContext.xml加载JDBC.properties配置文件获得连接信息。</p>
<p>首先，需要引入context命名空间和约束路径：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 命名空间： </span><br><span class="line"><span class="code">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot; </span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">* 约束路径： </span></span><br><span class="line"><span class="code">	http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="code">	http://www.springframework.org/schema/context/spring-context.xsd</span></span><br></pre></td></tr></table></figure>

<p>创建JDBC.properties文件，保存数据库连接信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_test</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>修改核心配置文件applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入JDBC.properties--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:JDBC.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--把数据库连接池交给IOC容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>小结</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> DataSource的创建权交由Spring容器去完成 </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> QueryRunner的创建权交由Spring容器去完成，使用构造方法传递DataSource </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> Spring容器加载properties文件 </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;xx.properties&quot;</span>/&gt;</span></span> </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;key&#125;&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h3><p>Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置文件可以简化配置，提高开发效率。</p>
<h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><p>Bean实例化（IOC）</p>
<table>
<thead>
<tr>
<th><strong>注解</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>@Component</strong></td>
<td>使用在类上用于实例化Bean</td>
</tr>
<tr>
<td><strong>@Controller</strong></td>
<td>使用在web层类上用于实例化Bean</td>
</tr>
<tr>
<td><strong>@Service</strong></td>
<td>使用在service层类上用于实例化Bean</td>
</tr>
<tr>
<td><strong>@Repository</strong></td>
<td>使用在dao层类上用于实例化Bean</td>
</tr>
</tbody></table>
<p>属性依赖注入（DI）<br>（JDK11以后完全移除了javax扩展导致不能使用@resource注解）</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>@Autowired</strong></td>
<td>使用在字段上用于根据类型依赖注入</td>
</tr>
<tr>
<td><strong>@Qualifier</strong></td>
<td>结合@Autowired一起使用,根据名称进行依赖注入</td>
</tr>
<tr>
<td><strong>@Resource</strong></td>
<td>相当于@Autowired+@Qualifier，按照名称进行注入</td>
</tr>
<tr>
<td><strong>@Value</strong></td>
<td>注入普通属性</td>
</tr>
</tbody></table>
<p>其他</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Scope</td>
<td>使用在类上标注Bean的范围</td>
</tr>
<tr>
<td>@PostConstruct</td>
<td>使用在方法上标注该方法是Bean的初始化方法</td>
</tr>
<tr>
<td>@PreDestroy</td>
<td>使用在方法上标注该方法是Bean的销毁方法</td>
</tr>
</tbody></table>
<p><strong>使用注解的准备工作</strong></p>
<p>需要maven引入依赖坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要在applicationContext.xml中配置组件扫描，<br>作用是指定哪个包及其子包下的Bean需要进行扫描以便识别使用注解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解的组件扫描--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.de&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Bean实例化（IOC）"><a href="#Bean实例化（IOC）" class="headerlink" title="Bean实例化（IOC）"></a>Bean实例化（IOC）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用@Compont或@Repository注解UserDaoImpl需要Spring进行实例化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="属性依赖注入（DI）"><a href="#属性依赖注入（DI）" class="headerlink" title="属性依赖注入（DI）"></a>属性依赖注入（DI）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;queryRunner&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;queryRunner&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用@Autowired或者@Autowired+@Qulifier或者@Resource进行userDao的注入<br>（可以不用编写set方法或构造方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//或者使用@Autowired+@Qulifier</span></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">	<span class="comment">//@Qualifier(&quot;queryRunner&quot;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//或者使用@Resource</span></span><br><span class="line">    <span class="comment">//@Resource(name = &quot;queryRunner&quot;)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>@Value</strong></p>
<p>使用@Value进行字符串的注入，结合SPEL表达式获得配置参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;你好呀&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><p><strong>@Scope</strong></p>
<p>使用@Scope标注Bean的范围</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">scope</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span> </span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>Bean生命周期</strong></p>
<p>使用@PostConstruct标注初始化方法，使用@PreDestroy标注销毁方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;初始化方法....&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreDestroy</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;销毁方法.....&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="整合IOC实战"><a href="#整合IOC实战" class="headerlink" title="整合IOC实战"></a>整合IOC实战</h4><p>使用注解整合上面的IOC实战</p>
<p>1）maven引入依赖坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改AccountDaoImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3）修改AccountServiceImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span>  <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）修改spring核心配置文件applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1，添加代码--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注解的组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.de&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2，删除代码--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--把UserDao交给IOC容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;queryRunner&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;queryRunner&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--把UserService交给IOC容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="新注解"><a href="#新注解" class="headerlink" title="新注解"></a>新注解</h3><p>使用上面的注解还不能全部替代xml配置文件，还需要使用注解替代的配置如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> Spring核心配置文件本身applicationContext.xml</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 非自定义的Bean的配置：<span class="xml"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span> </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 加载properties文件的配置：<span class="xml"><span class="tag">&lt;<span class="name">context:property-placeholder</span>&gt;</span></span> </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 组件扫描的配置：<span class="xml"><span class="tag">&lt;<span class="name">context:component-scan</span>&gt;</span></span> </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 引入其他文件：<span class="xml"><span class="tag">&lt;<span class="name">import</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>注解</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>@Configuration</td>
<td>用于指定当前类是一个Spring  配置类，当创建容器时会从该类上加载注解</td>
</tr>
<tr>
<td>@Bean</td>
<td>使用在方法上，标注将该方法的返回值存储到  Spring 容器中</td>
</tr>
<tr>
<td>@PropertySource</td>
<td>用于加载  properties 文件中的配置</td>
</tr>
<tr>
<td>@ComponentScan</td>
<td>用于指定  Spring 在初始化容器时要扫描的包</td>
</tr>
<tr>
<td>@Import</td>
<td>用于导入其他配置类</td>
</tr>
</tbody></table>
<p><strong>纯注解整合IOC实战</strong></p>
<p>1）编写Spring核心配置类SpringConfig.class，代替applicationContext.xl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(DataSourceConfig.class)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.de&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;queryRunner&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">getQueryRunner</span><span class="params">(<span class="meta">@Autowired</span> DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）编写数据库配置信息类DataSourceConfig.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:JDBC.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dirve;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;dataSource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(dirve);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3）测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext applicationContext = </span><br><span class="line">        <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">    UserService userService = (UserService)applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        User user = userService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Spring整合Junit"><a href="#Spring整合Junit" class="headerlink" title="Spring整合Junit"></a>Spring整合Junit</h3><p><strong>普通Junit测试问题</strong></p>
<p>在普通的测试类中，需要开发者手动加载配置文件并创建Spring容器，然后通过Spring相关API获得Bean实例；<br>如果不这么做，那么无法从容器中获得对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载Spring核心配置文件applicationContext.xml</span></span><br><span class="line">ApplicationContext applicationContext = </span><br><span class="line">        <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载Spring核心配置类SpringConfig.class</span></span><br><span class="line">ApplicationContext applicationContext = </span><br><span class="line">    <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">UserService userService = (UserService)applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br></pre></td></tr></table></figure>



<p><strong>Spring整合Junit</strong></p>
<p>1）导入spring集成Junit的坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此处需要注意的是，spring5 及以上版本要求 junit 的版本必须是 4.12 及以上--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）使用@Runwith注解替换原来的运行器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br></pre></td></tr></table></figure>

<p>3）使用@ContextConfiguration指定配置文件或配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载spring 核心配置文件</span></span><br><span class="line"><span class="meta">@ContextConfiguration(value=&quot;classpath:ApplicationContext.xml&quot;)</span></span><br><span class="line"><span class="comment">// 加载spring核心配置类</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes=&#123;SpringConfig.class&#125;)</span></span><br></pre></td></tr></table></figure>

<p>4）使用@Autowired注入需要测试的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(value=&quot;classpath:ApplicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        User user = userService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="转账案例"><a href="#转账案例" class="headerlink" title="转账案例"></a>转账案例</h3><p>1）创建项目，导入坐标，准备数据库，编写实体类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）编写AccountDao接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转出操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String username, <span class="keyword">int</span> money)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转入操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String username, <span class="keyword">int</span> money)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String username, <span class="keyword">int</span> money)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;update account set money=money-? where username=?&quot;</span>;</span><br><span class="line">        Object[] args=&#123;money,username&#125;;</span><br><span class="line">        queryRunner.update(sql,  args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String username, <span class="keyword">int</span> money)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update Account set money=money+? where username=?&quot;</span>;</span><br><span class="line">        Object[] args=&#123;money,username&#125;;</span><br><span class="line">        queryRunner.update(sql, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3）编写AccountService接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outUsername, String inUsername, <span class="keyword">int</span> money)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outUsername, String inUsername, <span class="keyword">int</span> money)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">            accountDao.out(outUsername, money);</span><br><span class="line">            accountDao.in(inUsername, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）编写spring核心配置文件applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入JDBC.properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:JDBC.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解的组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.de&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--把数据库连接池交给IOC容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--把QueryRunner交给IOC容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;queryRunner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbutils.QueryRunner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;ds&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5）测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(value=&quot;classpath:ApplicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        accountService.transfer(<span class="string">&quot;王二麻子&quot;</span>, <span class="string">&quot;老丁&quot;</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>问题</strong>：<br>上面的代码事务在dao层，转出转入操作都是一个独立的事务，但实际开发，应该把业务逻辑控制在一个事务中，所以应该将事务挪到service层。</p>
<h3 id="传统事务"><a href="#传统事务" class="headerlink" title="传统事务"></a>传统事务</h3><p>在上面的转账案例上添加事务。</p>
<p>1）编写线程绑定工具类，保证在同一线程下获取到同一个数据库连接对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取当前线程上的连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getThreadConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.先从ThreadLocal上获取连接</span></span><br><span class="line">        Connection connection = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span>(connection == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 2，第一次没有连接，就从数据源中获取一个连接，并存入到ThreadLocal中</span></span><br><span class="line">                connection = dataSource.getConnection();</span><br><span class="line">                threadLocal.set(connection);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解除当前线程的连接绑定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeThreadConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）编写事务管理器，事务相关操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启事物</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事物</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回滚事物</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//改回自动提交</span></span><br><span class="line">            connectionUtils.getThreadConnection().setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//归还线程到线程池</span></span><br><span class="line">            connectionUtils.getThreadConnection().close();</span><br><span class="line">            <span class="comment">//解除线程绑定</span></span><br><span class="line">            connectionUtils.removeThreadConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3）修改dao层代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1，依赖注入ConnectionUtils对象</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2，QueryRUnner执行sql时，第一个参数添加数据库连接对象，例如：</span></span><br><span class="line">queryRunner.update(connectionUtils.getThreadConnection(), sql,  args);</span><br></pre></td></tr></table></figure>

<p>4）修改service层代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1,依赖注入TransactionManager对象</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2，添加事务操作</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//1，开启事物</span></span><br><span class="line">    transactionManager.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2，业务操作(主要)</span></span><br><span class="line">    accountDao.out(outUsername, money);</span><br><span class="line">    accountDao.in(inUsername, money);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3，提交事务</span></span><br><span class="line">    transactionManager.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="comment">//4，有任意异常，回滚事物</span></span><br><span class="line">    transactionManager.rollback();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//5，释放资源</span></span><br><span class="line">    transactionManager.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>问题：</strong><br>上面代码，通过对业务层改造，已经可以实现事务控制了，但是由于我们添加了事务控制，也产生了一个新的问题： 业务层方法变得臃肿了，里面充斥着很多重复代码。并且业务层方法和事务控制方法耦合了，违背了面向对象的开发思想。</p>
<h3 id="Proxy优化转账案例"><a href="#Proxy优化转账案例" class="headerlink" title="Proxy优化转账案例"></a>Proxy优化转账案例</h3><p>我们可以将业务代码和事务代码进行拆分，通过动态代理的方式，对业务方法进行事务的增强。这样就不会对业务层产生影响，解决了耦合性的问题啦！</p>
<p><strong>JDK 代理 :</strong> </p>
<p>基于接口的动态代理技术·：利用拦截器（必须实现invocationHandler）加上反射机制生成一个代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理，从而实现方法增强</p>
<p><img src="https://pic.imgdb.cn/item/63004b1916f2c2beb199ed8e.jpg"></p>
<p><strong>CGLIB代理：</strong></p>
<p>基于父类的动态代理技术：动态生成一个要代理的子类，子类重写要代理的类的所有不是final的方法。在子类中采用方法拦截技术拦截所有的父类方法的调用，顺势织入横切逻辑，对方法进行增强</p>
<p><img src="https://pic.imgdb.cn/item/63004b5516f2c2beb19a0ca6.jpg"></p>
<h4 id="JDK动态代理方式"><a href="#JDK动态代理方式" class="headerlink" title="JDK动态代理方式"></a>JDK动态代理方式</h4><p>Jdk工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取代理对象，目标对象是accountService</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountService <span class="title">createAccountServiceJdkProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        AccountService accountServiceProxy = (AccountService) Proxy.newProxyInstance(</span><br><span class="line">                accountService.getClass().getClassLoader(),</span><br><span class="line">                accountService.getClass().getInterfaces(),</span><br><span class="line">                <span class="comment">//代理对象调用目标对象的方法时，会执行invoke方法</span></span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span>  <span class="comment">//匿名内部类</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] objects)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        Object result = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">//1,开启事物</span></span><br><span class="line">                            transactionManager.beginTransaction();</span><br><span class="line">                            <span class="comment">//2，业务操作</span></span><br><span class="line">                            result = method.invoke(accountService, objects);</span><br><span class="line">                            <span class="comment">//3，提交事物</span></span><br><span class="line">                            transactionManager.commit();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            <span class="comment">//4，回滚事务</span></span><br><span class="line">                            transactionManager.rollback();</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="comment">//5，释放资源</span></span><br><span class="line">                            transactionManager.release();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> accountServiceProxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    AccountService accountServiceJdkProxy = </span><br><span class="line">        jdkProxyFactory.createAccountServiceJdkProxy();</span><br><span class="line">    accountServiceJdkProxy.transfer(<span class="string">&quot;王二麻子&quot;</span>, <span class="string">&quot;老丁&quot;</span>, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CGLIB动态代理方式"><a href="#CGLIB动态代理方式" class="headerlink" title="CGLIB动态代理方式"></a>CGLIB动态代理方式</h4><p>Cglib工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountService <span class="title">createAccountServiceCglibProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//参数一：目标对象的字节码对象</span></span><br><span class="line">        <span class="comment">//参数二：动作类，实现增强功能</span></span><br><span class="line">        AccountService accountServiceCglibProxy =</span><br><span class="line">        (AccountService) Enhancer.create(accountService.getClass(), </span><br><span class="line">                                         <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object result = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//1,开启事物</span></span><br><span class="line">                    transactionManager.beginTransaction();</span><br><span class="line">                    <span class="comment">//2，业务操作</span></span><br><span class="line">                    result = method.invoke(accountService, objects);</span><br><span class="line">                    <span class="comment">//3，提交事物</span></span><br><span class="line">                    transactionManager.commit();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//4，回滚事务</span></span><br><span class="line">                    transactionManager.rollback();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//5，释放资源</span></span><br><span class="line">                    transactionManager.release();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> accountServiceCglibProxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    AccountService accountServiceCglibProxy = </span><br><span class="line">        cglibProxyFactory.createAccountServiceCglibProxy();</span><br><span class="line">    accountServiceCglibProxy.transfer(<span class="string">&quot;王二麻子&quot;</span>, <span class="string">&quot;老丁&quot;</span>, <span class="number">300</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="初识AOP"><a href="#初识AOP" class="headerlink" title="初识AOP"></a>初识AOP</h3><p>AOP 为 Aspect Oriented Programming 的缩写，意思为<strong>面向切面编程</strong></p>
<p>AOP 是 OOP（面向对象编程） 的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<p><strong>优点</strong></p>
<ol>
<li>在程序运行期间，在不修改源码的情况下对方法进行功能增强</li>
<li>逻辑清晰，开发核心业务的时候，不必关注增强业务的代码</li>
<li>减少重复代码，提高开发效率，便于后期维护</li>
</ol>
<p><strong>AOP底层实现</strong></p>
<p>实际上，AOP 的底层是通过 Spring 提供的的<strong>动态代理技术</strong>实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。</p>
<p><strong>AOP相关术语</strong></p>
<p>Spring 的 AOP 实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。</p>
<p>在正式讲解 AOP 的操作之前，我们必须理解 AOP 的相关术语，常用的术语如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Target（目标对象）：代理的目标对象 </span><br><span class="line"></span><br><span class="line">Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类 </span><br><span class="line"></span><br><span class="line">Joinpoint（连接点）：所谓连接点是指那些可以被拦截到的点。在spring中,这些点指的是方法，因为 spring只支持方法类型的连接点。即可以被增强的方法</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> Pointcut（切入点）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。即真正需要被增强的方法</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> Advice（通知/ 增强）：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知 分类：前置通知、后置通知、异常通知、最终通知、环绕通知。即增强的代码</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> Aspect（切面）：是切入点和通知（引介）的结合。即 真正需要被增强的方法 和 增强代码 的结合</span><br><span class="line"></span><br><span class="line">Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织 入，而AspectJ采用编译期织入和类装载期织入</span><br></pre></td></tr></table></figure>



<p><strong>AOP开发明确事项</strong></p>
<p> 1）开发阶段（我们做的）</p>
<ol>
<li>编写核心业务代码（目标类的目标方法） 切入点</li>
<li>把公用代码抽取出来，制作成通知（增强功能方法） 通知</li>
<li>在配置文件中，声明切入点与通知间的关系，即切面</li>
</ol>
<p>2）运行阶段（Spring框架完成的）<br>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p>
<p>3）底层代理实现<br>在 Spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。<br>当bean实现接口时，会用JDK代理模式。<br>当bean没有实现接口，用cglib实现。<br>可以强制使用cglib（在spring配置中加入<code>&lt;aop:aspectj-autoproxy proxyt-target-class=”true”/&gt;</code>）。</p>
<h3 id="基于XML的AOP开发"><a href="#基于XML的AOP开发" class="headerlink" title="基于XML的AOP开发"></a>基于XML的AOP开发</h3><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><p>1）创建java项目，导入AOP相关坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入spring的context坐标，context依赖aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- aspectj的织入（切点表达式需要用到该jar包） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring整合junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）创建目标接口和目标实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//真正需要被增强的方法，即切入点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//真正需要被增强的方法，即切入点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;转账业务。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3）创建通知类，即增强的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）在核心配置文件中配置织入关系，及切面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将目标类交给IOC容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将通知类交给IOC容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.advice.MyAdvice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置切面(切入点和通知结合)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入通知类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAdvice&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--配置目标类的方法执行时，使用通知类的方法进行增强--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution( public void 		com.de.service.impl.AccountServiceImpl.transfer() )&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:ApplicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountService.transfer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="XML配置AOP详解"><a href="#XML配置AOP详解" class="headerlink" title="XML配置AOP详解"></a>XML配置AOP详解</h4><p> <strong>切点表达式</strong></p>
<p>表达式语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">execution( [修饰符] 返回值类型 包名.类名.方法名(参数) )</span><br></pre></td></tr></table></figure>

<ul>
<li>访问修饰符可以省略</li>
<li>返回值类型、包名、类名、方法名可以使用星号 * 代替，代表任意</li>
<li>包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类</li>
<li>参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表</li>
</ul>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">execution(public void com.lagou.service.impl.AccountServiceImpl.transfer()) </span><br><span class="line"></span><br><span class="line">execution(void com.lagou.service.impl.AccountServiceImpl.*(..)) </span><br><span class="line"></span><br><span class="line">execution(* com.lagou.service.impl.*.*(..)) </span><br><span class="line"></span><br><span class="line">execution(* com.lagou.service..*.*(..))</span><br></pre></td></tr></table></figure>



<p><strong>切点表达式抽取</strong></p>
<p>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，<br>在增强中使用 pointcut-ref 属性代替pointcut 属性来引用抽取后的切点表达式。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAdvice&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--抽取的切点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.de.service..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置目标类的方法执行时，使用通知类的方法进行增强--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>通知类型</strong></p>
<p>通知的配置语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;aop:通知类型 method=“通知类中方法名” pointcut=“切点表达式&quot;/&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>标签</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>前置通知</td>
<td>aop:before</td>
<td>用于配置前置通知。指定增强的方法在切入点方法之前执行</td>
</tr>
<tr>
<td>后置通知</td>
<td>aop:afterReturning</td>
<td>用于配置后置通知。指定增强的方法在切入点方法之后执行</td>
</tr>
<tr>
<td>异常通知</td>
<td>aop:afterThrowing</td>
<td>用于配置异常通知。指定增强的方法出现异常后执行</td>
</tr>
<tr>
<td>最终通知</td>
<td>aop:after</td>
<td>用于配置最终通知。无论切入点方法执行时是否有异常，都会执行</td>
</tr>
<tr>
<td>环绕通知</td>
<td>aop:around</td>
<td>用于配置环绕通知。开发者可以手动控制增强代码在什么时候执行</td>
</tr>
</tbody></table>
<p>注意：通常情况下，环绕通知都是独立使用的</p>
<p>环绕通知</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123; <span class="comment">//参数相当于切入点</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;前置通知..&quot;</span>);</span><br><span class="line">            pjp.proceed();  <span class="comment">//执行切入点</span></span><br><span class="line">            System.out.println(<span class="string">&quot;后置通知..&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;异常通知&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;最终通知&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAdvice&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.de.service..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="基于注解的AOP开发"><a href="#基于注解的AOP开发" class="headerlink" title="基于注解的AOP开发"></a>基于注解的AOP开发</h3><h4 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h4><p>1）创建java项目，导入AOP相关坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入spring的context坐标，context依赖aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- aspectj的织入（切点表达式需要用到该jar包） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring整合junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2） 创建目标接口和目标实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;转账业务。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3） 创建通知类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//升级为切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.de.service..*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）在配置文件中开启组件扫描和 AOP 的自动代理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.de&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--aop的自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:ApplicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountService.transfer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注解配置AOP详解"><a href="#注解配置AOP详解" class="headerlink" title="注解配置AOP详解"></a>注解配置AOP详解</h4><p><strong>切点表达式</strong></p>
<p>切点表达式的抽取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//升级为切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽取切点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.de.service..*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPoint</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;MyAdvice.myPoint()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p> <strong>通知类型</strong></p>
<p>通知的配置语法：@通知注解(“切点表达式”)</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>标签</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>前置通知</td>
<td>@Before</td>
<td>用于配置前置通知。指定增强的方法在切入点方法之前执行</td>
</tr>
<tr>
<td>后置通知</td>
<td>@AfterReturning</td>
<td>用于配置后置通知。指定增强的方法在切入点方法之后执行</td>
</tr>
<tr>
<td>异常通知</td>
<td>@AfterThrowing</td>
<td>用于配置异常通知。指定增强的方法出现异常后执行</td>
</tr>
<tr>
<td>最终通知</td>
<td>@After</td>
<td>用于配置最终通知。无论切入点方法执行时是否有异常，都会执行</td>
</tr>
<tr>
<td>环绕通知</td>
<td>@Around</td>
<td>用于配置环绕通知。开发者可以手动控制增强代码在什么时候执行</td>
</tr>
</tbody></table>
<p>注意（有Bug）：<br>当前四个通知组合在一起时，执行顺序如下：<br>@Before -&gt; @After -&gt; @AfterReturning（如果有异常：@AfterThrowing）</p>
<h4 id="纯注解配置"><a href="#纯注解配置" class="headerlink" title="纯注解配置"></a>纯注解配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.de&quot;)</span> </span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">//替代 &lt;aop:aspectj-autoproxy/&gt; </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>小结</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 使用@Aspect注解，标注切面类 </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 使用@Before等注解，标注通知方法 </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 使用@Pointcut注解，抽取切点表达式 </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 配置aop自动代理 <span class="xml"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span> 或 @EnableAspectJAutoProxy</span><br></pre></td></tr></table></figure>

<h3 id="AOP优化转账案例"><a href="#AOP优化转账案例" class="headerlink" title="AOP优化转账案例"></a>AOP优化转账案例</h3><p>依然使用前面的转账案例，将两个代理工厂对象直接删除！改为spring的aop思想来实现</p>
<h4 id="xml配置实现"><a href="#xml配置实现" class="headerlink" title="xml配置实现"></a>xml配置实现</h4><p>1）service层代码相当于切入点，事务管理器相当于通知，交给IOC容器。</p>
<p>2）Spring核心配置文件，配置切面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--抽取切入点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPoint&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.de.service..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beginTransaction&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPoint&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;commit&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPoint&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;rollback&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPoint&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;release&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPoint&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注解配置实现"><a href="#注解配置实现" class="headerlink" title="注解配置实现"></a>注解配置实现</h4><p>1）service层代码相当于切入点，事务管理器相当于通知，交给IOC容器。</p>
<p>2）在配置文件中开启组件扫描和 AOP 的自动代理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解的组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.de&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--aop的自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）在事务管理器通知类中添加相应注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启事物beginTransaction()...省略</span></span><br><span class="line">    <span class="comment">//提交事物commit()...省略</span></span><br><span class="line">    <span class="comment">//回滚事物rollback()...省略</span></span><br><span class="line">    <span class="comment">//释放资源release()...省略</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.de.service..*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            beginTransaction();</span><br><span class="line">            pjp.proceed();</span><br><span class="line">            commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>JdbcTemplate是spring框架中提供的一个模板对象，是对原始繁琐的Jdbc API对象的简单封装。</p>
<p><strong>核心对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(DataSource dataSource);</span><br></pre></td></tr></table></figure>



<p><strong>核心方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(sql,args)</span></span>; 执行增、删、改语句 </span><br><span class="line">    </span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">query</span><span class="params">(sql, 封装对象, args)</span></span>; 查询多个 </span><br><span class="line"><span class="function">T <span class="title">queryForObject</span><span class="params">(sql, 封装对象， args)</span></span>; 查询一个 </span><br><span class="line">    </span><br><span class="line"><span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(); 实现ORM映射封装</span><br></pre></td></tr></table></figure>



<p><strong>例如</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(JdbcUtils.getDataSource()); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写sql </span></span><br><span class="line">String sql = <span class="string">&quot;select * from account&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行sql</span></span><br><span class="line">List&lt;Account&gt; list = </span><br><span class="line">    jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt; (Account.class));</span><br></pre></td></tr></table></figure>

<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><strong>案例</strong>：完成增删改查</p>
<p>1）创建java项目，导入坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）编写AccountDao接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">        List&lt;Account&gt; accountList = jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account.class));</span><br><span class="line">        <span class="keyword">return</span> accountList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;select * from account where id=?&quot;</span>;</span><br><span class="line">        Account account = jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account.class), id);</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;insert into account values (null, ?, ?)&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, account.getUsername(), account.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;update account set username=?,money=? where id=?&quot;</span>;</span><br><span class="line">        Object[] args = &#123;account.getUsername(), account.getMoney(), account.getId()&#125;;</span><br><span class="line">        jdbcTemplate.update(sql, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;delete from account where id=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3）编写AccountService接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.update(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        accountDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）编写spring核心配置文件applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--IOC注解扫描---&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.de&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入jdbc配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:JDBC.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建dataSource交给IOC--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建jdbcTemplate交给IOC--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(value=&quot;classpath:ApplicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; accountList = accountService.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accountList) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = accountService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setUsername(<span class="string">&quot;bob&quot;</span>);</span><br><span class="line">        account.setMoney(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        accountService.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(<span class="number">4</span>);</span><br><span class="line">        account.setUsername(<span class="string">&quot;jake&quot;</span>);</span><br><span class="line">        account.setMoney(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        accountService.update(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountService.delete(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring的事务"><a href="#Spring的事务" class="headerlink" title="Spring的事务"></a>Spring的事务</h2><p>Spring的事务控制可以分为编程式事务控制和声明式事务控制。</p>
<p><strong>编程式</strong><br>开发者直接把事务的代码和业务代码耦合到一起，在实际开发中不用。</p>
<p><strong>声明式</strong><br>开发者采用配置的方式来实现的事务控制，业务代码与事务代码实现解耦合，使用的AOP思想。</p>
<h3 id="编程式事务控制-了解"><a href="#编程式事务控制-了解" class="headerlink" title="编程式事务控制(了解)"></a>编程式事务控制(了解)</h3><h4 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h4><p>PlatformTransactionManager接口，是spring的事务管理器，里面提供了我们常用的操作事务的方法。</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>TransactionStatus getTransaction(TransactionDefinition  definition);</td>
<td>获取事务的状态信息</td>
</tr>
<tr>
<td>void commit(TransactionStatus status)；</td>
<td>提交事务</td>
</tr>
<tr>
<td>void rollback(TransactionStatus status)；</td>
<td>回滚事务</td>
</tr>
</tbody></table>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> PlatformTransactionManager 是接口类型，不同的 Dao 层技术则有不同的实现类。 </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> Dao层技术是jdbcTemplate或mybatis时： DataSourceTransactionManager </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> Dao层技术是hibernate时： HibernateTransactionManager </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> Dao层技术是JPA时： JpaTransactionManager</span><br></pre></td></tr></table></figure>

<h4 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h4><p>TransactionDefinition接口提供事务的定义信息（事务隔离级别、事务传播行为等等）</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>int getIsolationLevel()</td>
<td>获得事务的隔离级别</td>
</tr>
<tr>
<td>int getPropogationBehavior()</td>
<td>获得事务的传播行为</td>
</tr>
<tr>
<td>int getTimeout()</td>
<td>获得超时时间</td>
</tr>
<tr>
<td>boolean isReadOnly()</td>
<td>是否只读</td>
</tr>
</tbody></table>
<p>1）事务隔离级别</p>
<p>设置隔离级别，可以解决事务并发产生的问题，如脏读、不可重复读和虚读（幻读）。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> ISOLATION<span class="emphasis">_DEFAULT 使用数据库默认级别 </span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">* ISOLATION_</span>READ<span class="emphasis">_UNCOMMITTED 读未提交 </span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">* ISOLATION_</span>READ<span class="emphasis">_COMMITTED 读已提交 </span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">* ISOLATION_</span>REPEATABLE<span class="emphasis">_READ 可重复读 </span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">* ISOLATION_</span>SERIALIZABLE 串行化</span><br></pre></td></tr></table></figure>

<p>2）事务传播行为</p>
<p>事务传播行为指的就是当一个业务方法【被】另一个业务方法调用时，应该如何进行事务控制。</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>REQUIRED</strong></td>
<td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</td>
</tr>
<tr>
<td><strong>SUPPORTS</strong></td>
<td>支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</td>
</tr>
<tr>
<td>MANDATORY</td>
<td>使用当前的事务，如果当前没有事务，就抛出异常</td>
</tr>
<tr>
<td>REQUERS_NEW</td>
<td>新建事务，如果当前在事务中，把当前事务挂起</td>
</tr>
<tr>
<td>NOT_SUPPORTED</td>
<td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</td>
</tr>
<tr>
<td>NEVER</td>
<td>以非事务方式运行，如果当前存在事务，抛出异常</td>
</tr>
<tr>
<td>NESTED</td>
<td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行  REQUIRED  类似的操作</td>
</tr>
</tbody></table>
<p>3）timeout（超时时间）：默认值是-1，没有超时限制。如果有，以秒为单位进行设置</p>
<p>4）read-only（是否只读）：建议查询时设置为只读</p>
<h4 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h4><p>TransactionStatus 接口提供的是事务具体的运行状态。</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>boolean isNewTransaction()</td>
<td>是否是新事务</td>
</tr>
<tr>
<td>boolean hasSavepoint()</td>
<td>是否是回滚点</td>
</tr>
<tr>
<td>boolean isRollbackOnly()</td>
<td>事务是否回滚</td>
</tr>
<tr>
<td>boolean isCompleted()</td>
<td>事务是否完成</td>
</tr>
</tbody></table>
<p>可以简单的理解三者的关系：<br>事务管理器通过读取事务定义参数进行事务管理，然后会产生一系列的事务状态。</p>
<h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><p>1）配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务管理器交给IOC--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）业务层代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager transactionManager; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outUser, String inUser, Double money)</span> </span>&#123; </span><br><span class="line">        <span class="comment">// 创建事务定义对象 </span></span><br><span class="line">        DefaultTransactionDefinition def = <span class="keyword">new</span> DefaultTransactionDefinition(); </span><br><span class="line">        <span class="comment">// 设置是否只读，false支持事务 </span></span><br><span class="line">        def.setReadOnly(<span class="keyword">false</span>); </span><br><span class="line">        <span class="comment">// 设置事务隔离级别，可重复读mysql默认级别 </span></span><br><span class="line">        def.setIsolationLevel(TransactionDefinition.ISOLATION_REPEATABLE_READ); </span><br><span class="line">        <span class="comment">// 设置事务传播行为，必须有事务 </span></span><br><span class="line">        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED); </span><br><span class="line">        <span class="comment">// 配置事务管理器 </span></span><br><span class="line">        TransactionStatus status = transactionManager.getTransaction(def); </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 转账 </span></span><br><span class="line">            accountDao.out(outUser, money); </span><br><span class="line">            accountDao.in(inUser, money); </span><br><span class="line">            <span class="comment">// 提交事务 </span></span><br><span class="line">            transactionManager.commit(status); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">            <span class="comment">// 回滚事务 </span></span><br><span class="line">            transactionManager.rollback(status); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><p>Spring中的事务控制主要就是通过这三个API实现的</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> PlatformTransactionManager 负责事务的管理，它是个接口，其子类负责具体工作 </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> TransactionDefinition 定义了事务的一些相关参数 </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> TransactionStatus 代表事务运行的一个实时状态</span><br></pre></td></tr></table></figure>

<h3 id="基于XML声明式事务控制"><a href="#基于XML声明式事务控制" class="headerlink" title="基于XML声明式事务控制"></a>基于XML声明式事务控制</h3><p>在 Spring 配置文件中声明式的处理事务来代替代码式的处理事务。底层采用AOP思想来实现的。</p>
<h4 id="快速入门-2"><a href="#快速入门-2" class="headerlink" title="快速入门"></a>快速入门</h4><p>需求：使用spring基于XML声明式事务控制Service层。</p>
<p>1）引入tx命名空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）事务管理器通知配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--把事务管理器交给IOC容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--通知增强，事物通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义事物属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）事务管理器AOP配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--aop切面配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPoint&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.de.service..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPoint&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="事务参数的配置详解"><a href="#事务参数的配置详解" class="headerlink" title="事务参数的配置详解"></a>事务参数的配置详解</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">* name：切点方法名称 </span><br><span class="line">* isolation:事务的隔离级别 </span><br><span class="line">* propogation：事务的传播行为 </span><br><span class="line">* timeout：超时时间 </span><br><span class="line">* read-only：是否只读</span><br></pre></td></tr></table></figure>

<p>CRUD常用配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="基于注解声明式事务控制"><a href="#基于注解声明式事务控制" class="headerlink" title="基于注解声明式事务控制"></a>基于注解声明式事务控制</h3><p>需求：使用spring基于注解声明式事务控制Service层。</p>
<h4 id="常用注解-1"><a href="#常用注解-1" class="headerlink" title="常用注解"></a>常用注解</h4><p>1）修改service层，增加事务注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事务通知注解</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED, </span></span><br><span class="line"><span class="meta">                   isolation = Isolation.REPEATABLE_READ, </span></span><br><span class="line"><span class="meta">                   timeout = -1, readOnly = false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outUsername, String inUsername, <span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        accountDao.out(outUsername, money);</span><br><span class="line">        accountDao.in(inUsername, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）修改spring核心配置文件，开启事务注解支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--把事务管理器交给IOC容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.de&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--事务的注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="纯注解"><a href="#纯注解" class="headerlink" title="纯注解"></a>纯注解</h4><p>核心配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 声明为spring核心配置类 </span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.lagou&quot;)</span> <span class="comment">// 扫描包 </span></span><br><span class="line"><span class="meta">@Import(DataSourceConfig.class)</span> <span class="comment">// 导入其他配置类 </span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 事务的注解驱动 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">(<span class="meta">@Autowired</span> DataSource dataSource)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(&quot;transactionManager&quot;)</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">getPlatformTransactionManager</span><span class="params">(<span class="meta">@Autowired</span> DataSource dataSource)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring集成web环境"><a href="#Spring集成web环境" class="headerlink" title="Spring集成web环境"></a>Spring集成web环境</h2><h4 id="ApplicationContext应用上下文获取方式"><a href="#ApplicationContext应用上下文获取方式" class="headerlink" title="ApplicationContext应用上下文获取方式"></a>ApplicationContext应用上下文获取方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = </span><br><span class="line">    <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line">AccountService accountService = </span><br><span class="line">    (AccountService) applicationContext.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">accountService.transfer(<span class="string">&quot;王二麻子&quot;</span>, <span class="string">&quot;老丁&quot;</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>应用上下文对象是通过 new ClasspathXmlApplicationContext(spring配置文件) 方式获取的，但<br>是每次从容器中获得Bean时都要编写 new ClasspathXmlApplicationContext(spring配置文件) ，<br>这样的弊端是配置文件加载多次，应用上下文对象创建多次。</p>
<p> <strong>解决思路分析：</strong></p>
<p>在Web项目中，可以使用<strong>ServletContextListener</strong>监听Web应用的启动，我们可以在Web应用启动时，就加载Spring的配置文件，创建应用上下文对象<strong>ApplicationContext</strong>，在将其存储到最大的域<strong>servletContext</strong>域中，这样就可以在任意位置从域中获得应用上下文<strong>ApplicationContext</strong>对象了。</p>
<h4 id="Spring提供获取应用上下文的工具"><a href="#Spring提供获取应用上下文的工具" class="headerlink" title="Spring提供获取应用上下文的工具"></a>Spring提供获取应用上下文的工具</h4><p>上面的分析不用手动实现，Spring提供了一个监听器<strong>ContextLoaderListener</strong>就是对上述功能的封装，该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到<strong>ServletContext</strong>域中，提供了一个客户端工具<strong>WebApplicationContextUtils</strong>供使用者获得应用上下文对象。</p>
<p>所以我们需要做的只有两件事：</p>
<ol>
<li>在web.xml中配置ContextLoaderListener监听器（导入spring-web坐标）</li>
<li>使用WebApplicationContextUtils获得应用上下文对象ApplicationContext</li>
</ol>
<p><strong>实现</strong></p>
<p>1）导入Spring集成web的坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）在web.xml中配置ContextLoaderListener监听器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--全局参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:ApplicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Spring的监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span> org.springframework.web.context.ContextLoaderListener </span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）使用WebApplicationContextUtils获得应用上下文对象ApplicationContext</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WebApplicationContext webApplicationContext = </span><br><span class="line">    WebApplicationContextUtils.getWebApplicationContext(request.getServletContext());</span><br><span class="line">AccountService accountService = </span><br><span class="line">    (AccountService)webApplicationContext.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">accountService.transfer(<span class="string">&quot;王二麻子&quot;</span>, <span class="string">&quot;老丁&quot;</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>MVC模式</strong></p>
<p>MVC是软件工程中的一种软件架构模式，它是一种分离业务逻辑与显示界面的开发思想。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> M（model）模型：处理业务逻辑，封装实体 </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> V（view） 视图：展示内容 </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> C（controller）控制器：负责调度分发（1.接收请求、2.调用模型、3.转发到视图）</span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/631e887916f2c2beb1e03d78.jpg"></p>
<p><strong>SpringMVC概述</strong></p>
<p>SpringMVC 是一种基于 Java 的实现 MVC 设计模式的轻量级 Web 框架，属于SpringFrameWork 的<br>后续产品，已经融合在 Spring Web Flow 中。</p>
<p>SpringMVC 已经成为目前最主流的MVC框架之一，并且随着Spring3.0 的发布，全面超越 Struts2，<br>成为最优秀的 MVC 框架。它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现<br>任何接口。同时它还支持 RESTful 编程风格的请求。</p>
<p><img src="https://pic.imgdb.cn/item/631e88de16f2c2beb1e0866d.jpg"></p>
<p>总结：SpringMVC的框架就是封装了原来Servlet中的共有行为；例如：参数封装，视图转发等。</p>
<h2 id="入门-1"><a href="#入门-1" class="headerlink" title="入门"></a>入门</h2><p>需求：客户端发起请求，服务器接收请求，执行逻辑并进行视图跳转。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">流程：</span><br><span class="line"><span class="bullet">1.</span> 创建web项目，导入SpringMVC相关坐标 </span><br><span class="line"><span class="bullet">2.</span> 配置SpringMVC前端控制器 DispathcerServlet </span><br><span class="line"><span class="bullet">3.</span> 编写Controller类和视图页面 </span><br><span class="line"><span class="bullet">4.</span> 使用注解配置Controller类中业务方法的映射地址 </span><br><span class="line"><span class="bullet">5.</span> 配置SpringMVC核心文件 spring-mvc.xml</span><br></pre></td></tr></table></figure>

<p>1）创建web项目，pom.xml文件导入SpringMVC相关坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置为web工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springMVC坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--servlet坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--jsp坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）web.xml文件配置SpringMVC前端控制器DispathcerServlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载spingMVC核心配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目启动时，创建前端控制器，而不是访问时创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）编写Controller类和视图页面</p>
<p>RequestTestController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>   <span class="comment">//创建实例，交给IOC</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/quick&quot;)</span>  <span class="comment">//访问地址映射</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">quick</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;quick running ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/success.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>/WEB-INF/success.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>请求成功<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    &lt;% System.out.println(&quot;返回视图页面成功！&quot;); %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4）配置SpringMVC核心文件spring-mvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.de.Controller&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>测试，tomcat启动项目，浏览器访问地址</p>
<p>web工程执行流程</p>
<p><img src="https://pic.imgdb.cn/item/631e8c9916f2c2beb1e3a447.jpg"></p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p><strong>SpringMVC的执行流程</strong></p>
<p><img src="https://pic.imgdb.cn/item/631e8d4616f2c2beb1e451b8.jpg"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 用户发送请求至前端控制器DispatcherServlet。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> DispatcherServlet收到请求调用HandlerMapping处理器映射器。 </span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如 果有则生成)一并返回给DispatcherServlet。 </span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> DispatcherServlet调用HandlerAdapter处理器适配器。</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。 </span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> Controller执行完成返回ModelAndView。 </span><br><span class="line"></span><br><span class="line"><span class="bullet">7.</span> HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</span><br><span class="line"></span><br><span class="line"><span class="bullet">8.</span> DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</span><br><span class="line"></span><br><span class="line"><span class="bullet">9.</span> ViewReslover解析后返回具体View。 </span><br><span class="line"></span><br><span class="line"><span class="bullet">10.</span> DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。 </span><br><span class="line"></span><br><span class="line"><span class="bullet">11.</span> DispatcherServlet将渲染后的视图响应响应用户。</span><br></pre></td></tr></table></figure>



<p> <strong>SpringMVC组件解析</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 前端控制器：DispatcherServlet 用户请求到达前端控制器，它就相当于 MVC 模式中的 C，DispatcherServlet 是整个流程控制的 中心，由它调用其它组件处理用户的请求，DispatcherServlet 的存在降低了组件之间的耦合性。 </span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 处理器映射器：HandlerMapping HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器 实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。 </span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 处理器适配器：HandlerAdapter 通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型 的处理器进行执行。 </span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 处理器：Handler【<span class="strong">**开发者编写**</span>】 它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由Handler 对具体的用户请求进行处理。 </span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 视图解析器：ViewResolver View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物 理视图名，即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给 用户。 </span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> 视图：View 【<span class="strong">**开发者编写**</span>】 SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、 pdfView等。最常用的视图就是 jsp。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展 示给用户，需要由程序员根据业务需求开发具体的页面。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">提问：springmvc中的三大组件是什么？</span><br><span class="line">处理器映射器、处理器适配器、视图解析器</span><br></pre></td></tr></table></figure>

<p>在SpringMVC核心文件 spring-mvc.xml中，可根据需求配置组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.de.Controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理器映射器和处理器适配器功能增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--返回字符串方式返回jsp视图时，视图解析器会自动拼接前缀和后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="注解解析"><a href="#注解解析" class="headerlink" title="注解解析"></a>注解解析</h2><p><strong>@Controller</strong></p>
<p>SpringMVC基于Spring容器，使用@Controller注解标注类上，将Controller存储到Spring的IOC容器中，但是需要添加注解扫描。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.de.Controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>@RequestMapping</strong></p>
<p>作用：用于建立请求 URL 和处理请求方法之间的对应关系</p>
<p>使用位置：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 1.类上：请求URL的第一级访问目录。此处不写的话，就相当于应用的根目录。写的话需要以/开头。 </span><br><span class="line"><span class="code">	它出现的目的是为了使我们的URL可以按照模块化管理: </span></span><br><span class="line"><span class="code">		用户模块/user/add, /user/update, /user/delete ... </span></span><br><span class="line"><span class="code">		账户模块/account/add, /account/update, /account/delete ...</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 2.方法上：请求URL的第二级访问目录，和一级目录组成一个完整的 URL 路径。</span><br></pre></td></tr></table></figure>

<p>属性：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 1.value：用于指定请求的URL。它和path属性的作用是一样的 </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 2.method：用来限定请求的方式 </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 3.params：用来限定请求参数的条件 例如：params=&#123;&quot;accountName&quot;&#125; 表示请求参数中必须有accountName, params=&#123;&quot;money!100&quot;&#125; 表示请求参数中money不能是100</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>   <span class="comment">//创建实例，交给IOC</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/requestTest&quot;)</span>  <span class="comment">//一级目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二级目录， 请求方法为get， 必须携带请求参数username</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/quick&quot;, method= RequestMethod.GET, params=&#123;&quot;username&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">quick</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;quick running ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;  <span class="comment">//视图解析器会拼接配置的前缀和后缀</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="中文乱码过滤器"><a href="#中文乱码过滤器" class="headerlink" title="中文乱码过滤器"></a>中文乱码过滤器</h3><p>当post请求时，数据会出现乱码，web.xml中设置一个过滤器来进行编码的过滤。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置全局过滤的filter，解决乱码问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="请求参数类型"><a href="#请求参数类型" class="headerlink" title="请求参数类型"></a>请求参数类型</h3><p>客户端请求参数的格式是：<code>name=value&amp;name=value……</code></p>
<p>服务器要获取请求的参数的时候会进行类型转换，有时还会进行数据的封装</p>
<p>SpringMVC可以接收如下类型的参数：</p>
<ul>
<li>基本类型参数</li>
<li>对象类型参数</li>
<li>数组类型参数</li>
<li>集合类型参数</li>
</ul>
<h3 id="获取基本类型参数"><a href="#获取基本类型参数" class="headerlink" title="获取基本类型参数"></a>获取基本类型参数</h3><p>Controller中的业务方法的参数名称要与请求参数的name一致，参数值会自动映射匹配。</p>
<p>并且能自动做类型转换；自动的类型转换是指从String向其他类型的转换。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/requestTest/test?id=1&amp;username=杰克&quot;</span>&gt;</span><br><span class="line">    访问</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/requestTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="keyword">int</span> id, String username)</span></span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取对象类型参数"><a href="#获取对象类型参数" class="headerlink" title="获取对象类型参数"></a>获取对象类型参数</h3><p>Controller中的业务方法参数的POJO属性名与请求参数的name一致，参数值会自动映射匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//User实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer id;</span><br><span class="line">    <span class="keyword">public</span> String username;</span><br><span class="line">	<span class="comment">// setter getter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/requestTest/test&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;id&quot;</span>&gt;   &lt;br/&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;  &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;访问&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/requestTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取数组类型参数"><a href="#获取数组类型参数" class="headerlink" title="获取数组类型参数"></a>获取数组类型参数</h3><p>Controller中的业务方法数组名称与请求参数的name一致，参数值会自动映射匹配。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/requestTest/test&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    编号：&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;ids&quot;</span> value=<span class="string">&quot;1&quot;</span>&gt;<span class="number">1</span></span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;ids&quot;</span> value=<span class="string">&quot;2&quot;</span>&gt;<span class="number">2</span></span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;ids&quot;</span> value=<span class="string">&quot;3&quot;</span>&gt;<span class="number">3</span></span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;访问&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/requestTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestController</span> </span>&#123;    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="keyword">int</span>[] ids)</span></span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(ids));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="集合-复杂-类型参数"><a href="#集合-复杂-类型参数" class="headerlink" title="集合(复杂)类型参数"></a>集合(复杂)类型参数</h3><p>获得集合参数时，要将集合参数包装到一个POJO中才可以。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//复杂的实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; userMap;</span><br><span class="line">	<span class="comment">// setter getter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/requestTest/test&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    基本类型：</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;str&quot;</span>&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    user对象：</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user.id&quot;</span> placeholder=<span class="string">&quot;编号&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user.username&quot;</span> placeholder=<span class="string">&quot;姓名&quot;</span>&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    list对象：&lt;br&gt;</span><br><span class="line">    第一个元素：</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[0].id&quot;</span> placeholder=<span class="string">&quot;编号&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[0].username&quot;</span> placeholder=<span class="string">&quot;姓名&quot;</span>&gt;</span><br><span class="line">    第二个元素：</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[1].id&quot;</span> placeholder=<span class="string">&quot;编号&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[1].username&quot;</span> placeholder=<span class="string">&quot;姓名&quot;</span>&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    map对象：&lt;br&gt;</span><br><span class="line">    第一个元素：</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userMap[&#x27;u1&#x27;].id&quot;</span> placeholder=<span class="string">&quot;编号&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userMap[&#x27;u1&#x27;].username&quot;</span> placeholder=<span class="string">&quot;姓名&quot;</span>&gt;</span><br><span class="line">    第一个元素：</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userMap[&#x27;u2&#x27;].id&quot;</span> placeholder=<span class="string">&quot;编号&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userMap[&#x27;u2&#x27;].username&quot;</span> placeholder=<span class="string">&quot;姓名&quot;</span>&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;访问&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/requestTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestController</span> </span>&#123;    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(QueryVo queryVo)</span></span>&#123;</span><br><span class="line">        System.out.println(queryVo);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><p>SpringMVC 默认已经提供了一些常用的类型转换器；例如：客户端提交的字符串转换成int型进行参数设置，<br>日期格式类型要求为：yyyy/MM/dd 不然的话会报错，对于特有的行为，SpringMVC提供了自定义类型转换器方便开发者自定义处理。</p>
<p>问题：SpringMVC会自动转换类型，但是请求参数的日期格式类型要求为yyyy/MM/dd，否则报错<br>要求：现在自定义类型转换器，请求参数的日期格式类型为yyyy-MM-dd</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义类型转换器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;String, Date&gt;泛型表示，由String类型转换成Data类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = sdf.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringMVC核心配置文件配置--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--处理器映射器和处理器适配器功能增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置自定义转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.de.Converter.DateConverter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/requestTest/test&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    生日：&lt;input type=<span class="string">&quot;text&quot;</span>  name=<span class="string">&quot;birthday&quot;</span> placeholder=<span class="string">&quot;格式为yyyy-MM-dd&quot;</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;访问&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/requestTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestController</span> </span>&#123;   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Date birthday)</span></span>&#123;</span><br><span class="line">        System.out.println(birthday);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="相关注解"><a href="#相关注解" class="headerlink" title="相关注解"></a>相关注解</h3><p><strong>@RequestParam</strong></p>
<p>当请求的参数name名称与Controller的业务方法参数名称不一致时，就需要通过@RequestParam注解显示的绑定</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/requestTest/test?uid=1&quot;</span>&gt;</span><br><span class="line">    访问</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@RequestParam() 注解 </span></span><br><span class="line"><span class="comment">name 匹配页面请求参数的名称</span></span><br><span class="line"><span class="comment">defaultValue 设置参数默认值  </span></span><br><span class="line"><span class="comment">required 设置是否必须传递参数，默认值为true；如果设置了默认值，值自动改为false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/requestTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestController</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">( <span class="meta">@RequestParam(name=&quot;uid&quot;, defaultValue=&quot;0&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>@RequestHeader</strong></p>
<p>获取请求头的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/requestTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestController</span> </span>&#123;     </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@RequestHeader(&quot;cookie&quot;)</span> String cookie)</span></span>&#123;</span><br><span class="line">        System.out.println(cookie);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>@CookieValue</strong></p>
<p>获取cookie中的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/requestTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestController</span> </span>&#123;     </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">( <span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String cookieValue)</span></span>&#123;</span><br><span class="line">        System.out.println(cookieValue);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取Servlet相关API"><a href="#获取Servlet相关API" class="headerlink" title="获取Servlet相关API"></a>获取Servlet相关API</h3><p>SpringMVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/requestTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestController</span> </span>&#123;   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="params"><span class="function">                        HttpServletResponse response, HttpSession session)</span></span>&#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        System.out.println(session);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><h3 id="SpringMVC响应方式介绍"><a href="#SpringMVC响应方式介绍" class="headerlink" title="SpringMVC响应方式介绍"></a>SpringMVC响应方式介绍</h3><p>页面跳转</p>
<ol>
<li>返回字符串逻辑视图</li>
<li>转发和重定向（void原始ServletAPI）</li>
<li>转发和重定向（返回字符串关键字）</li>
<li>返回ModelAndView</li>
</ol>
<p>返回数据</p>
<ol>
<li>直接返回字符串数据</li>
<li>将对象或集合转为json返回（任务二演示）</li>
</ol>
<h3 id="返回字符串逻辑视图"><a href="#返回字符串逻辑视图" class="headerlink" title="返回字符串逻辑视图"></a>返回字符串逻辑视图</h3><p>直接返回字符串：此种方式会将返回的字符串与视图解析器的前后缀拼接后跳转到指定页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/responseTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseTestController</span> </span>&#123;    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转发和重定向（void原始ServletAPI）"><a href="#转发和重定向（void原始ServletAPI）" class="headerlink" title="转发和重定向（void原始ServletAPI）"></a>转发和重定向（void原始ServletAPI）</h3><p>void原始ServletAPI实现转发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/responseTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseTestController</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="params"><span class="function">                      HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/success.jsp&quot;</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>void原始ServletAPI实现重定向</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/responseTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseTestController</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="params"><span class="function">                      HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        response.sendRedirect(request.getContextPath() + <span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转发和重定向（返回字符串关键字）"><a href="#转发和重定向（返回字符串关键字）" class="headerlink" title="转发和重定向（返回字符串关键字）"></a>转发和重定向（返回字符串关键字）</h3><p>此方式的转发和重定向不经过视图解析器，所以不会拼接视图的前缀和后缀。</p>
<p>返回字符串关键字forward实现转发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/responseTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseTestController</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/WEB-INF/success.jsp&quot;</span>;</span><br><span class="line">        <span class="comment">//既可以转发到jsp页面，也可以转发到其他的控制器的方法。</span></span><br><span class="line">        <span class="comment">//return &quot;forward:/responseTest/test5&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回字符串关键字redirect实现重定向</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/responseTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseTestController</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="返回ModelAndView"><a href="#返回ModelAndView" class="headerlink" title="返回ModelAndView"></a>返回ModelAndView</h3><p>1，在Controller中方法创建并返回ModelAndView对象，并且设置视图名称</p>
<p>2，在Controller中方法形参上直接声明ModelAndView，无需在方法中自己创建，在方法中直接使用该对象设置视图，同样可以跳转页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/responseTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseTestController</span> </span>&#123;     </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test</span><span class="params">(ModelAndView modelAndView)</span></span>&#123;</span><br><span class="line">        <span class="comment">//ModelAndView modelAndView = new ModelAndView();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置模型数据</span></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        <span class="comment">//设置视图名称，会经过视图解析器</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="直接返回字符串数据"><a href="#直接返回字符串数据" class="headerlink" title="直接返回字符串数据"></a>直接返回字符串数据</h3><p>Servlet相关API实现直接返回字符串数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/responseTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseTestController</span> </span>&#123;    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;&lt;h1 style=&#x27;color:red;&#x27;&gt;返回数据了哦!&lt;h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Model和-SessionAttributes"><a href="#Model和-SessionAttributes" class="headerlink" title="Model和@SessionAttributes"></a>Model和@SessionAttributes</h3><p><strong>Model</strong></p>
<p>在Controller中方法形参上直接声明Model对象，<code>model.addAttribute()</code>为model设置属性，相当于往request域中设置属性。同一request域(转发)可共享该数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/responseTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseTestController</span> </span>&#123;    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//往request域中设置‘username’属性为‘张三’</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/WEB-INF/success.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@SessionAttributes</strong></p>
<p>上述的Model对象，可以为request域设置属性，如果session域需要设置属性就借助@SessionAttributes。</p>
<p>@SessionAttributes只能定义在类上，作用：向request域存入的某属性时，同步到session域中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/responseTest&quot;)</span></span><br><span class="line"><span class="meta">@SessionAttributes(&quot;username&quot;)</span>  <span class="comment">//向request域存入的key为username时，同步到session域中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseTestController</span> </span>&#123;    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态资源访问的开启"><a href="#静态资源访问的开启" class="headerlink" title="静态资源访问的开启"></a>静态资源访问的开启</h2><p>当有静态资源需要加载时，比如jquery文件，通过谷歌开发者工具抓包发现，没有加载到jquery文件，原因是SpringMVC的前端控制器DispatcherServlet的url-pattern配置的是 /（缺省）,代表对所有的静态资源都进行处理操作，这样就不会执行Tomcat内置的DefaultServlet处理，我们可以通过以下两种方式指定放行静态资源：</p>
<p>方式一：放行指定的静态资源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在springmvc配置文件中指定放行资源--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  表示：以/js/**这样的路径，直接去访问/js/下的资源  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/img/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/img/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式二：放行全部静态资源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在springmvc配置文件中开启DefaultServlet处理静态资源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="ajax异步交互"><a href="#ajax异步交互" class="headerlink" title="ajax异步交互"></a>ajax异步交互</h2><p>Springmvc默认用MappingJackson2HttpMessageConverter对json数据进行转换，需要加入jackson的包；<br>1，导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，在SpringMVC核心文件 spring-mvc.xml中，配置处理器映射器和处理器适配器功能增强</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理器映射器和处理器适配器功能增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><p>该注解用于Controller的方法的形参声明，当使用ajax提交并指定contentType为json形式时，通过HttpMessageConverter接口转换为对应的POJO对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>ajax异步请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> url = <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/ajaxTest/test&quot;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> data = <span class="string">&#x27;[&#123;&quot;id&quot;:1,&quot;username&quot;:&quot;张三&quot;&#125;,&#123;&quot;id&quot;:2,&quot;username&quot;:&quot;王五&quot;&#125;]&#x27;</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>:url,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:data,</span></span><br><span class="line"><span class="javascript">            <span class="attr">contentType</span>:<span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(resp)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ajaxTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span></span>&#123;</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><p>该注解用于Controller的方法上，用于将Controller的方法返回的对象，通过HttpMessageConverter接口转换为指定格式的数据如：json,xml等，通过Response响应给客户端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ajaxTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span>  <span class="comment">//表示返回json数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">test</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span></span>&#123;</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Restful是一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。</p>
<p>Restful风格的请求是使用“url+请求方式”表示一次请求目的的，HTTP 协议里面四个表示操作方式的动</p>
<p>词如下：<br>GET：读取（Read）<br>POST：新建（Create）<br>PUT：更新（Update）<br>DELETE：删除（Delete）</p>
<table>
<thead>
<tr>
<th><strong>客户端请求</strong></th>
<th><strong>原来风格URL地址</strong></th>
<th><strong>RESTful风格URL地址</strong></th>
</tr>
</thead>
<tbody><tr>
<td>查询所有</td>
<td>/user/findAll</td>
<td>GET请求    /user</td>
</tr>
<tr>
<td>根据ID查询</td>
<td>/user/findById?id=1</td>
<td>GET请求   /user/{1}</td>
</tr>
<tr>
<td>新增</td>
<td>/user/save</td>
<td>POST请求    /user</td>
</tr>
<tr>
<td>修改</td>
<td>/user/update</td>
<td>PUT请求    /user</td>
</tr>
<tr>
<td>删除</td>
<td>/user/delete?id=1</td>
<td>DELETE请求    /user/{1}</td>
</tr>
</tbody></table>
<h3 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a><strong>相关API</strong></h3><p><strong>@PathVariable</strong></p>
<p>用来接收RESTful风格请求地址中占位符的值</p>
<p><strong>@RestController</strong></p>
<p>RESTful风格多用于前后端分离项目开发，前端通过ajax与服务器进行异步交互，我们处理器通常返<br>回的是json数据所以使用@RestController来替代@Controller和@ResponseBody两个注解。</p>
<p><strong>其他注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="comment">//可以简写成</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="comment">//可以简写成</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="comment">//可以简写成</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="comment">//可以简写成</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//等等。。</span></span><br></pre></td></tr></table></figure>

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>需求：用RESTful对user增删改查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  <span class="comment">//@Controller + @ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;findAll...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span> </span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;findById:&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;save..&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update..&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;delete:&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>文件上传三要素</strong></p>
<ul>
<li>表单项 type=”file”</li>
<li>表单的提交方式 method=”POST”</li>
<li>表单的enctype属性是多部分表单形式 enctype=“multipart/form-data”</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6323e57916f2c2beb1b48ac6.jpg"></p>
<p><strong>文件上传原理</strong></p>
<p>当form表单的enctype取值为 application/x-www-form-urlencoded 时，<br>form表单的正文内容格式是： name=value&amp;name=value</p>
<p>当form表单修改为多部分表单时，request.getParameter()将失效。</p>
<p>当form表单的enctype取值为 mutilpart/form-data 时，请求正文内容就变成多部分形式：</p>
<p><img src="https://pic.imgdb.cn/item/6323ece316f2c2beb1c06623.jpg"></p>
<h3 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h3><p>pom.xml导入fileupload和io依赖坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   上传文件     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>spring-mvc.xml配置文件上传解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设定文件上传的最大值为5MB，5*1024*1024 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5242880&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设定文件上传时写入内存的最大值，如果小于这个参数不会生成临时文件，默认为10240 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>前端</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/fileUpload&quot;</span></span><br><span class="line">      method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    姓名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    文件:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;filePic&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传单文件&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>Controlle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/fileUpload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(String username, MultipartFile filePic)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        String filename = filePic.getOriginalFilename();</span><br><span class="line">        <span class="comment">//保存文件</span></span><br><span class="line">        filePic.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;D:/abc/&quot;</span>+filename));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><p>前端</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/filesUpload&quot;</span></span><br><span class="line">      method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    姓名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>/&gt;</span><br><span class="line">    文件<span class="number">1</span>:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;filePics&quot;</span>/&gt;</span><br><span class="line">    文件<span class="number">2</span>:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;filePics&quot;</span>/&gt;</span><br><span class="line">    文件<span class="number">3</span>:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;filePics&quot;</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传多文件&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>Controlle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/filesUpload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fliesUpload</span><span class="params">(String username, MultipartFile[] filePics)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (MultipartFile filePic : filePics) &#123;</span><br><span class="line">            <span class="comment">//获取文件名</span></span><br><span class="line">            String filename = filePic.getOriginalFilename();</span><br><span class="line">            <span class="comment">//保存文件</span></span><br><span class="line">            filePic.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;D:/abc/&quot;</span> + filename));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>在Java中，对于异常的处理一般有两种方式:</p>
<ul>
<li>一种是当前方法捕获处理（try-catch），这种处理方式会造成业务代码和异常处理代码的耦合。</li>
<li>另一种是自己不处理，而是抛给调用者处理（throws），调用者再抛给它的调用者，也就是一直向上抛。<br>在这种方法的基础上，衍生出了SpringMVC的异常处理机制。</li>
</ul>
<p>系统的dao、service、controller出现都通过throws Exception向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理，如下图：</p>
<p><img src="https://pic.imgdb.cn/item/6326891616f2c2beb106da7d.jpg"></p>
<h3 id="自定义异常处理器"><a href="#自定义异常处理器" class="headerlink" title="自定义异常处理器"></a>自定义异常处理器</h3><p>1，创建异常处理器类实现HandlerExceptionResolver</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExpectionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;error&quot;</span>, e.getMessage());</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2，编写异常页面error.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;错误信息：$&#123;error&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>3，spring-mvc.xml配置异常处理器，即创建权交给IOC容器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;globalExpectionResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.de.exception.GlobalExpectionResolver&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExpectionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">	.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4，测试异常跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="web的处理异常机制"><a href="#web的处理异常机制" class="headerlink" title="web的处理异常机制"></a>web的处理异常机制</h3><p>在web.xml中配置各种错误状态码跳转到不同的jsp页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理500异常--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">location</span>&gt;</span>/500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--处理404异常--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>Spring MVC 的拦截器类似于 Servlet 开发中的过滤器 Filter，用于对处理器进行预处理和后处理。</p>
<p>将拦截器按一定的顺序联结成一条链，这条链称为拦截器链（InterceptorChain）。<br>在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。拦截器也是AOP思想的体实现。</p>
<p><strong>拦截器和过滤器区别</strong></p>
<p><img src="https://pic.imgdb.cn/item/63268fd116f2c2beb10dbb45.jpg"></p>
<h3 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h3><p>1，创建拦截器类实现HandlerInterceptor接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标方法执行之前 执行，返回值为是否放行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Interceptor的preHandle执行了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标方法执行之后,视图对象返回之前 执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Interceptor的postHandle执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在流程都执行完毕后 执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Interceptor的afterCompletion执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2，spring-mvc.xml中配置拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.de.Interceptor.Interceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3，测试拦截器的拦截效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法执行了。。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">访问路径时会被拦截器拦截，执行流程如下：</span><br><span class="line"></span><br><span class="line">放行的情况：</span><br><span class="line">拦截器的preHandle方法执行，并且放行 --&gt;</span><br><span class="line">目标方法执行  --&gt;</span><br><span class="line">拦截器的postHandle方法执行 --&gt;</span><br><span class="line">目标方法返回视图页面 --&gt;</span><br><span class="line">拦截器的afterCompletion方法执行</span><br><span class="line"></span><br><span class="line">不放行的情况：</span><br><span class="line">拦截器的preHandle方法执行，并且不放行 --&gt; 结束</span><br></pre></td></tr></table></figure>

<h3 id="拦截器链"><a href="#拦截器链" class="headerlink" title="拦截器链"></a>拦截器链</h3><p>开发中拦截器可以单独使用，也可以同时使用多个拦截器形成一条拦截器链。<br>开发步骤和单个拦截器是一样的，只不过注册的时候注册多个，注意这里注册的顺序就代表拦截器执行的顺序。</p>
<p>例如三个拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 拦截器1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.de.Interceptor.Interceptor1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截器2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.de.Interceptor.Interceptor2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截器3 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.de.Interceptor.Interceptor3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>拦截流程：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">访问路径时会被拦截器拦截链，执行流程如下：</span><br><span class="line"></span><br><span class="line">放行的情况：</span><br><span class="line">拦截器1的preHandle方法执行，并且放行 --&gt;</span><br><span class="line">拦截器2的preHandle方法执行，并且放行 --&gt;</span><br><span class="line">拦截器3的preHandle方法执行，并且放行 --&gt;</span><br><span class="line">目标方法执行  --&gt;</span><br><span class="line">拦截器3的postHandle方法执行 --&gt;</span><br><span class="line">拦截器2的postHandle方法执行 --&gt;</span><br><span class="line">拦截器1的postHandle方法执行 --&gt;</span><br><span class="line">目标方法返回视图页面 --&gt;</span><br><span class="line">拦截器3的afterCompletion方法执行 --&gt;</span><br><span class="line">拦截器2的afterCompletion方法执行 --&gt;</span><br><span class="line">拦截器1的afterCompletion方法执行 --&gt;</span><br><span class="line"></span><br><span class="line">不放行的情况：</span><br><span class="line">拦截器1的preHandle方法执行，并且放行 --&gt;</span><br><span class="line">拦截器2的preHandle方法执行，并且不放行 --&gt;</span><br><span class="line">拦截器1的afterCompletion方法执行</span><br></pre></td></tr></table></figure>

<h1 id="整合ssm"><a href="#整合ssm" class="headerlink" title="整合ssm"></a>整合ssm</h1><p>需求：使用ssm框架完成对 account 表的增删改查操作。</p>
<p>步骤:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 准备数据库和表记录, 创建web项目  </span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 编写mybatis在ssm环境中可以单独使用 </span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 编写spring在ssm环境中可以单独使用 </span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> spring整合mybatis </span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 编写springMVC在ssm环境中可以单独使用 </span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> spring整合springMVC</span><br></pre></td></tr></table></figure>

<h2 id="编写mybatis在ssm环境中可以单独使用"><a href="#编写mybatis在ssm环境中可以单独使用" class="headerlink" title="编写mybatis在ssm环境中可以单独使用"></a>编写mybatis在ssm环境中可以单独使用</h2><p>需求：基于mybatis先来实现对account表的查询</p>
<p>1，导入相关坐标依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，Account实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line">	<span class="comment">// get和set方法.........</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3，AccountDao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有账户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4，AccountDao.xml映射文件（路径格式要与AccountDao接口一致）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.de.dao.AccountDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">        select * from account</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5，mybatis核心配置文件</p>
<p>JDBC.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_test</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>SqlMapConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;JDBC.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--类型别名配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.de.domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--环境变量配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用MySQL环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.de.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6，测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    AccountDao mapper = sqlSession.getMapper(AccountDao.class);</span><br><span class="line">    List&lt;Account&gt; accountList = mapper.findAll();</span><br><span class="line"></span><br><span class="line">    System.out.println(accountList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写spring在ssm环境中可以单独使用"><a href="#编写spring在ssm环境中可以单独使用" class="headerlink" title="编写spring在ssm环境中可以单独使用"></a>编写spring在ssm环境中可以单独使用</h2><p>1，导入相关坐标依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，AccountService层的接口和实现类</p>
<p>AccountService接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AccountServiceImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;fingAll执行了。。。。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3，spring核心配置文件applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot; http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.de.Service&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4，代码测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; accountList = accountService.findAll();</span><br><span class="line">        System.out.println(accountList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="spring整合mybatis"><a href="#spring整合mybatis" class="headerlink" title="spring整合mybatis"></a>spring整合mybatis</h2><p>整合思想：</p>
<p>将mybatis接口代理对象的创建权交给spring管理，我们就可以把dao的代理对象注入到service中，此时也就完成了spring与mybatis的整合了。</p>
<p>1，导入整合的相关坐标依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis整合spring坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，spring核心配置文件applicationContext.xml，管理mybatis。<br>（此时可以将mybatis主配置文件SqlMapConfig.xml删除）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring整合Mybatis--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:JDBC.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--SqlSessionFactory创建交给spring的IOC容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库环境配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--类型别名配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.de.domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果需要，也可以引入mybatis主配置文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;configLocation&quot; value=&quot;classpath:SqlMapConfig.xml&quot;/&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--加载映射文件：映射接口扫描配置，由spring创建代理对象，交给IOC容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.de.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3，修改AccountServiceImpl，可以直接注入AccountDao的代理对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4，代码测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; accountList = accountService.findAll();</span><br><span class="line">        System.out.println(accountList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写springMVC在ssm环境中可以单独使用"><a href="#编写springMVC在ssm环境中可以单独使用" class="headerlink" title="编写springMVC在ssm环境中可以单独使用"></a>编写springMVC在ssm环境中可以单独使用</h2><p>需求：访问到controller里面的方法查询所有账户，并跳转到list.jsp页面进行列表展示</p>
<p>1，导入相关坐标依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--springMVC坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，导入web项目</p>
<p><img src="https://pic.imgdb.cn/item/632801a616f2c2beb15c0fa0.jpg"></p>
<p>3，web.xml中导入前端控制器DispathcerServlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--过滤器：解决post中文处理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4，springMVC核心配置文件spring-mvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.de.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理器映射器和处理器适配器功能增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--实现静态资源映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5，AccountController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Account&gt; accountList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        accountList.add(<span class="keyword">new</span> Account(<span class="number">1</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">300</span>));</span><br><span class="line">        accountList.add(<span class="keyword">new</span> Account(<span class="number">2</span>,<span class="string">&quot;jack&quot;</span>,<span class="number">400</span>));</span><br><span class="line">        </span><br><span class="line">        model.addAttribute(<span class="string">&quot;accountList&quot;</span>, accountList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6， /WEB-INF/list.jsp页面</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;余额&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;修改操作&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;accountList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;account&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;account.id&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;account.username&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;account.money&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/account/findById?id=$&#123;account.id&#125;&quot;</span>&gt;修改&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<p>7，测试代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动tomcat服务器，访问：项目地址/account/findAll</span><br></pre></td></tr></table></figure>

<h2 id="spring整合springMVC"><a href="#spring整合springMVC" class="headerlink" title="spring整合springMVC"></a>spring整合springMVC</h2><p>整合思想</p>
<p>spring和springMVC其实根本就不用整合，本来就是一家。</p>
<p>但是我们需要做到spring和web项目整合，让web项目启动的时候自动加载spring配置文件，web项目销毁的时候spring的ioc容器也销毁。</p>
<p>1，spring和web项目整合，在web.xml中添加ContextLoaderListener监听器<br>可以使用spring-web包中的ContextLoaderListener监听器，可以监听servletContext容器的创建和销毁，来同时创建或销毁IOC容器。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring 与 web容器整合--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置监听器：启动项目时，加载Spring核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，修改AccountController，可以直接注入AccountService对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Account&gt; accountList = accountService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;accountList&quot;</span>, accountList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3，测试代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动tomcat服务器，访问：项目地址/account/findAll</span><br></pre></td></tr></table></figure>

<h2 id="spring配置声明式事务"><a href="#spring配置声明式事务" class="headerlink" title="spring配置声明式事务"></a>spring配置声明式事务</h2><p>1，spring核心配置文件applicationContext.xml配置事务</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开启事务注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2，可以用事务注解@Transactional，标注在需要事务的处理器类上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="meta">@Transactional</span>   <span class="comment">//事务注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
      <tags>
        <tag>javaWeb</tag>
        <tag>Mybatis</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
</search>
