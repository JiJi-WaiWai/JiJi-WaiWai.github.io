<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><span id="more"></span>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Scrapy框架</title>
    <url>/2021/09/07/Scrapy%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>写一个爬虫，需要做很多事情。比如：发送网络请求、数据解析、数据存储、反反爬虫机制（更换IP代理、设置请求头等）、异步请求等。这些工作如果每次都要写的话，比较浪费时间。因此Scrapy把一些基础东西封装好了，提高爬取效率和开发效率。</p>
<span id="more"></span>



<p>Scrapy官方文档：<a href="http://doc.scrapy.org/en/latest">http://doc.scrapy.org/en/latest</a></p>
<p>Scrapy中文文档：<a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html">http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html</a></p>
<p><strong>安装</strong>:</p>
<p>pip install scrapy</p>
<p>可能会出现的问题：</p>
<p>1,在windos系统下，提示错误ModuleNotFoundError:No module nmed ‘win32api’，那么先使用命令安装：pip install pypiwin32</p>
<p>2,如果安装时提示twisted安装有问题，那么先到这个网站下载twisted的whl文件：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/%EF%BC%8C%E6%A0%B9%E6%8D%AE%E8%87%AA%E5%B7%B1%E7%9A%84python%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E3%80%82%E4%B8%8B%E8%BD%BD%E5%AE%8C%E5%90%8E%EF%BC%8C%E5%86%8D%E4%BD%BF%E7%94%A8pip">https://www.lfd.uci.edu/~gohlke/pythonlibs/，根据自己的python版本下载。下载完后，再使用pip</a> install xxx.whl安装刚刚下载的文件。</p>
<h1 id="Scrapy框架架构介绍："><a href="#Scrapy框架架构介绍：" class="headerlink" title="Scrapy框架架构介绍："></a>Scrapy框架架构介绍：</h1><ol>
<li>Scrapy Engine（引擎）：Scrapy框架的核心部分。负责在Spider和ItemPipeline、Downloader、Scheduler中间通信、传递数据等。</li>
<li>Spider（爬虫）：发送需要爬取的链接给引擎，最后引擎把其他模块请求回来的数据再发送给爬虫，爬虫就去解析想要的数据。这个部分是我们开发者自己写的，因为要爬取哪些链接，页面中的哪些数据是需要的，都是由程序员自己决定。</li>
<li>Scheduler（调度器）：负责接收引擎发送过来的请求，并按照一定的方式进行排列和整理，负责调度请求的顺序等。</li>
<li>Downloader（下载器）：负责接收引擎传过来的下载请求，然后去网络上下载对应的数据再交还给引擎。</li>
<li>Item Pipeline（管道）：负责将Spider（爬虫）传递过来的数据进行保存。具体保存在哪里，应该看开发者自己的需求。</li>
<li>Downloader Middlewares（下载中间件）：可以扩展下载器和引擎之间通信功能的中间件。</li>
<li>Spider Middlewares（Spider中间件）：可以扩展引擎和爬虫之间通信功能的中间件。</li>
</ol>
<p><strong>工作流程：</strong></p>
<p><a href="https://imgtu.com/i/hIxYRI"><img src="https://z3.ax1x.com/2021/09/07/hIxYRI.png" alt="hIxYRI.png"></a></p>
<h1 id="创建项目："><a href="#创建项目：" class="headerlink" title="创建项目："></a>创建项目：</h1><p>用cmd创建项目，先进入到项目存放的目录。</p>
<p>1，创建项目：<br>scrapy startproject [项目名称]</p>
<p>2，进入项目，然后创建爬虫：<br>scrapy genspider [爬虫名称] [爬虫的作用域名]</p>
<p><strong>目录结构介绍</strong>：</p>
<p>items.py：用来存放爬虫爬取下来的数据的模型</p>
<p>middlewares.py：用来存放各种中间件的文件</p>
<p>pipelines.py：用来将items的模型存储到本地磁盘中</p>
<p>settings.py：本爬虫的一些配置信息（比如请求头、多久发送一次请求、ip代理池等）</p>
<p>scrapy.cfg：项目的配置文件</p>
<p>spiders包：以后所有的爬虫，对是存放到这个里面</p>
<h1 id="实战-古诗文网爬虫实战："><a href="#实战-古诗文网爬虫实战：" class="headerlink" title="实战-古诗文网爬虫实战："></a>实战-古诗文网爬虫实战：</h1><p>先在settings.py文件中配置：</p>
<ul>
<li><p>将ROBOTSTXT_OBEY改为False，表示不遵守机器人协议</p>
</li>
<li><p>在DEFAULT_REQUEST_HEADERS里添加请求头信息</p>
</li>
<li><p>ITEM_PIPELINES设置pipelines.py的优先级</p>
</li>
</ul>
<p>在cmd中输入命令：scrapy crawl [爬虫名称]，运行指定爬虫。每次都cmd手动输入会很麻烦，所以在项目中新建一个py文件，内容如下。运行该文件就相当于在cmd中输入了相关命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行该文件，相当于运行爬虫</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line">cmds = [<span class="string">&quot;scrapy&quot;</span>, <span class="string">&quot;crawl&quot;</span>, <span class="string">&quot;gsww_spider&quot;</span>]</span><br><span class="line">cmdline.execute(cmds)</span><br></pre></td></tr></table></figure>

<p>编写代码时，每次print打印时，会有大量其他不相关内容，因此分辨不清，所以自己定义了一个myprint方法，用myprint打印内容方便观察，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<h2 id="各文件代码如下："><a href="#各文件代码如下：" class="headerlink" title="各文件代码如下："></a>各文件代码如下：</h2><p>爬虫文件代码(gsww_spider)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> GswwItem  <span class="comment">#导入item模型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GswwSpiderSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;gsww_spider&#x27;</span>  <span class="comment">#爬虫名称</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;gushiwen.cn&#x27;</span>]   <span class="comment">#爬虫的作用域名</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.gushiwen.cn/default_1.aspx&#x27;</span>]   <span class="comment">#爬虫爬取的初始url</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span>   <span class="comment">#主要内容在这里面编写</span></span><br><span class="line">        bList = response.xpath(<span class="string">&quot;//div[@class=&#x27;left&#x27;]/div[@class=&#x27;sons&#x27;]/div[@class=&#x27;cont&#x27;]//b&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> bList:</span><br><span class="line">            title = b.xpath(<span class="string">&quot;./text()&quot;</span>).get()   <span class="comment">#标题</span></span><br><span class="line">            cont = b.xpath(<span class="string">&quot;..&quot;</span>).xpath(<span class="string">&quot;..&quot;</span>).xpath(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">            source = cont.xpath(<span class="string">&quot;./p[@class=&#x27;source&#x27;]/a/text()&quot;</span>).getall()</span><br><span class="line">            author = source[<span class="number">0</span>]   <span class="comment">#作者</span></span><br><span class="line">            dynasty = source[<span class="number">1</span>]  <span class="comment">#朝代</span></span><br><span class="line">            content = cont.xpath(<span class="string">&quot;./div[@class=&#x27;contson&#x27;]//text()&quot;</span>).getall()</span><br><span class="line">            content = <span class="string">&quot;&quot;</span>.join(content).strip()   <span class="comment">#内容</span></span><br><span class="line">            item = GswwItem(title=title, author=author, dynasty=dynasty, content=content)</span><br><span class="line">            <span class="keyword">yield</span> item    <span class="comment">#每次yield item，将item传入pipelines.py文件并调用,表示存储数据</span></span><br><span class="line">            </span><br><span class="line">        url = response.xpath(<span class="string">&quot;//a[@id=&#x27;amore&#x27;]/@href&quot;</span>).get()</span><br><span class="line">        <span class="comment">#response.urljoin(url)  域名+指定的url</span></span><br><span class="line">        <span class="keyword">if</span> url:</span><br><span class="line">            request = scrapy.Request(url)</span><br><span class="line">            <span class="keyword">yield</span> request   <span class="comment">#每次yield request，会重新调用所在的parse方法，表示发送请求</span></span><br></pre></td></tr></table></figure>

<p>items.py文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://docs.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GswwItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    dynasty = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br></pre></td></tr></table></figure>

<p>pipelines.py文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># useful for handling different item types with a single interface</span></span><br><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GswwPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span>   <span class="comment">#爬虫开始时调用，用于打开文件</span></span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&quot;古诗文.csv&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        self.writer = csv.writer(self.fp)</span><br><span class="line">        self.writer.writerow([<span class="string">&quot;title&quot;</span>, <span class="string">&quot;author&quot;</span>, <span class="string">&quot;dynasty&quot;</span>, <span class="string">&quot;content&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span>  <span class="comment">#存储数据操作放在该方法中</span></span><br><span class="line">        item_dict = <span class="built_in">dict</span>(item)</span><br><span class="line">        title = item_dict[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">        author = item_dict[<span class="string">&quot;author&quot;</span>]</span><br><span class="line">        dynasty = item_dict[<span class="string">&quot;dynasty&quot;</span>]</span><br><span class="line">        content = item_dict[<span class="string">&quot;content&quot;</span>]</span><br><span class="line">        self.writer.writerow([title, author, dynasty, content])</span><br><span class="line">        <span class="keyword">return</span> item   <span class="comment">#必须要</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span>   <span class="comment">#爬虫结束时调用，用于关闭文件</span></span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong><br> .xpath()，返回的都是SelectorList对象<br>SelectorList.getall()，直接获取里面指定的值，是个列表<br>SelectorList.get()，直接获取里面指定的第一个的值</p>
<h1 id="CrawlSpider爬虫"><a href="#CrawlSpider爬虫" class="headerlink" title="CrawlSpider爬虫"></a>CrawlSpider爬虫</h1><p>之前使用的spider，请求完url后，想要继续请求url需要自己手动yield request。创建方法：scrapy genspider [爬虫名称] [爬虫的作用域名]。</p>
<p>CrawlSpider继承spider，但是有新的功能。可以自己定义url规则，当scrapy碰到满足规则的url时，自动去访问该url，而不需要手动yield request。创建方法：scrapy genspider -t crawl  [爬虫名称] [爬虫的作用域名]。</p>
<h2 id="定义url规则"><a href="#定义url规则" class="headerlink" title="定义url规则"></a>定义url规则</h2><p>在rules中写规则。</p>
<h3 id="Rule规则类："><a href="#Rule规则类：" class="headerlink" title="Rule规则类："></a>Rule规则类：</h3><p>Rule(link_extractor, callback=None, follow=None, process_links=None)</p>
<p>主要参数讲解：</p>
<p>1，link_extractor： 一个LinkExtractor对象，用于定义爬取规则。</p>
<p>2，callback：满足规则的url，需要执行哪个回调函数。</p>
<p>3，follow：在访问的url中，如果还有符合规则的url，需不需要跟进（即继续访问）</p>
<p>4，process_links：从link_extractor中获取到链接后会传递给这个函数，用来过滤不需要访问的链接。</p>
<h3 id="LinkExtractors链接提取器："><a href="#LinkExtractors链接提取器：" class="headerlink" title="LinkExtractors链接提取器："></a>LinkExtractors链接提取器：</h3><p>主要参数讲解：</p>
<p>allow：允许的url，所有满足该正则表达式的url都会被提取。</p>
<p>deny：禁止的url，所有满足该正则表达式的url都不会被提取。</p>
<p>allow_domains：允许的域名，只有在该域名下的url才会被提取。</p>
<p>deny_domains：禁止的域名，在该域名下的url都不会被提取。</p>
<p>restrict_xpaths：严格的xpath。和allow共同过滤链接。指定某个xpath规定的范围内的url。</p>
<h2 id="实战-猎云网爬虫："><a href="#实战-猎云网爬虫：" class="headerlink" title="实战-猎云网爬虫："></a>实战-猎云网爬虫：</h2><p>要求：使用CrawlSpider爬虫爬取，然后异步保存到mysql数据库</p>
<p>网站：<a href="https://www.lieyunwang.com/">https://www.lieyunwang.com/</a></p>
<p>步骤：</p>
<p>创建项目，创建CrawlSpider，在settings.py文件中更改配置信息</p>
<ul>
<li>将ROBOTSTXT_OBEY改为False，表示不遵守机器人协议</li>
<li>在DEFAULT_REQUEST_HEADERS里添加请求头信息</li>
<li>ITEM_PIPELINES设置pipelines.py的优先级</li>
</ul>
<p>爬虫文件(gsww_spider)代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> LywItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;lyw_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;lieyunwang.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.lieyunwang.com/&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">	<span class="comment">#定义的规则</span></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;latest/p\d+\.html&#x27;</span>), follow=<span class="literal">True</span>),</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;archives/\d+&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">False</span>),</span><br><span class="line">        <span class="comment"># Rule(LinkExtractor(allow=r&#x27;latest/p1\.html&#x27;), follow=True),</span></span><br><span class="line">        <span class="comment"># Rule(LinkExtractor(allow=r&#x27;archives/477777&#x27;), callback=&#x27;parse_item&#x27;, follow=False),</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        title = response.xpath(<span class="string">&quot;//h1[@class=&#x27;lyw-article-title-inner&#x27;]/text()&quot;</span>).getall()</span><br><span class="line">        title = <span class="string">&#x27;&#x27;</span>.join(title).strip()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            date = response.xpath(<span class="string">&quot;//div[@id=&#x27;main-text-id&#x27;]/p[1]//text()&quot;</span>).getall()[<span class="number">2</span>]</span><br><span class="line">            date = re.search(<span class="string">&#x27;】(.+)报道&#x27;</span>, date).group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            date = <span class="string">&quot;NULL&quot;</span></span><br><span class="line">        content = response.xpath(<span class="string">&quot;//div[@id=&#x27;main-text-id&#x27;]//text()&quot;</span>).getall()</span><br><span class="line">        content = <span class="string">&#x27;&#x27;</span>.join(content).strip()</span><br><span class="line">        origin = response.url</span><br><span class="line"></span><br><span class="line">        item = LywItem(title=title, date=date, content=content, origin=origin)</span><br><span class="line">        <span class="keyword">return</span> item   <span class="comment">#这里可以不使用yield item.</span></span><br></pre></td></tr></table></figure>

<p>item.py 文件代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    date = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br><span class="line">    origin = scrapy.Field()</span><br></pre></td></tr></table></figure>

<p>1，正常保存到mysql数据库，没有使用异步</p>
<p>pipelines.py文件代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#正常不使用异步保存到mysql数据库</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.con = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;root&quot;</span>, database=<span class="string">&quot;de&quot;</span>, charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">        self.cursor = self.con.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        insert into lyw_info (title, the_date, content, origin) value (%s, %s, %s, %s)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        args = (item[<span class="string">&quot;title&quot;</span>], item[<span class="string">&quot;date&quot;</span>], item[<span class="string">&quot;content&quot;</span>], item[<span class="string">&quot;origin&quot;</span>])</span><br><span class="line">        self.cursor.execute(sql, args)</span><br><span class="line">        self.con.commit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.con.close()</span><br></pre></td></tr></table></figure>

<p>2，使用异步，保存到mysql数据库</p>
<p><strong>异步操作数据库的方法</strong>：</p>
<ul>
<li>使用<code>twisted.enterprise.adbapi</code>来创建连接池ConnectionPool。</li>
<li>连接池使用<code>runInteraction</code>函数来运行执行sql语句的函数。</li>
<li>执行sql语句的函数中，第一个非self参数是cursor对象，使用该对象的execute执行sql语句。</li>
</ul>
<p><strong>实际步骤</strong>：</p>
<p>先在settings.py文件中配置数据库信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MYSQL_CONFIG = &#123;</span><br><span class="line">    <span class="string">&#x27;DRIVER&#x27;</span>: <span class="string">&#x27;pymysql&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DATABASE&#x27;</span>: <span class="string">&#x27;de&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CHARSET&#x27;</span>: <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后pipelines.py文件代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.enterprise <span class="keyword">import</span> adbapi</span><br><span class="line"></span><br><span class="line"><span class="comment">##异步保存到mysql数据库</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LywPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, mysql_config</span>):</span></span><br><span class="line">        <span class="comment"># 1,创建连接池，配置好数据库。</span></span><br><span class="line">        self.dbPoll = adbapi.ConnectionPool(</span><br><span class="line">            mysql_config[<span class="string">&quot;DRIVER&quot;</span>],</span><br><span class="line">            host=mysql_config[<span class="string">&#x27;HOST&#x27;</span>],</span><br><span class="line">            port=mysql_config[<span class="string">&#x27;PORT&#x27;</span>],</span><br><span class="line">            user=mysql_config[<span class="string">&quot;USER&quot;</span>],</span><br><span class="line">            password=mysql_config[<span class="string">&quot;PASSWORD&quot;</span>],</span><br><span class="line">            database=mysql_config[<span class="string">&#x27;DATABASE&#x27;</span>],</span><br><span class="line">            charset=mysql_config[<span class="string">&#x27;CHARSET&#x27;</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="comment">#只要重写了该from_crawler类方法，创建对象的时候，会自动掉用该方法获取pipeline对象。</span></span><br><span class="line">    <span class="comment">#这里用来获取保存在settings.py中的数据库配置信息,mysql_config。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls,crawler</span>):</span></span><br><span class="line">        mysql_config = crawler.settings[<span class="string">&quot;MYSQL_CONFIG&quot;</span>]</span><br><span class="line">        <span class="keyword">return</span> cls(mysql_config)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="comment">#2，使用`runInteraction`函数来运行执行sql语句的函数，还可以传递参数给执行sql语句的函数，比如item</span></span><br><span class="line">        self.dbPoll.runInteraction(self.inset_item, item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inset_item</span>(<span class="params">self,cursor,item</span>):</span></span><br><span class="line">        <span class="comment">#3，该函数为执行sql语句的函数。第一个非self参数是cursor对象，item参数是`runInteraction`函数传递过来的。</span></span><br><span class="line">        sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        insert into lyw_info (title, the_date, content, origin) value (%s,%s,%s,%s)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        args = (item[<span class="string">&#x27;title&#x27;</span>], item[<span class="string">&#x27;date&#x27;</span>], item[<span class="string">&#x27;content&#x27;</span>], item[<span class="string">&#x27;origin&#x27;</span>])</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        <span class="comment">#关闭连接池</span></span><br><span class="line">        self.dbPoll.close()</span><br></pre></td></tr></table></figure>



<p>出现的问题点：scrapy运行正常，pipeline管道经过测试是没有运行的。判断已经主要是并没有创建设置的IMAGES_STORE<br>提前指出解决的办法，主要是没有依赖处理图片的第三库pillow</p>
<p>pip install -i <a href="https://pypi.doubanio.com/simple/">https://pypi.doubanio.com/simple/</a> –trusted-host pypi.doubanio.com pillow</p>
<h1 id="scrapy下载图片"><a href="#scrapy下载图片" class="headerlink" title="scrapy下载图片"></a>scrapy下载图片</h1><p><strong>流程：</strong></p>
<p>1，解析图片的url</p>
<p>2，定义item。item中必须要有image_urls和images两个字段。image_urls中存放图片的url。</p>
<p>3，在settings.py中，使用scrapy.pipelines.images.ImagesPipeline来作为数据保存的pipeline。</p>
<p>4，在settings.py中，设置IMAGE_STORE来定义图片下载的路径。</p>
<p>此时，只操作以上步骤的话。指定的IMAGE_STORE路径中会自动生成full文件夹，所有图片保存在里面。</p>
<p>5，如果想要有更复杂的图片保存路径的需求。先在settings.py中，关掉第2步的‘scrapy.pipelines.images.ImagesPipeline’，打开‘zcool.pipelines.ZcoolPipeline’。然后在pipelines.py中重写ImagePipiline类的file_path方法。该方法用来返回每个图片的保存路径。</p>
<p>6，但是file_path方法中没有item对象。如果想要item对象的话，我们还需要重写ImagePipline类的get_media_requests方法,来把item绑定到request上。</p>
<h2 id="实战-zcool网站下载图片"><a href="#实战-zcool网站下载图片" class="headerlink" title="实战-zcool网站下载图片"></a>实战-zcool网站下载图片</h2><p>网站：<a href="https://www.zcool.com.cn/">https://www.zcool.com.cn/</a></p>
<p>把相同作品的图片下载到用一个文件夹，文件夹名就为作品名称</p>
<p><strong>实际步骤如下：</strong>（对照上面的流程）</p>
<p>创建scrapy项目，创建crawlSpider，在settings.py中更改配置，如不遵守机器人协议，请求头</p>
<p>流程一，zcool_spider.py文件代码：(访问网站，解析图片url)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> ZcoolItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZcoolSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;zcool_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;zcool.com.cn&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.zcool.com.cn/home?p=1#tab_anchor&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;home\?p=\d+#tab_anchor&#x27;</span>), follow=<span class="literal">True</span>),</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;work/.+=\.html&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">40</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        title = response.xpath(<span class="string">&quot;//div[@class=&#x27;details-contitle-box&#x27;]/h2/text()&quot;</span>).getall()</span><br><span class="line">        title = <span class="string">&#x27;&#x27;</span>.join(title).strip()</span><br><span class="line">        image_urls = response.xpath(<span class="string">&quot;//div[@class=&#x27;reveal-work-wrap js-sdata-box text-center&#x27;]//img/@src&quot;</span>).getall()</span><br><span class="line"></span><br><span class="line">        item = ZcoolItem(title=title, image_urls=image_urls)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<p>流程二，item.py文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZcoolItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment">#image_urls 和 images必须要有。</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    image_urls = scrapy.Field()</span><br><span class="line">    images = scrapy.Field()</span><br></pre></td></tr></table></figure>

<p>流程三四，配置settings.py文件：<br>1，设置ITEM_PIPELINES，如果图片放在一起就开启scrapy.pipelines.images.ImagesPipeline；如果有其他存放路径需求，就开启zcool.pipelines.ZcoolPipeline，并接着下一步在pipelines.py文件中重写方法</p>
<p>2，添加IMAGES_STORE，是图片的保存目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   &#x27;zcool.pipelines.ZcoolPipeline&#x27;: 300,</span><br><span class="line">   #  &#x27;scrapy.pipelines.images.ImagesPipeline&#x27;: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IMAGES_STORE = os.path.join(os.path.dirname(os.path.dirname(__file__)),&#x27;images&#x27;)</span><br></pre></td></tr></table></figure>

<p>流程五六，在pipelines.py文件中，重写ImagePipiline类的file_path方法和get_media_requests方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"><span class="keyword">from</span> scrapy.pipelines.images <span class="keyword">import</span> ImagesPipeline</span><br><span class="line"><span class="keyword">from</span> zcool <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZcoolPipeline</span>(<span class="params">ImagesPipeline</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span>(<span class="params">self, item, info</span>):</span></span><br><span class="line">        <span class="comment">#重写该方法的目的是，把item绑定在request上面，然后下面的file_path方法可以访问到item</span></span><br><span class="line">        media_requests = <span class="built_in">super</span>(ZcoolPipeline, self).get_media_requests(item, info)</span><br><span class="line">        <span class="keyword">for</span> media_request <span class="keyword">in</span> media_requests:</span><br><span class="line">            media_request.item = item</span><br><span class="line">        <span class="keyword">return</span> media_requests</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_path</span>(<span class="params">self, request, response=<span class="literal">None</span>, info=<span class="literal">None</span></span>):</span></span><br><span class="line">        orige_path = <span class="built_in">super</span>(ZcoolPipeline, self).file_path(request, response, info)</span><br><span class="line"></span><br><span class="line">        title = request.item[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">        title = re.sub(<span class="string">r&#x27;[/\\:\*\?&quot;&lt;&gt;\|]&#x27;</span>,<span class="string">&quot;_&quot;</span>,title)</span><br><span class="line">        image_path = os.path.join(settings.IMAGES_STORE,title)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(image_path):</span><br><span class="line">            os.mkdir(image_path)</span><br><span class="line">        image_name = orige_path.replace(<span class="string">&quot;full/&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">		<span class="comment">#返回值就是每个图片的保存路径</span></span><br><span class="line">        <span class="keyword">return</span> os.path.join(image_path, image_name)</span><br></pre></td></tr></table></figure>

<p>注意：创建文件夹时，名称不可用包含九种特殊符号。<br>我们的处理方式：<code>title = re.sub(r&#39;[/\\:\*\?&quot;&lt;&gt;\|]&#39;,&quot;_&quot;,title)</code></p>
<h1 id="下载器中间件："><a href="#下载器中间件：" class="headerlink" title="下载器中间件："></a>下载器中间件：</h1><p>Downloader Middlewares（下载中间件）是：引擎和下载器通信的中间件。在这个中间件里，可以设置ip代理、更换请求头等。主要有两个方法：</p>
<p>process_request(self, request, spider)：发送请求前调用</p>
<p>process_response(self, request, response, spider)：数据下载到引擎前调用</p>
<p><a href="https://imgtu.com/i/5At6je"><img src="https://z3.ax1x.com/2021/10/10/5At6je.png" alt="5At6je.png"></a></p>
<h2 id="process-request-self-request-spider"><a href="#process-request-self-request-spider" class="headerlink" title="process_request(self, request, spider)"></a>process_request(self, request, spider)</h2><p>下载器发送请求前调用，这里可以设置IP代理、请求头等</p>
<p>返回值：</p>
<p>1，None：scrapy继续处理request，直到下载器被调用。</p>
<p>2，Request对象：不再使用之前的request对象，而是使用新的request对象。</p>
<p>3，Response对象：scrapy不再调用process_request方法，直接返回response，调用已激活的中间件的process_response方法。</p>
<p>4，如果方法抛出异常，会调用process_exception方法。</p>
<h2 id="process-response-self-request-response-spider"><a href="#process-response-self-request-response-spider" class="headerlink" title="process_response(self, request, response, spider)"></a>process_response(self, request, response, spider)</h2><p>下载器下载的数据到引擎中间会执行的方法。</p>
<p>返回值：</p>
<p>1，Response对象：会将这个新的response对象返回给其他中间件，直到引擎。</p>
<p>2，Request对象：下载器被切断，返回的request会重新被下载器调度下载。</p>
<p>3，如果抛出异常，会调用requst的errback方法。</p>
<h2 id="随机更换请求头User-Agent"><a href="#随机更换请求头User-Agent" class="headerlink" title="随机更换请求头User-Agent"></a>随机更换请求头User-Agent</h2><p>介绍fake_useragent包：</p>
<p><strong>fake_useragent</strong>模块用来伪造User-Agent的。下载：<code>pip install fake_useragent</code></p>
<p>用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line">ua = UserAgent()</span><br><span class="line">ua.ie       //ie浏览器的user-agent</span><br><span class="line">ua.chrome	//谷歌浏览器的user-agent</span><br><span class="line">ua.firefox  //火狐浏览器的user-agent</span><br><span class="line">ur.random   //任意浏览器的user-agent</span><br></pre></td></tr></table></figure>

<p>如果使用时报错：fake_useragent.errors.FakeUserAgentError: Maximum amount of retries reached。解决方法：</p>
<p>1，找到python》Lib》site-packages》fake_useragent》settings.py</p>
<p>2，打开后，把16行附近的’CACHE_SERVER’属性中的’https‘改成’http‘</p>
<p>3，然后运行程序，依旧会报错，但是出现了一个结果。然后再次运行程序，运行正常。</p>
<p><strong>更换请求头User-Agent步骤：</strong></p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UseragentSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;userAgent&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;httpbin.org&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://httpbin.org/user-agent&#x27;</span>]   <span class="comment">#该网址直接返回请求的user-agent</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(self.start_urls[<span class="number">0</span>], dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>middlewares.py文件代码：(重点)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAgentDownloadmiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        ua = UserAgent()</span><br><span class="line">        request.headers[<span class="string">&quot;User-Agent&quot;</span>] = ua.random</span><br></pre></td></tr></table></figure>

<p>开启这个中间件，在settings.py中设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">&#x27;downloadmiddleware.middlewares.UserAgentDownloadmiddleware&#x27;</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置IP代理："><a href="#设置IP代理：" class="headerlink" title="设置IP代理："></a>设置IP代理：</h2><p>芝麻代理：<a href="http://www.zhimaruanjian.com/">http://www.zhimaruanjian.com</a></p>
<p>流程：</p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpproxySpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;ipProxy&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;httpbin.org&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://httpbin.org/ip&#x27;</span>]  //该网址直接返回请求的ip</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(self.start_urls[<span class="number">0</span>], dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>middlewares.py文件代码：（重点）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpProxyDownloadmiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    proxies = [   //购买的代理</span><br><span class="line">        &#123;<span class="string">&quot;ip&quot;</span>:<span class="string">&quot;223.242.9.160&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="number">4245</span>,<span class="string">&quot;expire_time&quot;</span>:<span class="string">&quot;2021-10-10 13:40:46&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;ip&quot;</span>:<span class="string">&quot;124.94.187.11&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="number">4224</span>,<span class="string">&quot;expire_time&quot;</span>:<span class="string">&quot;2021-10-10 13:40:46&quot;</span>&#125;,</span><br><span class="line">               ]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        proxy = random.choice(self.proxies)   //随机选择一个代理</span><br><span class="line">        <span class="comment"># 格式  http://223.242.9.160:4245</span></span><br><span class="line">        proxy_url = <span class="string">&quot;http://&quot;</span> + proxy[<span class="string">&quot;ip&quot;</span>] + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(proxy[<span class="string">&quot;port&quot;</span>])</span><br><span class="line">        request.meta[<span class="string">&quot;proxy&quot;</span>] = proxy_url</span><br></pre></td></tr></table></figure>

<p>开启这个中间件，在settings.py中设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">&#x27;downloadmiddleware.middlewares.IpProxyDownloadmiddleware&#x27;</span>: <span class="number">200</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开放代理池：上面这种购买的代理ip属于开放代理池，就是一下买多个代理ip，这些ip随便使用，时间比较短。</p>
<p>独享代理：只买一个代理，这个代理ip时间会比较长，而且还有密码。</p>
<p>独享代理的使用例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpProxyDownloadmiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        proxy = <span class="string">&#x27;121.99.4.124:16816&#x27;</span>  //代理ip</span><br><span class="line">        pwd = <span class="string">&quot;156486:fjkdf4s&quot;</span>		  //密码</span><br><span class="line">        request.meta[<span class="string">&quot;proxy&quot;</span>] = proxy</span><br><span class="line">        <span class="comment">#密码要base64加密</span></span><br><span class="line">        pwd_b64 = base64.b64encode(pwd.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="comment">#代理授权</span></span><br><span class="line">        request.headers[<span class="string">&#x27;Proxy-Authorization&#x27;</span>] = <span class="string">&#x27;Basic &#x27;</span> + paw_b64.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="实战-更换代理爬取猎聘网："><a href="#实战-更换代理爬取猎聘网：" class="headerlink" title="实战-更换代理爬取猎聘网："></a>实战-更换代理爬取猎聘网：</h1><p>网址：<a href="https://www.liepin.com/">https://www.liepin.com/</a></p>
<p>要求：搜索python，把有关python的职位信息爬取下来，爬取时需要自动更换代理。</p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> LiepinItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiepinSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;liepin_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;liepin.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.liepin.com/zhaopin/?headId=5299daf02f40ea2f23991628fa127774&amp;ckId=5299daf02f40ea2f23991628fa127774&amp;key=python&amp;currentPage=0&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;job/\d+\.shtml.*&#x27;</span>, restrict_xpaths=[<span class="string">&quot;//div[@class=&#x27;left-list-box&#x27;]/ul/li//div[@class=&#x27;job-detail-box&#x27;]/a[1]&quot;</span>]),callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">40</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        title = response.xpath(<span class="string">&quot;//span[@class=&#x27;name ellipsis-1&#x27;]/text()&quot;</span>).get()</span><br><span class="line">        company_1 = response.xpath(<span class="string">&quot;//div[@class=&#x27;title-box&#x27;]/span[1]//text()&quot;</span>).getall()</span><br><span class="line">        company_1 = <span class="string">&quot;&quot;</span>.join(company_1).strip()</span><br><span class="line">        company_2 = response.xpath(<span class="string">&quot;//div[@class=&#x27;title-box&#x27;]/span[2]//text()&quot;</span>).getall()</span><br><span class="line">        company_2 = <span class="string">&quot;&quot;</span>.join(company_2).strip()</span><br><span class="line">        company = company_1 + company_2</span><br><span class="line">        city = response.css(<span class="string">&quot;.job-properties&gt;span:nth-child(1)::text&quot;</span>).get()</span><br><span class="line">        experience = response.css(<span class="string">&quot;.job-properties&gt;span:nth-child(3)::text&quot;</span>).get()</span><br><span class="line">        edu = response.css(<span class="string">&quot;.job-properties&gt;span:nth-child(5)::text&quot;</span>).get()</span><br><span class="line">        salary = response.css(<span class="string">&quot;.salary::text&quot;</span>).get()</span><br><span class="line">        desc_list = response.css(<span class="string">&quot;.paragraph&gt;dd::text&quot;</span>).getall()</span><br><span class="line">        desc = <span class="string">&quot;&quot;</span>.join(desc_list).strip()</span><br><span class="line"></span><br><span class="line">        item = LiepinItem(title=title, company=company, city=city, experience=experience, edu=edu, salary=salary, desc=desc)</span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">        current_page = response.request.headers[<span class="string">&quot;Referer&quot;</span>].decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        page_num = <span class="built_in">int</span>( re.search(<span class="string">&quot;.*currentPage=(\d+)&quot;</span>,current_page).group(<span class="number">1</span>) )</span><br><span class="line">        next_page = <span class="string">&quot;https://www.liepin.com/zhaopin/?headId=5299daf02f40ea2f23991628fa127774&amp;ckId=5299daf02f40ea2f23991628fa127774&amp;key=python&amp;currentPage=&quot;</span> + <span class="built_in">str</span>( page_num+<span class="number">1</span> )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=next_page)</span><br></pre></td></tr></table></figure>

<p>items.py文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiepinItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    company = scrapy.Field()</span><br><span class="line">    city = scrapy.Field()</span><br><span class="line">    experience = scrapy.Field()</span><br><span class="line">    edu = scrapy.Field()</span><br><span class="line">    salary = scrapy.Field()</span><br><span class="line">    desc = scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>pipelines.py文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiepinPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&quot;zhaopin.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        self.fp.write( json.dumps(<span class="built_in">dict</span>(item), ensure_ascii=<span class="literal">False</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure>

<p>middlewares.py文件代码：（重点，这里设置代理）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json, requests</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Proxy</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyDownloadMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.current_proxy = <span class="literal">None</span></span><br><span class="line">        self.update_proxy()</span><br><span class="line">        self.lock = threading.Lock</span><br><span class="line">        <span class="comment">#创建一个线程，每60秒自动更换ip，或者ip被黑名单更换ip</span></span><br><span class="line">        th1 = threading.Thread(target=self.update_proxy_in_threading)</span><br><span class="line">        th1.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        request.meta[<span class="string">&quot;proxy&quot;</span>] = self.current_proxy.proxy_url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response, spider</span>):</span></span><br><span class="line">        <span class="keyword">if</span> response.status != <span class="number">200</span>:   <span class="comment">#状态码不等于200就当作ip被黑名单了</span></span><br><span class="line">            self.lock.acquire()</span><br><span class="line">            self.current_proxy.is_blacked = <span class="literal">True</span></span><br><span class="line">            self.lock.release()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;IP代理被禁用了&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">            <span class="keyword">return</span> request</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_proxy</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#获取IP代理，自己去买</span></span><br><span class="line">        resp = requests.get(<span class="string">&quot;购买的直连ip网址&quot;</span>)</span><br><span class="line">        proxy_dict = json.loads(resp.text)</span><br><span class="line">        proxy = Proxy(proxy_dict)    <span class="comment">#自己定义的Proxy模型类，下面有</span></span><br><span class="line">        self.current_proxy = proxy</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;更换了一次IP代理&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*^*^*(&amp;)&amp;(*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_proxy_in_threading</span>(<span class="params">self</span>):</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> count&gt;=<span class="number">6</span> <span class="keyword">or</span> self.current_proxy.is_blacked:</span><br><span class="line">                self.update_proxy()</span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>Proxy模型类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span>():</span></span><br><span class="line">    <span class="comment"># proxy的模型，方便管理</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, proxy_dict</span>):</span></span><br><span class="line">        data = proxy_dict[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>]</span><br><span class="line">        self.proxy_url = <span class="string">&quot;https://&quot;</span> + data[<span class="string">&quot;ip&quot;</span>] + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(data[<span class="string">&quot;port&quot;</span>])</span><br><span class="line">        self.is_blacked = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>最后在settings.py中将该下载器中间件启用。</p>
<h1 id="scrapy集成selenium爬取网页"><a href="#scrapy集成selenium爬取网页" class="headerlink" title="scrapy集成selenium爬取网页"></a>scrapy集成selenium爬取网页</h1><p>在scrapy爬取网址时，有时因为需要加载ajax或者需要点击某个按钮后，需要的数据才能完整展示出来，可以在scrapy中写selenium解决这个问题。</p>
<p><strong>流程：</strong>下载器中间件的process_request(self, request, spider)方法，发送请求时调用，即发送请求前截拦，然后执行该方法。所以在该方法内，用selenium发送请求，处理，再封装成response对象返回。</p>
<p>1，截拦原始请求。<br>2，用selenium请求。<br>3，将selenium请求的数据封装成response对象并返回。</p>
<p><em><strong>案例：</strong></em></p>
<p>爬取简书网站：<a href="http://jianshu.com/%EF%BC%8C%E7%AE%80%E4%B9%A6%E5%8F%91%E8%A1%A8%E7%9A%84%E6%96%87%E7%AB%A0%E4%B8%8B%E9%9D%A2%E6%9C%89%E6%98%BE%E7%A4%BA%E8%A2%AB%E6%9F%90%E6%9F%90%E4%B8%93%E9%A2%98%E6%94%B6%E5%85%A5%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%B8%93%E9%A2%98%E5%A4%9A%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%8F%AA%E4%BC%9A%E6%98%BE%E7%A4%BA%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%8C%E9%9C%80%E8%A6%81%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E2%80%9C%E5%B1%95%E5%BC%80%E6%9B%B4%E5%A4%9A%E2%80%9D%E6%89%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E5%85%A8%E9%83%A8%E3%80%82">http://jianshu.com/，简书发表的文章下面有显示被某某专题收入，如果专题多的话，只会显示一部分，需要点击按钮“展开更多”才能显示全部。</a></p>
<p>爬取简书，然后用selenium执行点击“展开更多”按钮后，把数据返回。</p>
<p><strong>代码如下：</strong></p>
<p>爬虫文件代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JianshuSpiderSpider</span>(<span class="params">CrawlSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;jianshu_spider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;jianshu.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://jianshu.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;p/[0-9a-z]&#123;12&#125;&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>),</span><br><span class="line">        <span class="comment"># Rule(LinkExtractor(allow=r&#x27;p/dbc69681575f&#x27;), callback=&#x27;parse_item&#x27;, follow=True),</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myprint</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">40</span>)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        zhuantis = response.xpath(<span class="string">&quot;//div[@class=&#x27;_21bLU4 _3kbg6I&#x27;]/div[1]/div[1]/section[position()=3]/div[1]//text()&quot;</span>).getall()</span><br><span class="line">        self.myprint(zhuantis)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>middlewares.py文件：（<strong>重点</strong>）（记得在settings.py中开启）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> scrapy.http.response.html <span class="keyword">import</span> HtmlResponse   <span class="comment">#封装response对象用的。</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JianshuDownloaderMiddleware</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver_path = <span class="string">&quot;D:/webDriver/chromedriver_win32_95.exe&quot;</span></span><br><span class="line">        self.driver = webdriver.Chrome(executable_path=self.driver_path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="comment">#1,只要写了该方法就相当于截拦了原始请求</span></span><br><span class="line">        <span class="comment">#2，用selenium请求，并处理，点击“展开更多”按钮</span></span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">r&quot;.*?\.com/p/[0-9a-z]&#123;12&#125;&quot;</span>, request.url):</span><br><span class="line">            self.driver.get(request.url)</span><br><span class="line"></span><br><span class="line">            btn_path = <span class="string">&quot;//div[@class=&#x27;_21bLU4 _3kbg6I&#x27;]/div[1]/div[1]/section[position()=3]/div[1]/div[1]&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                WebDriverWait(self.driver, <span class="number">10</span>).until(</span><br><span class="line">                    EC.element_to_be_clickable((By.XPATH, btn_path))</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                response = HtmlResponse(request.url, body=self.driver.page_source, request=request, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    btn = self.driver.find_element_by_xpath(btn_path)</span><br><span class="line">                    self.driver.execute_script(<span class="string">&quot;arguments[0].click()&quot;</span>, btn)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="comment">#3，最后把selenium访问的网页数据，封装成response对象并返回</span></span><br><span class="line">            response = HtmlResponse(request.url, body=self.driver.page_source, request=request, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> response    <span class="comment">#这个返回的response给爬虫文件中的response对象。</span></span><br></pre></td></tr></table></figure>










































]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>python</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>动态网页爬虫</title>
    <url>/2021/09/07/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p>动态网页：是网站在不重新加载的情况下，通过ajax技术动态更新网站中的局部数据。直接查看网页源代码是找不到数据的。</p>
<span id="more"></span>

<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>1，直接分析ajax调用的接口。然后通过代码请求这个接口。（上面的“爬虫实战1-多线程爬取王者荣耀壁纸”就是这种方案解决的）</p>
<p>2，使用Selenium+chromedriver模拟浏览器行为获取数据。</p>
<table>
<thead>
<tr>
<th align="center">方式</th>
<th align="center">优点</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">分析接口</td>
<td align="center">直接可以请求到数据。不需要做一些解析工作。代码量少，性能高</td>
<td align="center">分析接口比较复杂，特别是一些通过js混淆的接口，要有一定的js功底。容易别发现是爬虫。</td>
</tr>
<tr>
<td align="center">selenium</td>
<td align="center">直接模拟浏览器的行为。浏览器能请求到的，使用selenium也能请求到。爬虫更稳定</td>
<td align="center">代码量多。性能低。</td>
</tr>
</tbody></table>
<h2 id="selenium和chromedriver介绍："><a href="#selenium和chromedriver介绍：" class="headerlink" title="selenium和chromedriver介绍："></a>selenium和chromedriver介绍：</h2><p><strong>Selenium</strong>：相当于是一个机器人。可以模拟人类在浏览器上的一些行为，自动处理浏览器上的一些行为，比如点击，填充数据，删除cookie等。<br>Selenium官方网址(python版本)：<a href="https://selenium-python.readthedocs.io/">https://selenium-python.readthedocs.io</a></p>
<p>安装Selenium：Selenium有许多语言的版本，有java、ruby、python等。我们下载python版本就可以了。pip install selenium</p>
<p><strong>chromedriver</strong>：是一个驱动Chrome浏览器的驱动程序，使用它才可以驱动Chrome浏览器。当然针对不同的浏览器有不同的driver。下面是不同的浏览器对应driver。</p>
<ul>
<li>Chrome：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">https://sites.google.com/a/chromium.org/chromedriver/downloads</a></li>
<li>Firefox：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></li>
<li>Edge：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></li>
<li>Safari：<a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/">https://webkit.org/blog/6900/webdriver-support-in-safari-10/</a></li>
</ul>
<p><em>注</em>：下载版本和对应浏览器版本一致。保存在纯英文没有权限的路径下。</p>
<p>如果启动selenium报错如下：</p>
<p><code>selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 92</code>,</p>
<p>就是浏览器和浏览器驱动版本不一样导致的。</p>
<h2 id="selenium和chromedriver使用："><a href="#selenium和chromedriver使用：" class="headerlink" title="selenium和chromedriver使用："></a>selenium和chromedriver使用：</h2><h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#下载好的chromedriver的路径</span></span><br><span class="line">driver_path = <span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"><span class="comment">#直接用driver访问网站</span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#获取源代码</span></span><br><span class="line"><span class="built_in">print</span>(driver.page_source)  </span><br></pre></td></tr></table></figure>

<h3 id="关闭页面和浏览器："><a href="#关闭页面和浏览器：" class="headerlink" title="关闭页面和浏览器："></a>关闭页面和浏览器：</h3><ul>
<li><p>driver.close()：关闭当前页面</p>
</li>
<li><p>driver.quit()：关闭浏览器</p>
</li>
</ul>
<h3 id="定位元素："><a href="#定位元素：" class="headerlink" title="定位元素："></a>定位元素：</h3><ul>
<li>find_element_by_id(“”)：根据id查找元素</li>
<li>find_element_by_class_name(“”)：根据class名查找元素</li>
<li>find_element_by_name(“”)：根据name属性查找元素</li>
<li>find_element_by_tag_name(“”)：根据标签名查找元素</li>
<li>find_element_by_xpath(“”)：根据xpath语法查找元素</li>
<li>find_element_by_css_selector(“”)：根据css选择器查找元素</li>
</ul>
<p><strong>注</strong>：这些find_element查找元素是查找第一个满足条件的元素；如果加上s，即find_element<strong>s</strong>是获取所有满足条件的元素。</p>
<p>以上元素定位的方法外，还有另一种元素定位的写法，如下：</p>
<p>需要导入By：<code>from selenium.webdriver.common.by import By</code></p>
<ul>
<li>find_element(By.ID, “id”)</li>
<li>find_element(By.CLASS_NAME, “class_name”)</li>
<li>find_element(By.NAME, “name”)</li>
<li>find_element(By.TAG_NAME, “tag_name”)</li>
<li>find_element(By.XPATH, “xpath语法”)</li>
<li>find_element(By.CSS_SELECTOR, “css语法”)</li>
</ul>
<p><strong>注</strong>：用法和上面一样，也有element<strong>s</strong>的用法。注意大写。</p>
<h3 id="表单元素操作："><a href="#表单元素操作：" class="headerlink" title="表单元素操作："></a>表单元素操作：</h3><p>先到找该元素，再进行操作</p>
<p>1，输入文本操作，用于输入框</p>
<p>element.send_keys(“text”)：在该元素输入文本内容</p>
<p>element.clear()：清除文本内容</p>
<p>2，点击操作，用于复选框，按钮等</p>
<p>element.click()：单机该元素</p>
<p>3，选择下拉列表操作，用于select，option</p>
<ul>
<li>需要导入Select：<code>from selenium.webdriver.support.ui import Select</code></li>
<li>找到select元素后，用导入的Select包装一下：<br><code>select = Select(driver.find_element_by_xpath(&quot;//select[@name=&#39;name&#39;]&quot;))</code></li>
<li>在select标签中选择option：<br>select.select_by_index(“index”)：通过索引值选择<br>select.select_by_value(“value”)：通过value属性值选择<br>select.select_by_visible_text(“text”)：通过可视文本选择，即显示在上面的文字内容</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#表单元素操作：访问百度，在搜索框中输入‘python’，然后单击‘百度一下’按钮</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#找到搜索框</span></span><br><span class="line">inputTag = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br><span class="line"><span class="comment">#搜索框输入内容</span></span><br><span class="line">inputTag.send_keys(<span class="string">&quot;python&quot;</span>)  </span><br><span class="line"><span class="comment">#找到百度一下按钮</span></span><br><span class="line">btn = driver.find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br><span class="line"><span class="comment">#单机操作</span></span><br><span class="line">btn.click()  </span><br></pre></td></tr></table></figure>

<h3 id="行为链："><a href="#行为链：" class="headerlink" title="行为链："></a>行为链：</h3><p>更像人类的操作</p>
<p>有时候在页面中的操作可能要有很多步，那么可以使用行为链。</p>
<p>有些网站可能会在浏览器端做一些验证行为是否符合人类的行为来做反爬虫。这时候我们就可以使用行为链来模拟人的操作。行为链有更多的复杂操作，比如双击，右击。在自动化测试中非常有用。</p>
<p>使用：</p>
<ul>
<li><p>导入<code>from selenium.webdriver.common.action_chains import ActionChains</code></p>
</li>
<li><p>创建行为链<code>actions = ActionChains(driver)</code></p>
</li>
<li><p>相关操作</p>
<ul>
<li>actions.move_to_element(element)：鼠标移动到某个元素上</li>
<li>actions.send_keys_to_element(element, “text”)：在某个元素上输入文本</li>
<li>actions.click(element)：单击某元素</li>
<li>actions.context_click(element)：右击某元素</li>
<li>actions.double_click(element)：双击某元素</li>
<li>actions.click_and_hold(element)：单击但不松开，拖曳</li>
</ul>
</li>
<li><p>actions.perform()：执行行为链</p>
</li>
</ul>
<p><strong>注</strong>：创建了行为链，定义完后要提交执行，要再次使用行为链时，再重新创建一个行为链。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"><span class="comment">#访问知乎</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.zhihu.com/signin?next=%2F&#x27;</span>)</span><br><span class="line"><span class="comment">#创建行为链</span></span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line"><span class="comment">#操作：选择用户密码登入</span></span><br><span class="line">login = driver.find_elements_by_class_name(<span class="string">&quot;SignFlow-tab&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">actions.move_to_element(login)</span><br><span class="line">actions.click(login)</span><br><span class="line"><span class="comment">#执行该行为链</span></span><br><span class="line">actions.perform()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#再次创建新的行为链</span></span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line"><span class="comment">#操作：填写用户名</span></span><br><span class="line">username = driver.find_element_by_name(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">actions.move_to_element(username)</span><br><span class="line">actions.send_keys_to_element(username,<span class="string">&quot;17370466454&quot;</span>)</span><br><span class="line"><span class="comment">#操作：填写密码</span></span><br><span class="line">password = driver.find_element_by_name(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">actions.move_to_element(password)</span><br><span class="line">actions.send_keys_to_element(password,<span class="string">&quot;123456789&quot;</span>)</span><br><span class="line"><span class="comment">#操作：点击提交</span></span><br><span class="line">submit = driver.find_element_by_xpath(<span class="string">&quot;//button[@type=&#x27;submit&#x27;]&quot;</span>)</span><br><span class="line">actions.move_to_element(submit)</span><br><span class="line">actions.click(submit)</span><br><span class="line"><span class="comment">#执行该行为链</span></span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure>

<h3 id="cookie："><a href="#cookie：" class="headerlink" title="cookie："></a>cookie：</h3><ul>
<li>driver.get_cookies()：获取所有cookie</li>
<li>driver.get_cookie(“name”)：获取指定name的cookie</li>
<li>driver.delete_all_cookies()：删除所有cookie</li>
<li>driver.delete_cookie(“BA_HECTOR”)：删除指定name的cookie</li>
<li>driver.add_cookie({“name”:”abc”, “value”:”123456”})：添加cookie</li>
</ul>
<h3 id="隐式等待和显式等待："><a href="#隐式等待和显式等待：" class="headerlink" title="隐式等待和显式等待："></a>隐式等待和显式等待：</h3><p>现在的网页越来越多使用ajax技术，程序不能确定何时某个元素完全加载出来了。如果元素还没加载出来，但代码直接使用该元素，就会报错NullPointer。<br>为解决这问题，Selenium提供两种等待方式：隐式等待，显式等待。</p>
<h4 id="隐式等待："><a href="#隐式等待：" class="headerlink" title="隐式等待："></a>隐式等待：</h4><p>等待指定的秒数<br>driver.implicitly_wait()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#隐式等待</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#等待10秒</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;fjkd&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="显式等待："><a href="#显式等待：" class="headerlink" title="显式等待："></a>显式等待：</h4><p>等待，直到给定的条件成立后就不再等待，也可以指定一个最大等待时间，超过这个时间后就抛出异常。可配合try:，except:，else:，finally:。</p>
<p>需要导入：</p>
<ul>
<li><code>from selenium.webdriver.support.ui import WebDriverWait</code>  ：显式等待类</li>
<li><code>from selenium.webdriver.support import expected_conditions</code>  ：期望条件类</li>
<li><code>from selenium.webdriver.common.by import By</code>：在期望条件中查找元素，用By</li>
</ul>
<p>语法：</p>
<ul>
<li><code>WebDriverWait(driver, “最大等待时间” ).until( “期望的条件” )</code></li>
</ul>
<p>例子：访问12306铁路，等待，直到车站中选择了北京后，再查询。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait  <span class="comment">#显式等待类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC  <span class="comment">#期望的条件类,as取别名</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By   <span class="comment">#By用来查找元素的</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"><span class="comment">#访问12306铁路</span></span><br><span class="line">driver.get(<span class="string">&quot;https://kyfw.12306.cn/otn/czxx/init&quot;</span>)</span><br><span class="line"><span class="comment">#条件是本文被显示在某个元素的value属性上</span></span><br><span class="line">WebDriverWait(driver,<span class="number">1000</span>).until(</span><br><span class="line">    EC.text_to_be_present_in_element_value((By.NAME,<span class="string">&quot;train_station_name&quot;</span>),<span class="string">&quot;北京&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">btn = driver.find_element_by_id(<span class="string">&quot;_a_search_btn&quot;</span>)</span><br><span class="line">btn.click()</span><br></pre></td></tr></table></figure>

<p>显式等待预期的条件：</p>
<ul>
<li>title_is 判断title是否出现</li>
<li>title_contains 判断title页面标题是否包含某些字符</li>
<li><strong>presence_of_element_located 判断某个元素是否被加载到了dom树里，但是并不代表这个元素可见</strong></li>
<li><strong>url_contains 判断当前url是否包含某个url</strong></li>
<li>url_matches 判断当前url是否符合某种格式</li>
<li>url_to_be 判断当前url是否出现</li>
<li>url_changes 判断当前url是否已经发生了变化</li>
<li>visibility_of_element_located 判断某个元素是否被添加到了dom树里，且宽高都大于0</li>
<li>visibility_of 判断看某个元素是否可见</li>
<li>presence_of_all_elements_located 判断至少有一个元素存在于dom树中，返回所有定位到的元素</li>
<li>visibility_of_any_elements_located 判断至少有一个元素在页面中可见</li>
<li>visibility_of_all_elements_located 判断是否所有元素都在页面中可见</li>
<li>text_to_be_present_in_element 判断指定的元素中是否包含了预期的字符串</li>
<li><strong>text_to_be_present_in_element_value 判断指定的元素属性值中是否包含了预期的字符串</strong></li>
<li>frame_to_be_available_and_switch_to_it 判断iframe是否可以switch进去</li>
<li>invisibility_of_element_located 判断某个元素是否在dom中不可见</li>
<li><strong>element_to_be_clickable 判断某个元素是否可见并且是enable的，也就是说是是否可以点击</strong></li>
<li>staleness_of 等待某个元素从dom中删除</li>
<li>element_to_be_selected 判断某个元素是否被选中了，一般用于下拉列表中</li>
<li>element_located_to_be_selected 与上面的意思一样，只不过上面实例化的时候传入的是元素对象，这个传入的是定位</li>
<li>element_selection_state_to_be 判断某个元素的选中状态是否符合预期</li>
<li>element_located_selection_state_to_be 与上面一样，只不过传值不同而已</li>
<li>number_of_windows_to_be 判断当前窗口数是否等于预期</li>
<li>new_window_is_opened 判断是否有窗口增加</li>
<li>alert_is_present 判断页面是否有弹窗</li>
</ul>
<h3 id="切换窗口："><a href="#切换窗口：" class="headerlink" title="切换窗口："></a>切换窗口：</h3><p>1，<code>driver.switch_to_window()</code>：切换到指定窗口</p>
<p>2，<code>driver.window_handles</code>：返回窗口的列表</p>
<p>配合使用<code>driver.switch_to_window( driver.window_handles[0] )</code>，表示切换到第一个窗口</p>
<p>3，<code>driver.execute_script(&quot;window.open(&#39;https://douban.com&#39;)&quot;)</code>：execute_script表示执行js代码，这里用js代码打开新的窗口，execute_script（”这里写js代码，还可以写arguments[0]，arguments[1]，表示引用外面的参数”，参数1，参数2）。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#执行js代码,用js代码打开新的窗口</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;window.open(&#x27;https://douban.com&#x27;)&quot;</span>)</span><br><span class="line"><span class="comment">#切换窗口</span></span><br><span class="line">driver.switch_to_window(driver.window_handles[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#打印网页源代码</span></span><br><span class="line"><span class="built_in">print</span>(driver.page_source)</span><br></pre></td></tr></table></figure>

<h3 id="设置代理IP："><a href="#设置代理IP：" class="headerlink" title="设置代理IP："></a>设置代理IP：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment">#1，创建options</span></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment">#2，options添加代理IP</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--proxy-server=http://219.128.76.3:8080&quot;</span>)</span><br><span class="line"><span class="comment">#3，创建驱动时，把options添加进去</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>,chrome_options=options)</span><br><span class="line"><span class="comment">#该网站返回自己的ip地址</span></span><br><span class="line">driver.get(<span class="string">&quot;http://httpbin.org/ip&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>element.get_property(“属性名”)：获取元素的html官方属性。</p>
<p>element.get_attribute(“属性名”)：获取元素的属性，包括官方和自定义属性。</p>
<p>driver.save_screenshot(“path”)：保存当前页面截图，一般png类型。</p>
<h2 id="Selenium实战-12306自动抢票"><a href="#Selenium实战-12306自动抢票" class="headerlink" title="Selenium实战-12306自动抢票"></a>Selenium实战-12306自动抢票</h2><p>该程序可以自动实现抢票，虽然有点鸡肋，重在学习selenium。</p>
<p>假如9点开始抢票。提前物色好车次和席别，添加乘客信息，定好开抢时间。在9点之前打开该程序并运行，由于9点没到，会一直处于等待阶段。直到9点一到，立刻抢票。</p>
<p>简单定时器制作方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入time</span></span><br><span class="line"><span class="keyword">import</span> time   </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#获取时间戳，时间戳就是1970年一直到现在的时间秒数，所以分分秒秒时间戳都在变化</span></span><br><span class="line">    timestamp = time.time()</span><br><span class="line">    <span class="comment">#把时间戳变为本地时间</span></span><br><span class="line">    localtime = time.localtime(timestamp)</span><br><span class="line">    <span class="comment">#将本地时间格式化成我们想要的文本格式</span></span><br><span class="line">    localtime = time.strftime(<span class="string">&quot;%H:%M:%S&quot;</span>,localtime)</span><br><span class="line">    <span class="comment">#判断如果本地时间到了指定时间(文本格式要一致)就停止循环，继续往下执行代码</span></span><br><span class="line">    <span class="keyword">if</span> localtime == <span class="string">&quot;12:45:00&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;时间到了！！&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>代码实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;D://webDriver//chromedriver_win32_92.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrainSpider</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    该类用于12306铁路自动抢票功能，创建实例对象后直接调用run()方法。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    login_url = <span class="string">&quot;https://kyfw.12306.cn/otn/resources/login.html&quot;</span></span><br><span class="line">    search_url = <span class="string">&quot;https://kyfw.12306.cn/otn/leftTicket/init?linktypeid=dc&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,from_station,to_station,date,trains,passengers,snap_up</span>):</span></span><br><span class="line">        self.from_station = from_station</span><br><span class="line">        self.to_station = to_station</span><br><span class="line">        self.date = date</span><br><span class="line">        self.trains = trains</span><br><span class="line">        self.stations = &#123;&#125;  <span class="comment">#存放各个城市对应的代号词</span></span><br><span class="line">        self.get_stations_code()</span><br><span class="line">        self.driver = driver</span><br><span class="line">        self.train = <span class="literal">None</span>  <span class="comment">#存放确定好的的车次</span></span><br><span class="line">        self.seat = <span class="literal">None</span>   <span class="comment">#存放确定好的的席位</span></span><br><span class="line">        self.passengers = passengers</span><br><span class="line">        self.snap_up = snap_up</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_stations_code</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取每个城市对应的代号词&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;stations.csv&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            reader = csv.reader(fp)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> reader:</span><br><span class="line">                self.stations[i[<span class="number">0</span>]] = i[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(self.login_url)</span><br><span class="line">        <span class="comment">#等待用户手动登入</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.url_contains(<span class="string">&quot;https://kyfw.12306.cn/otn/view/index.html&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#等待“新冠疫情”的提示框弹出</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.CLASS_NAME, <span class="string">&quot;modal&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#单击确认</span></span><br><span class="line">        btn = self.driver.find_element(By.CLASS_NAME, <span class="string">&quot;modal-close&quot;</span>)</span><br><span class="line">        btn.click()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登入成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_ticket</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#相当于单击了“车票”导航栏中的“单程”命令</span></span><br><span class="line">        self.driver.get(self.search_url)</span><br><span class="line">        <span class="comment"># 等待“新冠疫情防控”的提示框弹出</span></span><br><span class="line">        WebDriverWait(self.driver, <span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.ID,<span class="string">&quot;content_defaultwarningAlert_id&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#单击确认</span></span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;qd_closeDefaultWarningWindowDialog_id&quot;</span>).click()</span><br><span class="line">        <span class="comment">#输入起始站，终点站，时间</span></span><br><span class="line">        input_from_station = self.driver.find_element_by_id(<span class="string">&quot;fromStation&quot;</span>)</span><br><span class="line">        from_station_code = self.stations[self.from_station]</span><br><span class="line">        self.driver.execute_script(<span class="string">&quot;arguments[0].value=&#x27;%s&#x27;&quot;</span>%from_station_code,input_from_station)</span><br><span class="line">        input_to_station = self.driver.find_element_by_id(<span class="string">&quot;toStation&quot;</span>)</span><br><span class="line">        to_station_code = self.stations[self.to_station]</span><br><span class="line">        self.driver.execute_script(<span class="string">&quot;arguments[0].value=&#x27;%s&#x27;&quot;</span>%to_station_code, input_to_station)</span><br><span class="line">        input_date = self.driver.find_element_by_id(<span class="string">&quot;train_date&quot;</span>)</span><br><span class="line">        self.driver.execute_script(<span class="string">&quot;arguments[0].value=&#x27;%s&#x27;&quot;</span>%self.date, input_date)</span><br><span class="line">        <span class="comment">#到达指定时间才继续执行代码，用于抢票</span></span><br><span class="line">        <span class="keyword">if</span> self.snap_up == <span class="string">&quot;无&quot;</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                timestamp = time.time()</span><br><span class="line">                localtime = time.localtime(timestamp)</span><br><span class="line">                localtime = time.strftime(<span class="string">&quot;%H:%M:%S&quot;</span>, localtime)</span><br><span class="line">                <span class="keyword">if</span> localtime == self.snap_up:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#点击查询</span></span><br><span class="line">        btn_submit = self.driver.find_element_by_id(<span class="string">&quot;query_ticket&quot;</span>)</span><br><span class="line">        btn_submit.click()</span><br><span class="line">        <span class="comment">#等待查询结果加载出来</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.XPATH,<span class="string">&quot;//tbody[@id=&#x27;queryLeftTable&#x27;]/tr&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#获取车次信息，解析车次</span></span><br><span class="line">        trs = self.driver.find_elements_by_xpath(<span class="string">&quot;//tbody[@id=&#x27;queryLeftTable&#x27;]/tr[not(@datatran)]&quot;</span>)</span><br><span class="line">        have_seat = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">            train_info = tr.text.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot; &quot;</span>).split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">            train = train_info[<span class="number">0</span>]</span><br><span class="line">            <span class="comment">#判断是不是我们想要的车次</span></span><br><span class="line">            <span class="keyword">if</span> train <span class="keyword">in</span> self.trains:</span><br><span class="line">                seats = self.trains[train]</span><br><span class="line">                <span class="keyword">for</span> seat <span class="keyword">in</span> seats:</span><br><span class="line">                    <span class="comment">#判断是什么座位，并判断该座位有无票</span></span><br><span class="line">                    <span class="comment">#一等座:M,二等座:O,硬座:1，硬卧:3，软卧:4,高级软卧:6,商务座:9</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;M&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">11</span>]</span><br><span class="line">                        <span class="comment">#票情况可以为：文本类型的数字，有，候补，无，--，*</span></span><br><span class="line">                        <span class="comment">#ticket等于‘有’或者等于文本类型的数字都代表有票，这里强行把ticket转换成int类型，</span></span><br><span class="line">                        <span class="comment">#可以转换表示ticket是文本类型的数字，转不了表示ticket是’有‘，或者其他无票的可能，那就pass</span></span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;O&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">10</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">4</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">6</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">8</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;6&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">9</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> seat == <span class="string">&quot;9&quot;</span>:</span><br><span class="line">                        ticket = train_info[-<span class="number">12</span>]</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            ticket = <span class="built_in">int</span>(ticket)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(ticket)) == <span class="string">&quot;&lt;class &#x27;int&#x27;&gt;&quot;</span> <span class="keyword">or</span> ticket == <span class="string">&quot;有&quot;</span>:</span><br><span class="line">                            have_seat = <span class="literal">True</span></span><br><span class="line">                            self.seat = seat</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> have_seat:</span><br><span class="line">                    <span class="comment"># have_seat为真表示找到了票，然后单击‘预定’按钮</span></span><br><span class="line">                    self.train = train</span><br><span class="line">                    btn = tr.find_element_by_class_name(<span class="string">&quot;btn72&quot;</span>)</span><br><span class="line">                    btn.click()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">submit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#选择乘客</span></span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.XPATH,<span class="string">&quot;//ul[@id=&#x27;normal_passenger_id&#x27;]/li/label&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        passengers = self.driver.find_elements_by_xpath(<span class="string">&quot;//ul[@id=&#x27;normal_passenger_id&#x27;]/li/label&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> passenger <span class="keyword">in</span> passengers:</span><br><span class="line">            <span class="keyword">if</span> passenger.text <span class="keyword">in</span> self.passengers:</span><br><span class="line">                passenger.click()</span><br><span class="line">        <span class="comment">#选择席别</span></span><br><span class="line">        selectsEle = self.driver.find_elements_by_xpath(<span class="string">&quot;//tbody[@id=&#x27;ticketInfo_id&#x27;]/tr[not(@class=&#x27;tips&#x27;)]/td[3]/select&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> selectEle <span class="keyword">in</span> selectsEle:</span><br><span class="line">            select = Select( selectEle )</span><br><span class="line">            select.select_by_value(self.seat)</span><br><span class="line">        <span class="comment">#提交订单</span></span><br><span class="line">        btn = self.driver.find_element_by_id(<span class="string">&quot;submitOrder_id&quot;</span>)</span><br><span class="line">        btn.click()</span><br><span class="line">        <span class="comment">#确认提交订单信息</span></span><br><span class="line">        WebDriverWait(self.driver, <span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.XPATH, <span class="string">&quot;//tbody[@id=&#x27;check_ticketInfo_id&#x27;]/tr/td&quot;</span>))</span><br><span class="line">        )</span><br><span class="line">        WebDriverWait(self.driver,<span class="number">1000</span>).until(</span><br><span class="line">            EC.presence_of_element_located((By.ID,<span class="string">&#x27;qr_submit_id&#x27;</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                btn = self.driver.find_element_by_id(<span class="string">&quot;qr_submit_id&quot;</span>)</span><br><span class="line">                btn.click()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                passengers = <span class="string">&quot;、&quot;</span>.join(self.passengers)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;已为【%s】乘客购得【%s】车次【%s】席别票&quot;</span> % (passengers, self.train, self.seat))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#1，登入</span></span><br><span class="line">        self.login()</span><br><span class="line">        <span class="comment">#2，查询票</span></span><br><span class="line">        self.search_ticket()</span><br><span class="line">        <span class="comment">#3，提交订单</span></span><br><span class="line">        self.submit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment">#使用说明</span></span><br><span class="line">    <span class="comment">#创建类时按顺序输入参数：出发点，目的地，发车日期(&quot;****-**-**&quot;),车次座位(字典格式)，乘客(列表格式)，抢票时间(“**:**:**”)</span></span><br><span class="line">    <span class="comment">#车次座位格式：&#123;&quot;G403&quot;:[&quot;1&quot;],&quot;G505&quot;:[&quot;M&quot;,&quot;O&quot;]&#125;</span></span><br><span class="line">    <span class="comment"># 一等座:M,二等座:O,硬座:1，硬卧:3，软卧:4,高级软卧:6,商务座:9</span></span><br><span class="line">    <span class="comment">#抢票时间精确到时分秒，若填写“无”，表示当前时间直接抢票</span></span><br><span class="line">    </span><br><span class="line">    trainSpider = TrainSpider(<span class="string">&quot;万安县&quot;</span>,<span class="string">&quot;南昌&quot;</span>,<span class="string">&quot;2021-09-01&quot;</span>,&#123;<span class="string">&quot;G5022&quot;</span>:[<span class="string">&quot;O&quot;</span>]&#125;,[<span class="string">&quot;李昭德&quot;</span>,<span class="string">&quot;李昭辉&quot;</span>],<span class="string">&quot;13:11:00&quot;</span>)</span><br><span class="line">    trainSpider.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h2 id="反爬虫攻防实战"><a href="#反爬虫攻防实战" class="headerlink" title="反爬虫攻防实战"></a>反爬虫攻防实战</h2><p>上一章爬取动态网页是使用selenium。这一章用另一种方法，分析后端接口，破解js，直接访问后端接口。<br>这种方法需要有一定的js功底。</p>
<h3 id="有道翻译"><a href="#有道翻译" class="headerlink" title="有道翻译"></a>有道翻译</h3><p>通过请求有道翻译后端接口，实现翻译功能</p>
<p>网址：<a href="https://fanyi.youdao.com/">https://fanyi.youdao.com/</a></p>
<p><strong>分析及代码实现</strong>：</p>
<p>进入网站使用有道翻译发现，输入文本”world”后会自动翻译成”世界”，结论：输入文本后网页自动发送ajax请求。<br>通过抓包工具，找到相关包，包名‘translate_o?sm…..’。获取请求的url=”<a href="https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;%EF%BC%8C%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%EF%BC%9Apost%EF%BC%8C%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF%EF%BC%8C%E4%BB%A5%E5%8F%8A%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E3%80%82%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90%E5%A6%82%E4%B8%8B%EF%BC%9A">https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;，请求方式：post，请求头信息，以及请求参数。请求参数分析如下：</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">i: world          			<span class="comment">//要翻译的文本，不管</span></span><br><span class="line"><span class="attr">from</span>: AUTO		            <span class="comment">//原文本的语言，AUTO表示自动识别，不管</span></span><br><span class="line"><span class="attr">to</span>: AUTO		 		    <span class="comment">//需要翻译成的语言，AUTO表示自动识别，不管</span></span><br><span class="line"><span class="attr">smartresult</span>: dict    		<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">client</span>: fanyideskweb    	<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">salt</span>: <span class="number">16293414783192</span>    				  <span class="comment">//应该是通过某种算法或加密得到    </span></span><br><span class="line"><span class="attr">sign</span>: 530e6e5252905a4774e78e524a42fd0b    <span class="comment">//应该是通过某种算法或加密得到 </span></span><br><span class="line"><span class="attr">lts</span>: <span class="number">1629341478319</span>       				  <span class="comment">//应该是通过某种算法或加密得到 </span></span><br><span class="line"><span class="attr">bv</span>: eda468fc64295ecf2810ab8a672c2db1      <span class="comment">//应该是通过某种算法或加密得到 </span></span><br><span class="line"><span class="attr">doctype</span>: json    			<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">version</span>: <span class="number">2.1</span>     			<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">keyfrom</span>: fanyi.web    		<span class="comment">//应该是固定的，不管</span></span><br><span class="line"><span class="attr">action</span>: FY_BY_REALTlME      <span class="comment">//应该是固定的，不管</span></span><br></pre></td></tr></table></figure>

<p>通过观察，很明显有些请求参数是固定的，可以不需要修改，不用管<br>但是还有些参数是应该是通过某种算法或加密得到的，而且每次请求都不一样，所以需要自己根据其后端接口的规则来模仿实现。</p>
<p>ajax请求是js文件写的，所以找到发送该ajax请求的js文件。找法：右击查看网页源代码，在网页源代码中找调用的js文件。可以打开js文件看看里面有没有相关的请求参数，如果基本都有，那就应该是该js文件。该js文件一般没有格式化，可以用js美化工具经行美化，方便阅读。</p>
<p>拿到js文件后，分析需要的请求参数在里面是怎么实现的，以有道翻译为例。<br>下面4个是我们需要自己实现的请求参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">salt: <span class="number">16293414783192</span></span><br><span class="line"><span class="attr">sign</span>: 530e6e5252905a4774e78e524a42fd0b</span><br><span class="line"><span class="attr">lts</span>: <span class="number">1629341478319</span></span><br><span class="line"><span class="attr">bv</span>: eda468fc64295ecf2810ab8a672c2db1</span><br></pre></td></tr></table></figure>

<p>然后在js文件中找这些参数实现的原理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">i: n,   <span class="comment">//n表示当前要翻译的单词</span></span><br><span class="line"><span class="attr">from</span>: C,</span><br><span class="line"><span class="attr">to</span>: S,</span><br><span class="line"><span class="attr">smartresult</span>: <span class="string">&quot;dict&quot;</span>,</span><br><span class="line"><span class="attr">client</span>: E,   </span><br><span class="line"><span class="attr">salt</span>: r.salt,    	<span class="comment">//找到这4个参数的实现原理，要找到r</span></span><br><span class="line"><span class="attr">sign</span>: r.sign,    	<span class="comment">//</span></span><br><span class="line"><span class="attr">lts</span>: r.ts,		 	<span class="comment">//</span></span><br><span class="line"><span class="attr">bv</span>: r.bv,		 	<span class="comment">//</span></span><br><span class="line"><span class="attr">doctype</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line"><span class="attr">version</span>: <span class="string">&quot;2.1&quot;</span>,</span><br><span class="line"><span class="attr">keyfrom</span>: <span class="string">&quot;fanyi.web&quot;</span>,</span><br><span class="line"><span class="attr">action</span>: e || <span class="string">&quot;FY_BY_DEFAULT&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//找到了这个</span></span><br><span class="line">r = v.generateSaltSign(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//按照逻辑一路往上找，最后找到该函数</span></span><br><span class="line"><span class="comment">//函数返回的这4个参数就是我们需要的参数，参数的实现原理也在其中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;   <span class="comment">//e就是表示上面的n</span></span><br><span class="line">			<span class="keyword">var</span> t = n.md5(navigator.appVersion),    <span class="comment">//md5加密navigator.appVersion，‘navigator.appVersion’返回浏览器版本，可以在浏览器工作台打印看看，是固定的</span></span><br><span class="line">				r = <span class="string">&quot;&quot;</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime(),   <span class="comment">//获取时间戳，然后改为文本类型</span></span><br><span class="line">				i = r + <span class="built_in">parseInt</span>(<span class="number">10</span> * <span class="built_in">Math</span>.random(), <span class="number">10</span>);  <span class="comment">//r加上随机数1到10</span></span><br><span class="line">			<span class="keyword">return</span> &#123;   </span><br><span class="line">				<span class="attr">ts</span>: r,</span><br><span class="line">				<span class="attr">bv</span>: t,</span><br><span class="line">				<span class="attr">salt</span>: i,</span><br><span class="line">				<span class="attr">sign</span>: n.md5(<span class="string">&quot;fanyideskweb&quot;</span> + e + i + <span class="string">&quot;Y2FYu%TNSbMCxc3t2u^XT&quot;</span>)  <span class="comment">//md5加密</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br></pre></td></tr></table></figure>

<p>找到了参数的实现原理后，用python代码把这些参数重新实现一遍，然后就可以发送请求：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">input</span>(<span class="string">&quot;请输入&quot;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;SESSION_FROM_COOKIE=www.baidu.com; OUTFOX_SEARCH_USER_ID=-1154821063@117.162.66.74; JSESSIONID=aaaogRJYT3CYncQm3pCTx; OUTFOX_SEARCH_USER_ID_NCOO=1780673000.2103813; ___rl__test__cookies=1629341478311&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://fanyi.youdao.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timestamp = <span class="built_in">str</span>(time.time()*<span class="number">1000</span>)  <span class="comment">#时间戳，默认秒，转换成毫秒，转换文本型</span></span><br><span class="line">salt = timestamp + <span class="built_in">str</span>(random.randint(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">text = <span class="string">&quot;fanyideskweb&quot;</span> + n + salt + <span class="string">&quot;Y2FYu%TNSbMCxc3t2u^XT&quot;</span></span><br><span class="line">sign = hashlib.md5(text.encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()   <span class="comment">#md5加密后获取值</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;i&quot;</span>: n,</span><br><span class="line">    <span class="string">&quot;from&quot;</span>: <span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;to&quot;</span>: <span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;smartresult&quot;</span>: <span class="string">&quot;dict&quot;</span>,</span><br><span class="line">    <span class="string">&quot;client&quot;</span>: <span class="string">&quot;fanyideskweb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;salt&quot;</span>: salt,             <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;sign&quot;</span>: sign,             <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;lts&quot;</span>: timestamp,         <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;bv&quot;</span>: <span class="string">&quot;eda468fc64295ecf2810ab8a672c2db1&quot;</span>,    <span class="comment">#</span></span><br><span class="line">    <span class="string">&quot;doctype&quot;</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;2.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;keyfrom&quot;</span>: <span class="string">&quot;fanyi.web&quot;</span>,</span><br><span class="line">    <span class="string">&quot;action&quot;</span>: <span class="string">&quot;FY_BY_REALTlME&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.post(url, headers=headers, data=data)</span><br><span class="line">text = resp.text</span><br><span class="line">text = json.loads(text)</span><br><span class="line">fanyi = text.get(<span class="string">&quot;translateResult&quot;</span>)[<span class="number">0</span>][<span class="number">0</span>].get(<span class="string">&quot;tgt&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fanyi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="comment"># 请输入hello world</span></span><br><span class="line"><span class="comment"># 你好世界</span></span><br></pre></td></tr></table></figure>

<h3 id="自动识别验证码"><a href="#自动识别验证码" class="headerlink" title="自动识别验证码"></a>自动识别验证码</h3><p>自动识别验证码，这里使用的是打码平台。</p>
<p>以菲菲打码平台为例，网址：<a href="http://www.fateadm.com/">http://www.fateadm.com/</a></p>
<p>1，注册登入，付款买积分（不贵，用于学习足够）<br>2，“开发文档”—–&gt;”例子参考“—–&gt;”demo下载“—–&gt;”python3“—–&gt;“下载解压得到py文件，可以直接使用”<br>3，该py文件中，定义了API接口调用类“FateadmApi”。如果不会使用，下面还定义了测试函数“TestFunc”。复制测试函数，粘贴到新的py文件，稍作修改，自己定义相关接口。如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fateadm_api <span class="keyword">import</span> FateadmApi   <span class="comment">#导入API接口调用类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestFunc</span>(<span class="params">img_path,pred_type</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    验证码图片识别</span></span><br><span class="line"><span class="string">    :param img_path: 验证码图片路径</span></span><br><span class="line"><span class="string">    :param pred_type: 验证码图片类型，下面就类型说明</span></span><br><span class="line"><span class="string">    :return: 对应的验证码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pd_id           = <span class="string">&quot;***不方便展示***&quot;</span>     <span class="comment">#用户中心页可以查询到pd信息</span></span><br><span class="line">    pd_key          = <span class="string">&quot;***不方便展示***&quot;</span></span><br><span class="line">    app_id          = <span class="string">&quot;***不方便展示***&quot;</span>     <span class="comment">#开发者分成用的账号，在开发者中心可以查询到</span></span><br><span class="line">    app_key         = <span class="string">&quot;***不方便展示***&quot;</span></span><br><span class="line">    <span class="comment">#识别类型，</span></span><br><span class="line">    <span class="comment">#具体类型可以查看官方网站的价格页选择具体的类型，不清楚类型的，可以咨询客服</span></span><br><span class="line">    pred_type       = pred_type</span><br><span class="line">    api             = FateadmApi(app_id, app_key, pd_id, pd_key)</span><br><span class="line">    <span class="comment"># 查询余额</span></span><br><span class="line">    balance 		= api.QueryBalcExtend()   <span class="comment"># 直接返余额</span></span><br><span class="line">    <span class="comment"># api.QueryBalc()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过文件形式识别：</span></span><br><span class="line">    file_name       = img_path</span><br><span class="line">    <span class="comment"># 多网站类型时，需要增加src_url参数，具体请参考api文档: http://docs.fateadm.com/web/#/1?page_id=6</span></span><br><span class="line">    <span class="comment"># result =  api.PredictFromFileExtend(pred_type,file_name)   # 直接返回识别结果</span></span><br><span class="line">    rsp             = api.PredictFromFile(pred_type, file_name)  <span class="comment"># 直接返回详细识别结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rsp.pred_rsp.value   <span class="comment">#返回识别结果</span></span><br></pre></td></tr></table></figure>

<p>pd_id、pd_key、app_id、app_key要填写自己的，在用户中可以找到。参数：pred_type是验证码类型，在“开发文档”—–&gt;”类型说明”。img_path是验证码的图片路径。</p>
<p>使用例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fateadm_api_my <span class="keyword">import</span> TestFunc   <span class="comment">#导入自己定义的接口函数</span></span><br><span class="line"></span><br><span class="line">result = TestFunc(<span class="string">&quot;image.png&quot;</span>,<span class="string">&quot;30900&quot;</span>)  <span class="comment">#调用函数，参数：验证码图片路径、验证码类型</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<p>访问要填写验证码的网站时，需要保存该验证码的图片，然后导入并调用我们定义的接口函数，传入参数：验证码图片路径、验证码类型，返回验证码识别结果。识别结果有一定的几率识别错误。</p>
<p>如果某个打码平台用不了了，属于正常现象，不必惊奇。</p>
<h3 id="字体反爬"><a href="#字体反爬" class="headerlink" title="字体反爬"></a>字体反爬</h3><p>网页开发者自己创造一种字体，因为在字体中每个文字都有其代号，那么以后再网页中不会直接显示这个文字的最终效果，而是显示他的代号。因此即使获取到了网页中的文字内容，也只是获取到文字的代号，而不是文字本身。从而达到反爬目的。</p>
<p>因为创造字体费时费力，数量多也影响网页加载。一般情况下为了反爬，仅会针对0-9以及少数汉字单独创造，其他还是使用用户系统中自带的字体。</p>
<p>这里以爬取这个网址：<a href="https://su.58.com/qztech/%E4%B8%BA%E4%BE%8B%E5%AD%90%E3%80%82">https://su.58.com/qztech/为例子。</a></p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>在网页源代码中我们可以找到@font-face属性，@font-face属性中一般有两种情况：<br>1，字体被编码成base64方式，直接获取@font-face中base64后面的内容。<br>2，字体文件放到服务器上，在@font-face中可以找到其url，直接下载。</p>
<p><strong>分析字体</strong>：</p>
<p>分析字体时，需要将字体转换成xml文件和ttf文件。<br>xml文件：可查看里的cmap和glyf内容。cmap中储存code（就是文字的代号，网页源代码显示的代号）和name的映射关系。glyf中储存name和对应的字体绘制规则。<br>ttf文件：在xml中可以得到字体绘制规则，类似坐标的形式，但是不知道字体长什么样子。有一款软件FontCreator，可以打开ttf文件，能看到最终字体的呈现效果。（软件下载地址：<a href="https://www.high-logic.com/FontCreatorSetup-x64.exe">https://www.high-logic.com/FontCreatorSetup-x64.exe</a></p>
<p>分析字体其目的是为了得到真实的字体和其字体对应的字体绘制规则</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"><span class="comment"># font_face是被经过base64解码后的字符串，其本身就是一个字体文件</span></span><br><span class="line">font_face = <span class="string">&#x27;d09GRgABAAAAACEUAAsAAAAAK....8klH9vrSy9aNNlv0CLWhrggA=&#x27;</span>  <span class="comment">#@font-face中复制的，内容太多，省略。</span></span><br><span class="line"><span class="comment">#将font_face用base64解密，放到Bytes管道中，然后创建TTFont对象。</span></span><br><span class="line">baseFont = TTFont(io.BytesIO(base64.b64decode(font_face)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># onlineFont.saveXML(&quot;58.xml&quot;)  #将字体保存成xml文件</span></span><br><span class="line"><span class="comment"># onlineFont.save(&quot;58.ttf&quot;)     #将字体保存成ttf文件</span></span><br><span class="line"></span><br><span class="line">baseGlyf = baseFont[<span class="string">&quot;glyf&quot;</span>]   <span class="comment">#获取glyg内容：name和其对应的字体绘制规则</span></span><br><span class="line"><span class="comment">#通过分析字体，得到真实字体和其对应的字体绘制规则。</span></span><br><span class="line">baseFontMap = &#123;</span><br><span class="line">    <span class="string">&quot;0&quot;</span>:baseGlyf[<span class="string">&quot;uniE3D3&quot;</span>],</span><br><span class="line">    <span class="string">&quot;1&quot;</span>:baseGlyf[<span class="string">&quot;uniF4C8&quot;</span>],</span><br><span class="line">    <span class="string">&quot;2&quot;</span>:baseGlyf[<span class="string">&quot;uniEB1C&quot;</span>],</span><br><span class="line">    <span class="string">&quot;3&quot;</span>:baseGlyf[<span class="string">&quot;uniF843&quot;</span>],</span><br><span class="line">    <span class="string">&quot;4&quot;</span>:baseGlyf[<span class="string">&quot;uniEA7C&quot;</span>],</span><br><span class="line">    <span class="string">&quot;5&quot;</span>:baseGlyf[<span class="string">&quot;uniE90E&quot;</span>],</span><br><span class="line">    <span class="string">&quot;6&quot;</span>:baseGlyf[<span class="string">&quot;uniE881&quot;</span>],</span><br><span class="line">    <span class="string">&quot;7&quot;</span>:baseGlyf[<span class="string">&quot;uniE671&quot;</span>],</span><br><span class="line">    <span class="string">&quot;8&quot;</span>:baseGlyf[<span class="string">&quot;uniEEB6&quot;</span>],</span><br><span class="line">    <span class="string">&quot;9&quot;</span>:baseGlyf[<span class="string">&quot;uniE295&quot;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>font-face的字体内容每次访问都不一样，所以上面的代码只是为了得到“baseFontMap”：真实字体和其对应的字体绘制规则的映射</p>
<p>代码实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comp</span>(<span class="params">shape_1, shape_2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    传入两个字体的绘制规则，判断这两个字体绘制的各个坐标的差异是否小于某某范围，一般40以内。匹配不到可扩大范围，出现乱匹配可缩小范围。</span></span><br><span class="line"><span class="string">    :param shape_1: 字体绘制规则1</span></span><br><span class="line"><span class="string">    :param shape_2: 字体绘制规则2</span></span><br><span class="line"><span class="string">    :return: True:各个坐标差异小于指定范围； False:各个坐标差异大于指定范围</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取字体绘制规则的坐标详情</span></span><br><span class="line">    shape_1 = shape_1.coordinates</span><br><span class="line">    shape_2 = shape_2.coordinates</span><br><span class="line">    <span class="comment"># 判断两个字体绘制规则的坐标个数是否一样</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(shape_1) == <span class="built_in">len</span>(shape_2):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(shape_1)):</span><br><span class="line">            <span class="comment"># 判断两个字体绘制规则相应的坐标，差异的范围是否在指定范围内。</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(shape_1[i][<span class="number">0</span>]-shape_2[i][<span class="number">0</span>])&gt;<span class="number">70</span> <span class="keyword">or</span> <span class="built_in">abs</span>(shape_1[i][<span class="number">1</span>]-shape_2[i][<span class="number">1</span>])&gt;<span class="number">70</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    font_face = <span class="string">&#x27;d09GRgABAAAAAC...aNNlv0CLWhrggA=&#x27;</span>   <span class="comment">##@font-face中复制的，内容太多，省略。</span></span><br><span class="line">    baseFont = TTFont(io.BytesIO(base64.b64decode(font_face)))</span><br><span class="line">    baseGlyf = baseFont[<span class="string">&quot;glyf&quot;</span>]</span><br><span class="line">    <span class="comment"># 得到真实字体和其对应的字体绘制规则的映射</span></span><br><span class="line">    baseFontMap = &#123;</span><br><span class="line">        <span class="string">&quot;0&quot;</span>:baseGlyf[<span class="string">&quot;uniE3D3&quot;</span>],</span><br><span class="line">        <span class="string">&quot;1&quot;</span>:baseGlyf[<span class="string">&quot;uniF4C8&quot;</span>],</span><br><span class="line">        <span class="string">&quot;2&quot;</span>:baseGlyf[<span class="string">&quot;uniEB1C&quot;</span>],</span><br><span class="line">        <span class="string">&quot;3&quot;</span>:baseGlyf[<span class="string">&quot;uniF843&quot;</span>],</span><br><span class="line">        <span class="string">&quot;4&quot;</span>:baseGlyf[<span class="string">&quot;uniEA7C&quot;</span>],</span><br><span class="line">        <span class="string">&quot;5&quot;</span>:baseGlyf[<span class="string">&quot;uniE90E&quot;</span>],</span><br><span class="line">        <span class="string">&quot;6&quot;</span>:baseGlyf[<span class="string">&quot;uniE881&quot;</span>],</span><br><span class="line">        <span class="string">&quot;7&quot;</span>:baseGlyf[<span class="string">&quot;uniE671&quot;</span>],</span><br><span class="line">        <span class="string">&quot;8&quot;</span>:baseGlyf[<span class="string">&quot;uniEEB6&quot;</span>],</span><br><span class="line">        <span class="string">&quot;9&quot;</span>:baseGlyf[<span class="string">&quot;uniE295&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 去爬取网页</span></span><br><span class="line">    url = <span class="string">&quot;https://su.58.com/qztech/&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;f=n; commoer=101...&#x27;</span>,   <span class="comment">#直接复制的cookie，内容太多，省略。</span></span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://passport.58.com/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resp = requests.get(url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    <span class="comment"># 获取font_face内容</span></span><br><span class="line">    font_face = re.search(<span class="string">&quot;@font-face.+?base64,(.+?)\)&quot;</span>,text,re.DOTALL).group(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 创建TTFont对象</span></span><br><span class="line">    currentFont = TTFont(io.BytesIO(base64.b64decode(font_face)))</span><br><span class="line">    <span class="comment">#获取cmap内容，即code和name的映射</span></span><br><span class="line">    currentCmap = currentFont.getBestCmap()</span><br><span class="line">    <span class="comment">#获取glyf内容，即name和字体绘制规则的映射</span></span><br><span class="line">    currentGlyf = currentFont[<span class="string">&quot;glyf&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> code,name <span class="keyword">in</span> currentCmap.items():</span><br><span class="line">        <span class="comment"># 当前网页的字体绘制规则</span></span><br><span class="line">        currentShape = currentGlyf[name]</span><br><span class="line">        <span class="keyword">for</span> font,shape <span class="keyword">in</span> baseFontMap.items():</span><br><span class="line">            <span class="comment">#1，如果字体绘制规则不变，可以这样写，直接相等。则说明code对应其font</span></span><br><span class="line">            <span class="comment">#if shape == currentShape:</span></span><br><span class="line">            <span class="comment">#2，如果字体绘制规则每次访问时都会略微改变，判断对应的坐标改变在某某范围以内，则视为同一字体。则说明code对应其font</span></span><br><span class="line">            <span class="keyword">if</span> comp(shape, currentShape):</span><br><span class="line">                <span class="comment">#把code转换成网页源代码上显示的格式，把code（十进制）转十六进制，然后把开头的“0”改为“&amp;#”，然后末尾加“;”</span></span><br><span class="line">                code = <span class="built_in">str</span>(<span class="built_in">hex</span>(code)).replace(<span class="string">&#x27;0&#x27;</span>,<span class="string">&quot;&amp;#&quot;</span>,<span class="number">1</span>) + <span class="string">&quot;;&quot;</span></span><br><span class="line">                text = re.sub(code,font,text)</span><br><span class="line">    <span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫基础</title>
    <url>/2021/07/24/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>python网络爬虫</p>
<p>这是一篇文章关于python网络爬虫的个人笔记，</p>
<p>包括请求网站，解析数据，保存数据，多线程爬虫</p>
<span id="more"></span>

<h1 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h1><h2 id="urllib库-—内置"><a href="#urllib库-—内置" class="headerlink" title="urllib库  —内置"></a>urllib库  —内置</h2><h3 id="urlopen函数"><a href="#urlopen函数" class="headerlink" title="urlopen函数"></a>urlopen函数</h3><p>创建一个表示远程url的类文件对象，然后像本地文件一样操作这类文件对象来获取远程数据。在urllib.request模块中</p>
<p>url: 请求的url<br>data: 请求的data，如果设置了该参数，为post请求<br>返回值: 返回值是一个http.client.HTTPResponse对象，<br>该对象是一个类文件句柄对象。有read(size),readline,readlines,getcode等方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">resp = request.urlopen(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.read())</span><br><span class="line"><span class="built_in">print</span>(resp.getcode())</span><br></pre></td></tr></table></figure>

<h3 id="urlretrieve函数"><a href="#urlretrieve函数" class="headerlink" title="urlretrieve函数"></a>urlretrieve函数</h3><p>将网页上的某个文件保存到本地,在urllib.request模块中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">request.urlretrieve(url, file_name)</span><br></pre></td></tr></table></figure>

<h3 id="urlencode函数：编码"><a href="#urlencode函数：编码" class="headerlink" title="urlencode函数：编码"></a>urlencode函数：编码</h3><p>urlencode可以把字典数据转化成url<em><strong>编码</strong></em>的数据，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">18</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>( parse.urlencode(data) )</span><br><span class="line"></span><br><span class="line"><span class="comment">#name=%E7%8C%AA%E5%85%AB%E6%88%92&amp;age=18&amp;gender=%E7%94%B7       打印结果</span></span><br></pre></td></tr></table></figure>

<p><em>注</em>：urlencode对字典编码；quote对字符串编码。</p>
<h3 id="parse-qs函数：解码"><a href="#parse-qs函数：解码" class="headerlink" title="parse_qs函数：解码"></a>parse_qs函数：解码</h3><p>可以将经过编码后的url参数进行<em><strong>解码</strong></em>，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;name=%E7%8C%AA%E5%85%AB%E6%88%92&amp;age=18&amp;gender=%E7%94%B7&quot;</span></span><br><span class="line"><span class="built_in">print</span>( parse.parse_qs(data) )</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;&#x27;name&#x27;: [&#x27;猪八戒&#x27;], &#x27;age&#x27;: [&#x27;18&#x27;], &#x27;gender&#x27;: [&#x27;男&#x27;]&#125;           打印结果</span></span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：parse_qs解码成字典；unquote解码成字符串。</p>
<h3 id="urlparse和urlsplit函数：解析url"><a href="#urlparse和urlsplit函数：解析url" class="headerlink" title="urlparse和urlsplit函数：解析url"></a>urlparse和urlsplit函数：解析url</h3><p>对url各个组成部分进行分割，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com/index.html;user?id=S#comment&quot;</span></span><br><span class="line">result = parse.urlparse(url)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment">#打印结果:</span></span><br><span class="line"><span class="comment">#ParseResult(scheme=&#x27;http&#x27;, netloc=&#x27;www.baidu.com&#x27;, path=&#x27;/index.html&#x27;, params=&#x27;user&#x27;, query=&#x27;id=S&#x27;, fragment=&#x27;comment&#x27;)</span></span><br><span class="line">result2 = parse.urlsplit(url)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line"><span class="comment">#打印结果:</span></span><br><span class="line"><span class="comment">#SplitResult(scheme=&#x27;http&#x27;, netloc=&#x27;www.baidu.com&#x27;, path=&#x27;/index.html;user&#x27;, query=&#x27;id=S&#x27;, fragment=&#x27;comment&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(result.scheme)      <span class="comment">#http</span></span><br><span class="line"><span class="built_in">print</span>(result.netloc)      <span class="comment">#www.baidu.com</span></span><br></pre></td></tr></table></figure>

<p><em>注</em>：urlparse函数和urlsplit函数用法基本一样，唯一的区别是urlparse有params属性，而urlsplit没有。</p>
<h3 id="request-Request类：网络请求，可添加请求头，请求参数"><a href="#request-Request类：网络请求，可添加请求头，请求参数" class="headerlink" title="request.Request类：网络请求，可添加请求头，请求参数"></a>request.Request类：网络请求，可添加请求头，请求参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like    Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)   <span class="comment">#重点，添加请求头信息，User-Agent</span></span><br><span class="line">resp = request.urlopen(rq)</span><br><span class="line"><span class="built_in">print</span>(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="ProxyHandler处理器（代理设置）：封ip问题"><a href="#ProxyHandler处理器（代理设置）：封ip问题" class="headerlink" title="ProxyHandler处理器（代理设置）：封ip问题"></a>ProxyHandler处理器（代理设置）：封ip问题</h3><p>代理原理：在请求网站之前，先请求代理服务器，然后让代理服务器去请求目标网站，代理服务器拿到目标网站数据后，再转发给我们的代码。</p>
<p><a href="http://httpbin.org/">http://httpbin.org</a>  —这个网站方便查看http请求的一些参数</p>
<p>常用的代理有：</p>
<ul>
<li>快代理：<a href="https://www.kuaidaili.com/">https://www.kuaidaili.com/</a></li>
<li>代理云</li>
</ul>
<p>在代码中使用代理：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/ip&quot;</span></span><br><span class="line"><span class="comment">#创建handler</span></span><br><span class="line">handler = request.ProxyHandler(&#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;58.56.149.198:53281&quot;</span>&#125;)</span><br><span class="line"><span class="comment">#创建opener</span></span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"><span class="comment">#使用opener发送请求</span></span><br><span class="line">resp = opener.<span class="built_in">open</span>(url)</span><br><span class="line"><span class="built_in">print</span>( resp.read() )</span><br></pre></td></tr></table></figure>

<h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies:"></a>cookies:</h3><p>某些网站为了辨别用户身份，进行session跟踪而存储在用户本地终端上的数据</p>
<h4 id="模拟cookies访问网站方法一："><a href="#模拟cookies访问网站方法一：" class="headerlink" title="模拟cookies访问网站方法一："></a>模拟cookies访问网站方法一：</h4><p>用浏览器访问网站后，手动抓包，将cookie信息复制，放到代码的请求头上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.zhihu.com/&quot;</span></span><br><span class="line">headers = &#123;  </span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like    Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span>,</span><br><span class="line"><span class="string">&quot;cookie&quot;</span>: <span class="string">&#x27;_zap=5b69d7ff-9b3f-468b-b891-103b2029d8a3;..#复制的cookie内容太多，省略不写</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">rq = request.Request(url, headers=headers)</span></span><br><span class="line"><span class="string">resp = request.urlopen(rq)</span></span><br><span class="line"><span class="string">print(resp.read().decode(&quot;utf-8&quot;))</span></span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法二："><a href="#模拟cookies访问网站方法二：" class="headerlink" title="模拟cookies访问网站方法二："></a>模拟cookies访问网站方法二：</h4><p>http.cookiejar模块，主要有CookieJar，FileCookieJar，MozillaCookieJar，LWPCookieJar四个类</p>
<p>CookieJar：将cookie保存在内存中</p>
<p>FileCookieJar，MozillaCookieJar，LWPCookieJar：将cookie保存在文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> CookieJar</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="comment">#1，登入</span></span><br><span class="line">cookiejar = CookieJar()</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)  <span class="comment">#创建handler</span></span><br><span class="line">opener = request.build_opener(handler)            <span class="comment">#创建opener</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#opener发送请求前，准备登入的url,请求头,请求参数(需要编码)</span></span><br><span class="line">post_url = <span class="string">&quot;https://i.meishi.cc/login_t.php?username=17370466454&amp;login_type=1&amp;password=575389&quot;</span></span><br><span class="line">post_headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">post_data = parse.urlencode(&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;17370466454&quot;</span>,</span><br><span class="line">    <span class="string">&quot;login_type&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;575389&quot;</span></span><br><span class="line">&#125;)    </span><br><span class="line"><span class="comment">#request.Request()里的data只能接收字节，所以data=post_data.encode(&quot;utf-8&quot;)</span></span><br><span class="line">post_rq = request.Request(url=post_url, headers=post_headers, data=post_data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="comment">#opener访问网站后，网站的cookie暂时保存在内存opener中</span></span><br><span class="line">opener.<span class="built_in">open</span>(post_rq)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2，访问，opener已经带有cookie访问网站</span></span><br><span class="line">url = <span class="string">&quot;https://meishij.net/&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)</span><br><span class="line">resp = opener.<span class="built_in">open</span>(rq)</span><br><span class="line"><span class="built_in">print</span>(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="cookies的保存"><a href="#cookies的保存" class="headerlink" title="cookies的保存"></a>cookies的保存</h4><p>以MozillaCookieJar类为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookies = MozillaCookieJar(<span class="string">&quot;cookies.txt&quot;</span>)  <span class="comment">#保存cookies的文件</span></span><br><span class="line">handler = request.HTTPCookieProcessor(cookies)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)</span><br><span class="line">opener.<span class="built_in">open</span>(rq)</span><br><span class="line">cookies.save()   <span class="comment">#保存cookies</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#cookies.save( ignore_discard=False, ignore_expires=False )  默认</span></span><br><span class="line"><span class="comment">#ignore_discard=True       即使cookies即将被丢失也要保存起来</span></span><br><span class="line"><span class="comment">#ignore_expires=True	   如果cookies已经过期也将它保存，并且文件已存在时将覆盖</span></span><br></pre></td></tr></table></figure>



<h2 id="requests库-—第三方库"><a href="#requests库-—第三方库" class="headerlink" title="requests库  —第三方库"></a>requests库  —第三方库</h2><p>让HTTP服务人类</p>
<h3 id="安装和文档地址"><a href="#安装和文档地址" class="headerlink" title="安装和文档地址:"></a>安装和文档地址:</h3><ul>
<li><p>pip安装：pip install requests</p>
</li>
<li><p>中文文档：<a href="https://docs.python-requests.org/zh_CN/latest/index.html">https://docs.python-requests.org/zh_CN/latest/index.html</a></p>
</li>
<li><p>github地址：<a href="https://github.com/requests/requests">https://github.com/requests/requests</a></p>
</li>
</ul>
<h3 id="发送get请求："><a href="#发送get请求：" class="headerlink" title="发送get请求："></a>发送get请求：</h3><p>response = requests.get(url, headers=headers, params=params)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;wd&quot;</span>:<span class="string">&quot;中国&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url, headers=headers, params=params)  <span class="comment">#发送get请求</span></span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line"><span class="built_in">print</span>(response.content.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(response.json())  <span class="comment">#如果响应的是json格式字符串，直接将JSON转换成python数据，相当于json.loads(json)</span></span><br></pre></td></tr></table></figure>

<h3 id="发送post请求："><a href="#发送post请求：" class="headerlink" title="发送post请求："></a>发送post请求：</h3><p>方法与上面的<em><strong>发送get请求</strong></em>用法差不多：</p>
<p>response = requests.post(url, headers=headers, data=data)</p>
<h3 id="response-content和response-text区别："><a href="#response-content和response-text区别：" class="headerlink" title="response.content和response.text区别："></a>response.content和response.text区别：</h3><p>1，response.content：直接从网站上抓取数据，没有经过解码，所以是bytes类型，其实硬盘和网络上传输的字符串类型都是bytes类型。</p>
<p>2，response.text：是str数据类型，把response.content经行自动解码的结果，自动解码可能会出现乱码的情况，所以需要自己手动解码：response.content.decode(“utf-8”)。</p>
<h3 id="使用代理："><a href="#使用代理：" class="headerlink" title="使用代理："></a>使用代理：</h3><p>resp = requests.get(url, proxies=代理信息)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;116.196.88.86:3128&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/ip&quot;</span></span><br><span class="line">resp = requests.get(url, proxies=proxy)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<h3 id="处理cookie"><a href="#处理cookie" class="headerlink" title="处理cookie:"></a>处理cookie:</h3><h4 id="查看cookies"><a href="#查看cookies" class="headerlink" title="查看cookies"></a>查看cookies</h4><p>响应中如果包含cookie，可以通过cookies属性查看cookie：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(resp.cookies)</span><br><span class="line"><span class="built_in">print</span>(resp.cookies.get_dict())   <span class="comment">#字典型的coookie</span></span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法一：-1"><a href="#模拟cookies访问网站方法一：-1" class="headerlink" title="模拟cookies访问网站方法一："></a>模拟cookies访问网站方法一：</h4><p>用浏览器访问网站后，手动抓包，将cookie信息复制，放到代码的请求头上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.zhihu.com/&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span>,</span><br><span class="line"><span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;_zap=5b69d7ff-9b3f-468b-b891-103b2029d8&#x27;</span>   <span class="comment">#复制的cookie内容太多，省略</span></span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法二：使用session，共享cookie"><a href="#模拟cookies访问网站方法二：使用session，共享cookie" class="headerlink" title="模拟cookies访问网站方法二：使用session，共享cookie"></a>模拟cookies访问网站方法二：使用session，共享cookie</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#登入,准备好需要登入的网站，参数，请求头</span></span><br><span class="line">post_url = <span class="string">&quot;&quot;</span>      <span class="comment">#登入的网站</span></span><br><span class="line">post_data = &#123;&#125;     <span class="comment">#登入的参数，账号密码</span></span><br><span class="line">post_headers = &#123;&#125;  <span class="comment">#登入需要的请求头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1，创建session</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="comment">#2，用session发送请求，然后session会自动保存cookie信息</span></span><br><span class="line">session.post(url=post_url, data=post_data, headers=post_headers)</span><br><span class="line"><span class="comment">#3，session中已带有cookie信息，继续用session访问网站，实现cookie共享</span></span><br><span class="line">url = <span class="string">&quot;https://m.meishij.net/&quot;</span></span><br><span class="line">resp = session.get(url)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在session中添加代理IP</span></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;116.196.88.86:3128&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">session.proxies = proxy</span><br></pre></td></tr></table></figure>

<h3 id="处理不信任的ssl证书："><a href="#处理不信任的ssl证书：" class="headerlink" title="处理不信任的ssl证书："></a>处理不信任的ssl证书：</h3><p>对于哪些被信任的SSL证书的网站，如<a href="https://www.baidu.com/%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%E3%80%82">https://www.baidu.com/，直接访问可以正常返回响应。</a></p>
<p>而不被信任的SSL证书的网站无法正常返回响应。requests请求时需要把verify=False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://inv-veri.chinatax.gov.cn/&quot;</span></span><br><span class="line">resp = requests.get(url, verify=<span class="literal">False</span>)   <span class="comment">#verify=False</span></span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>



<h1 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h1><p>数据解析，即数据提取，爬取的所有信息中将需要的信息提取出来。</p>
<h2 id="XPath语法和lxml模块"><a href="#XPath语法和lxml模块" class="headerlink" title="XPath语法和lxml模块"></a>XPath语法和lxml模块</h2><h3 id="什么是XPath"><a href="#什么是XPath" class="headerlink" title="什么是XPath"></a>什么是XPath</h3><p>xpath（XML Path Language）是一门在xml和html文档中查找信息的语言，可用来在XML和HTML文档中对元素和属性经行遍历</p>
<h3 id="XPath开发工具"><a href="#XPath开发工具" class="headerlink" title="XPath开发工具"></a>XPath开发工具</h3><p>Chrome插件XPath Helper</p>
<p>Firefox插件Try XPath</p>
<h3 id="XPath节点"><a href="#XPath节点" class="headerlink" title="XPath节点"></a>XPath节点</h3><p>在XPath中，有七类类型的节点：元素，属性，文本，命名空间，处理指令，注释，文档(根)节点。XML文档是被作为节点树来对待的。树的根被称为文档节点或者根节点。</p>
<h3 id="XPath基本语法："><a href="#XPath基本语法：" class="headerlink" title="XPath基本语法："></a>XPath基本语法：</h3><h4 id="路径表达式："><a href="#路径表达式：" class="headerlink" title="路径表达式："></a>路径表达式：</h4><table>
<thead>
<tr>
<th align="left">表达式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">nodename</td>
<td align="left">选取此节点的所有子节点。</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">从根节点选取（取子节点）。</td>
</tr>
<tr>
<td align="left">//</td>
<td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置（取子孙节点）。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">选取当前节点。</td>
</tr>
<tr>
<td align="left">..</td>
<td align="left">选取当前节点的父节点。</td>
</tr>
<tr>
<td align="left">@</td>
<td align="left">选取属性。</td>
</tr>
</tbody></table>
<h4 id="谓语："><a href="#谓语：" class="headerlink" title="谓语："></a>谓语：</h4><table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">/bookstore/book[1]</td>
<td align="left">选取属于 bookstore 子元素的第一个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[last()]</td>
<td align="left">选取属于 bookstore 子元素的最后一个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[last()-1]</td>
<td align="left">选取属于 bookstore 子元素的倒数第二个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[position()&lt;3]</td>
<td align="left">选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td>
</tr>
<tr>
<td align="left">//title[@lang]</td>
<td align="left">选取所有拥有名为 lang 的属性的 title 元素。</td>
</tr>
<tr>
<td align="left">//title[@lang=’eng’]</td>
<td align="left">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>
</tr>
<tr>
<td align="left">/bookstore/book[price&gt;35.00]</td>
<td align="left">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
<tr>
<td align="left">/bookstore/book[price&gt;35.00]//title</td>
<td align="left">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
</tbody></table>
<h4 id="通配符："><a href="#通配符：" class="headerlink" title="通配符："></a>通配符：</h4><table>
<thead>
<tr>
<th align="left">通配符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配任何元素节点。</td>
</tr>
<tr>
<td align="left">@*</td>
<td align="left">匹配任何属性节点。</td>
</tr>
<tr>
<td align="left">node()</td>
<td align="left">匹配任何类型的节点。</td>
</tr>
</tbody></table>
<h4 id="选取若干路径："><a href="#选取若干路径：" class="headerlink" title="选取若干路径："></a>选取若干路径：</h4><table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">//book/title | //book/price</td>
<td align="left">选取 book 元素的所有 title 和 price 元素。</td>
</tr>
<tr>
<td align="left">//title | //price</td>
<td align="left">选取文档中的所有 title 和 price 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book/title | //price</td>
<td align="left">选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td>
</tr>
</tbody></table>
<h3 id="lxml库："><a href="#lxml库：" class="headerlink" title="lxml库："></a>lxml库：</h3><p>安装：pip install lxml</p>
<p>lxml python 官方文档：<a href="https://lxml.de/index.html">https://lxml.de/index.html</a></p>
<p>基本使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#随便定义的html文本举例</span></span><br><span class="line">text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">	&lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">	&lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">	&lt;script type=&quot;text/javascript&quot; src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">	&lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">		&lt;input type=&quot;text&quot;&gt;</span></span><br><span class="line"><span class="string">		&lt;p&gt;&lt;a href=&#x27;www.baidu.com&#x27;&gt;hello&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">	&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment">#将字符串解析为html文档树</span></span><br><span class="line">html= etree.HTML(text)</span><br><span class="line"><span class="built_in">print</span>(html)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将html列化为字符串,即获取元素的源代码</span></span><br><span class="line">result = etree.tostring(html).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#element.get(&quot;属性&quot;)  获取元素的某个属性的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从文件中读取html代码</span></span><br><span class="line">html = etree.parse(<span class="string">&quot;hello.html&quot;</span>)</span><br><span class="line">result = etree.tostring(html).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h3 id="在lxml中使用xpath语法："><a href="#在lxml中使用xpath语法：" class="headerlink" title="在lxml中使用xpath语法："></a>在lxml中使用xpath语法：</h3><p>文件路径：hello.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link0.html&quot;</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link1.html&quot;</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-inactive&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link2.html&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link3.html&quot;</span>&gt;</span>forth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link4.html&quot;</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>练习语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在lxml中使用xpath</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">html = etree.parse(<span class="string">&quot;hello.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1,获取所有li标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(etree.tostring(i))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#2，获取所有li标签下的class属性值</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/@class&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3,获取li标签下href为&quot;link0.html&quot;的a标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/a[@href=&#x27;link0.html&#x27;]&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4,获取li标签下所有span标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li//span&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5,获取li标签下的a标签的所有class属性</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/a//@class&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6,获取最后一个li的a的href属性对应的值</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()]/a/@href&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7,获取倒数第二个li元素的内容</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()-1]/a&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result[<span class="number">0</span>].text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8,获取倒是第二个li元素的内容的第二种方式</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()-1]/a/text()&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="xpath实战-爬取笑话网站："><a href="#xpath实战-爬取笑话网站：" class="headerlink" title="xpath实战-爬取笑话网站："></a>xpath实战-爬取笑话网站：</h3><p>网站：<a href="https://xiaohua.zol.com.cn/new/">https://xiaohua.zol.com.cn/new/</a></p>
<p>详情：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;https://xiaohua.zol.com.cn/&quot;</span>   </span><br><span class="line">joke = []     <span class="comment">#存放joke的容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解析每一页笑话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    detail_url_list = html.xpath(<span class="string">&quot;//ul[@class=&#x27;article-list&#x27;]/li[@class=&#x27;article-summary&#x27;]//a[@class=&#x27;all-read&#x27;]/@href&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_url_list:</span><br><span class="line">        detail_url = url+detail_url</span><br><span class="line">        parse_detail(detail_url)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#解析详情页笑话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>(<span class="params">detail_url</span>):</span></span><br><span class="line">    resp = requests.get(detail_url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    joke_title = html.xpath(<span class="string">&quot;//h1[@class=&#x27;article-title&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    joke_content = <span class="string">&#x27;&#x27;</span>.join(html.xpath(<span class="string">&quot;//div[@class=&#x27;article-text&#x27;]//text()&quot;</span>)).strip()</span><br><span class="line">    joke.append(&#123;</span><br><span class="line">        <span class="string">&quot;joke_title&quot;</span>: joke_title,</span><br><span class="line">        <span class="string">&quot;joke_content&quot;</span>: joke_content</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;joke_title&#125;</span>笑话下载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#主流程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):      <span class="comment">##1，2，3页笑话</span></span><br><span class="line">        page_url = <span class="string">f&quot;https://xiaohua.zol.com.cn/new/<span class="subst">&#123;i&#125;</span>.html&quot;</span>    </span><br><span class="line">        parse_page(page_url)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;joke.json&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="comment">#json.dump函数，将内存的数据保存到文件中</span></span><br><span class="line">        <span class="comment">#如果ensure_ascii没有设置为False，那么保存到json文件中文会存储为Unicode字符串</span></span><br><span class="line">        json.dump(joke, fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;所有笑话加载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p><em><strong>注</strong></em>：测试时，for循环中应添加break终止循环。代码运行时，添加time.sleep(2)，避免数据抓取过于频繁。</p>
<h2 id="BeautifulSoup4库"><a href="#BeautifulSoup4库" class="headerlink" title="BeautifulSoup4库"></a>BeautifulSoup4库</h2><p>和lxml一样，BeautifulSoup也是一个HTML/XML的解析器，主要功能也是解析和提取HTML/XML数据。</p>
<h3 id="安装和文档"><a href="#安装和文档" class="headerlink" title="安装和文档:"></a>安装和文档:</h3><p>安装：</p>
<p>pip install bs4</p>
<p>中文文档：</p>
<p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p>
<h3 id="几大解析工具对比："><a href="#几大解析工具对比：" class="headerlink" title="几大解析工具对比："></a>几大解析工具对比：</h3><table>
<thead>
<tr>
<th>解析工具</th>
<th>解析速度</th>
<th>解析难度</th>
</tr>
</thead>
<tbody><tr>
<td>BeautifulSoup</td>
<td>最慢</td>
<td>最简单</td>
</tr>
<tr>
<td>lxml</td>
<td>快</td>
<td>简单</td>
</tr>
<tr>
<td>正则</td>
<td>最快</td>
<td>最难</td>
</tr>
</tbody></table>
<h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">	&lt;a href=&quot;link.html&quot;&gt;hello word!!&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#第二个参数选择解析器，这里使用的是lxml解析器，已下载过。</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(soup)  	<span class="comment">#输html文档树</span></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())  <span class="comment">#输出格式有自动缩进</span></span><br><span class="line"><span class="built_in">print</span>(soup.a)   <span class="comment">#获取a标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.name)   <span class="comment">#获取a标签的标签名，就是a</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.attrs)  <span class="comment">#获取a标签的所有属性，返回字典</span></span><br><span class="line"><span class="built_in">print</span>(soup.a[<span class="string">&quot;href&quot;</span>]) <span class="comment">#a的href属性值</span></span><br></pre></td></tr></table></figure>

<h3 id="常见的四种对象："><a href="#常见的四种对象：" class="headerlink" title="常见的四种对象："></a>常见的四种对象：</h3><p>1，Tag：BeautifulSoup种所有标签都是Tag类型</p>
<p>2，NavigableString：标签的文本内容，继承python中的str，用法也是和str一样的</p>
<p>3，BeautifulSoup：继承Tag，用来生成BeautifulSoup树的，用法和Tag差不多</p>
<p>3，Comment：继承NavigableString，是注解内容</p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;hello word!!&lt;/p&gt;</span></span><br><span class="line"><span class="string">	&lt;!-- &lt;a href=&quot;link1&quot;&gt;hello word&lt;/a&gt; --&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.p)     <span class="comment">#Tag类型</span></span><br><span class="line"><span class="built_in">print</span>(soup.p.string)  <span class="comment">#NavigableString类型</span></span><br><span class="line"><span class="built_in">print</span>(soup)		  <span class="comment">#BeautifulSoup类型</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.string)  <span class="comment">#Comment类型</span></span><br></pre></td></tr></table></figure>

<h3 id="contents和children："><a href="#contents和children：" class="headerlink" title="contents和children："></a>contents和children：</h3><p><em>用法</em>：</p>
<p>Tag对象.contents     </p>
<p>Tag对象.children</p>
<p><em>返回</em>：</p>
<p>返回某个标签下的直接子元素，其中也包括字符串。</p>
<p><em>区别</em>：</p>
<p>contents返回的是list列表</p>
<p>children返回的是一个迭代器</p>
<h3 id="string和strings，stripped-strings属性和get-text-方法："><a href="#string和strings，stripped-strings属性和get-text-方法：" class="headerlink" title="string和strings，stripped_strings属性和get_text()方法："></a>string和strings，stripped_strings属性和get_text()方法：</h3><p><em>string</em>:获取某个标签下的文本内容，返回的是字符串。如果有多行，就无法获取。</p>
<p><em>strings</em>:获取某个标签下的文本内容，可以是多行，返回的是生成器。</p>
<p><em>stripped_strings</em>:用法和strings差不多可以是多行，放回生成器，区别是该属性会去除空白字符，如空格换行符。</p>
<p><em>get_text()</em>:获取某个标签下的文本内容，可以是多行，返回字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"></span><br><span class="line">string = soup.li.string</span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line">strings = soup.ul.strings</span><br><span class="line"><span class="built_in">print</span>(strings)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strings:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">stripped_strings = soup.ul.stripped_strings</span><br><span class="line"><span class="built_in">print</span>(stripped_strings)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> stripped_strings:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h3 id="find-和find-all-方法"><a href="#find-和find-all-方法" class="headerlink" title="find()和find_all()方法:"></a>find()和find_all()方法:</h3><p>搜索文档树使用的方法。</p>
<p>find方法是找到第一个满足条件的标签返回，返回一个元素。</p>
<p>find_all方法是把所有满足条件的标签都返回，返回的是一个list列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-0&quot; id=&#x27;hello&#x27;&gt;&lt;a href=&quot;link0.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;forth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取第一个li标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.li)</span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&quot;li&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有的li标签</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&quot;li&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取第二个li标签</span></span><br><span class="line">li = soup.find_all(<span class="string">&quot;li&quot;</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="comment">#获取class等于item-inactive的li标签，注：由于属性class有重名，用class_</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>, class_=<span class="string">&#x27;item-inactive&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"><span class="comment">#获取所有a标签href值</span></span><br><span class="line">a_list = soup.find_all(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> a_list:</span><br><span class="line">    <span class="built_in">print</span>(a[<span class="string">&quot;href&quot;</span>])</span><br><span class="line"><span class="comment">#获取所有li标签的文本内容</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    <span class="built_in">print</span>(li.string)</span><br><span class="line"><span class="comment">#只获取前两个li标签，limit限制个数</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>, limit=<span class="number">2</span>) </span><br></pre></td></tr></table></figure>

<h3 id="select-方法："><a href="#select-方法：" class="headerlink" title="select()方法："></a>select()方法：</h3><p>有时候使用css选择器的方式更加方便，需要使用css选择器时，用select方法。返回list列表。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#通过标签名查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line"><span class="comment">#通过class查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;.item-inactive&#x27;</span>))</span><br><span class="line"><span class="comment">#通过id查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;#hello&#x27;</span>))</span><br><span class="line"><span class="comment">#组合查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li a&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li &gt; a&#x27;</span>))</span><br><span class="line"><span class="comment">#通过属性查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a[href=&quot;link0.html&quot;]&#x27;</span>))</span><br><span class="line"><span class="comment">#获取内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a&#x27;</span>)[<span class="number">0</span>].get_text())</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战1-豆瓣Top250爬取："><a href="#爬虫实战1-豆瓣Top250爬取：" class="headerlink" title="爬虫实战1-豆瓣Top250爬取："></a>爬虫实战1-豆瓣Top250爬取：</h3><p>网站：<a href="https://movie.douban.com/top250">https://movie.douban.com/top250</a></p>
<p>爬取：爬取top250的电影的信息，这里只爬取了电影名，演员，上映时间，评分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#访问页，获取每一页里的所有详情页url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_urls</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    html = resp.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    li_list = soup.find(<span class="string">&quot;ol&quot;</span>, class_=<span class="string">&quot;grid_view&quot;</span>).find_all(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">    detail_urls = []</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        detail_url = li.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&quot;href&quot;</span>]</span><br><span class="line">        detail_urls.append(detail_url)</span><br><span class="line">    <span class="keyword">return</span> detail_urls</span><br><span class="line"><span class="comment">#解析详情页：访问详情页，解析电影信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>(<span class="params">detail_url, fp</span>):</span></span><br><span class="line">    resp = requests.get(detail_url, headers=headers)</span><br><span class="line">    html = resp.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(soup.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span>=<span class="string">&quot;wrapper&quot;</span>).find(<span class="string">&quot;h1&quot;</span>).stripped_strings))</span><br><span class="line">    actor_exist = soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;actor&quot;</span>)</span><br><span class="line">    actor = <span class="string">&quot;暂无数据&quot;</span></span><br><span class="line">    <span class="comment">#由于有的电影没有演员信息，所有这里if判断</span></span><br><span class="line">    <span class="keyword">if</span> actor_exist:</span><br><span class="line">        actor = <span class="string">&#x27; &#x27;</span>.join(<span class="built_in">list</span>(soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;actor&quot;</span>).find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;attrs&quot;</span>).stripped_strings))</span><br><span class="line">    date = soup.find(<span class="string">&quot;div&quot;</span>, <span class="built_in">id</span>=<span class="string">&quot;info&quot;</span>).find_all(<span class="string">&quot;span&quot;</span>, <span class="built_in">property</span>=<span class="string">&quot;v:initialReleaseDate&quot;</span>)[<span class="number">0</span>].string</span><br><span class="line">    score = soup.find(<span class="string">&quot;strong&quot;</span>, class_=<span class="string">&quot;ll rating_num&quot;</span>).string</span><br><span class="line">    num = soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;top250-no&quot;</span>).string</span><br><span class="line">    fp.write(<span class="string">&quot;电影名：&#123;&#125;，演员：&#123;&#125;，上映时间：&#123;&#125;，评分：&#123;&#125;\n\n&quot;</span>.<span class="built_in">format</span>(name, actor, date, score))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num&#125;</span>-<span class="subst">&#123;name&#125;</span>,电影信息加载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    base_url = <span class="string">&quot;https://movie.douban.com/top250?start=&#123;&#125;&amp;filter=&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;movieTop250.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">250</span>,<span class="number">25</span>):</span><br><span class="line">            page_url = base_url.<span class="built_in">format</span>(i)</span><br><span class="line">            detail_urls = get_detail_urls(page_url)</span><br><span class="line">            <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">                parse_detail(detail_url, fp)</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;top250部电影信息加载完毕！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战2-快代理ip爬取："><a href="#爬虫实战2-快代理ip爬取：" class="headerlink" title="爬虫实战2-快代理ip爬取："></a>爬虫实战2-快代理ip爬取：</h3><p>网站：<a href="https://www.kuaidaili.com/free/">https://www.kuaidaili.com/free/</a></p>
<p>爬取：IP信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IpSpider</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;准备10页的url&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.page_urls = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">            page_url = <span class="string">&quot;https://www.kuaidaili.com/free/inha/&#123;&#125;/&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">            self.page_urls.append(page_url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page_infos</span>(<span class="params">self,page_url</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;解析每一页的代理ip信息，并返回&#x27;&#x27;&#x27;</span></span><br><span class="line">        resp = requests.get(page_url, headers=headers)</span><br><span class="line">        html = resp.text</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        trs = soup.find(<span class="string">&quot;table&quot;</span>, class_=<span class="string">&quot;table table-bordered table-striped&quot;</span>).find(<span class="string">&quot;tbody&quot;</span>).find_all(<span class="string">&quot;tr&quot;</span>)</span><br><span class="line">        infos = []</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">            info = <span class="built_in">list</span>(tr.stripped_strings)</span><br><span class="line">            infos.append(info)</span><br><span class="line">        <span class="keyword">return</span> infos</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;主程序&#x27;&#x27;&#x27;</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ipSpider.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;IP&quot;</span>,<span class="string">&quot;PORT&quot;</span>,<span class="string">&quot;匿名度&quot;</span>,<span class="string">&quot;类型&quot;</span>,<span class="string">&quot;位置&quot;</span>,<span class="string">&quot;响应速度&quot;</span>,<span class="string">&quot;最后验证时间&quot;</span>))</span><br><span class="line">            <span class="keyword">for</span> page_url <span class="keyword">in</span> self.page_urls:</span><br><span class="line">                infos = self.parse_page_infos(page_url)</span><br><span class="line">                <span class="keyword">for</span> info <span class="keyword">in</span> infos:</span><br><span class="line">                    fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(info[<span class="number">0</span>],info[<span class="number">1</span>],info[<span class="number">2</span>],info[<span class="number">3</span>],info[<span class="number">4</span>],info[<span class="number">5</span>],info[<span class="number">6</span>]))</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;count&#125;</span>页解析完成！&quot;</span>)</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ipSpider = IpSpider()</span><br><span class="line">    ipSpider.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h2 id="正则表达式和re模块"><a href="#正则表达式和re模块" class="headerlink" title="正则表达式和re模块"></a>正则表达式和re模块</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;abc&quot;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;a&#x27;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h3 id="使用规则："><a href="#使用规则：" class="headerlink" title="使用规则："></a>使用规则：</h3><h4 id="匹配单个字符："><a href="#匹配单个字符：" class="headerlink" title="匹配单个字符："></a>匹配单个字符：</h4><ul>
<li><p>点(.)：匹配任意字符(除了\n)</p>
</li>
<li><p>\d：匹配任意数字</p>
</li>
<li><p>\D：匹配任意非数字</p>
</li>
<li><p>\s：匹配任意空白字符(\n,\t,\r)</p>
</li>
<li><p>\S：非空白字符</p>
</li>
<li><p>\w：匹配大小写英文字母，数字以及下划线</p>
</li>
<li><p>\W：匹配和\w正好相反</p>
</li>
<li><p>[]：组合方式，只要满足中括号中的每一项都算匹配成功</p>
</li>
</ul>
<p>#例如：</p>
<p>[1b]：表示1和b都能匹配到，</p>
<p>[a-zA-Z]：表示大小写英文字母都能匹配到</p>
<p>[0-9]：表示0到9数字都能匹配到，[ ^0-9 ]：^取反</p>
<h4 id="匹配多个字符："><a href="#匹配多个字符：" class="headerlink" title="匹配多个字符："></a>匹配多个字符：</h4><ul>
<li><p>*：匹配任意个</p>
</li>
<li><p>+：匹配1个或多个</p>
</li>
<li><p>？：匹配0个或1个</p>
</li>
<li><p>{m}：匹配m个</p>
</li>
<li><p>{m,n}：匹配m-n之间个</p>
</li>
<li><p>|：匹配多个字符或表达式，或连接</p>
</li>
</ul>
<p>练习：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#手机验证：号码1开头，第二位34578，后面9位任意数字</span></span><br><span class="line">text = <span class="string">&quot;17370466454&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;1[34578]\d&#123;9&#125;&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#邮箱验证：邮箱名由数字、大小写英文、下划线组成，后接@，后接域名</span></span><br><span class="line">text = <span class="string">&quot;1753645532@qq.com&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;\w+@[a-z0-9]+\.[a-z]+&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证url：前面是http或https或ftp，后接冒号，后接//，后接任意非空白字符</span></span><br><span class="line">text = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;(http|https|ftp)://\S+&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#省份证验证：前面17位任意数字，后接数字或大小写x</span></span><br><span class="line">text = <span class="string">&quot;36242820000815323x&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;\d&#123;17&#125;[\dxX]&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>

<h4 id="开始，结束，贪婪和非贪婪："><a href="#开始，结束，贪婪和非贪婪：" class="headerlink" title="开始，结束，贪婪和非贪婪："></a>开始，结束，贪婪和非贪婪：</h4><ul>
<li><p>^：以…开头</p>
</li>
<li><p>&amp;：以…结尾</p>
</li>
<li><p>贪婪和非贪婪：正常时为贪婪模式，尽可能匹配多的字符；匹配多个字符时，加上?为非贪婪模式，尽可能少的匹配字符。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text = <span class="string">&quot;123456&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;\d+?&quot;</span>,text)   <span class="comment">#匹配多个字符时，加上?为非贪婪模式</span></span><br><span class="line"><span class="built_in">print</span>(result.group())   <span class="comment">#结果：1</span></span><br></pre></td></tr></table></figure>

<p>案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例一：获取html标签</span></span><br><span class="line">text = <span class="string">&quot;&lt;h1&gt;这是标题&lt;/h1&gt;&quot;</span></span><br><span class="line">result = re.match(<span class="string">&quot;&lt;.+&gt;&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())   <span class="comment">#贪婪模式结果：&lt;h1&gt;这是标题&lt;/h1&gt;</span></span><br><span class="line">result2 = re.match(<span class="string">&quot;&lt;.+?&gt;&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result2.group())  <span class="comment">#非贪婪模式结果：&lt;h1&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例二：验证一个字符是不是1-100之间</span></span><br><span class="line">text = <span class="string">&quot;100&quot;</span></span><br><span class="line">result = re.search(<span class="string">&quot;^0$|^[1-9]\d?$|^100$&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>

<h4 id="转义字符和原生字符："><a href="#转义字符和原生字符：" class="headerlink" title="转义字符和原生字符："></a>转义字符和原生字符：</h4><p>python中的转义字符，如在\n前加上一个,即\\n；在字符串前面加上r，变成原生字符。例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#\n有特殊意义的字符，转义后将变得无意义</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;aaaa\\naa&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;aaa\naa&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>正则中的转义字符：也是在特殊意义字符前加\</p>
<p>但是在python中解析正则，会先把字符串给python层面解析，再给正则解析。</p>
<p>所以对于\a,\b,\c,\d…这些带有反斜杠的特殊意义字符前加上\，却不能被成功解析。应该还需要在字符串前面加上r，如r”\c”，或者应该四个,如”\\\\d”。建议用加r的方法，所以以后在python中使用正则匹配时应习惯性在字符串前加r</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;\c&quot;</span></span><br><span class="line">result = re.match(<span class="string">r&quot;\\c&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line">result2 = re.match(<span class="string">&quot;\\\\c&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result2.group())</span><br><span class="line"><span class="comment">#输出结果：\c</span></span><br></pre></td></tr></table></figure>

<h4 id="分组："><a href="#分组：" class="headerlink" title="分组："></a>分组：</h4><p>分组,把重要的信息用()进行分组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;as1dyyf2&quot;</span>  <span class="comment">#获取数字</span></span><br><span class="line">result = re.match(<span class="string">&quot;[a-z]+(\d)[a-z]+(\d)&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result.groups())  <span class="comment">#结果：(&#x27;1&#x27;, &#x27;2&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#group()/group(0)：匹配整个分组</span></span><br><span class="line"><span class="comment">#group(1)：匹配第一个分组</span></span><br><span class="line"><span class="comment">#group(2)：匹配第二个分组</span></span><br><span class="line"><span class="comment">#groups()：匹配所有分组</span></span><br></pre></td></tr></table></figure>

<h3 id="re模块常用函数："><a href="#re模块常用函数：" class="headerlink" title="re模块常用函数："></a>re模块常用函数：</h3><p>match()，search()，findall()，sub()，split()，compile() 和 re.VERBOSE，re.DOTALL</p>
<ul>
<li>match：匹配第一个满足条件的，从文本<strong>开始处</strong>进行匹配</li>
<li>search：匹配第一个满足条件的</li>
<li>findall：匹配<strong>所有</strong>满足条件的，返回list列表</li>
<li>sub：<strong>替换</strong>所有满足条件的字符串，相比于默认的<code>text.replace</code>可以有多个条件</li>
<li>split：按条件<strong>分割</strong>字符,返回list列表，相比于默认的<code>text.split</code>可以有多个条件</li>
<li>compile：<strong>编译</strong>正则表达式，如果在for循环中应该先编译再进行循环，提高效率</li>
<li>re.VERBOSE：在函数参数中加上表示可以添加注释<br>re.DOTALL：在函数参数中加上表示点(.)可以代替所以字符<br>re.l：不区分大小写</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#findall:匹配所有满足条件的，返回list列表</span></span><br><span class="line">text = <span class="string">&quot;apple price is $99, orange price is $17&quot;</span></span><br><span class="line">result = re.findall(<span class="string">r&quot;\$\d+&quot;</span>,text)</span><br><span class="line"><span class="built_in">print</span>(result)   <span class="comment">#结果：[&#x27;$99&#x27;, &#x27;$17&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sub，替换字符串</span></span><br><span class="line">text = <span class="string">&quot;hello world,ni hao ya&quot;</span></span><br><span class="line">result = re.sub(<span class="string">r&quot;[ ,]&quot;</span>,<span class="string">&quot;,&quot;</span>,text)  <span class="comment">#空格或逗号替换</span></span><br><span class="line"><span class="built_in">print</span>(result)   <span class="comment">#结果：hello,world,ni,hao,ya</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#split,分割字符,返回list列表</span></span><br><span class="line">text = <span class="string">&quot;hello,world ni,hao ya&quot;</span></span><br><span class="line">result = re.split(<span class="string">r&quot; |,&quot;</span>,text)  <span class="comment">#空格或逗号分割</span></span><br><span class="line"><span class="built_in">print</span>(result)   <span class="comment">#结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;ni&#x27;, &#x27;hao&#x27;, &#x27;ya&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#compile：编译正则表达式，如果在for循环中应该先编译再进行循环，提高效率</span></span><br><span class="line">text = <span class="string">&quot;apple price is 36.12&quot;</span></span><br><span class="line">r = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+\.?\d*&#x27;</span>)</span><br><span class="line">result = re.search(r,text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战1-赶集网租房信息爬取："><a href="#爬虫实战1-赶集网租房信息爬取：" class="headerlink" title="爬虫实战1-赶集网租房信息爬取："></a>爬虫实战1-赶集网租房信息爬取：</h3><p>网站：<a href="https://cs.58.com/chuzu/">https://cs.58.com/chuzu/</a></p>
<p>爬取：前十页房子标题，户型，面积，价格信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">cookie = <span class="string">&quot;&quot;&quot;f=n; commontopbar_new_city_info=414%7C%E9%95%..........&quot;&quot;&quot;</span> <span class="comment">#cookie复制的，字符太多，省略</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cookie&quot;</span>:cookie</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    infos = re.findall(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    house-cell.+?des.+?&lt;h2&gt;.+?&gt;\s*(.+?)\s*?&lt;/a&gt;    #标题</span></span><br><span class="line"><span class="string">    .+?&lt;p.+?&gt;(.+?)\s+.*?(\d+.+?)\s+         #户型，面积</span></span><br><span class="line"><span class="string">    .+?money.+?&lt;b.+?&gt;(\d+?)&lt;/b&gt;      #价格</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>,text,re.VERBOSE|re.DOTALL)    <span class="comment">#re.VERBOSE和re.DOTALL的用法体现</span></span><br><span class="line">    <span class="keyword">return</span> infos</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    base_url = <span class="string">&quot;https://cs.58.com/chuzu/pn&#123;&#125;/?PGTID=0d3090a7-0019-e874-075b-c49785753d71&amp;ClickID=2&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;houseInfo.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;标题&quot;</span>,<span class="string">&quot;户型&quot;</span>,<span class="string">&quot;面积&quot;</span>,<span class="string">&quot;价格&quot;</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">            page_url = base_url.<span class="built_in">format</span>(i)</span><br><span class="line">            infos = parse_page(page_url)</span><br><span class="line">            <span class="keyword">for</span> info <span class="keyword">in</span> infos:</span><br><span class="line">                fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(info[<span class="number">0</span>],info[<span class="number">1</span>],info[<span class="number">2</span>],info[<span class="number">3</span>]))</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;i&#125;</span>页加载完成！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战2-糗事百科爬取："><a href="#爬虫实战2-糗事百科爬取：" class="headerlink" title="爬虫实战2-糗事百科爬取："></a>爬虫实战2-糗事百科爬取：</h3><p>网站：<a href="https://www.qiushibaike.com/text/">https://www.qiushibaike.com/text/</a></p>
<p>爬取：前十页糗事作者和内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Get_qiuShiBaiKe</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取前十页url&quot;&quot;&quot;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.page_urls = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">            page_url = <span class="string">&quot;https://www.qiushibaike.com/text/page/&#123;&#125;/&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">            self.page_urls.append(page_url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">self,page_url</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;解析每一页&quot;&quot;&quot;</span></span><br><span class="line">        resp = requests.get(page_url, headers=self.headers)</span><br><span class="line">        text = resp.text</span><br><span class="line">        jokes = re.findall(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;div.+?article.+?&lt;h2&gt;\s+(.+?)\s+&lt;/h2&gt;   #作者</span></span><br><span class="line"><span class="string">        .+?content.+?&lt;span&gt;\s+(.+?)\s+&lt;/span&gt;   #内容，但是内容中还包含&lt;br/&gt;标签</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>, text, re.VERBOSE|re.DOTALL)</span><br><span class="line">        new_jokes = []</span><br><span class="line">        <span class="keyword">for</span> joke <span class="keyword">in</span> jokes:</span><br><span class="line">            content = re.sub(<span class="string">&quot;&lt;br/&gt;&quot;</span>, <span class="string">&quot; &quot;</span>,joke[<span class="number">1</span>])</span><br><span class="line">            new_jokes.append([</span><br><span class="line">                joke[<span class="number">0</span>],content</span><br><span class="line">            ])</span><br><span class="line">        <span class="keyword">return</span> new_jokes</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;主流程&quot;&quot;&quot;</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;qiushibaike.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;content&quot;</span>))</span><br><span class="line">            <span class="keyword">for</span> page_url <span class="keyword">in</span> self.page_urls:</span><br><span class="line">                jokes = self.parse_page(page_url)</span><br><span class="line">                <span class="keyword">for</span> joke <span class="keyword">in</span> jokes:</span><br><span class="line">                   fp.write(<span class="string">&quot;&#123;&#125;,&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(joke[<span class="number">0</span>],joke[<span class="number">1</span>]))</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;count&#125;</span>页加载完成！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    get_qiuShiBaiKe = Get_qiuShiBaiKe()</span><br><span class="line">    get_qiuShiBaiKe.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>1，如果想让 . 代表所有的字符，则需要在函数后面加re.DOTALL参数，否则 . 不会代表\n，也就是换行除外。</p>
<p>2，获取数据时，大多数要用非贪婪模式。</p>
<p>3，如果正则写得不对，会获取不到结果，程序会假死。</p>
<p>4，如果正则写得有问题，不要钻牛角尖，更换一个思路。</p>
<h1 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h1><h2 id="JSON文件格式处理。"><a href="#JSON文件格式处理。" class="headerlink" title="JSON文件格式处理。"></a>JSON文件格式处理。</h2><h3 id="JSON："><a href="#JSON：" class="headerlink" title="JSON："></a>JSON：</h3><p>是一种轻量级的数据交换格式，有效的提高网络传输效率</p>
<p>JSON支持数据格式：</p>
<ul>
<li>对象（python的字典）：使用花括号</li>
<li>数组（python的列表）：使用方括号</li>
<li>字符串类型：字符串必须要用双引号，不能用单引号</li>
<li>整形，浮点型，布尔类型还有null类型</li>
<li>多个数据之间用逗号(,)分开</li>
</ul>
<p><strong>注</strong>：json本质上就是一个字符串</p>
<h3 id="python数据转换成json数据（dumps和dump）："><a href="#python数据转换成json数据（dumps和dump）：" class="headerlink" title="python数据转换成json数据（dumps和dump）："></a>python数据转换成json数据（dumps和dump）：</h3><p>dumps：将python数据转换成json数据</p>
<p>dump：将python数据转换成json数据，接收fp文件指针参数，并且保存到文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;王五&quot;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">17</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">15</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#dumps</span></span><br><span class="line">json_students = json.dumps(students, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">type</span>(json_students) )   <span class="comment">#&lt;class &#x27;str&#x27;&gt; 类型数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#dump</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.json&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json.dump(students, fp, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：这两个方法都有 ensure_ascii 参数，默认为True，那么只存储ASCII码格式，不存储中文。要存储中文将其设为False。</p>
<h3 id="json数据转换成python数据（loads和load）："><a href="#json数据转换成python数据（loads和load）：" class="headerlink" title="json数据转换成python数据（loads和load）："></a>json数据转换成python数据（loads和load）：</h3><p>loads：将json数据转换成python数据</p>
<p>load：将json数据转换成python数据，并且是从文件中获取JSON数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_students = <span class="string">&#x27;[&#123;&quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 19&#125;, &#123;&quot;name&quot;: &quot;王五&quot;, &quot;age&quot;: 17&#125;, &#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 15&#125;]&#x27;</span>   <span class="comment">#json类型字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#loads</span></span><br><span class="line">students = json.loads(json_students)</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">type</span>(students) )  <span class="comment">#&lt;class &#x27;list&#x27;&gt; 类型数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#load</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.json&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    studetns = json.load(fp)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(studetns))  <span class="comment">#&lt;class &#x27;list&#x27;&gt; 类型数据</span></span><br></pre></td></tr></table></figure>



<h2 id="CSV文件格式处理。"><a href="#CSV文件格式处理。" class="headerlink" title="CSV文件格式处理。"></a>CSV文件格式处理。</h2><p>csv文件有点类似excel表格一样。所以一般第一行为字段名</p>
<h3 id="读取CSV文件的两种方法："><a href="#读取CSV文件的两种方法：" class="headerlink" title="读取CSV文件的两种方法："></a>读取CSV文件的两种方法：</h3><p>1，以列表形式读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ipSpider.csv&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.reader(fp)  <span class="comment">#返回一个迭代器reader</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(x[<span class="number">4</span>])</span><br></pre></td></tr></table></figure>

<p>2，以字典形式读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ipSpider.csv&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.DictReader(fp)   <span class="comment">#返回一个迭代器reader</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(x[<span class="string">&quot;位置&quot;</span>])</span><br></pre></td></tr></table></figure>

<h3 id="写入CSV文件的两种方法："><a href="#写入CSV文件的两种方法：" class="headerlink" title="写入CSV文件的两种方法："></a>写入CSV文件的两种方法：</h3><p>1，以列表形式读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">headers = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>]</span><br><span class="line">students = [</span><br><span class="line">    (<span class="string">&quot;李四&quot;</span>,<span class="number">18</span>),</span><br><span class="line">    (<span class="string">&quot;王五&quot;</span>,<span class="number">16</span>),</span><br><span class="line">    (<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.csv&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    writer = csv.writer(fp)</span><br><span class="line">    writer.writerow(headers)    <span class="comment">#写一行</span></span><br><span class="line">    writer.writerows(students)  <span class="comment">#写多行</span></span><br></pre></td></tr></table></figure>

<p>2，以字典形式读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">headers = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>]</span><br><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;李四&#x27;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;张良&#x27;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">15</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;李逵&#x27;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.csv&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    writer = csv.DictWriter(fp, headers)</span><br><span class="line">    writer.writeheader()     <span class="comment">#上一行传入了字段名，这里还需要写入字段名</span></span><br><span class="line">    writer.writerows(students)</span><br></pre></td></tr></table></figure>



<h2 id="Excel文件处理。"><a href="#Excel文件处理。" class="headerlink" title="Excel文件处理。"></a>Excel文件处理。</h2><p>安装xlrd和xlwt两个库（读取和写入）</p>
<ul>
<li>pip install xlrd</li>
<li>pip indtall xlwt</li>
</ul>
<h3 id="读取Excel（xlrd）："><a href="#读取Excel（xlrd）：" class="headerlink" title="读取Excel（xlrd）："></a>读取Excel（xlrd）：</h3><p>1,打开Excel文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line">workbook = xlrd.open_workbook(<span class="string">&quot;test.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>2,工作簿对sheet表的操作:</p>
<ul>
<li><p>workbook.sheet_names()：获取所有sheet表名</p>
</li>
<li><p>workbook.sheet_by_index(0)：通过索引，获取sheet表对象(下标从0开始)</p>
</li>
<li><p>workbook.sheet_by_name(“Sheet1”)：通过名字，获取sheet表对象</p>
</li>
<li><p>workbook.sheets()：获取所有sheet表对象</p>
</li>
</ul>
<p>3，sheet工作表对cell单元格的操作：</p>
<ul>
<li>sheet.nrows：总行数</li>
<li>sheet.ncols：总列数</li>
<li>sheet.cell(row,col) ：获取单元格对象</li>
<li>sheet.cell_value(row,col) ：获取单元格对象的值</li>
<li>sheet.row_slice(row,start_col,end_col) ：获取指定行里的某几列单元格对象</li>
<li>sheet.row_values(row,start_col,end_col) ：获取指定行里的某几列单元格对象的值</li>
<li>sheet.col_slice(col,start_row,end_row) ：获取指定列里的某几行单元格对象</li>
<li>sheet.col_values(col,start_row,end_row) ：获取指定列里的某几行单元格对象的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line">workbook = xlrd.open_workbook(<span class="string">&quot;test.xlsx&quot;</span>)  <span class="comment">#获取工作簿</span></span><br><span class="line">sheet = workbook.sheet_by_index(<span class="number">0</span>)   <span class="comment">#获取sheet表</span></span><br><span class="line"><span class="built_in">print</span>(sheet.name)     <span class="comment">#打印sheet表名</span></span><br><span class="line">cells = sheet.row_slice(<span class="number">1</span>,<span class="number">1</span>,sheet.ncols)   <span class="comment">#指定行获取某几列单元格</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> cells:</span><br><span class="line">    <span class="built_in">print</span>(cell.value)   <span class="comment">#打印单元格的值</span></span><br></pre></td></tr></table></figure>

<h3 id="写入Excel（xlwt）："><a href="#写入Excel（xlwt）：" class="headerlink" title="写入Excel（xlwt）："></a>写入Excel（xlwt）：</h3><p>1,建立工作簿：workbook = xlwt.Workbook()</p>
<p>2,添加工资表：sheet = workbook.add_sheet(“表1”)</p>
<p>3,写入数据：sheet.write(row,col,value)</p>
<p>4,保存路径：workbook.save(“test.xlsx”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">workbook = xlwt.Workbook()</span><br><span class="line">sheet = workbook.add_sheet(<span class="string">&quot;表1&quot;</span>)</span><br><span class="line"></span><br><span class="line">headers = [<span class="string">&quot;姓名&quot;</span>,<span class="string">&quot;英文&quot;</span>,<span class="string">&quot;数学&quot;</span>,<span class="string">&quot;语文&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(headers):</span><br><span class="line">    sheet.write(<span class="number">0</span>,index,value)</span><br><span class="line">    </span><br><span class="line">names = [<span class="string">&quot;阿信&quot;</span>,<span class="string">&quot;阿达&quot;</span>,<span class="string">&quot;二哥&quot;</span>,<span class="string">&quot;阿飞&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):</span><br><span class="line">    sheet.write(index+<span class="number">1</span>,<span class="number">0</span>,value)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">        sheet.write(row,col,random.randint(<span class="number">1</span>,<span class="number">100</span>))</span><br><span class="line">        </span><br><span class="line">workbook.save(<span class="string">&quot;test2.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h3><p><code>cell.ctype()</code>：查看数据类型</p>
<p><strong>注</strong>：返回结果为数字</p>
<ul>
<li><p>xlrd.XL_CELL_TEXT    文本类型(1)</p>
</li>
<li><p>xlrd.XL_CELL_NUMBER  数值类型(2)</p>
</li>
<li><p>xlrd.XL_CELL_DATE    日期时间类型(3)</p>
</li>
<li><p>xlrd.XL_CELL_BOOLEAN 布尔类型(4)</p>
</li>
<li><p>xlrd.XL_CELL_EMPTY   空白数据类型(0)</p>
</li>
</ul>
<h3 id="编辑Excel："><a href="#编辑Excel：" class="headerlink" title="编辑Excel："></a>编辑Excel：</h3><p>1，先读取原来的Excel文件（xlrd）</p>
<p>2，然后在读取的sheet表中对cell修改，使用 <code>put_cell(row, col, 数据类型, value, None)</code> 方法实现</p>
<p>3，再重新创建新的Excel文件写入数据（xlwt）</p>
<p>案例：Excel文件中有该数据，要求：添加总分和平均分</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>英语</th>
<th>数学</th>
<th>语文</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>55</td>
<td>68</td>
<td>99</td>
</tr>
<tr>
<td>李四</td>
<td>59</td>
<td>89</td>
<td>100</td>
</tr>
<tr>
<td>王五</td>
<td>56</td>
<td>87</td>
<td>77</td>
</tr>
<tr>
<td>赵四</td>
<td>69</td>
<td>45</td>
<td>89</td>
</tr>
<tr>
<td>小二</td>
<td>99</td>
<td>66</td>
<td>75</td>
</tr>
</tbody></table>
<p>结果：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>英语</th>
<th>数学</th>
<th>语文</th>
<th>总分</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>55</td>
<td>68</td>
<td>99</td>
<td>222</td>
</tr>
<tr>
<td>李四</td>
<td>59</td>
<td>89</td>
<td>100</td>
<td>248</td>
</tr>
<tr>
<td>王五</td>
<td>56</td>
<td>87</td>
<td>77</td>
<td>220</td>
</tr>
<tr>
<td>赵四</td>
<td>69</td>
<td>45</td>
<td>89</td>
<td>203</td>
</tr>
<tr>
<td>小二</td>
<td>99</td>
<td>66</td>
<td>75</td>
<td>240</td>
</tr>
<tr>
<td>平均分</td>
<td>67.6</td>
<td>71</td>
<td>88</td>
<td>226.6</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="comment">#1,读取和修改到内存中</span></span><br><span class="line">rwb = xlrd.open_workbook(<span class="string">&quot;test.xlsx&quot;</span>)</span><br><span class="line">rsheet = rwb.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">rows = rsheet.nrows</span><br><span class="line">cols = rsheet.ncols</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加总分字段</span></span><br><span class="line">rsheet.put_cell(<span class="number">0</span>,cols,xlrd.XL_CELL_TEXT,<span class="string">&quot;总分&quot;</span>,<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#添加每个同学的总分</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,rows):</span><br><span class="line">    grades = rsheet.row_values(row,<span class="number">1</span>,cols)</span><br><span class="line">    total = <span class="built_in">sum</span>(grades)</span><br><span class="line">    rsheet.put_cell(row,cols,xlrd.XL_CELL_NUMBER,total,<span class="literal">None</span>)</span><br><span class="line">rows = rsheet.nrows</span><br><span class="line">cols = rsheet.ncols</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加平均分字段</span></span><br><span class="line">rsheet.put_cell(rows,<span class="number">0</span>,xlrd.XL_CELL_TEXT,<span class="string">&quot;平均分&quot;</span>,<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#添加每个同学的平均分</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,cols):</span><br><span class="line">    grades = rsheet.col_values(col,<span class="number">1</span>,rows)</span><br><span class="line">    avg = <span class="built_in">sum</span>(grades)/<span class="built_in">len</span>(grades)</span><br><span class="line">    rsheet.put_cell(rows,col,xlrd.XL_CELL_NUMBER,avg,<span class="literal">None</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#2,写入</span></span><br><span class="line">wwb = xlwt.Workbook()</span><br><span class="line">wsheet = wwb.add_sheet(<span class="string">&quot;成绩表&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,rsheet.nrows):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,rsheet.ncols):</span><br><span class="line">        wsheet.write(row,col,rsheet.cell_value(row,col))</span><br><span class="line">wwb.save(<span class="string">&quot;test2.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="MySQL数据库处理。"><a href="#MySQL数据库处理。" class="headerlink" title="MySQL数据库处理。"></a>MySQL数据库处理。</h2><p>安装相关模块：</p>
<p>pip install pymysql</p>
<p>1，连接数据库(主机号，端口号，用户，密码，数据库，编码)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;root&quot;</span>, database=<span class="string">&quot;de&quot;</span>,charset=<span class="string">&quot;utf8&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>2，创建游标</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"><span class="comment">#创建字典类型游标</span></span><br><span class="line">cursor = db.cursor(cursor=pymysql.cursors.DictCursor)</span><br></pre></td></tr></table></figure>

<p>3，用游标执行sql语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用游标执行各种命令</span></span><br><span class="line">cursor.execute(<span class="string">&quot;insert into users  values (&#x27;1&#x27;,&#x27;王二麻子&#x27;,&#x27;男&#x27;)&quot;</span>)</span><br><span class="line">sql = <span class="string">&quot;update users set userName=&#x27;二麻子&#x27; where id=&#x27;1&#x27;&quot;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="comment">#可以添加%s为占位符</span></span><br><span class="line">sql = <span class="string">&quot;select * from users where id=%s&quot;</span></span><br><span class="line">cursor.execute(sql,(<span class="number">1</span>)) </span><br></pre></td></tr></table></figure>

<p>4，查询操作和修改操作<br>如果是查询操作，获取数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor.fetchone()    <span class="comment">#获取一条数据</span></span><br><span class="line">cursor.fetchmany(<span class="number">3</span>)  <span class="comment">#获取多条数据 </span></span><br><span class="line">cursor.fetchall()    <span class="comment">#获取所有数据</span></span><br></pre></td></tr></table></figure>

<p>如果是‘增删改’这些修改操作，需要提交</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db.commit()</span><br></pre></td></tr></table></figure>

<p>5，关闭资源</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor.close()  <span class="comment">#关闭游标</span></span><br><span class="line">db.close()	    <span class="comment">#关闭数据库连接</span></span><br></pre></td></tr></table></figure>



<h1 id="多线程爬虫"><a href="#多线程爬虫" class="headerlink" title="多线程爬虫"></a>多线程爬虫</h1><h2 id="理解多线程："><a href="#理解多线程：" class="headerlink" title="理解多线程："></a>理解多线程：</h2><p>默认情况下，一个程序只有一个进程和一个线程，代码是依次线性执行的。而多线程则可以并发执行，一次性多个人一起做多件事，自然比单线程更快。</p>
<p>单线程执行方式：</p>
<p>操作1—–&gt;操作2—–&gt;操作3—–&gt;程序结束</p>
<p>多线程执行方式：</p>
<p>操作1—–&gt;程序结束<br>操作2—–&gt;程序结束<br>操作3—–&gt;程序结束</p>
<h2 id="threading的使用："><a href="#threading的使用：" class="headerlink" title="threading的使用："></a>threading的使用：</h2><h3 id="基本使用：-1"><a href="#基本使用：-1" class="headerlink" title="基本使用："></a>基本使用：</h3><p>正常单线程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#单线程</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coding</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>在写代码&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawing</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>在画画&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_thread</span>():</span></span><br><span class="line">    coding()</span><br><span class="line">    drawing()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    single_thread()</span><br></pre></td></tr></table></figure>

<p>使用threading创建多线程：</p>
<p>创建线程：<code>threading.Thread(target=函数,name=&quot;可无&quot;)</code></p>
<p>执行线程：<code>th1.start()</code></p>
<p><code>threading.current_thread()</code>：在某个线程中执行，获取当前线程对象</p>
<p><code>threading.enumerate()</code>：获取所有正在执行的线程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多线程</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coding</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        thread = threading.current_thread()  <span class="comment">#获取当前线程</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;thread.name&#125;</span>在敲代码&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawing</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>在画画&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span>():</span></span><br><span class="line">    th1 = threading.Thread(target=coding,name=<span class="string">&quot;小明&quot;</span>)</span><br><span class="line">    ht2 = threading.Thread(target=drawing)</span><br><span class="line"></span><br><span class="line">    th1.start()</span><br><span class="line">    ht2.start()</span><br><span class="line">    <span class="built_in">print</span>(threading.<span class="built_in">enumerate</span>())  <span class="comment">#打印所有当前执行的线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    multi_thread()</span><br></pre></td></tr></table></figure>

<h3 id="继承自threading-Thread类："><a href="#继承自threading-Thread类：" class="headerlink" title="继承自threading.Thread类："></a>继承自threading.Thread类：</h3><p>1，我们自己写的类必须继承<code>threading.Thread</code>类</p>
<p>2，程序代码需要放在run方法中执行</p>
<p>3，以后创建线程时，直接使用我们自己创建的类来创建线程</p>
<p>4，使用类的方式创建线程，可以用更加方便的管理我们的代码，面向对象的方式进行编程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#继承自threading.Thread类</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coding_thread</span>(<span class="params">threading.Thread</span>):</span>  <span class="comment">#创建类，继承threading.Thread</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span>    <span class="comment">#主程序写在run实例方法下</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            thread = threading.current_thread()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;thread.name&#125;</span>在敲代码&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing_thread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>在画画&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    th1 = Coding_thread(name=<span class="string">&quot;小明&quot;</span>)  <span class="comment">#可以用刚刚创建的类来创建线程</span></span><br><span class="line">    th2 = Drawing_thread()</span><br><span class="line"></span><br><span class="line">    th1.start()</span><br><span class="line">    th2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="多线程共享全局变量的问题："><a href="#多线程共享全局变量的问题：" class="headerlink" title="多线程共享全局变量的问题："></a>多线程共享全局变量的问题：</h2><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>多个线程在同一个进程中运行的。因此进程中的全局变量是所有线程都共享的，即所有线程都可以操作同一个全局变量。而线程执行顺序是无序的，有可能造成数据错误。</p>
<p>举例：</p>
<p>全局变量value=1，线程1执行给value加1，线程2也执行给value加1，按道理最终value=3。但是因为线程执行是无序的，所以执行时，线程1和线程2同时把value=1取出，然后加上1，最终value=2，造成数据错误。</p>
<p>代码举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_value</span>():</span></span><br><span class="line">    <span class="keyword">global</span> value</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):  <span class="comment">#循环10000000次，相当于给value加10000000</span></span><br><span class="line">        value += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;value的值是<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>): <span class="comment">#创建两个线程，value讲道理应该一个为10000000，另一个为20000000</span></span><br><span class="line">        th = threading.Thread(target=add_value)</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="comment">#value的值是1019353</span></span><br><span class="line"><span class="comment">#value的值是1493383</span></span><br><span class="line"><span class="comment">#因为两个线程同时对一个全局变量操作，所以产生问题</span></span><br></pre></td></tr></table></figure>

<h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><p>threading提供了一个Lock类，这个类可以在某个线程访问全局变量时上锁，其他线程此时就进不来，直到该线程处理完后，就解锁，其他线程才能进来处理。</p>
<p><code>threading.Lock()</code>：创建锁</p>
<p><code>gLock.acquire()</code>：上锁</p>
<p><code>gLock.release()</code>：解锁</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解决：当某线程操作全局变量时，应该上锁，操作完了就解锁，让给其他线程继续操作</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">value = <span class="number">0</span></span><br><span class="line">gLock = threading.Lock() <span class="comment">#创建锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_value</span>():</span></span><br><span class="line">    <span class="keyword">global</span> value</span><br><span class="line">    gLock.acquire()  <span class="comment">#上锁</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        value += <span class="number">1</span></span><br><span class="line">    gLock.release()  <span class="comment">#解锁</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;value的值是<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        th = threading.Thread(target=add_value)</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>使用锁原则：</p>
<p>1，尽量把少的和不耗时的代码放到锁中执行</p>
<p>2，代码执行完后要记得解锁，不然程序会阻塞</p>
<p>3，如果只是读取全局变量而不改变全局变量，不需要上锁</p>
<h2 id="生产者和消费者模式："><a href="#生产者和消费者模式：" class="headerlink" title="生产者和消费者模式："></a>生产者和消费者模式：</h2><p>生产者和消费者模式是多线程开发中经常见到的一种模式。生产者线程专门用来生产一些数据，然后存放到一个中间的变量中，即中间容器。消费者再从这个中间变量中取出数据经行消费。</p>
<p>这种模式让代码达到高内聚低耦合的目标，程序分工明确，线程方便管理。</p>
<p>生产者  ———&gt;  中间容器  ———&gt;  消费者</p>
<p>生产者和消费者因为要使用中间变量，这个中间变量经常是全局变量，因此需要使用锁来保证数据的完整性。</p>
<h3 id="Lock版生产者和消费者模式："><a href="#Lock版生产者和消费者模式：" class="headerlink" title="Lock版生产者和消费者模式："></a>Lock版生产者和消费者模式：</h3><p>以下是使用threading.Lock锁实现的一个生产者和消费者模式的例子：</p>
<p><strong>注</strong>：为了与下面的Condition版本相比，所以下面例子代码写成这样，没有符合上锁原则：尽量把少的和不耗时的代码放到锁中执行</p>
<p>生产者一直往中间变量gMoney中加钱，而消费者一直从中间变量gMoney中减钱。因此加钱和减钱时都需要上锁。生产者加钱10次就不再执行了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Lock版生产者和消费者模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">0</span>  <span class="comment">#中间变量</span></span><br><span class="line">gLock = threading.Lock()</span><br><span class="line">gTimes = <span class="number">0</span>  <span class="comment">#保存生产者加钱的次数</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                gLock.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            money = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">            gMoney += money   <span class="comment">#加钱</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s赚了%d钱，余额有%d&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            gLock.release()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            money = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">            <span class="keyword">if</span> money&lt;=gMoney:</span><br><span class="line">                gMoney -= money  <span class="comment">#减钱</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s消费了%d钱，剩余%d钱&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;%s想消费%d钱，但是钱不够只有%d钱，并且生产者不再赚钱钱了&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">                    gLock.release()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s想消费%d钱，但是钱不够只有%d钱&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            gLock.release()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th = Producer(name=<span class="string">&quot;%d号生产者&quot;</span>%(x))</span><br><span class="line">        th.start()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th = Consumer(name=<span class="string">&quot;%d号消费者&quot;</span>%(x))</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="Condition版生产者和消费者模式："><a href="#Condition版生产者和消费者模式：" class="headerlink" title="Condition版生产者和消费者模式："></a>Condition版生产者和消费者模式：</h3><p>Lock版本可以正常运行，但存在一个不足。在消费者中，上锁后假如发现gMoney不够，就什么也不做，然后再解锁。上锁解锁是耗费CPU资源的行为。</p>
<p>而threading.Condition，和threading.Lock一样也可以上锁解锁。但是它上锁时，可以在没有数据的时候（gMoney不够）处于阻塞等待状态wait，一旦有了数据，可以使用notify等函数通知处于等待状态的线程，继续执行。这样可以不用做一些无用的上锁和解锁操作。</p>
<p><code>threading.Condition()</code>：创建锁</p>
<p><code>acquire()</code>：上锁</p>
<p><code>release()</code>：解锁</p>
<p><code>wait()</code>：将当前线程处于阻塞等待状态，暂时释放锁。可以被其他线程使用notify()和notify_all()函数唤醒。被唤醒后会继续等待上锁，然后继续执行代码。</p>
<p><code>notify()</code>：通知某个等待状态的线程，默认通知第1个等待的线程</p>
<p><code>notify_all()</code>：通知所有等待状态的线程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Condition版生产者和消费者模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">0</span></span><br><span class="line">gCondition = threading.Condition()</span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                gCondition.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            money = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">            gMoney += money</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s赚了%d钱，余额有%d&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            gCondition.notify_all()   <span class="comment">#每次加钱后，通知所有阻塞等待状态的线程可以唤醒。</span></span><br><span class="line">            gCondition.release()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            money = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">            <span class="keyword">while</span> money&gt;gMoney:</span><br><span class="line">                <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;%s想消费%d钱，但是钱不够剩余%d钱，并且生产者不再赚钱钱了&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">                    gCondition.release()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%s想消费%d钱，但是钱不够剩余%d钱&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">                <span class="comment">#钱不够，进入阻塞等待状态，等待被唤醒,唤醒后继续判断钱够不够</span></span><br><span class="line">                gCondition.wait()  </span><br><span class="line">            gMoney -= money</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s消费了%d钱，剩余%d钱&quot;</span>%(threading.current_thread().name,money,gMoney))</span><br><span class="line">            gCondition.release()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th = Producer(name=<span class="string">&quot;%d号生产者&quot;</span>%(x))</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th = Consumer(name=<span class="string">&quot;%d号消费者&quot;</span>%(x))</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="Queue线程安全的队列"><a href="#Queue线程安全的队列" class="headerlink" title="Queue线程安全的队列"></a>Queue线程安全的队列</h2><p>先进先出，像装羽毛球的圆筒。多线程访问Queue不需要加锁。</p>
<p><code>from queue import Queue</code>：导入</p>
<p><code>Queue(maxsize)</code>：初始化Queue</p>
<p>1，<code>qsize()</code>：返回队列大小</p>
<p>2，<code>empty()</code>：判断队列是否为空</p>
<p>3，<code>full()</code>：判断队列是否为满</p>
<p>4，<code>get()</code>：取一个数据</p>
<p>5，<code>put()</code>：放一个数据</p>
<p>get()和put()：当get()取数据，Queue队列却是空的时，进入阻塞状态，直到有数据被填入；当put()放数据，Queue队列却是满的时，也进入阻塞状态，直到有数据被取出。<br>它们都有block和timeout参数：block=False时，表示进入阻塞时立即报错；timeout=数字，表示阻塞超过该秒后报错。所以这里可以配合try–except抓取报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#queue队列是线程安全的，可以不用锁</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_value</span>(<span class="params">queue</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        queue.put(random.randint(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span>(<span class="params">queue</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        value = queue.get()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;获取的值是<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    q = Queue(<span class="number">1</span>)</span><br><span class="line">    th1 = threading.Thread(target=add_value, args=[q])   <span class="comment">#args=[]用来传参数</span></span><br><span class="line">    th2 = threading.Thread(target=get_value, args=[q])</span><br><span class="line"></span><br><span class="line">    th1.start()</span><br><span class="line">    th2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="爬虫实战1-多线程爬取王者荣耀壁纸："><a href="#爬虫实战1-多线程爬取王者荣耀壁纸：" class="headerlink" title="爬虫实战1-多线程爬取王者荣耀壁纸："></a>爬虫实战1-多线程爬取王者荣耀壁纸：</h2><p>网站：<a href="https://pvp.qq.com/web201605/wallpaper.shtml">https://pvp.qq.com/web201605/wallpaper.shtml</a></p>
<p>要求：以每张图片名创建文件夹，文件夹中下载该图片的8种尺寸类型图片。</p>
<p>图片数据不在该网站中，数据应该是通过ajax请求后响应过来的，通过抓包发现真实数据在名为“workList_inc.cgi?activit……..”的包里，在请求头中找到url接口，”<a href="https://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi?activityId=2735&amp;sVerifyCode=ABCD&amp;sDataType=JSON&amp;iListNum=20&amp;totalpage=0&amp;page=0&amp;iOrder=0&amp;iSortNumClose=1&amp;jsoncallback=jQuery17108003164251331345_1628482515726&amp;iAMSActivityId=51991&amp;_everyRead=true&amp;iTypeId=2&amp;iFlowId=267733&amp;iActId=2735&amp;iModuleId=2735&amp;_=1628482515913&quot;%EF%BC%8C%E8%BF%99%E4%B8%AAurl%E4%B8%AD%E6%9C%89%E5%9B%BE%E7%89%87%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BF%A1%E6%81%AF%E3%80%82">https://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi?activityId=2735&amp;sVerifyCode=ABCD&amp;sDataType=JSON&amp;iListNum=20&amp;totalpage=0&amp;page=0&amp;iOrder=0&amp;iSortNumClose=1&amp;jsoncallback=jQuery17108003164251331345_1628482515726&amp;iAMSActivityId=51991&amp;_everyRead=true&amp;iTypeId=2&amp;iFlowId=267733&amp;iActId=2735&amp;iModuleId=2735&amp;_=1628482515913&quot;，这个url中有图片数据的信息。</a><br><strong>注</strong>：响应的数据是JSON格式；数据内容也经过编码。<strong>提示</strong>：loads，unquote</p>
<h3 id="正常单线程爬取："><a href="#正常单线程爬取：" class="headerlink" title="正常单线程爬取："></a>正常单线程爬取：</h3><p>这里用单线程只爬取第一页的内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#单线程获取第一页王者荣耀图片</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse,request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">https://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi?activityId=2735&amp;sVerifyCode=ABCD&amp;sDataType=JSON&amp;iListNum=20&amp;totalpage=0&amp;page=0&amp;iOrder=0&amp;iSortNumClose=1&amp;jsoncallback=jQuery17106986742030628452_1628233940837&amp;iAMSActivityId=51991&amp;_everyRead=true&amp;iTypeId=2&amp;iFlowId=267733&amp;iActId=2735&amp;iModuleId=2735&amp;_=1628233941161</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3775.400 QQBrowser/10.6.4209.400&quot;</span>,</span><br><span class="line"><span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://pvp.qq.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;访问相关页，返回list，包含每个图片的相关信息&quot;&quot;&quot;</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    result = resp.text</span><br><span class="line">    data = re.search(<span class="string">&quot;\(.+?List.*?:(.+)&#125;\)&quot;</span>, result).group(<span class="number">1</span>)</span><br><span class="line">    data = parse.unquote(data)</span><br><span class="line">    data = json.loads(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_image_urls</span>(<span class="params">image</span>):</span></span><br><span class="line">    image_urls = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        image_url = image[<span class="string">f&quot;sProdImgNo_<span class="subst">&#123;i&#125;</span>&quot;</span>].replace(<span class="string">&quot;200&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        image_urls.append(image_url)</span><br><span class="line">    <span class="keyword">return</span> image_urls</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    os.mkdir(<span class="string">&quot;image_WZ&quot;</span>)</span><br><span class="line">    data = parse_page(url)</span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> data:</span><br><span class="line">        name = image[<span class="string">&quot;sProdName&quot;</span>]</span><br><span class="line">        <span class="comment">#名字中含有”\/:*?&quot;&lt;&gt;|“,不符合文件夹命名规范，将其都替换成空格</span></span><br><span class="line">        name = re.sub(<span class="string">r&#x27;[\\/:\*\?&quot;&lt;&gt;\|]&#x27;</span>,<span class="string">&quot; &quot;</span>,name)</span><br><span class="line">        path_name = os.path.join(<span class="string">&quot;image_WZ&quot;</span>, name)</span><br><span class="line">        <span class="comment">#官网的图片有重复的，这里判断文件夹是否存在</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(path_name):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        os.mkdir(path_name)</span><br><span class="line">        image_urls = get_image_urls(image)</span><br><span class="line">        <span class="keyword">for</span> index,image_url <span class="keyword">in</span> <span class="built_in">enumerate</span>(image_urls):</span><br><span class="line">            image_name = <span class="string">&quot;sProdImgNo_&#123;&#125;.jpg&quot;</span>.<span class="built_in">format</span>(index+<span class="number">1</span>)</span><br><span class="line">            image_path = os.path.join(path_name,image_name)</span><br><span class="line">            request.urlretrieve(image_url,image_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>下载完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="多线程爬取："><a href="#多线程爬取：" class="headerlink" title="多线程爬取："></a>多线程爬取：</h3><p>使用多线程爬取所有26页，生产者和消费者模式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多线程</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse,request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">https://apps.game.qq.com/cgi-bin/ams/module/ishow/V1.0/query/workList_inc.cgi?activityId=2735&amp;sVerifyCode=ABCD&amp;sDataType=JSON&amp;iListNum=20&amp;totalpage=0&amp;page=&#123;&#125;&amp;iOrder=0&amp;iSortNumClose=1&amp;jsoncallback=jQuery17106986742030628452_1628233940837&amp;iAMSActivityId=51991&amp;_everyRead=true&amp;iTypeId=2&amp;iFlowId=267733&amp;iActId=2735&amp;iModuleId=2735&amp;_=1628233941161</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3775.400 QQBrowser/10.6.4209.400&quot;</span>,</span><br><span class="line"><span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://pvp.qq.com/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url_queue = Queue(<span class="number">26</span>)   <span class="comment">#存放page_url的队列</span></span><br><span class="line">image_queue = Queue(<span class="number">1000</span>)  <span class="comment">#存放图片的队列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生产者负责访问page_url，并解析图片信息，将图片url和下载路径保存到image_queue中&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,url_queue,image_queue,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Producer, self).__init__(*args,**kwargs)  <span class="comment">#重写__init__后，需要调用父类的构造方法</span></span><br><span class="line">        self.url_queue = url_queue</span><br><span class="line">        self.image_queue = image_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.url_queue.empty():</span><br><span class="line">            resp = requests.get(self.url_queue.get(), headers=headers)</span><br><span class="line">            result = resp.text</span><br><span class="line">            data = re.search(<span class="string">&quot;\(.+?List.*?:(.+)&#125;\)&quot;</span>, result, re.DOTALL).group(<span class="number">1</span>)</span><br><span class="line">            data = parse.unquote(data)</span><br><span class="line">            data = json.loads(data)</span><br><span class="line">            <span class="keyword">for</span> image <span class="keyword">in</span> data:</span><br><span class="line">                dir_name = image.get(<span class="string">&quot;sProdName&quot;</span>)</span><br><span class="line">                dir_name = re.sub(<span class="string">&#x27;[\\\/:*?&quot;&lt;&gt;|]&#x27;</span>,<span class="string">&quot; &quot;</span>,dir_name)</span><br><span class="line">                dir_path = os.path.join(<span class="string">&quot;image_WZ2&quot;</span>,dir_name)</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(dir_path):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                os.mkdir(dir_path)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">                    image_url = image.get(<span class="string">f&quot;sProdImgNo_<span class="subst">&#123;i&#125;</span>&quot;</span>).replace(<span class="string">&quot;200&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">                    image_name = <span class="string">f&quot;sProdImgNo_<span class="subst">&#123;i&#125;</span>.jpg&quot;</span></span><br><span class="line">                    image_path = os.path.join(dir_path,image_name)</span><br><span class="line">                    self.image_queue.put(&#123;<span class="string">&quot;image_url&quot;</span>:image_url,<span class="string">&quot;image_path&quot;</span>:image_path&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;消费者负责将image_queue中的图片信息取出，将图片url下载到对应路径中&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, image_queue, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Consumer, self).__init__(*args,**kwargs)</span><br><span class="line">        self.image_queue = image_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:<span class="comment">#阻塞超过10秒出现异常，跳出循环，</span></span><br><span class="line">                image = self.image_queue.get(timeout=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            image_url = image.get(<span class="string">&quot;image_url&quot;</span>)</span><br><span class="line">            image_path = image.get(<span class="string">&quot;image_path&quot;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                request.urlretrieve(image_url,image_path)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;下载完成！&quot;</span>.<span class="built_in">format</span>(image_path))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;下载失败!&quot;</span>.<span class="built_in">format</span>(image_path))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    os.mkdir(<span class="string">&quot;image_WZ2&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        page_url = base_url.<span class="built_in">format</span>(i)</span><br><span class="line">        url_queue.put(page_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        th1 = Producer(url_queue, image_queue, name=<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>号生产者&quot;</span>)</span><br><span class="line">        th1.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th2 = Consumer(image_queue,name=<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>号消费者&quot;</span>)</span><br><span class="line">        th2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="爬虫实战2：多线程爬取糗事百科："><a href="#爬虫实战2：多线程爬取糗事百科：" class="headerlink" title="爬虫实战2：多线程爬取糗事百科："></a>爬虫实战2：多线程爬取糗事百科：</h2><p>网站：<a href="https://www.qiushibaike.com/text/">https://www.qiushibaike.com/text/</a></p>
<p>要求：使用多线程爬取所有13页，把笑话链接和内容保存在csv文件种</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多线程爬取糗事百科，保存再csv文件中</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生产者负责访问page_url,解析详细页，把每一页的所以的笑话内容和连接保存到joke_queue&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,url_queue,joke_queue,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args,**kwargs)</span><br><span class="line">        self.url_queue = url_queue</span><br><span class="line">        self.joke_queue = joke_queue</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3775.400 QQBrowser/10.6.4209.400&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.qiushibaike.com/text/page/13/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.url_queue.empty():</span><br><span class="line">            page_url = self.url_queue.get()</span><br><span class="line">            resp = requests.get(page_url, headers=self.headers)</span><br><span class="line">            text = resp.text</span><br><span class="line">            jokes = re.findall(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            typs_hot.+?&lt;/div&gt;.+?href=&quot;(.+?)&quot;     #笑话连接</span></span><br><span class="line"><span class="string">            .+?contentHerf.+?&lt;span&gt;\s*(.+?)\s*&lt;/span&gt;  #笑话内容</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>,text,re.VERBOSE|re.DOTALL)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> joke <span class="keyword">in</span> jokes:</span><br><span class="line">                link = joke[<span class="number">0</span>]</span><br><span class="line">                link = <span class="string">&quot;https://www.qiushibaike.com&quot;</span>+link</span><br><span class="line">                content = joke[<span class="number">1</span>]</span><br><span class="line">                content = re.sub(<span class="string">&quot;&lt;br/&gt;&quot;</span>,<span class="string">&quot;  &quot;</span>,content)</span><br><span class="line">                self.joke_queue.put(&#123;<span class="string">&quot;content&quot;</span>:content,<span class="string">&quot;link&quot;</span>:link&#125;)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;页访问完成！&quot;</span>.<span class="built_in">format</span>(page_url.split(<span class="string">&quot;/&quot;</span>)[<span class="number">5</span>]))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;消费者负责从joke_queue中获取笑话内容和链接，保存到csv文件中，保存时需要上锁和解锁&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,writer,fp, gLock,joke_queue, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args,**kwargs)</span><br><span class="line">        self.writer = writer</span><br><span class="line">        self.joke_queue = joke_queue</span><br><span class="line">        self.gLock = gLock</span><br><span class="line">        self.fp = fp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                joke = self.joke_queue.get(timeout=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.fp.close()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            link = joke.get(<span class="string">&quot;link&quot;</span>)</span><br><span class="line">            content = joke.get(<span class="string">&quot;content&quot;</span>)</span><br><span class="line">            self.gLock.acquire()</span><br><span class="line">            self.writer.writerow((content,link))   <span class="comment">#保存到csv文件操作也要上锁，相当于全局变量</span></span><br><span class="line">            self.gLock.release()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;保存一条成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    base_url = <span class="string">&quot;https://www.qiushibaike.com/text/page/&#123;&#125;/&quot;</span></span><br><span class="line">    url_queue = Queue(<span class="number">13</span>)</span><br><span class="line">    joke_queue = Queue(<span class="number">1000</span>)</span><br><span class="line">    gLock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">14</span>):</span><br><span class="line">        page_url = base_url.<span class="built_in">format</span>(i)</span><br><span class="line">        url_queue.put(page_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th1 = Producer(url_queue, joke_queue, name=<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>号生产者&quot;</span>)</span><br><span class="line">        th1.start()</span><br><span class="line"></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&quot;joke_mulit_thread.csv&quot;</span>, <span class="string">&quot;a&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>, newline=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    writer = csv.writer(fp)</span><br><span class="line">    writer.writerow([<span class="string">&quot;内容&quot;</span>,<span class="string">&quot;链接&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        th2 = Consumer(writer,fp , gLock, joke_queue, name=<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>号消费者&quot;</span>)</span><br><span class="line">        th2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="多线程的GIL锁："><a href="#多线程的GIL锁：" class="headerlink" title="多线程的GIL锁："></a>多线程的GIL锁：</h2><p>Python自带的解释器是CPython。CPython解释器的多线程实际上是一个假的多线程。同一时刻只有一个线程在执行，为保证这个，在CPython解释器中有一个东西叫做GIL（Global Intepreter Lock），叫做全局解释器锁。这个解释器锁是有必要的，因为CPython解释器的内存管理不是线程安全的。</p>
<p>虽然是一个假的多线程，但是在处理一些IO操作（比如文件读写和网络请求）还是可以在很大程度上提高效率的。所以在IO操作上建议使用多线程提高效率；在一些CPU计算操作上不建议使用多线程，而建议使用多进程。</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析与挖掘(数据分析三剑客)</title>
    <url>/2021/11/25/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%89%E5%89%91%E5%AE%A2/</url>
    <content><![CDATA[<p>介绍了python中用于数据分析的三个模块，numpy，Pandas，Matplotlib。</p>
<span id="more"></span>

<h1 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h1><p>本次学习我们使用的是Anaconda数据科学平台</p>
<p>Anaconda是Python的一个发行版，里面内置了很多常用的库，例如Pandas、NumPy，Matplotlib，这些都不用自己再安装（pip）了。</p>
<p>下载一个Anaconda就自带了Python和常用的工具，Python本身也不需要再单独下载了。</p>
<p><em><strong>注：</strong></em>如果自己已经安装了python，并且需要再安装Anaconda的话，就把之前安装的python的环境变量删除掉。安装时记得勾选添加环境变量。</p>
<p><strong>jupyter notebook</strong>  </p>
<p>它是一个交互式记事本（Anaconda自带），里面可以写Python代码，还可以插入文字和图片（markdown模式）。</p>
<p>使用方法：</p>
<p>在cmd中打开需要目录后，输入jupyter notebook即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#jupyter notebook 快捷键</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行：Ctrl + Enter 或 Shift + Enter</span></span><br><span class="line"><span class="comment">#注释：Ctrl + /</span></span><br><span class="line"><span class="comment">#帮助：Shift + Tab(按一到四次)</span></span><br></pre></td></tr></table></figure>

<p>在jupyter notebook中安装包：<code>! pip install 库名 -i https://pypi.douban.com/simple</code></p>
<h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><h2 id="数组array"><a href="#数组array" class="headerlink" title="数组array"></a>数组array</h2><p><strong>运算快，效率高</strong></p>
<p>列表list在进行数学运算时，列表不能直接参与运算，需要借助for循环、列表表达式等。而numpy提供的数组可以直接参与运算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment"># list + 5    会报错</span></span><br><span class="line">array1 = np.array(<span class="built_in">list</span>)</span><br><span class="line">array1 + <span class="number">5</span>     </span><br><span class="line"><span class="comment">#结果：array([6, 7, 8, 9])</span></span><br></pre></td></tr></table></figure>

<p>列表的索引方法可以在数组中使用，而且数组还有间断索引和逻辑索引。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([<span class="number">11</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">18</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#数组和列表一样可以索引，切片索引</span></span><br><span class="line">array[-<span class="number">1</span>]     </span><br><span class="line">array[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment">#间隔索引</span></span><br><span class="line">array[[<span class="number">0</span>,<span class="number">2</span>]]    <span class="comment">#结果：array([11, 15])</span></span><br><span class="line"><span class="comment">#逻辑索引，即布尔索引</span></span><br><span class="line">array&lt;<span class="number">10</span>        <span class="comment">#结果：array([False,  True, False,  True, False,  True])</span></span><br><span class="line">array[array&lt;<span class="number">10</span>]   <span class="comment">#结果：array([8, 6, 1])</span></span><br></pre></td></tr></table></figure>

<p><strong>二维数组</strong>，索引时采用  [行下标,列下标]  即  [rows,cols] ，下标都是从0开始。使用 ：符号表示任意。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array2 = np.array([</span><br><span class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">        [<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>],</span><br><span class="line">        [<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>]</span><br><span class="line">    ])</span><br><span class="line">array2[<span class="number">1</span>,<span class="number">1</span>]        <span class="comment">#结果：6</span></span><br><span class="line">array2[<span class="number">1</span>,:]        <span class="comment">#结果：array([2, 6, 9, 1])</span></span><br><span class="line">array2[:,<span class="number">2</span>]        <span class="comment">#结果：array([3, 9, 7])</span></span><br></pre></td></tr></table></figure>

<h2 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h2><p><strong>数学运算符</strong></p>
<ul>
<li><p>+：数组对应元素的和</p>
</li>
<li><p>-：数组对应元素的差</p>
</li>
<li><p>*：数组对应元素的乘积</p>
</li>
<li><p>/：数组对应元素的商</p>
</li>
<li><p>%：数组对应元素商的余数</p>
</li>
<li><p>//：数组对应元素的整除数</p>
</li>
<li><p>**：数组对应元素的幂指数</p>
</li>
</ul>
<p><strong>比较运算符</strong></p>
<ul>
<li>&gt; 或 np.greater(arr1,arr2)：判断arr1的元素是否大于arr2的元素</li>
<li>&gt;= 或 np.greater_equal(arr1,arr2)：判断arr1的元素是否大于等于arr2的元素</li>
<li>&lt; 或 np.less(arr1,arr2)：判断arr1的元素是否小于arr2的元素</li>
<li>&lt;= 或 np.less_equal(arr1,arr2)：判断arr1的元素是否小于等于arr2的元素</li>
<li>== 或 np.equal(arr1,arr2)：判断arr1的元素是否等于arr2的元素</li>
<li>!= 或 np.not_equal(arr1,arr2)：判断arr1的元素是否不等于arr2的元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>])</span><br><span class="line">arr2 = np.array([<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">9</span>])</span><br><span class="line">arr1+arr2           <span class="comment">#结果：array([ 3,  9,  6, 15])</span></span><br><span class="line">arr1&lt;arr2           <span class="comment">#结果：array([ True, False, False,  True])</span></span><br><span class="line">np.less(arr1,arr2)  <span class="comment">#结果：array([ True, False, False,  True])</span></span><br></pre></td></tr></table></figure>

<p><strong>常用的数学函数</strong></p>
<ul>
<li>np.round(arr)：对各元素四舍五入</li>
<li>np.sqrt(arr)：计算各元素的算术平方根</li>
<li>np.square(arr)：计算各元素的平方值</li>
<li>np.exp(arr)：计算以e为底的指数</li>
<li>np.power(arr, a)：计算各元素的指数</li>
<li>np.log2(arr)：计算以2为底各元素的对数</li>
<li>np.log10(arr)：计算以10为底各元素的对数</li>
<li>np.log(arr)：计算以e为底各元素的对数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>])</span><br><span class="line">np.square(arr1)</span><br><span class="line"><span class="comment">#结果：array([ 1, 25,  9, 36], dtype=int32)</span></span><br><span class="line">np.sqrt(arr1)</span><br><span class="line"><span class="comment">#结果：array([1.        , 2.23606798, 1.73205081, 2.44948974])</span></span><br></pre></td></tr></table></figure>

<p><strong>常用的统计函数</strong></p>
<ul>
<li>np.min(arr,axis)：按照轴的方向计算最小值</li>
<li>np.max(arr,axis)：按照轴的方向计算最大值</li>
<li>np.mean(arr,axis)：按照轴的方向计算平均值</li>
<li>np.median(arr,axis)：按照轴的方向计算中位数</li>
<li>np.sum(arr,axis)：按照轴的方向计算求和</li>
<li>np.std(arr,axis)：按照轴的方向计算标准差</li>
<li>np.var(arr,axis)：按照轴的方向计算方差</li>
</ul>
<p><em>注意</em>：axis=0 时，计算数组各列的统计值，形象记忆变成胖子；axis=1时，计算数组各行的统计值，形象记忆变成瘦子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],</span><br><span class="line">    [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">#对每行计算求和,三种写法</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(np.<span class="built_in">sum</span>(arr[i,:]))</span><br><span class="line">np.<span class="built_in">sum</span>(arr, axis=<span class="number">1</span>)</span><br><span class="line">arr.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对每列计算求和，三种写法</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(np.<span class="built_in">sum</span>(arr[:,i]))</span><br><span class="line">np.<span class="built_in">sum</span>(arr, axis=<span class="number">0</span>)</span><br><span class="line">arr.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="random随机数"><a href="#random随机数" class="headerlink" title="random随机数"></a>random随机数</h2><p>import numpy as np</p>
<ul>
<li>np.random.randint()：随机整数</li>
<li>np.random.uniform()：随机均匀分布</li>
<li>np.random.normal()：随机正态分布</li>
</ul>
<p><strong>案例</strong>：有100钱去理想状态下赌博，赢了加1钱，输了扣1钱。模拟赌1000次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">money = <span class="number">100</span></span><br><span class="line">P = [<span class="number">100</span>]  <span class="comment">#用于记录每次的钱</span></span><br><span class="line">R = np.random.uniform(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> R:</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">0.5</span>:</span><br><span class="line">        money -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">0.5</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        money += <span class="number">1</span></span><br><span class="line">    P.append(money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1001</span>), P)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><a href="https://imgtu.com/i/oM0B9I"><img src="https://z3.ax1x.com/2021/11/29/oM0B9I.png" alt="oM0B9I.png" border="0" /></a></p>
<h1 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h1><h2 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h2><p><strong>文本文件</strong></p>
<p>pandas.read_csv(filepath_or_buffer, sep=”,”)<br><em>参数</em>：</p>
<ul>
<li>filepath_or_buffer：指定txt或csv文件所在的路径</li>
<li>sep：指定原数据集中各字段之间的分隔符，默认为逗号” , “。</li>
<li>header：是否将原数据集中第一行作为表头，默认是，赋值None不是</li>
<li>names：如果原数据集中没有表头，该参数添加表头</li>
<li>usecols：指定需要读取原数据集中的那些字段</li>
<li>skiprows：数据读取时，指定需要跳过原数据集开头的行数（空白行不计入）</li>
<li>skipfooter：数据读取时，指定需要跳过原数据集末尾的行数</li>
<li>converters：将字段的类型转换（以字典的形式）</li>
<li>encoding：指定字符编码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&quot;D:\tempFile(2)&quot;</span></span><br><span class="line">pn.read_csv(path+<span class="string">&quot;/test_1.txt&quot;</span>, sep=<span class="string">&quot; &quot;</span>, skiprows=<span class="number">1</span>, skipfooter=<span class="number">1</span>, </span><br><span class="line">            header=<span class="literal">None</span>, names=[<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>], </span><br><span class="line">            usecols=[<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>], converters=&#123;<span class="string">&quot;id&quot;</span>:<span class="built_in">str</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>excel表</strong></p>
<p>pandas.read_excel(io, sheetname=0)</p>
<p><em>参数</em>：</p>
<ul>
<li>io：工作蒲的路径</li>
<li>sheetname：哪张表，默认第一张</li>
<li>header，skiprows，skip_footer等等参数同上。</li>
</ul>
<p><strong>sql</strong></p>
<p>pandas.read_sql(“sql语句”, con=连接)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"><span class="comment">#利用pymysql创建连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, user=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;root&quot;</span>, </span><br><span class="line">                      database=<span class="string">&quot;studentv2db&quot;</span>, port=<span class="number">3306</span>, charset=<span class="string">&quot;utf8&quot;</span>, )</span><br><span class="line"></span><br><span class="line">df = pn.read_sql(<span class="string">&quot;select * from student&quot;</span>, con=con)</span><br><span class="line"><span class="comment">#关闭资源</span></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure>

<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><strong>数据的概览</strong>（df表示数据集）</p>
<ul>
<li>df.head()：浏览前5条数据</li>
<li>df.shape：查看数据量，几行几列</li>
<li>df.size：查看数据量，行*列</li>
<li>df.columns：查看所有字段</li>
<li>df.dtypes：查看字段类型，在pandas中，非数值型就是object类型</li>
<li>df.describe()：数据描述，默认对数值型字段经行数学统计。df.describe(include=”object”)对非数值型字段数学统计。</li>
</ul>
<p><strong>数据筛选</strong></p>
<ul>
<li>df.字段名：选取某一字段</li>
<li>df[“字段名”]：选取某一字段，可以多个字段，平时推荐该方法</li>
<li>df.loc[行条件，列名称]：选取某子表，用冒号” : “ 表示任意行或列。如<code>df.loc[ df[&quot;Gender&quot;]==&quot;男&quot;, [&quot;Name&quot;, &quot;Gender&quot;] ]</code>，表示选取“Gender”条件为男的”Name“和”Gender“字段。</li>
</ul>
<p><strong>补充</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#简单构造数据集df</span></span><br><span class="line">df = pn.DataFrame(&#123;<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;bob&quot;</span>,<span class="string">&quot;jake&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">18</span>,<span class="number">20</span>]&#125;)</span><br><span class="line"><span class="comment">#对df数据集重新定义字段顺序</span></span><br><span class="line">df = pn.DataFrame(df, columns=[<span class="string">&quot;age&quot;</span>, <span class="string">&quot;name&quot;</span>])</span><br><span class="line"><span class="comment">#对df数据集的字段重命名</span></span><br><span class="line">df = df.rename(columns=&#123;<span class="string">&quot;age&quot;</span>:<span class="string">&quot;年龄&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;姓名&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><p><strong>数据类型的修改</strong></p>
<ul>
<li><p>pandas.to_datetime(columns,format=)：转换成时间类型</p>
</li>
<li><p>columns.astype()：转换从其他类型</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将df的&quot;Birthday&quot;字段转换成时间类型</span></span><br><span class="line">df[<span class="string">&quot;Birthday&quot;</span>] = pn.to_datetime(df[<span class="string">&quot;Birthday&quot;</span>], <span class="built_in">format</span>=<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"><span class="comment">#将df的&quot;SNo&quot;字段转换成str类型</span></span><br><span class="line">df[<span class="string">&quot;SNo&quot;</span>] = df[<span class="string">&quot;SNo&quot;</span>].astype(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>

<p><strong>数据冗余</strong></p>
<ul>
<li>df.duplicated()：查看数据冗余（所有字段都一致），subset参数指定某一字段</li>
<li>df.drop_duplicates()：删除冗余的记录，inplace参数为True表示同步原数据集df</li>
</ul>
<p><strong>异常值识别和处理</strong></p>
<p>无</p>
<p><strong>缺省值</strong></p>
<ul>
<li>df.isnull()：查看缺省值</li>
<li>df.dropna()：删除缺省值</li>
<li>df.fillna()：填充缺省值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看,可借助any()和sum()</span></span><br><span class="line">df.isnull()</span><br><span class="line">df.isnull().<span class="built_in">any</span>(axis=<span class="number">0</span>)</span><br><span class="line">df.isnull().<span class="built_in">sum</span>(axis=<span class="number">0</span>)                 <span class="comment">#计算每个字段的缺省值数量</span></span><br><span class="line">df.isnull().<span class="built_in">sum</span>(axis=<span class="number">0</span>) / df.shape[<span class="number">0</span>]   <span class="comment">#计算每个字段的缺省值率</span></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">df.dropna(axis=<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#填充</span></span><br><span class="line">df.fillna(value=<span class="number">0</span>, inplace=<span class="literal">True</span>)      <span class="comment">#所有缺省值填充0</span></span><br><span class="line">df.fillna(value=&#123;<span class="string">&quot;Birthday&quot;</span>:df[<span class="string">&quot;Birthday&quot;</span>].mode()[<span class="number">0</span>],<span class="string">&quot;Image&quot;</span>:<span class="string">&quot;无&quot;</span>&#125;)   <span class="comment">#不同字段填充不同数据</span></span><br><span class="line"><span class="comment">#补充要点</span></span><br><span class="line">df[<span class="string">&quot;Birthday&quot;</span>].mode()  <span class="comment">#某字段众数</span></span><br><span class="line">df[<span class="string">&quot;SNo&quot;</span>].median()     <span class="comment">#某字段中位数</span></span><br></pre></td></tr></table></figure>

<h2 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h2><p><strong>透视表功能</strong></p>
<p>pandas.pivot_table(data, index=None, columns=None, values=None, aggfunc=”mean”)</p>
<p><em>参数</em>：</p>
<ul>
<li>data：原数据集</li>
<li>index：需要拉入”行标签“的字段列表</li>
<li>columns：需要拉入”列标签“的字段列表</li>
<li>values：需要计算的字段</li>
<li>aggfunc：指定统计函数，也可以指定numpy模块中的其他统计函数</li>
<li>fill_value：指定一个标量，用于填充缺失值</li>
<li>margins：bool类型参数，是否显示行或列的总计数，默认为False</li>
<li>droopan：bool类型参数，是否删除整列为缺失的字段，默认为True</li>
<li>margins_name：指定行或列的总计名称，默认为All</li>
</ul>
<p>数据集如下：表3-1</p>
<table>
<thead>
<tr>
<th>id</th>
<th>姓名</th>
<th>性别</th>
<th>部门</th>
<th>年龄</th>
<th>薪水</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>李</td>
<td>男</td>
<td>开发部</td>
<td>23</td>
<td>12000</td>
</tr>
<tr>
<td>2</td>
<td>王</td>
<td>女</td>
<td>UI部</td>
<td>33</td>
<td>8000</td>
</tr>
<tr>
<td>3</td>
<td>刘</td>
<td>女</td>
<td>开发部</td>
<td>34</td>
<td>15000</td>
</tr>
<tr>
<td>4</td>
<td>赵</td>
<td>女</td>
<td>UI部</td>
<td>45</td>
<td>9000</td>
</tr>
<tr>
<td>5</td>
<td>江</td>
<td>男</td>
<td>测试部</td>
<td>26</td>
<td>23000</td>
</tr>
<tr>
<td>6</td>
<td>陈</td>
<td>女</td>
<td>测试部</td>
<td>28</td>
<td>18000</td>
</tr>
<tr>
<td>7</td>
<td>阮</td>
<td>女</td>
<td>开发部</td>
<td>29</td>
<td>15000</td>
</tr>
<tr>
<td>8</td>
<td>莫</td>
<td>男</td>
<td>UI部</td>
<td>27</td>
<td>10000</td>
</tr>
<tr>
<td>9</td>
<td>金</td>
<td>男</td>
<td>开发部</td>
<td>18</td>
<td>8000</td>
</tr>
<tr>
<td>10</td>
<td>曹</td>
<td>男</td>
<td>开发部</td>
<td>36</td>
<td>10000</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"><span class="comment">#df数据集如上表3-1</span></span><br><span class="line">df = pn.read_excel(<span class="string">r&quot;D:\tempFile(2)\test_2.xlsx&quot;</span>)</span><br><span class="line"><span class="comment">#男女性别薪水的平均值</span></span><br><span class="line">pn.pivot_table(df, index=<span class="string">&quot;性别&quot;</span>, values=<span class="string">&quot;薪水&quot;</span>, aggfunc=<span class="string">&quot;mean&quot;</span>)</span><br><span class="line"><span class="comment">#不同部门，男女性别薪水平均值</span></span><br><span class="line">pn.pivot_table(df, index=<span class="string">&quot;部门&quot;</span>, columns=<span class="string">&quot;性别&quot;</span>, values=<span class="string">&quot;薪水&quot;</span>, aggfunc=<span class="string">&quot;mean&quot;</span>)</span><br><span class="line"><span class="comment"># 不同部门，男女性别数量</span></span><br><span class="line">pn.pivot_table(df, index=<span class="string">&quot;部门&quot;</span>, columns=<span class="string">&quot;性别&quot;</span>, aggfunc=<span class="string">&quot;size&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>分组汇总</strong></p>
<ul>
<li>df.groupby(by=”字段”)：在汇总前，设定需要分组的字段</li>
<li>grouped.aggregate()：基于上面的groupby方法分组后的结果，做进一步的统计汇总。需以字典的形式传参，选择统计的字段和对应的统计方法。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#df数据集如上表3-1</span></span><br><span class="line">df = pn.read_excel(<span class="string">r&quot;D:\tempFile(2)\test_2.xlsx&quot;</span>)</span><br><span class="line"><span class="comment">#对部门，性别进行分组</span></span><br><span class="line">grouped = df.groupby(by = [<span class="string">&quot;部门&quot;</span>, <span class="string">&quot;性别&quot;</span>])</span><br><span class="line"><span class="comment">#对分组后的结果做统计计算：年龄的最小值，薪水平均值</span></span><br><span class="line">result = grouped.aggregate(&#123;<span class="string">&quot;年龄&quot;</span>:np.<span class="built_in">min</span>, <span class="string">&quot;薪水&quot;</span>:np.mean&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>合并表</strong></p>
<p>pandas.concat(objs)</p>
<p><em>参数</em></p>
<ul>
<li>objs：指定需要合并的对象</li>
<li>axis：合并的轴，默认为0，合并行；为1，合并列。</li>
<li>join：合并的方式，默认为outer，表示合并所有数据；为inner，表示合并公共部分数据</li>
<li>join_axes：合并数据后，指定保留的数据轴</li>
<li>ignore_index：bool类型参数，是否忽略原数据集的索引，默认False。如果为True，则重新生成新索引。</li>
<li>keys：为合并后的数据添加新的索引，用于区分各个数据源于哪张表。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line"></span><br><span class="line">df1 = pn.DataFrame(&#123;<span class="string">&quot;id&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;Jake&quot;</span>,<span class="string">&quot;Alice&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">18</span>,<span class="number">16</span>,<span class="number">10</span>]&#125;)</span><br><span class="line">df2 = pn.DataFrame(&#123;<span class="string">&quot;id&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;Jeff&quot;</span>,<span class="string">&quot;Jamse&quot;</span>,<span class="string">&quot;Alice&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">11</span>,<span class="number">25</span>,<span class="number">10</span>]&#125;)</span><br><span class="line">pn.concat([df1,df2],keys=[<span class="string">&quot;表1&quot;</span>,<span class="string">&quot;表2&quot;</span>])</span><br></pre></td></tr></table></figure>

<p><strong>连接表</strong></p>
<p>pandas.merge(left, right, how=”inner”, on=None)</p>
<p><em>参数</em></p>
<ul>
<li>left：连接的左表（主表）</li>
<li>right：连接的右表（辅表）</li>
<li>how：连接方式，默认inner内连接。left左连接，right右链接，outer外连接</li>
<li>on：指定连接的两张表共同的字段。如果没有共同的字段，则使用下面两个参数</li>
<li>left_on：指定左表需要连接的共同字段</li>
<li>rigth_on：指定右表需要连接的共同字段</li>
<li>left_index：bool类型参数，是否将左表的行索引作为连接的共同字段，默认False</li>
<li>right_index：bool类型参数，是否将右表的行索引作为连接的共同字段，默认False</li>
<li>sort：bool类型参数，是否对连接后的数据按照共同字段排序，默认False</li>
<li>suffixes：如果数据连接中存在相同的字段名，则使用前缀经行区分。传列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pn</span><br><span class="line">df1 = pn.DataFrame(&#123;<span class="string">&quot;id&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;Jake&quot;</span>,<span class="string">&quot;Alice&quot;</span>],<span class="string">&quot;age&quot;</span>:[<span class="number">18</span>,<span class="number">16</span>,<span class="number">10</span>]&#125;)</span><br><span class="line">df2 = pn.DataFrame(&#123;<span class="string">&quot;ID&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],<span class="string">&quot;score&quot;</span>:[<span class="number">99</span>,<span class="number">83</span>,<span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line">pn.merge(df1,df2,left_on=<span class="string">&quot;id&quot;</span>,right_on=<span class="string">&quot;ID&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1>]]></content>
      <categories>
        <category>数据分析与挖掘</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE</title>
    <url>/2021/12/11/JavaSE/</url>
    <content><![CDATA[<p>JaveSE</p>
<p>这是一篇关于javaSE基础的笔记</p>
<p>其中包括java面向对象，java核心类库，java型特性和项目</p>
<span id="more"></span>

<h1 id="Java面向对象编程"><a href="#Java面向对象编程" class="headerlink" title="Java面向对象编程"></a>Java面向对象编程</h1><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>定义类：class 类名{ 类体 }。<br><code>class Person&#123;&#125;</code></p>
<p>创建对象：new 类名();<br><code>Person p = new Person();</code></p>
<p>成员变量的定义：数据类型 变量名 = 初始值;<br><code>int age;</code></p>
<p>成员方法的定义：返回值类型 方法名（参数）{ 方法体 }<br><code>void setAge(int age)&#123; &#125;</code></p>
<p>成员方法的可变长参数，即该参数长度是0~~n个，最多定义一个，而且放在最后一个参数。使用时，相当于一维数组。<br>可变长参数定义<code>void xiaoName(String... args)&#123; &#125;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;, 今年&quot;</span> + age + <span class="string">&quot;岁！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">xiaoName</span><span class="params">(String... args)</span><span class="comment">/*可变参数*/</span> </span>&#123; </span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;args.length; i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;个参数是：&quot;</span> + args[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建Person类型引用指向Person类型对象</span></span><br><span class="line">		Person p = <span class="keyword">new</span> Person();</span><br><span class="line">		p.setName(<span class="string">&quot;李&quot;</span>);</span><br><span class="line">		p.age = <span class="number">18</span>;</span><br><span class="line">		p.show();</span><br><span class="line">		p.xiaoName(<span class="string">&quot;德&quot;</span>, <span class="string">&quot;昭的&quot;</span>, <span class="string">&quot;得得&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>数据类型的分类</strong></p>
<p>1）基本数据类型：byte、short、char、int、long、float、double、boolean 八个。</p>
<p>这些基本数据类型定义变量时，内存中的栈区会申请一个存储单元用来存储数据。</p>
<p>如 int a = 10;  内存中的栈区申请一个名为a的存储单元，大小为4个字节，里面存放着数据10。</p>
<p>2）引用数据类型：数组、类、接口、枚举、标注</p>
<p>引用数据类型在定义时，如<code>Person p = new Person();</code> ，内存中的栈区申请一个名为p的存储单元，而new Person()这部分存放在内存中的堆区，假设在堆区中的地址是0x10。p中存放的就是这个地址0x10。</p>
<p>如图，变量a为int类型，在栈区中存放的是数据10。变量p为Person类型（类），在栈区中存放的是一个地址（0x10），该地址指向堆区中的new Person()，而new Person()中才有数据。</p>
<p>基本数据类型变量中存放的是数据，而引用数据类型变量中存放的是地址。</p>
<p><a href="https://imgtu.com/i/oTqXEq"><img src="https://s4.ax1x.com/2021/12/11/oTqXEq.png" alt="oTqXEq.png" border="0" /></a></p>
<p><strong>注意</strong>：</p>
<p>基本数据类型的变量，作为方法的参数传递时，形参不会影响到实参，因为这两个变量存放的是各自的数据，虽然数据一样。</p>
<p>引用数据类型的变量，作为方法的参数传递时，形参可能会影响到实参，因为这两个变量存放的是同一个地址。</p>
<p><strong>垃圾回收机制</strong></p>
<p>其实创建对象是<code>new Person();</code>,此时内存堆区会申请一块空间存放对象，但是由于没有引用变量指向该对象的地址，就会被当作垃圾回收。所以创建对象时使用<code>Person p = new Person();</code>,含义是“创建Person类型引用指向Person类型对象”。引用变量p存放对象的地址。</p>
<h2 id="方法和封装"><a href="#方法和封装" class="headerlink" title="方法和封装"></a>方法和封装</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>使用new关键字创建对象时，会自动调用构造方法。一般用于对象的初始化工作</p>
<p>定义：</p>
<ul>
<li><p>不用写返回值类型</p>
</li>
<li><p>构造方法名和类名一致</p>
</li>
</ul>
<p>当用户没有定义构造方法时，系统会默认定义一个无参无内容的构造方法，如Person类，<code>Person()&#123;&#125;</code></p>
<h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p>重载：方法名可以相同，但是参数个数，或类型，或顺序不一样。</p>
<p>例如：一般我们定义构造方法时，会定义一个有参的构造方法，同时再定义一个无参的构造方法，这就属于重载。</p>
<p>意义：调用用一个方法名，参数不一样可以实现不同的功能。例如println()方法，调用该方法我们传参可以是多种数据类型，但是依然可以打印出来，是因为官方写好了许多个println()同名不同参数方法。</p>
<h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>在类中使用this关键字表示，该对象本身。</p>
<p>用法：</p>
<ul>
<li>this.成员变量、this.成员方法：当成员变量和局部变量重名时，系统会就近原则。变量前加上this.前缀，就表明是成员变量。（成员方法相同）</li>
<li>this还可以当作返回值，表示该对象本身。返回值类型就是该类名的类型。</li>
<li><code>this();</code>用在构造方法的第一行，可以调用本类的其他构造方法</li>
</ul>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归：定义 方法时，该方法会调用该方法自己</p>
<p>例如：计算费氏数列：1，1，2，3，5，8，13，21，第一项和第二项是1，之后的每一项的前两项和。下面分别使用递归和递推(循环)实现。传入第n项，返回第n项的数值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FengShi</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">diGui</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">//用递归的方法计算</span></span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">1</span> || n ==<span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> diGui(n-<span class="number">1</span>) + diGui(n-<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">diTui</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">//用递推的方法计算</span></span><br><span class="line">		<span class="keyword">int</span> ia = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> ib = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> ic;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;=n; i++) &#123;</span><br><span class="line">			ic = ia + ib;</span><br><span class="line">			ia = ib;</span><br><span class="line">			ib = ic;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ib;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显，使用递归代码简单明了，而递推复杂。但是递归代码的执行速度慢许多。</p>
<p><strong>递归注意事项</strong></p>
<ul>
<li>使用递归必须有递归规律以及退出条件</li>
<li>使用递归是把问题变得简单化而不是复杂化</li>
<li>若递归影响到程序的执行性能，则不推荐。建议使用递推取代之。</li>
</ul>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>通常情况下测试类给成员变量赋值一些合法但不合理的数值，程序不会报错，但是与现实不符。例如age赋值负数等。</p>
<p>为避免这一现象，需要对成员变量进行密封包装处理，保证成员变量的合理性，该机制就叫封装。</p>
<p>步骤：</p>
<ul>
<li><p>私有化成员变量，用private关键字修饰。如<code>private int age;</code></p>
</li>
<li><p>提供公有的set和get成员方法来访问成员变量，在方法中对参数进行判断</p>
</li>
<li><p>构造方法中也调用set方法进行合理值判断</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1,私有化成员变量。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3,构造方法也调用成员方法来初始化成员变量。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">		setAge(age);</span><br><span class="line">		setName(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//2,提供我们写成员方法来访问成员变量，成员方法会判断参数是否正确。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (age &lt; <span class="number">0</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;age不能小于0岁。&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.age = age;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//定义show()来打印对象的特征</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;，今年&quot;</span> + age + <span class="string">&quot;岁！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>案例</strong></em>：使用上面定义的类完成。提示用户输入人数，然后输入学生信息：姓名，年龄，最后打印出来。</p>
<p>提示：Student[] arr = new Student[num];</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入学生人数：&quot;</span>);</span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">		<span class="comment">//根据输入的人数，创建Student引用类型的一维数组</span></span><br><span class="line">		Student[] arr = <span class="keyword">new</span> Student[num];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;请输入name和age：&quot;</span>);</span><br><span class="line">			arr[i] = <span class="keyword">new</span> Student(sc.next(), sc.nextInt());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++) &#123;</span><br><span class="line">			arr[i].show();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Student[] arr = new Student[num];</code>，表示创建一个一维数组，数组类型是自己定义的Student引用类型。数组中的每个元素都是Student引用类型变量，里面存放的只是地址，指向后面创建的对象。如下图：</p>
<p><a href="https://imgtu.com/i/oq9Xb6"><img src="https://s4.ax1x.com/2021/12/12/oq9Xb6.png" alt="oq9Xb6.png" border="0" /></a></p>
<h2 id="static关键字和继承"><a href="#static关键字和继承" class="headerlink" title="static关键字和继承"></a>static关键字和继承</h2>]]></content>
      <categories>
        <category>jave</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>java</tag>
      </tags>
  </entry>
</search>
