<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><span id="more"></span>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>网络爬虫</title>
    <url>/2021/07/24/first/</url>
    <content><![CDATA[<p>python网络爬虫</p>
<p>这是一篇文章关于python网络爬虫的个人笔记，</p>
<p>爬爬爬，到处爬</p>
<span id="more"></span>

<h1 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h1><h2 id="urllib库-—内置"><a href="#urllib库-—内置" class="headerlink" title="urllib库  —内置"></a>urllib库  —内置</h2><h3 id="urlopen函数"><a href="#urlopen函数" class="headerlink" title="urlopen函数"></a>urlopen函数</h3><p>创建一个表示远程url的类文件对象，然后像本地文件一样操作这类文件对象来获取远程数据。在urllib.request模块中</p>
<p>url: 请求的url<br>data: 请求的data，如果设置了该参数，为post请求<br>返回值: 返回值是一个http.client.HTTPResponse对象，<br>该对象是一个类文件句柄对象。有read(size),readline,readlines,getcode等方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">resp = request.urlopen(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.read())</span><br><span class="line"><span class="built_in">print</span>(resp.getcode())</span><br></pre></td></tr></table></figure>

<h3 id="urlretrieve函数"><a href="#urlretrieve函数" class="headerlink" title="urlretrieve函数"></a>urlretrieve函数</h3><p>将网页上的某个文件保存到本地,在urllib.request模块中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">request.urlretrieve(url, file_name)</span><br></pre></td></tr></table></figure>

<h3 id="urlencode函数：编码"><a href="#urlencode函数：编码" class="headerlink" title="urlencode函数：编码"></a>urlencode函数：编码</h3><p>urlencode可以把字典数据转化成url<em><strong>编码</strong></em>的数据，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;猪八戒&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">18</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>( parse.urlencode(data) )</span><br><span class="line"></span><br><span class="line"><span class="comment">#name=%E7%8C%AA%E5%85%AB%E6%88%92&amp;age=18&amp;gender=%E7%94%B7       打印结果</span></span><br></pre></td></tr></table></figure>

<p><em>注</em>：urlencode对字典编码，quote对字符串编码</p>
<h3 id="parse-qs函数：解码"><a href="#parse-qs函数：解码" class="headerlink" title="parse_qs函数：解码"></a>parse_qs函数：解码</h3><p>可以将经过编码后的url参数进行<em><strong>解码</strong></em>，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;name=%E7%8C%AA%E5%85%AB%E6%88%92&amp;age=18&amp;gender=%E7%94%B7&quot;</span></span><br><span class="line"><span class="built_in">print</span>( parse.parse_qs(data) )</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;&#x27;name&#x27;: [&#x27;猪八戒&#x27;], &#x27;age&#x27;: [&#x27;18&#x27;], &#x27;gender&#x27;: [&#x27;男&#x27;]&#125;           打印结果</span></span><br></pre></td></tr></table></figure>

<h3 id="urlparse和urlsplit函数：解析url"><a href="#urlparse和urlsplit函数：解析url" class="headerlink" title="urlparse和urlsplit函数：解析url"></a>urlparse和urlsplit函数：解析url</h3><p>对url各个组成部分进行分割，在urllib.parse模块中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com/index.html;user?id=S#comment&quot;</span></span><br><span class="line">result = parse.urlparse(url)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment">#打印结果:</span></span><br><span class="line"><span class="comment">#ParseResult(scheme=&#x27;http&#x27;, netloc=&#x27;www.baidu.com&#x27;, path=&#x27;/index.html&#x27;, params=&#x27;user&#x27;, query=&#x27;id=S&#x27;, fragment=&#x27;comment&#x27;)</span></span><br><span class="line">result2 = parse.urlsplit(url)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line"><span class="comment">#打印结果:</span></span><br><span class="line"><span class="comment">#SplitResult(scheme=&#x27;http&#x27;, netloc=&#x27;www.baidu.com&#x27;, path=&#x27;/index.html;user&#x27;, query=&#x27;id=S&#x27;, fragment=&#x27;comment&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(result.scheme)      <span class="comment">#http</span></span><br><span class="line"><span class="built_in">print</span>(result.netloc)      <span class="comment">#www.baidu.com</span></span><br></pre></td></tr></table></figure>

<p><em>注</em>：urlparse函数和urlsplit函数用法基本一样，唯一的区别是urlparse有params属性，而urlsplit没有。</p>
<h3 id="request-Request类：网络请求，可添加请求头，请求参数"><a href="#request-Request类：网络请求，可添加请求头，请求参数" class="headerlink" title="request.Request类：网络请求，可添加请求头，请求参数"></a>request.Request类：网络请求，可添加请求头，请求参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like    Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)   <span class="comment">#重点，添加请求头信息，User-Agent</span></span><br><span class="line">resp = request.urlopen(rq)</span><br><span class="line"><span class="built_in">print</span>(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="ProxyHandler处理器（代理设置）：封ip问题"><a href="#ProxyHandler处理器（代理设置）：封ip问题" class="headerlink" title="ProxyHandler处理器（代理设置）：封ip问题"></a>ProxyHandler处理器（代理设置）：封ip问题</h3><p>代理原理：在请求网站之前，先请求代理服务器，然后让代理服务器去请求目标网站，代理服务器拿到目标网站数据后，再转发给我们的代码。</p>
<p><a href="http://httpbin.org/">http://httpbin.org</a>  —这个网站方便查看http请求的一些参数</p>
<p>常用的代理有：</p>
<ul>
<li>快代理：<a href="https://www.kuaidaili.com/">https://www.kuaidaili.com/</a></li>
<li>代理云</li>
</ul>
<p>在代码中使用代理：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/ip&quot;</span></span><br><span class="line"><span class="comment">#创建handler</span></span><br><span class="line">handler = request.ProxyHandler(&#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;58.56.149.198:53281&quot;</span>&#125;)</span><br><span class="line"><span class="comment">#创建opener</span></span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"><span class="comment">#使用opener发送请求</span></span><br><span class="line">resp = opener.<span class="built_in">open</span>(url)</span><br><span class="line"><span class="built_in">print</span>( resp.read() )</span><br></pre></td></tr></table></figure>

<h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies:"></a>cookies:</h3><p>某些网站为了辨别用户身份，进行session跟踪而存储在用户本地终端上的数据</p>
<h4 id="模拟cookies访问网站方法一："><a href="#模拟cookies访问网站方法一：" class="headerlink" title="模拟cookies访问网站方法一："></a>模拟cookies访问网站方法一：</h4><p>用浏览器访问网站后，手动抓包，将cookie信息复制，放到代码的请求头上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.zhihu.com/&quot;</span></span><br><span class="line">headers = &#123;  </span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like    Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span>,</span><br><span class="line"><span class="string">&quot;cookie&quot;</span>: <span class="string">&#x27;_zap=5b69d7ff-9b3f-468b-b891-103b2029d8a3;..#复制的cookie内容太多，省略不写</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">rq = request.Request(url, headers=headers)</span></span><br><span class="line"><span class="string">resp = request.urlopen(rq)</span></span><br><span class="line"><span class="string">print(resp.read().decode(&quot;utf-8&quot;))</span></span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法二："><a href="#模拟cookies访问网站方法二：" class="headerlink" title="模拟cookies访问网站方法二："></a>模拟cookies访问网站方法二：</h4><p>http.cookiejar模块，主要有CookieJar，FileCookieJar，MozillaCookieJar，LWPCookieJar四个类</p>
<p>CookieJar：将cookie保存在内存中</p>
<p>FileCookieJar，MozillaCookieJar，LWPCookieJar：将cookie保存在文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> CookieJar</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="comment">#1，登入</span></span><br><span class="line">cookiejar = CookieJar()</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)  <span class="comment">#创建handler</span></span><br><span class="line">opener = request.build_opener(handler)            <span class="comment">#创建opener</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#opener发送请求前，准备登入的url,请求头,请求参数(需要编码)</span></span><br><span class="line">post_url = <span class="string">&quot;https://i.meishi.cc/login_t.php?username=17370466454&amp;login_type=1&amp;password=575389&quot;</span></span><br><span class="line">post_headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">post_data = parse.urlencode(&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;17370466454&quot;</span>,</span><br><span class="line">    <span class="string">&quot;login_type&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;575389&quot;</span></span><br><span class="line">&#125;)    </span><br><span class="line"><span class="comment">#request.Request()里的data只能接收字节，所以data=post_data.encode(&quot;utf-8&quot;)</span></span><br><span class="line">post_rq = request.Request(url=post_url, headers=post_headers, data=post_data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="comment">#opener访问网站后，网站的cookie暂时保存在内存opener中</span></span><br><span class="line">opener.<span class="built_in">open</span>(post_rq)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2，访问，opener已经带有cookie访问网站</span></span><br><span class="line">url = <span class="string">&quot;https://meishij.net/&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)</span><br><span class="line">resp = opener.<span class="built_in">open</span>(rq)</span><br><span class="line"><span class="built_in">print</span>(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="cookies的保存"><a href="#cookies的保存" class="headerlink" title="cookies的保存"></a>cookies的保存</h4><p>以MozillaCookieJar类为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookies = MozillaCookieJar(<span class="string">&quot;cookies.txt&quot;</span>)  <span class="comment">#保存cookies的文件</span></span><br><span class="line">handler = request.HTTPCookieProcessor(cookies)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rq = request.Request(url, headers=headers)</span><br><span class="line">opener.<span class="built_in">open</span>(rq)</span><br><span class="line">cookies.save()   <span class="comment">#保存cookies</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#cookies.save( ignore_discard=False, ignore_expires=False )  默认</span></span><br><span class="line"><span class="comment">#ignore_discard=True       即使cookies即将被丢失也要保存起来</span></span><br><span class="line"><span class="comment">#ignore_expires=True	   如果cookies已经过期也将它保存，并且文件已存在时将覆盖</span></span><br></pre></td></tr></table></figure>



<h2 id="requests库-—第三方库"><a href="#requests库-—第三方库" class="headerlink" title="requests库  —第三方库"></a>requests库  —第三方库</h2><p>让HTTP服务人类</p>
<h3 id="安装和文档地址"><a href="#安装和文档地址" class="headerlink" title="安装和文档地址:"></a>安装和文档地址:</h3><ul>
<li><p>pip安装：pip install requests</p>
</li>
<li><p>中文文档：<a href="https://docs.python-requests.org/zh_CN/latest/index.html">https://docs.python-requests.org/zh_CN/latest/index.html</a></p>
</li>
<li><p>github地址：<a href="https://github.com/requests/requests">https://github.com/requests/requests</a></p>
</li>
</ul>
<h3 id="发送get请求："><a href="#发送get请求：" class="headerlink" title="发送get请求："></a>发送get请求：</h3><p>response = requests.get(url, headers=headers, params=params)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;wd&quot;</span>:<span class="string">&quot;中国&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url, headers=headers, params=params)  <span class="comment">#发送get请求</span></span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line"><span class="built_in">print</span>(response.content.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="发送post请求："><a href="#发送post请求：" class="headerlink" title="发送post请求："></a>发送post请求：</h3><p>方法与上面的<em><strong>发送get请求</strong></em>用法差不多：</p>
<p>response = requests.post(url, headers=headers, data=data)</p>
<h3 id="response-content和response-text区别："><a href="#response-content和response-text区别：" class="headerlink" title="response.content和response.text区别："></a>response.content和response.text区别：</h3><p>1，response.content：直接从网站上抓取数据，没有经过解码，所以是bytes类型，其实硬盘和网络上传输的字符串类型都是bytes类型。</p>
<p>2，response.text：是str数据类型，把response.content经行自动解码的结果，自动解码可能会出现乱码的情况，所以需要自己手动解码：response.content.decode(“utf-8”)。</p>
<h3 id="使用代理："><a href="#使用代理：" class="headerlink" title="使用代理："></a>使用代理：</h3><p>resp = requests.get(url, proxies=代理信息)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;116.196.88.86:3128&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/ip&quot;</span></span><br><span class="line">resp = requests.get(url, proxies=proxy)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<h3 id="处理cookie"><a href="#处理cookie" class="headerlink" title="处理cookie:"></a>处理cookie:</h3><h4 id="查看cookies"><a href="#查看cookies" class="headerlink" title="查看cookies"></a>查看cookies</h4><p>响应中如果包含cookie，可以通过cookies属性查看cookie：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(resp.cookies)</span><br><span class="line"><span class="built_in">print</span>(resp.cookies.get_dict())   <span class="comment">#字典型的coookie</span></span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法一：-1"><a href="#模拟cookies访问网站方法一：-1" class="headerlink" title="模拟cookies访问网站方法一："></a>模拟cookies访问网站方法一：</h4><p>用浏览器访问网站后，手动抓包，将cookie信息复制，放到代码的请求头上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.zhihu.com/&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Mobile Safari/537.36&quot;</span>,</span><br><span class="line"><span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;_zap=5b69d7ff-9b3f-468b-b891-103b2029d8&#x27;</span>   <span class="comment">#复制的cookie内容太多，省略</span></span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<h4 id="模拟cookies访问网站方法二：使用session，共享cookie"><a href="#模拟cookies访问网站方法二：使用session，共享cookie" class="headerlink" title="模拟cookies访问网站方法二：使用session，共享cookie"></a>模拟cookies访问网站方法二：使用session，共享cookie</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#1，登入,准备好需要登入的网站，参数，请求头</span></span><br><span class="line">post_url = <span class="string">&quot;&quot;</span>      <span class="comment">#登入的网站</span></span><br><span class="line">post_data = &#123;&#125;     <span class="comment">#登入的参数，账号密码</span></span><br><span class="line">post_headers = &#123;&#125;  <span class="comment">#登入需要的请求头</span></span><br><span class="line"><span class="comment">#创建session，用session发送请求</span></span><br><span class="line">session = requests.session()</span><br><span class="line">session.post(url=post_url, data=post_data, headers=post_headers)</span><br><span class="line"><span class="comment">#2，session中已带有cookie访问网站</span></span><br><span class="line">url = <span class="string">&quot;https://m.meishij.net/&quot;</span></span><br><span class="line">resp = session.get(url)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<h3 id="处理不信任的ssl证书："><a href="#处理不信任的ssl证书：" class="headerlink" title="处理不信任的ssl证书："></a>处理不信任的ssl证书：</h3><p>对于哪些被信任的SSL证书的网站，如<a href="https://www.baidu.com/%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%E3%80%82">https://www.baidu.com/，直接访问可以正常返回响应。</a></p>
<p>而不被信任的SSL证书的网站无法正常返回响应。requests请求时需要把verify=False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://inv-veri.chinatax.gov.cn/&quot;</span></span><br><span class="line">resp = requests.get(url, verify=<span class="literal">False</span>)   <span class="comment">#verify=False</span></span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>



<h1 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h1><p>数据解析，即数据提取，爬取的所有信息中将需要的信息提取出来。</p>
<h2 id="XPath语法和lxml模块"><a href="#XPath语法和lxml模块" class="headerlink" title="XPath语法和lxml模块"></a>XPath语法和lxml模块</h2><h3 id="什么是XPath"><a href="#什么是XPath" class="headerlink" title="什么是XPath"></a>什么是XPath</h3><p>xpath（XML Path Language）是一门在xml和html文档中查找信息的语言，可用来在XML和HTML文档中对元素和属性经行遍历</p>
<h3 id="XPath开发工具"><a href="#XPath开发工具" class="headerlink" title="XPath开发工具"></a>XPath开发工具</h3><p>Chrome插件XPath Helper</p>
<p>Firefox插件Try XPath</p>
<h3 id="XPath节点"><a href="#XPath节点" class="headerlink" title="XPath节点"></a>XPath节点</h3><p>在XPath中，有七类类型的节点：元素，属性，文本，命名空间，处理指令，注释，文档(根)节点。XML文档是被作为节点树来对待的。树的根被称为文档节点或者根节点。</p>
<h3 id="XPath基本语法："><a href="#XPath基本语法：" class="headerlink" title="XPath基本语法："></a>XPath基本语法：</h3><h4 id="路径表达式："><a href="#路径表达式：" class="headerlink" title="路径表达式："></a>路径表达式：</h4><table>
<thead>
<tr>
<th align="left">表达式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">nodename</td>
<td align="left">选取此节点的所有子节点。</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">从根节点选取（取子节点）。</td>
</tr>
<tr>
<td align="left">//</td>
<td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置（取子孙节点）。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">选取当前节点。</td>
</tr>
<tr>
<td align="left">..</td>
<td align="left">选取当前节点的父节点。</td>
</tr>
<tr>
<td align="left">@</td>
<td align="left">选取属性。</td>
</tr>
</tbody></table>
<h4 id="谓语："><a href="#谓语：" class="headerlink" title="谓语："></a>谓语：</h4><table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">/bookstore/book[1]</td>
<td align="left">选取属于 bookstore 子元素的第一个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[last()]</td>
<td align="left">选取属于 bookstore 子元素的最后一个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[last()-1]</td>
<td align="left">选取属于 bookstore 子元素的倒数第二个 book 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book[position()&lt;3]</td>
<td align="left">选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td>
</tr>
<tr>
<td align="left">//title[@lang]</td>
<td align="left">选取所有拥有名为 lang 的属性的 title 元素。</td>
</tr>
<tr>
<td align="left">//title[@lang=’eng’]</td>
<td align="left">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>
</tr>
<tr>
<td align="left">/bookstore/book[price&gt;35.00]</td>
<td align="left">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
<tr>
<td align="left">/bookstore/book[price&gt;35.00]//title</td>
<td align="left">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
</tbody></table>
<h4 id="通配符："><a href="#通配符：" class="headerlink" title="通配符："></a>通配符：</h4><table>
<thead>
<tr>
<th align="left">通配符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配任何元素节点。</td>
</tr>
<tr>
<td align="left">@*</td>
<td align="left">匹配任何属性节点。</td>
</tr>
<tr>
<td align="left">node()</td>
<td align="left">匹配任何类型的节点。</td>
</tr>
</tbody></table>
<h4 id="选取若干路径："><a href="#选取若干路径：" class="headerlink" title="选取若干路径："></a>选取若干路径：</h4><table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">//book/title | //book/price</td>
<td align="left">选取 book 元素的所有 title 和 price 元素。</td>
</tr>
<tr>
<td align="left">//title | //price</td>
<td align="left">选取文档中的所有 title 和 price 元素。</td>
</tr>
<tr>
<td align="left">/bookstore/book/title | //price</td>
<td align="left">选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td>
</tr>
</tbody></table>
<h3 id="lxml库："><a href="#lxml库：" class="headerlink" title="lxml库："></a>lxml库：</h3><p>安装：pip install lxml</p>
<p>lxml python 官方文档：<a href="https://lxml.de/index.html">https://lxml.de/index.html</a></p>
<p>基本使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#随便定义的html文本举例</span></span><br><span class="line">text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">	&lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">	&lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">	&lt;script type=&quot;text/javascript&quot; src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">	&lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">		&lt;input type=&quot;text&quot;&gt;</span></span><br><span class="line"><span class="string">		&lt;p&gt;&lt;a href=&#x27;www.baidu.com&#x27;&gt;hello&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">	&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment">#将字符串解析为html文档</span></span><br><span class="line">HTML = etree.HTML(text)</span><br><span class="line"><span class="built_in">print</span>(HTML)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将html列化为字符串</span></span><br><span class="line">result = etree.tostring(HTML).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#从文件中读取html代码</span></span><br><span class="line">html = etree.parse(<span class="string">&quot;hello.html&quot;</span>)</span><br><span class="line">result = etree.tostring(html).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h3 id="在lxml中使用xpath语法："><a href="#在lxml中使用xpath语法：" class="headerlink" title="在lxml中使用xpath语法："></a>在lxml中使用xpath语法：</h3><p>文件路径：hello.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link0.html&quot;</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link1.html&quot;</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-inactive&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link2.html&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link3.html&quot;</span>&gt;</span>forth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link4.html&quot;</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>练习语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在lxml中使用xpath</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">html = etree.parse(<span class="string">&quot;hello.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1,获取所有li标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(etree.tostring(i))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#2，获取所有li标签下的class属性值</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/@class&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3,获取li标签下href为&quot;link0.html&quot;的a标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/a[@href=&#x27;link0.html&#x27;]&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4,获取li标签下所有span标签</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li//span&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5,获取li标签下的a标签的所有class属性</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li/a//@class&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6,获取最后一个li的a的href属性对应的值</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()]/a/@href&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7,获取倒数第二个li元素的内容</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()-1]/a&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result[<span class="number">0</span>].text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8,获取倒是第二个li元素的内容的第二种方式</span></span><br><span class="line">result = html.xpath(<span class="string">&quot;//li[last()-1]/a/text()&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="xpath实战-爬取笑话网站："><a href="#xpath实战-爬取笑话网站：" class="headerlink" title="xpath实战-爬取笑话网站："></a>xpath实战-爬取笑话网站：</h3><p>网站：<a href="https://xiaohua.zol.com.cn/new/">https://xiaohua.zol.com.cn/new/</a></p>
<p>详情：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;https://xiaohua.zol.com.cn/&quot;</span>   </span><br><span class="line">joke = []     <span class="comment">#存放joke的容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解析每一页笑话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    detail_url_list = html.xpath(<span class="string">&quot;//ul[@class=&#x27;article-list&#x27;]/li[@class=&#x27;article-summary&#x27;]//a[@class=&#x27;all-read&#x27;]/@href&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_url_list:</span><br><span class="line">        detail_url = url+detail_url</span><br><span class="line">        parse_detail(detail_url)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#解析详情页笑话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>(<span class="params">detail_url</span>):</span></span><br><span class="line">    resp = requests.get(detail_url, headers=headers)</span><br><span class="line">    text = resp.text</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    joke_title = html.xpath(<span class="string">&quot;//h1[@class=&#x27;article-title&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    joke_content = <span class="string">&#x27;&#x27;</span>.join(html.xpath(<span class="string">&quot;//div[@class=&#x27;article-text&#x27;]//text()&quot;</span>)).strip()</span><br><span class="line">    joke.append(&#123;</span><br><span class="line">        <span class="string">&quot;joke_title&quot;</span>: joke_title,</span><br><span class="line">        <span class="string">&quot;joke_content&quot;</span>: joke_content</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;joke_title&#125;</span>笑话下载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#主流程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):      <span class="comment">##1，2，3页笑话</span></span><br><span class="line">        page_url = <span class="string">f&quot;https://xiaohua.zol.com.cn/new/<span class="subst">&#123;i&#125;</span>.html&quot;</span>    </span><br><span class="line">        parse_page(page_url)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;joke.json&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="comment">#json.dump函数，将内存的数据保存到文件中</span></span><br><span class="line">        <span class="comment">#如果ensure_ascii没有设置为False，那么保存到json文件中文会存储为Unicode字符串</span></span><br><span class="line">        json.dump(joke, fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;所有笑话加载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p><em><strong>注</strong></em>：测试时，for循环中应添加break终止循环。代码运行时，添加time.sleep(2)，避免数据抓取过于频繁。</p>
<h2 id="BeautifulSoup4库"><a href="#BeautifulSoup4库" class="headerlink" title="BeautifulSoup4库"></a>BeautifulSoup4库</h2><p>和lxml一样，BeautifulSoup也是一个HTML/XML的解析器，主要功能也是解析和提取HTML/XML数据。</p>
<h3 id="安装和文档"><a href="#安装和文档" class="headerlink" title="安装和文档:"></a>安装和文档:</h3><p>安装：</p>
<p>pip install bs4</p>
<p>中文文档：</p>
<p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p>
<h3 id="几大解析工具对比："><a href="#几大解析工具对比：" class="headerlink" title="几大解析工具对比："></a>几大解析工具对比：</h3><table>
<thead>
<tr>
<th>解析工具</th>
<th>解析速度</th>
<th>解析难度</th>
</tr>
</thead>
<tbody><tr>
<td>BeautifulSoup</td>
<td>最慢</td>
<td>最简单</td>
</tr>
<tr>
<td>lxml</td>
<td>快</td>
<td>简单</td>
</tr>
<tr>
<td>正则</td>
<td>最快</td>
<td>最难</td>
</tr>
</tbody></table>
<h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">	&lt;a href=&quot;link.html&quot;&gt;hello word!!&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#第二个参数选择解析器，这里使用的是lxml解析器，已下载过。</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(soup)  	<span class="comment">#输html文档树</span></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())  <span class="comment">#输出格式有自动缩进</span></span><br><span class="line"><span class="built_in">print</span>(soup.a)   <span class="comment">#获取a标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.name)   <span class="comment">#获取a标签的标签名，就是a</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.attrs)  <span class="comment">#获取a标签的所有属性，返回字典</span></span><br><span class="line"><span class="built_in">print</span>(soup.a[<span class="string">&quot;href&quot;</span>]) <span class="comment">#a的href属性值</span></span><br></pre></td></tr></table></figure>

<h3 id="常见的四种对象："><a href="#常见的四种对象：" class="headerlink" title="常见的四种对象："></a>常见的四种对象：</h3><p>1，Tag：BeautifulSoup种所有标签都是Tag类型</p>
<p>2，NavigableString：标签的文本内容，继承python中的str，用法也是和str一样的</p>
<p>3，BeautifulSoup：继承Tag，用来生成BeautifulSoup树的，用法和Tag差不多</p>
<p>3，Comment：继承NavigableString，是注解内容</p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;hello word!!&lt;/p&gt;</span></span><br><span class="line"><span class="string">	&lt;!-- &lt;a href=&quot;link1&quot;&gt;hello word&lt;/a&gt; --&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.p)     <span class="comment">#Tag类型</span></span><br><span class="line"><span class="built_in">print</span>(soup.p.string)  <span class="comment">#NavigableString类型</span></span><br><span class="line"><span class="built_in">print</span>(soup)		  <span class="comment">#BeautifulSoup类型</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.string)  <span class="comment">#Comment类型</span></span><br></pre></td></tr></table></figure>

<h3 id="contents和children："><a href="#contents和children：" class="headerlink" title="contents和children："></a>contents和children：</h3><p><em>用法</em>：</p>
<p>Tag对象.contents     </p>
<p>Tag对象.children</p>
<p><em>返回</em>：</p>
<p>返回某个标签下的直接子元素，其中也包括字符串。</p>
<p><em>区别</em>：</p>
<p>contents返回的是list列表</p>
<p>children返回的是一个迭代器</p>
<h3 id="string和strings，stripped-strings属性和get-text-方法："><a href="#string和strings，stripped-strings属性和get-text-方法：" class="headerlink" title="string和strings，stripped_strings属性和get_text()方法："></a>string和strings，stripped_strings属性和get_text()方法：</h3><p><em>string</em>:获取某个标签下的文本内容，返回的是字符串。如果有多行，就无法获取。</p>
<p><em>strings</em>:获取某个标签下的文本内容，可以是多行，返回的是生成器。</p>
<p><em>stripped_strings</em>:用法和strings差不多可以是多行，放回生成器，区别是该属性会去除空白字符，如空格换行符。</p>
<p><em>get_text()</em>:获取某个标签下的文本内容，可以是多行，返回字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"></span><br><span class="line">string = soup.li.string</span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line">strings = soup.ul.strings</span><br><span class="line"><span class="built_in">print</span>(strings)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strings:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">stripped_strings = soup.ul.stripped_strings</span><br><span class="line"><span class="built_in">print</span>(stripped_strings)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> stripped_strings:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h3 id="find-和find-all-方法"><a href="#find-和find-all-方法" class="headerlink" title="find()和find_all()方法:"></a>find()和find_all()方法:</h3><p>搜索文档树使用的方法。</p>
<p>find方法是找到第一个满足条件的标签返回，返回一个元素。</p>
<p>find_all方法是把所有满足条件的标签都返回，返回的是一个list列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-0&quot; id=&#x27;hello&#x27;&gt;&lt;a href=&quot;link0.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;forth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取第一个li标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.li)</span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&quot;li&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取所有的li标签</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&quot;li&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取第二个li标签</span></span><br><span class="line">li = soup.find_all(<span class="string">&quot;li&quot;</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="comment">#获取class等于item-inactive的li标签，注：由于属性class有重名，用class_</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>, class_=<span class="string">&#x27;item-inactive&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"><span class="comment">#获取所有a标签href值</span></span><br><span class="line">a_list = soup.find_all(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> a_list:</span><br><span class="line">    <span class="built_in">print</span>(a[<span class="string">&quot;href&quot;</span>])</span><br><span class="line"><span class="comment">#获取所有li标签的文本内容</span></span><br><span class="line">li_list = soup.find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    <span class="built_in">print</span>(li.string)</span><br></pre></td></tr></table></figure>

<h3 id="select-方法："><a href="#select-方法：" class="headerlink" title="select()方法："></a>select()方法：</h3><p>有时候使用css选择器的方式更加方便，需要使用css选择器时，用select方法。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#通过标签名查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line"><span class="comment">#通过class查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;.item-inactive&#x27;</span>))</span><br><span class="line"><span class="comment">#通过id查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;#hello&#x27;</span>))</span><br><span class="line"><span class="comment">#组合查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li a&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li &gt; a&#x27;</span>))</span><br><span class="line"><span class="comment">#通过属性查找</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a[href=&quot;link0.html&quot;]&#x27;</span>))</span><br><span class="line"><span class="comment">#获取内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a&#x27;</span>)[<span class="number">0</span>].get_text())</span><br></pre></td></tr></table></figure>

<h3 id="爬虫实战-豆瓣Top250爬取："><a href="#爬虫实战-豆瓣Top250爬取：" class="headerlink" title="爬虫实战-豆瓣Top250爬取："></a>爬虫实战-豆瓣Top250爬取：</h3><p>网站：<a href="https://movie.douban.com/top250">https://movie.douban.com/top250</a></p>
<p>爬取：爬取top250的电影的信息，这里只爬取了电影名，演员，上映时间，评分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#访问页，获取每一页里的所有详情页url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_urls</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    resp = requests.get(page_url, headers=headers)</span><br><span class="line">    html = resp.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    li_list = soup.find(<span class="string">&quot;ol&quot;</span>, class_=<span class="string">&quot;grid_view&quot;</span>).find_all(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">    detail_urls = []</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        detail_url = li.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&quot;href&quot;</span>]</span><br><span class="line">        detail_urls.append(detail_url)</span><br><span class="line">    <span class="keyword">return</span> detail_urls</span><br><span class="line"><span class="comment">#解析详情页：访问详情页，解析电影信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span>(<span class="params">detail_url, fp</span>):</span></span><br><span class="line">    resp = requests.get(detail_url, headers=headers)</span><br><span class="line">    html = resp.text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(soup.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span>=<span class="string">&quot;wrapper&quot;</span>).find(<span class="string">&quot;h1&quot;</span>).stripped_strings))</span><br><span class="line">    actor_exist = soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;actor&quot;</span>)</span><br><span class="line">    actor = <span class="string">&quot;暂无数据&quot;</span></span><br><span class="line">    <span class="comment">#由于有的电影没有演员信息，所有这里if判断</span></span><br><span class="line">    <span class="keyword">if</span> actor_exist:</span><br><span class="line">        actor = <span class="string">&#x27; &#x27;</span>.join(<span class="built_in">list</span>(soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;actor&quot;</span>).find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;attrs&quot;</span>).stripped_strings))</span><br><span class="line">    date = soup.find(<span class="string">&quot;div&quot;</span>, <span class="built_in">id</span>=<span class="string">&quot;info&quot;</span>).find_all(<span class="string">&quot;span&quot;</span>, <span class="built_in">property</span>=<span class="string">&quot;v:initialReleaseDate&quot;</span>)[<span class="number">0</span>].string</span><br><span class="line">    score = soup.find(<span class="string">&quot;strong&quot;</span>, class_=<span class="string">&quot;ll rating_num&quot;</span>).string</span><br><span class="line">    num = soup.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;top250-no&quot;</span>).string</span><br><span class="line">    fp.write(<span class="string">&quot;电影名：&#123;&#125;，演员：&#123;&#125;，上映时间：&#123;&#125;，评分：&#123;&#125;\n\n&quot;</span>.<span class="built_in">format</span>(name, actor, date, score))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num&#125;</span>-<span class="subst">&#123;name&#125;</span>,电影信息加载完毕！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    base_url = <span class="string">&quot;https://movie.douban.com/top250?start=&#123;&#125;&amp;filter=&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;movieTop250.csv&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">250</span>,<span class="number">25</span>):</span><br><span class="line">            page_url = base_url.<span class="built_in">format</span>(i)</span><br><span class="line">            detail_urls = get_detail_urls(page_url)</span><br><span class="line">            <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">                parse_detail(detail_url, fp)</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;top250部电影信息加载完毕！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>











<h2 id="正则表达式和re模块"><a href="#正则表达式和re模块" class="headerlink" title="正则表达式和re模块"></a>正则表达式和re模块</h2>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>网络爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
